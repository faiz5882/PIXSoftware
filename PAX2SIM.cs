//#define SIMUL8_UTILISATION
//#define UNIKEY_PROTECTION

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using System.Threading;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization;
using System.Collections;
using System.Drawing.Imaging;
using System.Drawing.Drawing2D;
using Nevron.Chart.WinForm;
using Nevron.Chart;
using System.Xml;
using System.Diagnostics;
using System.IO.Compression;


//Pour l'utilisation des DLL permettant l'interrogation pour la protection.
using System.Runtime.InteropServices;
using System.IO;
using System.Net.Sockets;
using Microsoft.Win32;
using System.Globalization;
using System.Resources;
using System.Reflection;
using Nevron.UI.WinForm.Controls;
using Nevron.GraphicsCore;
using SIMCORE_TOOL.Classes;
using SIMCORE_TOOL.Prompt.Sodexi;
using SIMCORE_TOOL.com.crispico.gantt;
using ShockwaveFlashObjects;
using AxShockwaveFlashObjects;
using SIMCORE_TOOL.com.crispico.processFlow;
using SIMCORE_TOOL.Assistant;
using SIMCORE_TOOL.DataManagement;
using SIMCORE_TOOL.com.crispico.CountingFunctionality;
using SIMCORE_TOOL.com.crispico.dashboard;

using Newtonsoft.Json;
using SIMCORE_TOOL.Prompt.Athens;
using SIMCORE_TOOL.Prompt.Dubai;
using SIMCORE_TOOL.Prompt.Liege;
using SIMCORE_TOOL.Prompt.Vinci;
using SIMCORE_TOOL.com.crispico.TargetDev;
using SIMCORE_TOOL.Prompt;
using SIMCORE_TOOL.com.crispico.generalUse;
using SIMCORE_TOOL.com.crispico.ReportTreeView;
using SIMCORE_TOOL.Prompt.Dubai.P2S_Allocation;
using System.Linq;
using SIMCORE_TOOL.Prompt.CDG;
using SIMCORE_TOOL.com.crispico.BHS_Analysis;
using SIMCORE_TOOL.com.crispico.documentTreeNode;
using SIMCORE_TOOL.com.crispico.EBS;
using SIMCORE_TOOL.com.crispico.general_allocation.parameter;
using SIMCORE_TOOL.com.crispico.general_allocation.assistant;
using SIMCORE_TOOL.com.crispico.general_allocation.constants;
using SIMCORE_TOOL.com.crispico.FlightPlansUtils;
using System.Xml.Serialization;
using SIMCORE_TOOL.com.crispico.adapters;
using SIMCORE_TOOL.com.crispico.text_gantt;
using SIMCORE_TOOL.com.crispico.inputs.flight_group_rules;
using SIMCORE_TOOL.com.crispico.inputs.deterministic_transfer_distribution;

#region Use of preprocessing variables to make sure they will stay in the Project properties
///To make sure that new development will not interfer with needs of keeping PAX2SIM bugFree,
///So new development had been protected and removed from the source code with preprocessing
///variables. The variables are present in the Properties of the project, but unfortunatly 
///when the name is changed and not used anywhere in the souce code, then the variable 
///disappears from the project properties. To avoid that, the actual used variables are also
///defined as you can see below and will just have a N at the begining to make sure these
///variables stays in the project properties as variables disabled.
#if(NPAXINOUTUTILISATION)
#endif

#if(NSHOPSUTILISATION)
#endif

#if(NNEWALLOCATIONSECU)
#endif

#if(NUNIKEY_PROTECTION)
#endif
#endregion

namespace SIMCORE_TOOL
{
    internal partial class PAX2SIM : Form
    {
        #region Les différentes fonctions utilisées pour l'appel aux fonctions de vérification des clefs.
#if!(UNIKEY_PROTECTION)
        [DllImport("FonctionsCritiques.dll")]
        public static extern int a(int c);
        [DllImport("FonctionsCritiques.dll")]
        public static extern int t();
        [DllImport("FonctionsCritiques.dll")]
        public static extern int b(int c);
#endif
        #endregion

        #region Quelques variables statiques pour les noms des objets et les définitions de la sequence de couleurs.

        /// <summary>
        /// Listes des noms des objets et des noms des groupes contenus dans l'arbre représentant l'aéroport.
        /// </summary>
        public const string sTerminalName = "Terminal";
        public const string sLevelName = "Pax Level";
        internal static string sMainNodeName = "Airport";
        internal static string sExtension = "pax";
        public const string sBHSName = "Baggage Handling System";
        internal const string sCheckIn = "Check In";
        public const string sCheckInGroup = "Check In Group";
        public const string sMakeUpGroup = "Make-Up Group";
        internal const string sModelIn = "Pax In";
        internal const string sModelOut = "Pax Out";
        internal const string sModelInGroup = "Pax In Group";
        internal const string sModelOutGroup = "Pax Out Group";
        internal const string sShoppingArea = "Shopping Area";
        internal const string sShoppingAreaGroup = "Shopping Area Group";
        // << Task #7570 new Desk and extra information for Pax -Phase I B
        internal const string sUserProcessGroup = "User Process Group";
        internal const string sUserProcessObject = "User Process";
        // >> Task #7570 new Desk and extra information for Pax -Phase I B
        // >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
        internal const string sCheckInCollectorGroup = "Check In Collector Group";
        internal const string sEBSGroup = "EBS Group";
        // << Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
        public static string[] ListeNomObjet ={ sTerminalName, sLevelName, sCheckIn, 
                                                "Passport Check", "Security Check", 
                                                "Arrival Gate", "Baggage Claim", 
                                                "Transfer", sUserProcessObject,//"ShuttleS",    // << Task #7570 new Desk and extra information for Pax -Phase I B
                                                "Boarding Gate" 
#if(PAXINOUTUTILISATION)
                                                ,sModelIn, sModelOut
#endif
                                                
#if(SHOPSUTILISATION)
                                                , sShoppingArea
#endif
                                              };


        public static string[] ListeNomObjetGroup ={ sTerminalName, sLevelName, sCheckInGroup, 
                                                     "Passport Check Group", "Security Check Group", 
                                                     "Arrival Gate Group", "Baggage Claim Group", 
                                                     "Transfer Group", sUserProcessGroup,/*"ShuttleS Group",*/ "Boarding Gate Group"    // << Task #7570 new Desk and extra information for Pax -Phase I B
#if(PAXINOUTUTILISATION)
                                                      ,sModelInGroup,sModelOutGroup
#endif
                                                
#if(SHOPSUTILISATION)
                                                , sShoppingAreaGroup
#endif
                                                   };

        public static string[] ListeNomsObjetWithoutIndex = { "Runways", /*"Handling Agents",*/"Aircraft Parking Stands", sBHSName, /*sModelIn, sModelOut*/ };

        /// <summary>
        /// Cette variable regroupe tous les éléments que l'utilisateur peut définir pour la structure de son aéroport.
        /// La variable est orientée sous la forme d'un arbre, avec dans [x][0][0] le parent, et dans [x][1][y]
        /// les enfants possible pour ce type de poste.
        /// </summary>
        public static string[][][] ListeNomsObjets = null;
        /// <summary>
        /// Cette variable représente tous les objets de type groupe, c'est à dire qui ont des enfants.
        /// </summary>
        public static string[] ListeNomsObjetsGroup = null;

        /// <summary>
        /// Petite liste de couleurs pour alternée les couleurs de façon ordonné.
        /// </summary>
        public static Color[] sequenceCouleurs = { Color.Blue, Color.Red, Color.Green, Color.Yellow, Color.LightBlue, Color.Gold, Color.Lavender, Color.LightGreen, Color.DarkOrange };
        private static string ErrorMessage = "Please do not disconnect Hardware key during the execution";

        #if(DEBUG)
        /// <summary>
        /// Cette variable permet de dire si le logiciel est en mode débuggage ou non. La seule différence notable
        /// est que en mode debug, les thread de chargements ne sont pas exécutés. (Thread uniquement destinés à 
        /// afficher une information de déroulement à l'utilisateur). Ces thread empêche le débuggage de l'application.
        /// </summary>
        public static bool bDebug = true;
        #else
        public static bool bDebug = false;
        #endif


        internal static bool bAircraftMovementPerFlight = false;//(Jeddah)
        /// <summary>
        /// Mode spécifique Delhi qui mets par défaut les Mean flows et change certains libellés dans les
        /// assistants.
        /// </summary>
        internal static bool bDelhi = false;
        internal static bool singaporeMode = false; // >> Task #12391 Pax2Sim - Network use - Singapore University
        internal static bool bAIA = false;      // >> Task #11606 Pax2Sim - Athens International Airport functionality //set to true for A.I.A. Task #12393 Pax2Sim - File conversion for Athens
        internal static bool dubaiMode = false;  // >> Task #12668 Pax2Sim - Dubai ADPi - Flight Plan Conversion
        internal static bool liegeMode = false;  // !!!-> copy in the release_root\Docs folder the FunctionalSpecificationRequirements.pdf (find it in the debug_root\Docs).
        internal static bool cdgMode = false;    // >> Task #14982 CDG - TBS4
        internal static bool usaMode = false;
        internal static bool generalAllocationMode = false;    // >> Task #12790 Allocation app
        internal static bool bTrialVersion = false;
        internal static int iValidDaysTrialVersion = 0;

        internal static bool isNetworkVersion = singaporeMode; //|| [clientName]Mode || ...;

        internal static bool bJNK = false;
#if(SIMUL8_UTILISATION)
        internal static bool bSimul8 = true;
#else
        internal static bool bSimul8 = false;
#endif
        internal static bool bExperior = false;

        internal static bool bSDE = false;

        internal static bool bReporter = false;
        internal static bool bTopase = false;

        internal static bool bMultiScenario = false || bJNK || bReporter;    // >> Bug #14900 MFF file not created - found the Multiple Scenarios trigger


        public static bool bStatic = true;
        public static bool bDynamic = true;
        public static bool bRuntime = true;
        public static bool bBHS = false;
        public static bool bTMS = false;
        public static bool bPAX = false;
        public static bool bPKG = false;
        public static bool bSodexi = false;

        public static bool bBHS_MeanFlows = false;
        public static bool bBHS_PaxPlan = false;
        public static bool bShowAllocationTools = false;
        public static bool bBHS_BagPlan = false;
        public static bool bAnimatedQueues = false;
        public static bool bAllocationFlag = false; // PAX key flag disabled

        public static bool bUseAutomod = true;
        private Classes.Settings sSettings = null;

        public static AskMode amKeySpecification = null;

        public enum EnumPerimetre { HUB, PAX, AIR, TMS,BHS, PKG  };
        EnumPerimetre epPerimetre;


        #endregion

        #region Forms and variables used for the graphics
        NDockingToolbar toolbar;
        NLabel m_Header;
        NLegend m_legend;
        NCommand AddNote = null;
        NCommand SupprNote = null;


        /// <summary>
        /// Forms that is used for creating a graphic filter. 
        /// </summary>
        Prompt.SIM_Assistant_Creation_Graphics_Filters Graph;

        private SIMCORE_TOOL.Prompt.SIM_Setpoint setpointWindow;  // Class for the oppening of the setpoint window

        #endregion

        #region les différentes variables de la classe.
        /// <summary>
        /// Le dernier noeud sélectionné dans le treeview.
        /// </summary>
        public TreeNode CurrentNode;

        /// <summary>
        /// Variables pour la définition de l'interface. (les deux couleurs du dégradé et son orientation)
        /// </summary>
        public static Color Couleur1, Couleur2;
        public static int Angle;

        /// <summary>
        /// La classe stockant toutes les informations du projet.
        /// </summary>

        public GestionDonneesHUB2SIM DonneesEnCours;

        /// <summary>
        /// Booléen indiquant quel est le status de la fenêtre de visualisation \ref outilsGraphiques
        /// </summary>
        internal bool bAfficheOutils = false;
        /// <summary>
        /// Fenêtre de visualisation d'informations sur le graphique courant.
        /// </summary>
        private Visu outilsGraphiques;
        private Visu OutilsGraphiques
        {
            get
            {
                if (outilsGraphiques == null)
                    outilsGraphiques = new Visu(this);
                return outilsGraphiques;
            }
        }

        /// <summary>
        /// Définitions des variables pour l'affichage de l'outil de renseignement de la table Itinerary
        /// </summary>

        private Assistant.Ressource_Assistant ra_ItinieraryPermanent;

        /// <summary>
        /// Définitions des variables pour l'affichage de l'outil de renseignement de la table Itinerary
        /// </summary>

        private Assistant.BHS_Itinerary ra_BHSItinieraryPermanent;

        
#if(SIMUL8_UTILISATION)
        //Définition des objets pour Simul8.
        SIMUL8.S8Simulation S8Application=null;
        Simul8.Simul8ControlPanel s8cp_SubForm = null;
#endif

        /// <summary>
        /// Définition de l'outil pour l'impression du datagridview
        /// </summary>

        System.Drawing.Printing.PrintDocument MyPrintDocument;
        DataGridViewPrinter MyDataGridViewPrinter;

        /// <summary>
        /// The form that will be used to show the help or the releases notes.
        /// </summary>
        private Interface.Help hHelp;

        /// <summary>
        /// La fenêtre pour l'affichage des erreurs.
        /// </summary>
        Errors lesErreurs;

        /// <summary>
        /// If the table contains dependences errors
        /// </summary>
        bool bDataAreValids;


        bool bOnEditMode;
        int iEditColumnIndex;
        int iEditRowIndex;

        /// <summary>
        /// true If we click right on a table that is in the tree
        /// </summary>
        bool TreeRightClick;

        /// <summary>
        /// Pour déterminer quels sont les onglets à afficher...
        /// </summary>
        List<TabPage> ListTab = new List<TabPage>();


        /// <summary>
        /// Boolean used for knowing if the user is currently in an annotation mode, meaning that the user wants to add a new annotation in the current graphic.
        /// </summary>
        private Boolean isModeAnnotation;
        /// <summary>
        /// Boolean used for knowing if the user is currently in a delete annotation mode, meaning that the user wants to remove an annotation in the current graphic.
        /// </summary>
        private Boolean isSuppressModeAnnotation;

        #endregion
        
        #region Constructeur de la classe + quelques fonctions utiles pour l'initialisation de l'application
        /// <summary>
        /// Fonction qui s'occupe de remettre à jour l'affichage des dégradés dans la fenêtre et dans les fenêtres filles.
        /// </summary>
        private void RefreshDisplay()
        {
            Graphique.BackgroundStyle.FillStyle = new NImageFillStyle((Bitmap)OverallTools.FonctionUtiles.dessinerFondEcran(40, 50, Couleur1, Couleur2, Angle));  // nevronMod
            Graphique.BackgroundImage = OverallTools.FonctionUtiles.dessinerFondEcran(40, 50, Couleur1, Couleur2, Angle);
            Graphique.Refresh();
            menuSIMCORE.BackgroundImage = OverallTools.FonctionUtiles.dessinerFondEcran(40, 50, Couleur1, Couleur2, Angle);
            menuSIMCORE.BackgroundImageLayout = ImageLayout.Stretch;
            toolStrip1.BackgroundImageLayout = ImageLayout.Stretch;
            toolStrip1.BackgroundImage = OverallTools.FonctionUtiles.dessinerFondEcran(40, 50, Couleur1, Couleur2, Angle);
            if (ra_ItinieraryPermanent != null)
            {
                ra_ItinieraryPermanent.ChangeColor();
            }
            if (ra_BHSItinieraryPermanent != null)
            {
                ra_BHSItinieraryPermanent.ChangeColor();
            }
            OverallTools.FonctionUtiles.MajBackground(this);
        }
        /// <summary>
        /// Fonction pour vérifier que Windows est courrament bien configurer pour que Automod puisse fonctionner correctement.
        /// </summary>
        /// <returns>Booléen indiquant si Windows est configurer correctement.</returns>
        internal static bool CheckDecimalSeparator()
        {
            if (Application.CurrentCulture.NumberFormat.NumberDecimalSeparator != ".")
            {
                //Modification de la culture courante si le format d'écriture des décimales est mauvaise.
                CultureInfo cinfo =(CultureInfo) Application.CurrentCulture.Clone();
                cinfo.NumberFormat.NumberDecimalSeparator = ".";
                Application.CurrentCulture = cinfo;
                return true;
            }
            return true;
        }

        /// <summary>
        /// Fonction qui se charge de lire le contenu de la clef de protections et d'activer ou de désactiver les options
        /// qui seront disponibles pour la session courante.
        /// </summary>
        /// <returns>Booléen indiquant si l'ouverture et la vérification de la clef se sont bien déroulée.</returns>
        private bool InitializeKeyInformation()
        {
            try
            {
                int iNb = 0;
                if (bTrialVersion)
                {
                    ///Si l'utilisateur a une version compilée comme une version d'évaluation, on limite alors les 
                    ///différentes périmètre de l'application.
                    iNb = 1;
                    bPAX = true;
                    bBHS = false;
                    bTMS = false;
                    bBHS_BagPlan = false;
                    bUseAutomod = true;
                    bShowAllocationTools = true && (!bReporter);
                    bAllocationFlag = true && (!bReporter); // PAX key flag disabled
                    bAnimatedQueues = false;

                    bStatic = true;
                    bDynamic = true;
                    bRuntime = false;
                    bBHS_MeanFlows = false;
                    bBHS_PaxPlan = false;
                    tsmi_HUB.Visible = false;
                    tsmi_AIR.Visible = false;

                    ///Pour être sur que la compilation ne passe pas outre ses attributions, on met à faux toutes les 
                    ///autres options de compilation qui pourraient donné des droits trop importants en mode évaluation.
                    bAircraftMovementPerFlight = false;//(Jeddah
                    bDelhi = false;

                    bMultiScenario = false;
                    bJNK = false;
                    bSDE = false;
                }
                else if (bSDE || bDebug)//(true)//(bSDE)      // key problem    // >> Unikey bypass
                {
                    ///Si l'option SDE (Stéphane Delacroix) est activée, cela veut dire que la clef n'est pas valide pour une
                    ///interrogation, on met alors simplement les options relatives à l'utilisation habituelle de SDE.
                    iNb = 2;
                    bPAX = true;
                    bBHS = true && (!bReporter);
                    if (bReporter)
                        iNb = 1;
                    bTMS = false;
                    bBHS_BagPlan = false;
                    bUseAutomod = true;
                    bShowAllocationTools = true && (!bReporter);
                    bAllocationFlag = true && (!bReporter); // PAX key flag disabled
                    bAnimatedQueues = true && (!bReporter);

                    bStatic = true;
                    bDynamic = true;
                    bRuntime = false;
                    bBHS_MeanFlows = false;
                    bBHS_PaxPlan = false;
                    tsmi_HUB.Visible = false;
                    tsmi_AIR.Visible = false;

                    ///Pour être sur que la compilation ne passe pas outre ses attributions, on met à faux toutes les 
                    ///autres options de compilation qui pourraient donné des droits trop importants en mode évaluation.
                    bAircraftMovementPerFlight = false;//(Jeddah
                    bDelhi = false;

                    bMultiScenario = false;
                    bJNK = false;
                }
                else
                {
                    ///Sinon on interroge la clef pour déterminer quels seront les périmètres de l'application.
                    amKeySpecification = new AskMode();
                    bBHS = amKeySpecification.BHS && (!bReporter);
                    bPAX = amKeySpecification.PAX;
                    bPKG = amKeySpecification.PKG;
                    bSodexi = amKeySpecification.SODEXI;
                    ///TMS indisponible si le mode passager ne l'est pas.
                    bTMS = amKeySpecification.TMS && bPAX && (!bReporter);
                    bBHS_BagPlan = amKeySpecification.BHS_BagPlan && bBHS && (!bReporter);
                    bUseAutomod = amKeySpecification.Dynamic;
                    //L'interrogation sur le statique n'est pas nécessaire, mais est préférable pour éviter les problèmes.
                    bShowAllocationTools = amKeySpecification.AllocationTools && amKeySpecification.Static && (!bReporter);
                    bAllocationFlag = amKeySpecification.AllocationTools;   // PAX key flag disabled
                    bAnimatedQueues = amKeySpecification.AnimatedQueues && (!bReporter);

                    bStatic = amKeySpecification.Static;
                    bDynamic = amKeySpecification.Dynamic;
                    bRuntime = amKeySpecification.Runtime;
                    bBHS_MeanFlows = amKeySpecification.BHS_MeanFlows && bBHS && (!bReporter);
                    bBHS_PaxPlan = amKeySpecification.BHS_PaxPlan && bBHS && (!bReporter);
                    tsmi_HUB.Visible = amKeySpecification.HUB && (!bReporter);
                    tsmi_AIR.Visible = amKeySpecification.Airside && (!bReporter);
                    foreach (bool bTmp in amKeySpecification.Perimeters)
                    {
                        if (bTmp)
                        {
                            iNb++;
                        }
                    }
                    if (iNb == 0)
                    {
                        MessageBox.Show("The hardware key has a problem. Please contact the customer services at support@pax2sim.com", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        if (DonneesEnCours != null)
                            this.closeProject();
                        this.Close();
                        return false;
                    }
                }
                #region Gestion de la partie Automod

                
                if (bUseAutomod)
                {
                    ///Ensuite, il faut vérifier que Automod est bien installé et qu'il est bien configuré.
                    Hashtable ht = new Hashtable(Environment.GetEnvironmentVariables());
#if (!DEBUG)
                    if (!autoModFileExists(ht)) // >> amrun64.exe compatibility
                    {
                        bUseAutomod = false;
                        MessageBox.Show("Automod is not installed, capacity analysis will not be possible.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                    else if (bTrialVersion)
                    {
                        ///Nous allons voir si il existe une licence Automod pour le runtime.
                        ///Si aucune licence disponible, alors on crée le fichier avec le contenu 
                        ///pour une utilisation en mode étudiant (Si trial version).
                        try
                        {
                            String sAutomodProtect = ht["ASI"].ToString() + "\\lib\\ASI.123.80";
                            if (!File.Exists(sAutomodProtect))
                            {
                                System.IO.StreamWriter swASI_123 = new StreamWriter(sAutomodProtect);
                                swASI_123.WriteLine("instructional");
                                swASI_123.WriteLine();
                                swASI_123.WriteLine();
                                swASI_123.Close();
                            }
                        }
                        catch (Exception e)
                        {
                            OverallTools.ExternFunctions.PrintLogFile("Error while trying to write file in Automod directory : " + e.Message);
                            OverallTools.ExternFunctions.PrintLogFile("Except02026: " + this.GetType().ToString() + " throw an exception: " + e.Message);
                            return false;
                        }
                    }
                    else
                    {
                        ///Si Pax2sim n'est pas en mode évaluation, on vérifie simplement que le fichier
                        ///ASI.123.80 d'automod contient des codes valides (du moins différents de ceux temporaires)
                        ///Si ce sont des codes temporaires, on supprime le fichier pour que Automod redemande
                        ///les codes valides (sinon la simulation n'est pas utilisable car le modèle sera trop lourd.
                        try
                        {
                            String sAutomodProtect = ht["ASI"].ToString() + "\\lib\\ASI.123.80";
                            if (File.Exists(sAutomodProtect))
                            {
                                System.IO.StreamReader swASI_123 = new StreamReader(sAutomodProtect);
                                String sLine = swASI_123.ReadLine();
                                swASI_123.Close();
                                if (sLine.Contains("instructional"))
                                    System.IO.File.Delete(sAutomodProtect);
                            }
                        }
                        catch (Exception e)
                        {
                            OverallTools.ExternFunctions.PrintLogFile("Except02027: " + this.GetType().ToString() + " throw an exception while trying to delete file in Automod directory : " + e.Message);
                            return false;
                        }
                    }
#endif
                }
                #endregion


                ///Les files d'attente animées ne sont possibles que si on a le mode passager disponible.
                bAnimatedQueues = bAnimatedQueues && bPAX && bUseAutomod;
                ///Le mode dynamique n'est disponible que si Automod est disponible.
                bDynamic = bDynamic && bUseAutomod;

                tsmi_PAX.Visible = bPAX;
                tmsi_BHS.Visible = bBHS;
                tsmi_TMS.Visible = bTMS;
                tsmi_PKG.Visible = bPKG;

                String sPerimeter = "PAX";
                if (!bPAX)
                {
                    if (bBHS)
                    {
                        sPerimeter = "BHS";
                    }
                    else if (amKeySpecification.HUB)
                    {
                        sPerimeter = "HUB";
                    }
                    else if (bTMS)
                    {
                        sPerimeter = "TMS";
                    }
                    else if (amKeySpecification.Airside)
                    {
                        sPerimeter = "AIR";
                    }
                    else if (bPKG)
                    {
                        sPerimeter = "PKG";
                    }
                }
                setPerimeter(sPerimeter);
                if (iNb == 1)
                {
                    tssb_Perimeter.Enabled = false;
                    tssb_Perimeter.Tag = sPerimeter;
                }
            }
            catch (Exception e)
            {
                String sErrorMessage = "A problem appears when trying to configuring your " + OverallTools.AssemblyActions.AssemblyTitle + " key. Please contact the customer services at support@pax2sim.com";
                OverallTools.ExternFunctions.PrintLogFile("Except02028: (" + sErrorMessage + ") " + this.GetType().ToString() + "  throw an exception: " + e.Message);
                MessageBox.Show(sErrorMessage, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.closeProject();
                this.Close();
                return false;
            }
            return true;
        }

        // >> amrun64.exe compatibility
        private bool autoModFileExists(Hashtable environmentVariablesMap)
        {
            if (!environmentVariablesMap.Contains("ASI"))
                return false;
            string autoModFilePath = environmentVariablesMap["ASI"] + "\\bin\\amrun.exe";
            //string autoMod64FilePath = environmentVariablesMap["ASI"] + "\\bin\\amrun64.exe";
            if (File.Exists(autoModFilePath))// || File.Exists(autoMod64FilePath))
                return true;
            return false;
        }


        /// <summary>
        /// Constructeur de la fenêtre principale. Ce constructeur prend en arguments la ligne d'exéctution de l'application. Cela
        /// permettra d'ouvrir le fichier passé en paramètre.
        /// </summary>
        /// <param name="args">La ligne de commande qui a lancé PAX2SIM.</param>
        public PAX2SIM(String[] args)
        {
            //MessageBox.Show("01 - We arrived in the PAX2SIM creator");
            //////////////////////////////////////
            // Définition de la culture par défaut
            //Par défaut la culture est l'anglais
            //////////////////////////////////////
            frenchCulture = new CultureInfo("FR");
            englishCulture = new CultureInfo("EN");
            System.Threading.Thread.CurrentThread.CurrentUICulture = englishCulture;

            initMessages();

            InitializeComponent();
            hHelp = null;
            String sCurrentPerimeter = "PAX";

            if (!InitializeKeyInformation())
                return;
                sCurrentPerimeter = epPerimetre.ToString();

            //For the wyBuild tool. (For the automatics updates)
            //We set the command line that has to be sent to wybuild.

            automaticUpdater1.wyUpdateCommandline = "-ka -v" + OverallTools.AssemblyActions.AssemblyVersion + " -u" + Environment.UserName + " -n"+OverallTools.AssemblyActions.AssemblyTitle;
            LoadSettings();
            //Fin wybuild
            
            setPerimeter("PAX");
            GestionDonneesHUB2SIM.Initialize();
            String Setting = System.IO.Path.GetDirectoryName(Application.ExecutablePath) + "\\Settings.xml";
            String sNewSetting = OverallTools.ExternFunctions.getUserDirectoryForPax2sim()+"\\Settings.xml";
            if (File.Exists(Setting))
            {
                //We move the setting file into the right directory.
                if (!File.Exists(sNewSetting))
                {
                    OverallTools.ExternFunctions.MoveFile(sNewSetting, Setting, "", null, null, null);
                }
                else
                {
                    OverallTools.ExternFunctions.DeleteFile(Setting);
                }
            }
            sSettings = new Classes.Settings(sNewSetting, Color.SkyBlue, Color.White,90);
            Couleur1 = sSettings.Couleur1;
            Couleur2 = sSettings.Couleur2;
            Angle = sSettings.Angle;
            sSettings.UpdateHistoric(lancementEtape2ToolStripMenuItem, 7, new EventHandler(Change_Project_Click));

            ListTab.AddRange(new TabPage[] { TabViewTable, TabChart, tp_Summary, /*tp_Itinerary,*/ tabNewItinerary  // << Task #6386 Itinerary process
#if(SIMUL8_UTILISATION)
                , tabSimul8
#endif
                , tp_BHS, tabGantt,
                tabPageDashboard });    // >> Task #10553 Pax2Sim - Pax analysis - Summary - Dashboard

            ErrorMessage = "Please insert hardware key before running "+OverallTools.AssemblyActions.AssemblyTitle;
            NUIManager.SetPredefinedFrame(PredefinedFrame.None);

            setPerimeter(sCurrentPerimeter);
            reinitialiserArbre();

            bDataAreValids = true;

            bOnEditMode = false;
            lesErreurs = null; 
            TreeRightClick = false;

            ra_ItinieraryPermanent = null;
            ra_BHSItinieraryPermanent = null;

            MyPrintDocument = new System.Drawing.Printing.PrintDocument();
            MyPrintDocument.PrintPage += new System.Drawing.Printing.PrintPageEventHandler(MyPrintDocument_PrintPage);

            //On applique au graphique le fond d'écran.
            RefreshDisplay();
            Graphique.Charts[0].Wall(ChartWallType.Back).FillStyle.SetTransparencyPercent(100);
            //Graph
            InitialisationToolBar();

            //On initialise les variables.
            DonneesEnCours = null;

            ///On ouvre le fichier en paramètre (s'il y avait un fichier en paramètres).
            if ((args.Length != 0) && (System.IO.File.Exists(args[0]))&&(CheckDecimalSeparator()))
            {
                 OpenProject(args[0]);
            }
            else
            {
                //On désactive les controles car aucun projet n'est ouvert.
                ActiveDesactiveControles(false);
            }
            CurrentNode = null;
            
            
            /*#if(DEBUG)
            #else*/
            tabControl.TabPages.Remove(tp_BHS);
            tabControl.TabPages.Remove(tabSimul8);
            /*#endif*/

            RefreshTab(false);
            setSpecificMode();
            if (bDelhi)
            {
                SetDelhiMode();
            }
            if (bTrialVersion)
            {
                SetTrialMode();
            }
            if (this.Text != null && !this.Text.Contains(OverallTools.AssemblyActions.AssemblyVersion)) // >> PAX2SIM - assembly version - projectName - add assembly version
                this.Text = OverallTools.AssemblyActions.AssemblyProduct + " - " + OverallTools.AssemblyActions.AssemblyVersion;
            if (bTrialVersion)
            {
                this.Text += " - Trial version";
                if (iValidDaysTrialVersion > 0)
                    this.Text += " (" + iValidDaysTrialVersion.ToString() + " days remaining)";
                else
                    this.Text += " (Trial period expired)";
            }
            
            if(bReporter)
            {
                tssb_Perimeter.Visible = false;
                InputData.Visible = false;
                AirportDef.Visible = false;
                DynamicAnalysis.Visible = true;
                StaticAnalysis.Visible = false;
                setReporterMode();
                releaseNotesToolStripMenuItem.Visible = false;
                tsmi_Properties.Visible = false;
                
                sMainNodeName = "SimReporter";
                sExtension = "rep";
            }
            languageToolStripMenuItem.Visible = bDebug;

            //Both modes for adding and suppressing annotations
            isModeAnnotation = false;
            isSuppressModeAnnotation = false;
            Graphique.MouseDown += new System.Windows.Forms.MouseEventHandler(FormMouseClick);

            setpointWindow = new Prompt.SIM_Setpoint();
        }

        internal new void Dispose()
        {
            if (Graphique != null)
            {
                Graphique.Dispose();
            }
            else
            {
                //Code used to detect when this variable is set to null, when it shouldn't.
                Graphique = null;
            }
            Graphique = null;
        }

        private void ActiveDesactiveControles(bool etat)
        {
            treeView1.Enabled = etat;
            //Les boutons de la premiere toolbar
            Results.Enabled = etat;
            tsb_Chart.Enabled = etat;
            tsb_BHS.Enabled = etat;
            tsb_Runway.Enabled = etat;
            tsbStartSimulation.Enabled = etat;
            
            DynamicAnalysis.Visible = true;
            //DynamicAnalysis.Enabled = /*bUseAutomod &&*/ etat;
            DynamicAnalysis.Enabled = etat && bAllocationFlag;  // PAX key flag disabled
            
            StaticAnalysis.Enabled = etat /*&& bStatic*/;            
            if (!bStatic && !bDynamic)  // PAX key flag disabled
            {
                StaticAnalysis.Enabled = false;
            }
            InputData.Enabled = etat;
            AirportDef.Enabled = etat;

            tabControl.Enabled = etat;
            saveToolStripMenuItem.Enabled = etat;
            importProjectToolStripMenuItem.Enabled = etat;
            saveAsToolStripMenuItem.Enabled = etat;
            closeToolStripMenuItem.Enabled = etat;
            projectNameToolStripMenuItem.Enabled = etat;
            
            /*if (!bShowAllocationTools)
            {*/
                allocateMakeUpToolStripMenuItem.Visible= false;
                allocateReclaimToolStripMenuItem.Visible = false;
                allocateTransferInfeedToolStripMenuItem.Visible = false;
                allocateToolStripMenuItem.Visible = false;
            /*}
            else
            {
                allocateMakeUpToolStripMenuItem.Enabled = etat && !bTrialVersion;
                allocateReclaimToolStripMenuItem.Enabled = etat;
                allocateTransferInfeedToolStripMenuItem.Enabled = etat && !bTrialVersion;
                allocateToolStripMenuItem.Enabled = etat && !bTrialVersion;
                allocateToolStripMenuItem.Visible = false;
            }*/

            // >> Task #12393 Pax2Sim - File conversion for Athens
            if (bAIA)
            {
                disableAndHideToolsForSodexi();
                disableAndHideToolsForDubai();
                disableAndHideToolsForLiege();  // >> Task #12808 Pax2Sim - allocation Liege
                disableAndHideToolsForCDG();

                generateFlightPlansAIAToolStripMenuItem.Enabled = etat;
                generateFlightPlansAIAToolStripMenuItem.Visible = true;
            }
            // << Task #12393 Pax2Sim - File conversion for Athens
            else if (dubaiMode) // >> Task #12668 Pax2Sim - Dubai ADPi - Flight Plan Conversion
            {
                disableAndHideToolsForAIA();
                disableAndHideToolsForSodexi();
                disableAndHideToolsForLiege();  // >> Task #12808 Pax2Sim - allocation Liege
                disableAndHideToolsForCDG();

                importDubaiFlightPlansToolStripMenuItem.Enabled = etat;
                importDubaiFlightPlansToolStripMenuItem.Visible = true;

                generateFilesForDubaiAllocationToolStripMenuItem.Enabled = false;//etat;
                generateFilesForDubaiAllocationToolStripMenuItem.Visible = false;//true;
                generateFlightPlanInformationToolStripMenuItem.Enabled = false;//etat;
                generateFlightPlanInformationToolStripMenuItem.Visible = false;//true;
            }
            else if (cdgMode)
            {
                disableAndHideToolsForAIA();
                disableAndHideToolsForSodexi();
                disableAndHideToolsForLiege();
                disableAndHideToolsForDubai();

                importCDGDepartureFlightPlanToolStripMenuItem.Enabled = etat;
                importCDGDepartureFlightPlanToolStripMenuItem.Visible = true;                                
            }
            else if (liegeMode) // >> Task #12808 Pax2Sim - allocation Liege
            {
                disableAndHideToolsForAIA();
                disableAndHideToolsForDubai();
                disableAndHideToolsForSodexi();
                disableAndHideToolsForCDG();

                generateLiegeAllocationToolStripMenuItem.Enabled = etat;
                generateLiegeAllocationToolStripMenuItem.Visible = false;

                importLiegeFlightPlansToolStripMenuItem.Enabled = etat;
                importLiegeFlightPlansToolStripMenuItem.Visible = true;

                StaticAnalysis.Enabled = etat;// false;
                if (!bStatic && !bDynamic)  // PAX key flag disabled
                {
                    StaticAnalysis.Enabled = false;
                }
                tsb_Chart.Enabled = etat;// false;
                Results.Enabled = etat;// false;
                
            }
            else
            {
                disableAndHideToolsForAIA();    // >> Task #12393 Pax2Sim - File conversion for Athens
                disableAndHideToolsForDubai();  // >> Task #12668 Pax2Sim - Dubai ADPi - Flight Plan Conversion
                disableAndHideToolsForLiege();  // >> Task #12808 Pax2Sim - allocation Liege
                disableAndHideToolsForCDG();

                estimateAirportOccupationToolStripMenuItem.Enabled = etat;
                estimateAirportOccupationToolStripMenuItem.Visible = bSodexi;
                generateFlightPlansToolStripMenuItem.Enabled = etat;
                generateFlightPlansToolStripMenuItem.Visible = bSodexi;
            }

            unitsAndSpeedsToolStripMenuItem.Enabled = etat;
            unitsAndSpeedsToolStripMenuItem.Enabled = etat;

            openProjectFolderToolStripMenuItem.Enabled = etat;  // >> Task #16578 PAX2SIM - Documents - new node in main tree-view            
            listOfErrorsToolStripMenuItem.Enabled = etat;

            tssb_Perimeter.Enabled = etat && (tssb_Perimeter.Tag == null);

            if (liegeMode || dubaiMode)
            {
                specificationDocumentToolStripMenuItem.Enabled = etat;
                specificationDocumentToolStripMenuItem.Visible = etat;
            }
            else
            {
                specificationDocumentToolStripMenuItem.Enabled = false;
                specificationDocumentToolStripMenuItem.Visible = false;
            }
            bHSTraceKeywordsToolStripMenuItem.Visible = bBHS && (epPerimetre == EnumPerimetre.BHS);
        }

        // >> Task #12393 Pax2Sim - File conversion for Athens
        private void disableAndHideToolsForSodexi()
        {
            estimateAirportOccupationToolStripMenuItem.Enabled = false;
            estimateAirportOccupationToolStripMenuItem.Visible = false;

            generateFlightPlansToolStripMenuItem.Enabled = false;
            generateFlightPlansToolStripMenuItem.Visible = false;            
        }
        private void disableAndHideToolsForAIA()
        {
            generateFlightPlansAIAToolStripMenuItem.Enabled = false;
            generateFlightPlansAIAToolStripMenuItem.Visible = false;
        }
        // << Task #12393 Pax2Sim - File conversion for Athens

        // >> Task #12668 Pax2Sim - Dubai ADPi - Flight Plan Conversion
        private void disableAndHideToolsForDubai()
        {
            importDubaiFlightPlansToolStripMenuItem.Enabled = false;
            importDubaiFlightPlansToolStripMenuItem.Visible = false;

            generateFilesForDubaiAllocationToolStripMenuItem.Enabled = false;
            generateFilesForDubaiAllocationToolStripMenuItem.Visible = false;

            generateFlightPlanInformationToolStripMenuItem.Enabled = false;
            generateFlightPlanInformationToolStripMenuItem.Visible = false;
        }
        // << Task #12668 Pax2Sim - Dubai ADPi - Flight Plan Conversion

        // >> Task #12808 Pax2Sim - allocation Liege
        private void disableAndHideToolsForLiege()
        {
            generateLiegeAllocationToolStripMenuItem.Enabled = false;
            generateLiegeAllocationToolStripMenuItem.Visible = false;

            importLiegeFlightPlansToolStripMenuItem.Enabled = false;
            importLiegeFlightPlansToolStripMenuItem.Visible = false;
        }
        // << Task #12808 Pax2Sim - allocation Liege

        private void disableAndHideToolsForCDG()
        {
            importCDGDepartureFlightPlanToolStripMenuItem.Enabled = false;
            importCDGDepartureFlightPlanToolStripMenuItem.Visible = false;
        }

        /// <summary>
        /// Fonction qui se charge de mettre à jour le ItineraryView.
        /// </summary>
        private void UpdateItineraryView()
        {
            if (DonneesEnCours == null)
                return;
            ///Mise à jour de la structure de l'aéroport en fonction de l'arbre présent dans le TreeView.
            DonneesEnCours.MAJ_TablesSuivantStructureAeroport(treeView1.Nodes[0]);
            if ((ra_ItinieraryPermanent != null)

#if(SIMUL8_UTILISATION)
                || (s8cp_SubForm != null))
            {
                //Il faut mettre à jour le contenu de la fenêtre à partir des tables qui sont dans le 
                //système de données.
                if (ra_ItinieraryPermanent != null
#endif
)
            {
                ///Si l'itinerary tel qu'il est visualisé a été modifié, l'utilisateur en est informé et doit valider ou non la sauvegarde
                ///de ces modifications.
                if (ra_ItinieraryPermanent.getAEteModifie())
                {
                    if (MessageBox.Show("The information in the flow diagram has changed. Do you want to save them first ?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        ra_ItinieraryPermanent.saveChanges();
                    }
                }
                ///Appel de la fonction \ref Ressource_Assistant.UpdateInformations()
                ra_ItinieraryPermanent.UpdateInformations(DonneesEnCours.getAllGroups(),
                    DonneesEnCours.getAllGroupsDescriptions(),
                    DonneesEnCours.getTable("Input", "ItineraryTable"), treeView1.Nodes[0],
                    new EventHandler(Draw_Assistant_Click));
                ///Appel de la fonction \ref Ressource_Assistant.saveChanges() pour sauvegarder les changements et validé ceux ci.
                ra_ItinieraryPermanent.saveChanges();
            }

#if(SIMUL8_UTILISATION)
                else
                {
                    //DAns le cas ou le modèle est celui de Simul8
                    //Update of the scenario in the context menu for the objects.
                    s8cp_SubForm.setScenarioMenu(new List<String>(DonneesEnCours.getScenariosReadyToSimulate()),new List<String>(DonneesEnCours.getGraphicFilter()), new EventHandler(Draw_Assistant_Click));
                    s8cp_SubForm.setListGroup(DonneesEnCours.getAllGroups2());
                }
            }
#endif
            else
            {
                DataTable ItineraryTable = DonneesEnCours.getTable("Input", "ItineraryTable");

#if(SIMUL8_UTILISATION)
                if (bSimul8)
                {
                    if (S8Application == null)
                        S8Application = new SIMUL8.S8Simulation();
                    S8Application.DisplayUserMessages = false;
                    s8cp_SubForm = new SIMCORE_TOOL.Simul8.Simul8ControlPanel(S8Application, "", this, new SIMCORE_TOOL.Simul8.Simul8SubForm.Object_DoubleClick(Simul8_Object_DoubleClick), DonneesEnCours);
                    s8cp_SubForm.TopLevel = false;
                    s8cp_SubForm.Parent = tabSimul8;
                    s8cp_SubForm.initializeModel(treeView1.Nodes[0], DonneesEnCours.getAllGroups2(), ItineraryTable);
                    s8cp_SubForm.Dock = DockStyle.Fill;
                    s8cp_SubForm.Show();
                    s8cp_SubForm.EnableSimulation = false;
                    s8cp_SubForm.setScenarioMenu(new List<String>(DonneesEnCours.getScenariosReadyToSimulate()), new List<String>(DonneesEnCours.getGraphicFilter()), new EventHandler(Draw_Assistant_Click));
                }
                else
                {
#endif
                ra_ItinieraryPermanent = new Assistant.Ressource_Assistant(DonneesEnCours.getAllGroups(),
                        DonneesEnCours.getAllGroupsDescriptions(),
                        treeView1.Nodes[0], ItineraryTable, DonneesEnCours,
                        new EventHandler(Draw_Assistant_Click));
                ra_ItinieraryPermanent.TopLevel = false;
                // << Task #6386 Itinerary process                
                //ra_ItinieraryPermanent.Parent = tp_Itinerary;
                ra_ItinieraryPermanent.Parent = tabNewItinerary;
                // >> Task #6386 Itinerary process
                ra_ItinieraryPermanent.Location = new Point(0, 0);
                ra_ItinieraryPermanent.Show();
                ra_ItinieraryPermanent.Dock = DockStyle.Fill;

#if(SIMUL8_UTILISATION)
                }
#endif
            }
            this.setChartList(DonneesEnCours, new EventHandler(AddChartClick));
#if(DEBUG)
            if (ra_BHSItinieraryPermanent != null)
            {
                if (ra_BHSItinieraryPermanent.getAEteModifie())
                {
                    ra_BHSItinieraryPermanent.saveChanges();
                }
                DonneesEnCours.MAJ_TablesSuivantStructureAeroport(treeView1.Nodes[0]);
                DataTable ItineraryTable = DonneesEnCours.getTable("Input", GlobalNames.sBHS_Itinerary);
                if (ItineraryTable != null)
                    ra_BHSItinieraryPermanent.UpdateInformations(DonneesEnCours.getAllBHSGroups(),
                        DonneesEnCours.getAllBHSGroupsDescriptions(), ItineraryTable, treeView1.Nodes[0],
                        new EventHandler(Draw_Assistant_Click));
                ra_BHSItinieraryPermanent.saveChanges();
            }
            else
            {
                DataTable ItineraryTable = DonneesEnCours.getTable("Input", GlobalNames.sBHS_Itinerary);
                if (ItineraryTable != null)
                {
                    ra_BHSItinieraryPermanent = new Assistant.BHS_Itinerary(DonneesEnCours.getAllBHSGroups(),
                            DonneesEnCours.getAllBHSGroupsDescriptions(),
                            treeView1.Nodes[0], ItineraryTable, DonneesEnCours,
                            new EventHandler(Draw_Assistant_Click));
                    ra_BHSItinieraryPermanent.TopLevel = false;
                    ra_BHSItinieraryPermanent.Parent = tp_BHS;
                    ra_BHSItinieraryPermanent.Location = new Point(0, 0);
                    ra_BHSItinieraryPermanent.Show();
                    ra_BHSItinieraryPermanent.Dock = DockStyle.Fill;
                }
            }
#endif
        }
        
#if(SIMUL8_UTILISATION)
        void Simul8_Object_DoubleClick(String sName)
        {

            DataTable dtProcessTable = DonneesEnCours.getTable("Input", GlobalNames.Times_ProcessTableName);
            if (OverallTools.DataFunctions.indexLigne(dtProcessTable, 0, sName) != -1)
            {
                DataTable dtOneOfTable = DonneesEnCours.getTable("Input", GlobalNames.OneofSpecificationTableName);
                Assistant.SubForms.Process_SubForm pa = new SIMCORE_TOOL.Assistant.SubForms.Process_SubForm(dtProcessTable, dtOneOfTable, sName);

                DataTable dtGroupQueues = DonneesEnCours.getTable("Input", GlobalNames.Group_QueuesName);
                DataTable dtStationsQueues = DonneesEnCours.getTable("Input", GlobalNames.Capa_QueuesTableName);
                SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node nContent = SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node.GetTree(DonneesEnCours.getRacine(), dtGroupQueues, sName);
                List<Form> lfForm = new List<Form>();
                lfForm.Add(pa);
                SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm csf_Capacity = null;
                if (nContent != null)
                {
                    csf_Capacity = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm(nContent, dtGroupQueues, dtStationsQueues, true);
                    lfForm.Add(csf_Capacity);
                }

                Assistant.Edit_Assistant ea = new Assistant.Edit_Assistant("Edit " + sName, lfForm);
                if (ea.ShowDialog() == DialogResult.OK)
                {
                    if (csf_Capacity != null)
                        csf_Capacity.Save();
                    if (pa != null)
                        pa.saveChanges();
                }
                //pa.ShowDialog();

                if (csf_Capacity != null)
                    csf_Capacity.Dispose();
                pa.Dispose();
            }
        }
#endif

        #endregion
                
        #region Fonctions pour la gestion du fichier d'historique.
        
        void Change_Project_Click(object sender, EventArgs e)
        {
            if (sender.GetType() != typeof(ToolStripMenuItem))
                return;
            if (((ToolStripMenuItem)sender).Tag.GetType() != typeof(String))
                return;
            if (!CheckDecimalSeparator())
                return;
            ///Test si il y a un projet en cours.
            if (this.DonneesEnCours != null)
            {
                if (!SaveChanges())
                    return;
            }
            OpenProject(((ToolStripMenuItem)sender).Tag.ToString());
        }
        #endregion

        #region ##############       PERIMETERS   &   Specifics Modes

        private void InitializeBHS()
        {
            ListeNomsObjets = new String[][][]{new String[][]{new String[]{sMainNodeName },                  new String[]{sTerminalName,"Runways"/*,"Handling Agents"*/}},
                                                      new String[][]{new String[]{"Runways"},           new String[]{"Runway"}},
                                                      /*new String[][]{new String[]{"Handling Agents"},   new String[]{"Handling Agent"}},*/
                                                      new String[][]{new String[]{sTerminalName},          new String[]{sLevelName,sBHSName, "Aircraft Parking Stands"}},
                                                      new String[][]{new String[]{"Aircraft Parking Stands"},    new String[]{"Aircraft Parking Stand"}},
                                                      new String[][]{new String[]{sLevelName},             new String[]{sCheckInGroup,"Passport Check Group","Security Check Group","Arrival Gate Group","Baggage Claim Group","Transfer Group", sUserProcessGroup/*,"ShuttleS Group"*/,"Boarding Gate Group"   // << Task #7570 new Desk and extra information for Pax -Phase I B
#if(PAXINOUTUTILISATION)
                                                          , sModelIn + " Group", sModelOut + " Group"
#endif
#if(SHOPSUTILISATION)
                                                          , sShoppingAreaGroup
#endif
                                                      }},
                                                      new String[][]{new String[]{sBHSName},               new String[]{"Check In Collector Group",GestionDonneesHUB2SIM.BHS_String_TransferInfeedGroup,"HBS Lev1 Group","HBS Lev3 Group","HBS Lev5 Group","MES Group","EBS Group","Make-Up Group",GestionDonneesHUB2SIM.BHS_String_ArrivalInfeedGroup,"HBS Custom Group"}},

                                                      new String[][]{new String[]{sCheckInGroup},new String[]{sCheckIn}},
                                                      new String[][]{new String[]{"Passport Check Group"},new String[]{"Passport Check"}},
                                                      new String[][]{new String[]{"Security Check Group"},new String[]{"Security Check"}},
                                                      new String[][]{new String[]{"Arrival Gate Group"},new String[]{"Arrival Gate"}},
                                                      new String[][]{new String[]{"Baggage Claim Group"},new String[]{"Baggage Claim"}},
                                                      new String[][]{new String[]{"Transfer Group"},new String[]{"Transfer"}},
                                                      new String[][]{new String[]{sUserProcessGroup /*"Shuttle Group"*/}, new String[]{sUserProcessObject /*"Shuttle"*/}},    // << Task #7570 new Desk and extra information for Pax -Phase I B
                                                      new String[][]{new String[]{"Boarding Gate Group"},new String[]{"Boarding Gate"}},
#if(PAXINOUTUTILISATION)
                                                new String[][]{new String[]{sModelIn + " Group"},new String[]{sModelIn}},
                                                new String[][]{new String[]{sModelOut + " Group"},new String[]{sModelOut}},
#endif
#if(SHOPSUTILISATION)
                                                new String[][]{new String[]{sShoppingAreaGroup},new String[]{sShoppingArea}},
#endif

                                                      new String[][]{new String[]{"Check In Collector Group"},new String[]{"Check In Collector"}},
                                                      new String[][]{new String[]{GestionDonneesHUB2SIM.BHS_String_TransferInfeedGroup},new String[]{"Transfer Infeed"}},
                                                      new String[][]{new String[]{"HBS Lev1 Group"},new String[]{"HBS Lev1"}},
                                                      new String[][]{new String[]{"HBS Lev3 Group"},new String[]{"HBS Lev3"}},
                                                      new String[][]{new String[]{"HBS Lev5 Group"},new String[]{"HBS Lev5"}},
                                                      new String[][]{new String[]{"MES Group"},new String[]{"MES"}},
                                                      new String[][]{new String[]{"EBS Group"},new String[]{"EBS"}},
                                                      new String[][]{new String[]{"Make-Up Group"},new String[]{"Make-Up"}},
                                                      new String[][]{new String[]{"HBS Custom Group"},new String[]{"HBS Custom"}},
                                                      new String[][]{new String[]{GestionDonneesHUB2SIM.BHS_String_ArrivalInfeedGroup},new String[]{"Arrival Infeed"}}
                                                    };
            ListeNomsObjetsGroup = new String[] { sCheckIn, 
                                                  "Passport Check", 
                                                  "Security Check", 
                                                  "Arrival Gate", 
                                                  "Baggage Claim", 
                                                  "Transfer", 
                                                  sUserProcessObject,/*"Shuttle",*/    // << Task #7570 new Desk and extra information for Pax -Phase I B
                                                  "Boarding Gate", 
#if(PAXINOUTUTILISATION)
                sModelIn , sModelOut,
#endif
#if(SHOPSUTILISATION)
                 sShoppingArea,
#endif
                                                  "Check In Collector", 
                                                  "Transfer Infeed", 
                                                  "HBS Lev1", 
                                                  "HBS Lev3", 
                                                  "HBS Lev5", 
                                                  "MES", 
                                                  "EBS", 
                                                  "Make-Up", 
                                                  "Arrival Infeed",
                                                  "HBS Custom"
            };

            GestionDonneesHUB2SIM.setPerimeter(epPerimetre);
        }
        
        private void InitializePax()
        {
            ListeNomsObjets = new String[][][]{new String[][]{new String[]{sMainNodeName },          new String[]{sTerminalName,"Runways"/*,"Handling Agents"*/}},
                                               new String[][]{new String[]{"Runways"},           new String[]{"Runway"}},
                                               /*new String[][]{new String[]{"Handling Agents"},   new String[]{"Handling Agent"}},*/
                                               new String[][]{new String[]{sTerminalName},         new String[]{sLevelName,"Aircraft Parking Stands"}},
                                               new String[][]{new String[]{sLevelName},            new String[]{sCheckInGroup,"Passport Check Group","Security Check Group","Arrival Gate Group","Baggage Claim Group","Transfer Group", sUserProcessGroup,/*"ShuttleS Group",*/"Boarding Gate Group"   // >> Task #7570 new Desk and extra information for Pax -Phase I B
#if(PAXINOUTUTILISATION)
                                                          , sModelInGroup, sModelOutGroup
#endif
#if(SHOPSUTILISATION)
                                                          , sShoppingAreaGroup
#endif
                                               }},
                                               new String[][]{new String[]{"Aircraft Parking Stands"},    new String[]{"Aircraft Parking Stand"}},

                                               new String[][]{new String[]{sCheckInGroup},new String[]{sCheckIn}},
                                               new String[][]{new String[]{"Passport Check Group"},new String[]{"Passport Check"}},
                                               new String[][]{new String[]{"Security Check Group"},new String[]{"Security Check"}},
                                               new String[][]{new String[]{"Arrival Gate Group"},new String[]{"Arrival Gate"}},
                                               new String[][]{new String[]{"Baggage Claim Group"},new String[]{"Baggage Claim"}},
                                               new String[][]{new String[]{"Transfer Group"},new String[]{"Transfer"}},
                                               new String[][]{new String[]{sUserProcessGroup/*"ShuttleS Group"*/},new String[]{sUserProcessObject/*"ShuttleS"*/}},       // >> Task #7570 new Desk and extra information for Pax -Phase I B
                                               new String[][]{new String[]{"Boarding Gate Group"},new String[]{"Boarding Gate"}}
                                               
#if(PAXINOUTUTILISATION)
                                                ,
                                                new String[][]{new String[]{sModelInGroup},new String[]{sModelIn}},
                                                new String[][]{new String[]{sModelOutGroup},new String[]{sModelOut}}
#endif
#if(SHOPSUTILISATION)
                                                , new String[][]{new String[]{sShoppingAreaGroup},new String[]{sShoppingArea}}
#endif

                                              };
            ListeNomsObjetsGroup = new String[] { sCheckIn, "Passport Check", "Security Check", "Arrival Gate", "Baggage Claim", "Transfer", sUserProcessObject,/*"ShuttleS",*/ "Boarding Gate"    // << Task #7570 new Desk and extra information for Pax -Phase I B
#if(PAXINOUTUTILISATION)
                , sModelIn , sModelOut
#endif
#if(SHOPSUTILISATION)
                , sShoppingArea
#endif
            };
            GestionDonneesHUB2SIM.setPerimeter(EnumPerimetre.PAX);
        }
        private void InitializePKG()
        {
            InitializePax();
            GestionDonneesHUB2SIM.setPerimeter(EnumPerimetre.PKG);
        }

        /// <summary>
        /// This function permits to define and set the perimeter of the application.
        /// </summary>
        /// <param name="sPerimeter">The name of the perimeter.</param>
        private void setPerimeter(String sPerimeter)
        {
            if(CurrentNode !=null)
                SelectNode(treeView1.Nodes[0]);
            tssb_Perimeter.Text = sPerimeter;
            tssb_Perimeter.ToolTipText = sPerimeter;
            //On met en gras dans la liste le périmètre sélectionné.
            foreach (ToolStripMenuItem Item in tssb_Perimeter.DropDownItems)
            {
                Item.Font = new System.Drawing.Font("Tahoma", 8.25F);
                if (Item.Text == sPerimeter)
                    Item.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
            }
            switch(sPerimeter)
            {
                case "AIR": 
                    epPerimetre = EnumPerimetre.AIR;
                    break;
                case "BHS":
                    epPerimetre = EnumPerimetre.BHS;
                    InitializeBHS();
                    break;
                case "HUB":
                    epPerimetre = EnumPerimetre.HUB;
                    break;
                case "PAX":
                    epPerimetre = EnumPerimetre.PAX;
                    InitializePax();
                    break;
                case "TMS":
                    epPerimetre = EnumPerimetre.TMS;
                    InitializeBHS();
                    break;
                case "PKG":
                    epPerimetre = EnumPerimetre.PKG;
                    InitializePKG();
                    break;
            }
            ReinitInputTable();
            bHSTraceKeywordsToolStripMenuItem.Visible = bBHS && (epPerimetre == EnumPerimetre.BHS);
        }
        private void SetDelhiMode()
        {
            OverallTools.BagTraceAnalysis.SetDelhiMode();
            GestionDonneesHUB2SIM.setDelhiMode();
        }
        private void SetTrialMode()
        {
            GestionDonneesHUB2SIM.setTrialMode();
        }
        private void setSpecificMode()
        {
            GestionDonneesHUB2SIM.setSpecificMode();
            if (bRuntime)
            {
                newToolStripMenuItem.Visible = false;
                contextMenuAirport = null;
                treeView1.Nodes[0].ContextMenuStrip = null;
            }
        }
        private void setReporterMode()
        {
            GestionDonneesHUB2SIM.UpdateTables(OverallTools.ExternFunctions.getUserDirectoryForPax2sim() + "Reporter.dat");
        }

        #endregion

        #region ##############       AIRPORT

        #region Menu contextuel
        private void contextMenuAirport_Opening(object sender, CancelEventArgs e)
        {
            if (CurrentNode != treeView1.SelectedNode)
            {
                e.Cancel = true;
                return;
            }

            #region On recherche l'objet dans la liste des objets que l'on peut ajouter (qui font parti du périmètre)
            bool bFind = false;
            String sName = CurrentNode.Name;
            if (sName.EndsWith(" Group"))
                sName = sName.Remove(sName.IndexOf(" Group"));
            foreach (String[][] liste in ListeNomsObjets)
            {
                foreach (String[] liste2 in liste)
                {
                    foreach (String name in liste2)
                    {
                        if (name == sName)
                        {
                            bFind = true;
                            break;
                        }
                    }
                }
            }
            if (!bFind)
            {
                New.Enabled = false;
                Edit.Enabled = false;
                Delete.Enabled = false;
                tsmi_Properties.Enabled = false;
                return;
            }
            #endregion

            New.Enabled = true;
            Edit.Enabled = true;
            Delete.Enabled = true;
            tsmi_Properties.Enabled = false;
            if (OverallTools.FonctionUtiles.estPresentDansListe(CurrentNode.Name, PAX2SIM.ListeNomObjet))
            {
                int min = -1, max = -1;
                String ObjectType = ((TreeViewTag)CurrentNode.Tag).AirportObjectType;
                foreach (TreeNode node in CurrentNode.Parent.Nodes)
                {
                    if (((TreeViewTag)node.Tag).AirportObjectType != ObjectType)
                        continue;
                    if (min == -1)
                        min = ((TreeViewTag)node.Tag).Index;
                    if (min > ((TreeViewTag)node.Tag).Index)
                        min = ((TreeViewTag)node.Tag).Index;
                    if (max < ((TreeViewTag)node.Tag).Index)
                        max = ((TreeViewTag)node.Tag).Index;
                }
                if ((((TreeViewTag)CurrentNode.Tag).Index != min) && (((TreeViewTag)CurrentNode.Tag).Index != max))
                    Delete.Enabled = false;
                String[] resu = Prompt.SIM_Add_Edit_Elem_Airport.getAllowedObjects(CurrentNode, false, 0);
                New.Enabled = (resu != null);

            }
            else
            {
                if (CurrentNode.Name == sMainNodeName)
                {
                    String[] resu = Prompt.SIM_Add_Edit_Elem_Airport.getAllowedObjects(CurrentNode, false, 0);
                    New.Enabled = resu != null;//!(CurrentNode.Nodes.Count == GestionDonneesHUB2SIM.NbTerminaux);
                    Delete.Enabled = false;
                    Edit.Enabled = false;
                }
                else
                {
                    tsmi_Properties.Enabled = OverallTools.FonctionUtiles.estPresentDansListe(CurrentNode.Name, PAX2SIM.ListeNomObjetGroup);
                    //tsmi_Properties.Enabled = ((tsmi_Properties.Enabled) || (CurrentNode.Name == BHS));
                    int min = -1, max = -1;
                    foreach (TreeNode node in CurrentNode.Parent.Nodes)
                    {
                        if (CurrentNode.Name == node.Name)
                        {
                            if (min == -1)
                                min = ((TreeViewTag)node.Tag).Index;
                            if (min > ((TreeViewTag)node.Tag).Index)
                                min = ((TreeViewTag)node.Tag).Index;
                            if (max < ((TreeViewTag)node.Tag).Index)
                                max = ((TreeViewTag)node.Tag).Index;
                        }
                    }
                    if ((((TreeViewTag)CurrentNode.Tag).Index != min) && (((TreeViewTag)CurrentNode.Tag).Index != max))
                        Delete.Enabled = false;
                    String[] Objects = Prompt.SIM_Add_Edit_Elem_Airport.getAllowedObjects(CurrentNode, false, 0);
                    New.Enabled = (Objects != null);

                    if ((!New.Enabled) && (CurrentNode.Text.IndexOf("Group") != -1))
                        New.Enabled = true;

                }
            }
        }
        ///Création d'un nouvel objet
        private void New_Click(object sender, EventArgs e)
        {
            Prompt.SIM_Add_Edit_Elem_Airport AjoutElement = new Prompt.SIM_Add_Edit_Elem_Airport(CurrentNode, false);
            if (AjoutElement.ShowDialog() == DialogResult.Cancel)
                return;
            Prompt.SIM_Add_Edit_Elem_Airport.NewObjet obj = AjoutElement.getNouvelElement();

            treatmentNewObjects(obj.NewObjetType, obj.VS_ItemDec, obj.VI_From, obj.VI_To, obj.VS_GroupeDesc, obj.PointedNode);
            treeView1.SelectedNode = obj.PointedNode;
            obj.PointedNode.Expand();
            DonneesEnCours.setStructureAEteModifie();
            UpdateItineraryView();
            if (obj.NewObjetType == sBHSName)
            {
                if ((epPerimetre == EnumPerimetre.BHS) || (epPerimetre == EnumPerimetre.TMS))
                {
                    DonneesEnCours.UpdateBHSDirectory(treeView1.Nodes[0],/* treeView1.Nodes[1].Nodes[5]*/null, contextMenuInput);
                    DonneesEnCours.Update_FlightCategorie();
                    ReinitInputTable();
                }
            }
        }

        private void Edit_Click(object sender, EventArgs e)
        {
            if ((CurrentNode != null) && (CurrentNode.Name != sMainNodeName))
            {
                Prompt.SIM_Add_Edit_Elem_Airport edition = new Prompt.SIM_Add_Edit_Elem_Airport(CurrentNode, true);
                if (edition.ShowDialog() == DialogResult.OK)
                {
                    DonneesEnCours.setStructureAEteModifie();
                    UpdateItineraryView();
                }
            }
        }

        private void Delete_Click(object sender, EventArgs e)
        {
            if ((CurrentNode != null) && (CurrentNode.Name != sMainNodeName))
            {
                if (MessageBox.Show("Deleting object will affect the tables. Are you sure that you want to delete this object ?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                {
                    DonneesEnCours.setStructureAEteModifie();
                    if ((CurrentNode.Parent.Nodes.Count == 1) && (((TreeViewTag)CurrentNode.Parent.Tag).isGroup))
                    {
                        CurrentNode.Parent.Remove();
                    }
                    else
                    {
                        //bool wasBHS = ((TreeViewTag)CurrentNode.Tag).AirportObjectType == sBHSName;
                        CurrentNode.Remove();
                        //if (wasBHS)
                        //{
                        //if ((epPerimetre == EnumPerimetre.BHS)||(epPerimetre == EnumPerimetre.TMS))
                        DonneesEnCours.UpdateBHSDirectory(treeView1.Nodes[0], /*treeView1.Nodes[1].Nodes[5]*/null, contextMenuInput);
                        ReinitInputTable();
                        //}
                    }
                    UpdateItineraryView();
                    SelectNode(null);
                }
            }
        }

        private void tsmi_Properties_Click(object sender, EventArgs e)
        {
            TreeViewTag NodeTag = CheckCurrentNode();
            if ((NodeTag == null) || (!NodeTag.isAirportNode))
            {
                tsmi_Properties.Enabled = false;
                return;
            }

            if (OverallTools.FonctionUtiles.estPresentDansListe(NodeTag.AirportObjectType, ListeNomObjetGroup))
            {
                if (CurrentNode.Parent == null)
                    return;
                String sName = "L" + ((TreeViewTag)CurrentNode.Parent.Tag).Index.ToString();


                if (CurrentNode.Parent.Parent == null)
                    return;
                sName = "T" + ((TreeViewTag)CurrentNode.Parent.Parent.Tag).Index.ToString() + sName;

                sName += "_" + NodeTag.AirportObjectType + " " + NodeTag.Index;

                // << Task #8731 Pax2Sim - Adapt the ProcessAssistant to include the new time distribution
                //Obtain the Groups+descriptions dictionary
                Dictionary<String, String> groupsWithDescriptionsDictionary = ProcessFlowServices.getAllGroupDescriptions(this);
                string description = "";
                if (groupsWithDescriptionsDictionary.ContainsKey(sName))
                    description = groupsWithDescriptionsDictionary[sName];

                // >> Complex assistant for Airport Structure Groups
                DataTable dtProcessTable = DonneesEnCours.getTable("Input", GlobalNames.Times_ProcessTableName);
                if (OverallTools.DataFunctions.indexLigne(dtProcessTable, 0, sName) != -1)
                {
                    DataTable dtOneOfTable = DonneesEnCours.getTable("Input", GlobalNames.OneofSpecificationTableName);
                    Assistant.SubForms.Process_SubForm pa = new SIMCORE_TOOL.Assistant.SubForms.Process_SubForm(dtProcessTable, dtOneOfTable, sName);

                    DataTable dtGroupQueues = DonneesEnCours.getTable("Input", GlobalNames.Group_QueuesName);
                    DataTable dtStationsQueues = DonneesEnCours.getTable("Input", GlobalNames.Capa_QueuesTableName);                    
                    DataTable dtStationsProcessCapacity = DonneesEnCours.getTable("Input", GlobalNames.capaProcessTableName);                    
                    Assistant.SubForms.Capacity_SubForm.Node nContent
                        = Assistant.SubForms.Capacity_SubForm.Node.GetTree(DonneesEnCours.getRacine(), dtGroupQueues, sName);
                    List<Form> lfForm = new List<Form>();
                    lfForm.Add(pa);
                    Assistant.SubForms.Capacity_SubForm csf_Capacity = null;
                    if (nContent != null)
                    {
                        csf_Capacity = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm(nContent, dtGroupQueues,
                            dtStationsQueues, true, dtStationsProcessCapacity);                        
                        lfForm.Add(csf_Capacity);
                    }
                    string title = "Edit " + sName;
                    if (description != "")
                        title += " (" + description + ")";
                    Assistant.Edit_Assistant ea = new Assistant.Edit_Assistant(title, lfForm);
                    if (ea.ShowDialog() == DialogResult.OK)
                    {
                        if (csf_Capacity != null)
                            csf_Capacity.Save();
                        if (pa != null)
                            pa.saveChanges();
                    }

                    if (csf_Capacity != null)
                        csf_Capacity.Dispose();
                    pa.Dispose();
                }
                ////Il s'agit d'un groupe
                //Assistant.Process_Assistant pa = new SIMCORE_TOOL.Assistant.Process_Assistant(DonneesEnCours.getTable("Input", "Times_ProcessTable"),
                //    DonneesEnCours.getTable("Input", "OneofSpecificationTable"), sName, groupsWithDescriptionsDictionary);
                //// >> Task #8731 Pax2Sim - Adapt the ProcessAssistant to include the new time distribution

                //pa.ShowDialog();
                //pa.Dispose();
                // << Complex assistant for Airport Structure Groups
            }
            else if (NodeTag.AirportObjectType == sBHSName)
            {
                //Il s'agit du BHS.
                if (CurrentNode.Parent == null)
                    return;
                int iTerminal = ((TreeViewTag)CurrentNode.Parent.Tag).Index;
                //Il faut ensuite sélectionner le node qui va bien.
            }
            else if (NodeTag.AirportObjectType == "")
            {
                //Il s'agit d'un check in collectors (Assistant non disponibles pour le moment).
            }
        }
        #endregion

        #region Gestion de la structure de l'aéroport.
        private static int IndexGroupe(TreeNode CurrentNode, String GroupType, String GroupName)
        {
            int index = 1;
            foreach (TreeNode tnLevelNode in CurrentNode.Nodes)
            {
                foreach (TreeNode node in tnLevelNode.Nodes)
                {
                    if (((TreeViewTag)node.Tag).AirportObjectType == GroupType)
                    {
                        index++;
                    }
                }
            }
            return index;
        }
        private void treatmentNewObjects(String NewObjectType, String NewObjectName, int NewObjectFrom, int NewObjectTo, String NewObjectGroupName, TreeNode PointedNode)
        {
            TreeNode Pere = PointedNode;
            bool CreationNouveauGroupe = true;
            if ((NewObjectType != sTerminalName) && (NewObjectType != sLevelName) &&
                !OverallTools.FonctionUtiles.estPresentDansListe(NewObjectType, ListeNomsObjetWithoutIndex))
            {
                if (OverallTools.FonctionUtiles.indexDansListe(NewObjectType, ListeNomsObjetsGroup) != -1)
                {
                    //Le nouvel objet n'est pas un terminal ou un level, ça veut donc dire qu'il va falloir
                    //chercher ou trouver un groupe où les insérer.
                    Pere = OverallTools.TreeViewFunctions.RechercheGroupe(PointedNode, NewObjectType + " Group", NewObjectGroupName);
                    if (Pere == null)
                    {
                        int index = IndexGroupe(PointedNode.Parent, NewObjectType + " Group", NewObjectGroupName);
                        Pere = OverallTools.TreeViewFunctions.CreationObjet(NewObjectType + " Group", index, NewObjectGroupName, contextMenuAirport);
                        OverallTools.TreeViewFunctions.AddSortedNode(PointedNode, Pere, true);
                        //PointedNode.Nodes.Add(Pere);
                    }
                    else
                    {
                        CreationNouveauGroupe = false;
                        //Si le groupe existait dèjà, alors c'est que les indices doivent suivre ceux dèjà présents dans 
                        //dans le groupe.
                        int max = 0;
                        foreach (TreeNode fils in Pere.Nodes)
                        {
                            if (((TreeViewTag)fils.Tag).Index > max)
                            {
                                max = ((TreeViewTag)fils.Tag).Index;
                            }
                        }
                        NewObjectTo = NewObjectFrom + max;
                        NewObjectFrom = max + 1;
                    }
                }
            }
            bool probleme = false;
            if (NewObjectFrom == 0)
                NewObjectTo = 0;
            //On ajoute désormais les nouveaux objets
            for (int i = NewObjectFrom; i <= NewObjectTo; i++)
            {
                /// Vérification de l'existence d'un Item identique dans le level
                if (!RechercheItem(NewObjectType, i, PointedNode))
                {
                    TreeNode NewObject = OverallTools.TreeViewFunctions.CreationObjet(NewObjectType, i, NewObjectName, contextMenuAirport);
                    OverallTools.TreeViewFunctions.AddSortedNode(Pere, NewObject, true);
                    //Pere.Nodes.Add(NewObject);
                }
                else
                {
                    probleme = true;
                    if (!CreationNouveauGroupe)
                    {
                        MessageBox.Show("The Creation stop because some of the new objects already exist.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }
                }
            }
            if (probleme)
            {
                MessageBox.Show("Some of the new objects already exist. They haven't been created", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }

        /// Recherche un groupe et retourne le noeud s'il existe
        private bool RechercheItem(string NewObjetType, int Index, TreeNode PointedNode)
        {
            if ((NewObjetType == sTerminalName) || (NewObjetType == sLevelName) || (NewObjetType == sBHSName))
            {
                //Parcours des éléments.
                foreach (TreeNode node in PointedNode.Nodes)
                {
                    if (((TreeViewTag)node.Tag).AirportObjectType == NewObjetType)
                    {
                        if (((TreeViewTag)node.Tag).Index == Index)
                        {
                            return true;
                        }
                    }
                }
            }
            else
            {
                //Parcours des éléments dans groupes présents dans les levels.
                foreach (TreeNode node in PointedNode.Nodes)
                {
                    foreach (TreeNode filsnode in node.Nodes)
                    {
                        if (((TreeViewTag)filsnode.Tag).AirportObjectType == NewObjetType)
                        {
                            if (((TreeViewTag)filsnode.Tag).Index == Index)
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
        #endregion

        #endregion

        #region ##############       GRAPHICS
        #region ToolBar

        #region Initialisation
        private void InitialisationToolBar()
        {
            //Suppression des commandes critiques.
            ArrayList suppressedCommands = new ArrayList();
            for (int i = 0; i < nChartCommandBarsManager1.Toolbars["Standard"].Commands.Count; i++)
            {
                if (nChartCommandBarsManager1.Toolbars["Standard"].Commands[i].Context != null)
                {
                    if (nChartCommandBarsManager1.Toolbars["Standard"].Commands[i].Context.Description.Equals(Model.SHOW_CHART_WIZARD)
                        || nChartCommandBarsManager1.Toolbars["Standard"].Commands[i].Context.Description.Equals(Model.PAGE_SETUP)
                        || nChartCommandBarsManager1.Toolbars["Standard"].Commands[i].Context.Description.Equals(Model.APPLY_STYLE_SHEET)
                        || nChartCommandBarsManager1.Toolbars["Standard"].Commands[i].Context.Description.Equals(Model.SHOW_CHART_EDITOR))
                    {
                        suppressedCommands.Add(nChartCommandBarsManager1.Toolbars["Standard"].Commands[i]);
                    }
                }
            }
            for (int i = 0; i < suppressedCommands.Count; i++)
                nChartCommandBarsManager1.Toolbars["Standard"].Commands.Remove((NCommand)suppressedCommands[i]);

            //nChartCommandBarsManager1.Toolbars["Standard"].Commands[4].Properties.Tag = ((CommandEventHandler)nChartCommandBarsManager1.Toolbars["Standard"].Commands[5].Click).Method;
            //nChartCommandBarsManager1.Toolbars["Standard"].Commands[4].Click -= nChartCommandBarsManager1.Toolbars["Standard"].Commands[4].Click;
            //MessageBox.Show(nChartCommandBarsManager1.Toolbars["Standard"].Commands[4].Context.Description);//= new CommandEventHandler(SelectVisualisation_Click);

            nChartCommandBarsManager1.Toolbars["Standard"].AllowReset = false;

            m_Header = new NLabel("");
            m_Header.Dock = DockStyle.Top;
            m_Header.ContentAlignment = ContentAlignment.MiddleCenter;
            m_Header.TextStyle.FontStyle.Name = "Arial";
            m_Header.TextStyle.FontStyle.EmSize = new NLength(13, NGraphicsUnit.Point);
            m_Header.TextStyle.FillStyle = new NGradientFillStyle(Color.LightBlue, Color.DarkBlue);
            m_Header.TextStyle.ShadowStyle.Type = ShadowType.LinearBlur;
            m_Header.TextStyle.BackplaneStyle.Visible = true;
            m_Header.TextStyle.BackplaneStyle.FillStyle.SetTransparencyPercent(50);
            m_Header.TextStyle.BorderStyle.Width = new NLength(1);
            m_Header.TextStyle.BorderStyle.Color = Color.Black;
            Graphique.Panels.Add(m_Header);

            m_legend = (NLegend)Graphique.Legends[0];
            m_legend.Mode = LegendMode.Manual;

            //Creation de la barre de commande personnalisée.
            toolbar = new NDockingToolbar();
            toolbar.Text = "Customize";

            //toolbar.Commands.Add(nChartCommandBarsManager1.Toolbars[0].Commands[nChartCommandBarsManager1.Toolbars[0].Commands.Count - 1].);

            nChartCommandBarsManager1.Toolbars.Add(toolbar);
            toolbar.ImageList = IL_ImagesToolbar;

            NCommand command = CreationCommand(0, "Show assistant", false);
            command.Click += new CommandEventHandler(ShowAssistant_Click);
            toolbar.Commands.Add(command);

            command = CreationCommand(1, "Track mouse", true);
            command.Click += new CommandEventHandler(TrackMouse_Click);
            toolbar.Commands.Add(command);
            //Enlever les commentaires suivant pour afficher la fenêtre de visuel.

            command = CreationCommand(2, "Axis Management", false);
            command.Click += new CommandEventHandler(ShowTools_Click);
            toolbar.Commands.Add(command);

            command = CreationCommand(3, "Change title style", false);
            command.Click += new CommandEventHandler(ChangeTitleStyle_Click);
            toolbar.Commands.Add(command);

            command = CreationCommand(4, "Show legend", true);
            command.Click += new CommandEventHandler(ShowLegend_Click);
            toolbar.Commands.Add(command);

            command = CreationCommand(6, "Delete chart", false);
            command.Click += new CommandEventHandler(DeleteChart_Click);
            toolbar.Commands.Add(command);

            //Add a new annotation
            AddNote = CreationCommand(7, "Add annotation", false);
            AddNote.Click += new CommandEventHandler(AddAnnotation_Click);
            toolbar.Commands.Add(AddNote);

            //Suppress an annotation
            SupprNote = CreationCommand(8, "Suppress annotation", false);
            SupprNote.Click += new CommandEventHandler(SuppressAnnotation_Click);
            toolbar.Commands.Add(SupprNote);

            //Display the Setpoint window and all the setpoints bound to the graphic
            command = CreationCommand(9, "Setpoint", false);
            command.Click += new CommandEventHandler(Setpoint_Click);
            toolbar.Commands.Add(command);


            //position
            CheckBox cbScrollbar = new CheckBox();
            cbScrollbar.Text = "Scrollbar";
            ToolStripControlHost checkBox = new ToolStripControlHost(cbScrollbar);

            NumericUpDown nm1 = new NumericUpDown();
            nm1.Minimum = 0;
            nm1.Maximum = 255;
            nm1.Value = 0;
            nm1.Increment = 1;
            ToolStripControlHost NUD1 = new ToolStripControlHost(nm1);

            NumericUpDown nm2 = new NumericUpDown();
            nm2.Minimum = 0;
            nm2.Maximum = 255;
            nm2.Value = 0;
            nm2.Increment = 1;
            ToolStripControlHost NUD2 = new ToolStripControlHost(nm2);

        }
        private NCommand CreationCommand(int imageIndex, String Name, bool checkedValue)
        {
            NCommand command = new NCommand();
            command.Properties.ImageIndex = imageIndex;
            command.Properties.Text = Name;
            command.Properties.TooltipHeading = true;
            command.Properties.TooltipImage = true;
            command.Properties.TooltipText = Name;
            command.Checked = checkedValue;
            return command;
        }
        #endregion

        #region Gestion des clics sur les objets de la toolbar
        void ShowTools_Click(object sender, CommandEventArgs e)
        {
            bAfficheOutils = !bAfficheOutils;
            ((NCommand)sender).Checked = bAfficheOutils;
            if (bAfficheOutils)
            {
                if (DonneesEnCours == null)
                    return;
                TreeViewTag Tag = CheckCurrentNode();
                if ((Tag == null) || (Tag.isDirectoryNode) || (Tag.isResultNode) || (Tag.isAirportNode))
                {
                    addChartToolStripMenuItem_Click(sender, e);
                    return;
                }
                else if (Tag.isChartNode)
                {
                    GraphicFilter gf = DonneesEnCours.GetGeneralGraphicFilter(CurrentNode.Name);
                    if (gf == null)
                        return;

                    OutilsGraphiques.initializeGraphicFilter(gf, Graphique, new RefreshGraphDelegate(RefreshGraph));
                    OutilsGraphiques.UpdateDisplay();
                    OutilsGraphiques.Show();
                }
                else
                {
                    GraphicFilter filtre = null;
                    if (Tag.IsExceptionNode)
                    {
                        //Si la table courante n'est pas présente dans le gestionnaire de données.
                        if (DonneesEnCours.getExceptionTable(Tag.ScenarioName, Tag.Name, Tag.ExceptionName) == null)
                        {
                            return;
                        }
                        SIMCORE_TOOL.DataManagement.NormalTable ntTmp = DonneesEnCours.GetExceptionTable(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);

                        filtre = ntTmp.GraphicDefinition;
                    }
                    else
                    {
                        //Si la table courante n'est pas présente dans le gestionnaire de données.
                        if (!DonneesEnCours.tableEstPresente(Tag.ScenarioName, CurrentNode.Name))
                        {
                            return;
                        }
                        filtre = DonneesEnCours.getGraphicFilter(Tag.ScenarioName, CurrentNode.Name);

                    }
                    if (filtre != null)
                    {
                        OutilsGraphiques.initializeGraphicFilter(filtre, Graphique, new RefreshGraphDelegate(RefreshGraph));
                        OutilsGraphiques.UpdateDisplay();
                        outilsGraphiques.Show();
                    }
                }
            }
            else
            {
                if (outilsGraphiques != null)
                {
                    outilsGraphiques.Hide();
                    outilsGraphiques = null;
                }
            }
        }

        public void HideVisu(bool bReleased)
        {
            if (toolbar == null)
                return;
            toolbar.Commands[3].Checked = false;
            if (bReleased)
            {
                bAfficheOutils = !bAfficheOutils;
                if (outilsGraphiques != null)
                {
                    outilsGraphiques.Hide();
                    outilsGraphiques = null;
                }
            }
        }


        void TrackMouse_Click(object sender, CommandEventArgs e)
        {
            ((NCommand)sender).Checked = !((NCommand)sender).Checked;
            if (((NCommand)sender).Checked)
            {
                Graphique.MouseMove -= Graphique_MouseMove;
            }
            else
            {
                Graphique.MouseMove += Graphique_MouseMove;
            }
        }

        void ShowAssistant_Click(Object sender, EventArgs e)
        {
            ShowAssistant_Click(sender, null);
        }

        void ShowAssistant_Click(object sender, CommandEventArgs e)
        {
            if (DonneesEnCours == null)
                return;
            TreeViewTag Tag = CheckCurrentNode();
            if ((Tag == null) || (Tag.isDirectoryNode) || (Tag.isResultNode) || (Tag.isAirportNode))
            {
                addChartToolStripMenuItem_Click(sender, e);
                return;
            }
            else if (Tag.isChartNode)
            {
                GraphicFilter gf = DonneesEnCours.GetGeneralGraphicFilter(CurrentNode.Name);

                if (gf == null)
                    return;

                Graph = new SIMCORE_TOOL.Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);

                if (Graph.ShowDialog() != DialogResult.OK)
                {
                    return;
                }
                gf = Graph.getFilter();
                if (gf == null)
                    return;
                DonneesEnCours.UpdateGeneralGraphicFilter(gf);
                afficherGraphique(gf.Name);
                return;
            }
            //Si la table courante n'est pas présente dans le gestionnaire de données.
            if (!DonneesEnCours.tableEstPresente(Tag.ScenarioName, Tag.Name) && (!(Tag.IsExceptionNode)))
            {
                return;
            }
            GraphicFilter filtre = null;
            DataTable dtTable = null;
            if (Tag.IsExceptionNode)
            {
                filtre = DonneesEnCours.getExceptionTableGraphicFilter(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                dtTable = DonneesEnCours.getExceptionTable(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
            }
            else
            {
                filtre = DonneesEnCours.getGraphicFilter(Tag.ScenarioName, Tag.Name);
                dtTable = DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name);
            }

            // << Task #8319 Pax2Sim - Pax2Sim - Charts - Title format: ScenarioName - ChartName
            Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(filtre, dtTable, imageList1, Tag.ScenarioName);
            // >> Task #8319 Pax2Sim - Pax2Sim - Charts - Title format: ScenarioName - ChartName
            
            if (Graph.ShowDialog() == DialogResult.Cancel)
                return;
            filtre = Graph.getFilter();
            if (Tag.IsExceptionNode)
            {
                DonneesEnCours.AddReplaceExceptionTableGraphicFilter(Tag.ScenarioName, Tag.Name, Tag.ExceptionName, filtre);
            }
            else
            {
                DonneesEnCours.AddReplaceGraphicFilter(Tag.ScenarioName, filtre);
            }
            afficherGraphique(dtTable, filtre);
        }

        void ChangeTitleStyle_Click(object sender, System.EventArgs e)
        {
            NTextStyle textStyle;

            if (Nevron.Editors.NTextStyleTypeEditor.Edit(m_Header.TextStyle, false, out textStyle))
            {
                if (textStyle != null)
                    m_Header.TextStyle = textStyle;
                Graphique.Refresh();
            }
        }

        void ShowLegend_Click(object sender, System.EventArgs e)
        {
            ((NCommand)sender).Checked = !((NCommand)sender).Checked;
            if (((NCommand)sender).Checked)
            {
                m_legend.Mode = LegendMode.Manual;
            }
            else
            {
                m_legend.Mode = LegendMode.Disabled;
            }
            Graphique.Refresh();
        }

        void DeleteChart_Click(object sender, System.EventArgs e)
        {
            if (DonneesEnCours == null)
                return;
            TreeViewTag Tag = CheckCurrentNode();
            if ((Tag == null) || (Tag.isDirectoryNode) || (Tag.isResultNode) || (Tag.isAirportNode))
            {
                return;
            }
            if (MessageBox.Show("Are you sure that you want to delete this chart ?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Information) != DialogResult.Yes)
                return;
            if (Tag.isChartNode)
            {
                deleteChartToolStripMenuItem_Click(sender, e);
            }
            else if (Tag.IsExceptionNode)
            {
                SIMCORE_TOOL.DataManagement.NormalTable ntTable = DonneesEnCours.GetExceptionTable(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                if (ntTable != null)
                {
                    ntTable.GraphicDefinition = null;
                    afficherGraphique((string)null, (string)null);
                }
            }
            else
            {
                DonneesEnCours.RemoveGraphicFilter(Tag.ScenarioName, Tag.Name);
                afficherGraphique((string)null, (string)null);
            }
        }

        void AddAnnotation_Click(object sender, System.EventArgs e)
        {
            ((NCommand)sender).Checked = !((NCommand)sender).Checked;
            if (((NCommand)sender).Checked)
            {
                this.isModeAnnotation = true;
                //If the AddAnnotation button is checked, uncheck the SuppressAnnotation button if checked

                if (SupprNote != null)
                    SupprNote.Checked = false;
                this.isSuppressModeAnnotation = false;
            }
            else
            {
                this.isModeAnnotation = false;
            }

        }

        void SuppressAnnotation_Click(object sender, System.EventArgs e)
        {
            ((NCommand)sender).Checked = !((NCommand)sender).Checked;
            if (((NCommand)sender).Checked)
            {
                this.isSuppressModeAnnotation = true;
                //If the SuppressAnnotation button is checked, uncheck the AddAnnotation button if checked
                if (AddNote != null)
                    AddNote.Checked = false;
                this.isModeAnnotation = false;
            }
            else
            {
                this.isSuppressModeAnnotation = false;
            }
        }

        void Setpoint_Click(object sender, System.EventArgs e)
        {

            if (DonneesEnCours == null)
                return;
            TreeViewTag Tag = CheckCurrentNode();
            if ((Tag == null) || (Tag.isDirectoryNode) || (Tag.isResultNode) || (Tag.isAirportNode))
            {
                addChartToolStripMenuItem_Click(sender, e);
                return;
            }

            GraphicFilter gf = null;
            if (Tag.isChartNode)
                gf = DonneesEnCours.GetGeneralGraphicFilter(Tag.Name);
            else if (Tag.IsExceptionNode)
                gf = DonneesEnCours.getExceptionTableGraphicFilter(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
            else
                gf = DonneesEnCours.getGraphicFilter(Tag.ScenarioName, CurrentNode.Name);
            if (gf == null)
                return;


            int setpointActivated = 0;

            setpointWindow = new Prompt.SIM_Setpoint();
            setpointWindow.Value = gf.getListSetPointValue();
            setpointWindow.Value2 = gf.getListSetPointValue2();
            setpointWindow.beginDateTime = gf.getListSetPointBDateTime();
            setpointWindow.endDateTime = gf.getListSetPointEDateTime();
            setpointWindow.listSetPointStrokeColor = gf.getListSetPointStrokeColor();
            setpointWindow.listSetPointFillColor = gf.getListSetPointFillColor();
            setpointWindow.isArea = gf.getListIsArea();
            setpointWindow.isActivated = gf.getListIsActivated();
            setpointWindow.axis = gf.getListSetPointAxis();
            setpointWindow.setPoints = gf.setPoints;    // >> Bug #15147 Charts Setpoints only work for first series chart location (frame)
            setpointWindow.DisplaySetpointList();

            // Retrieves the Abscissa type, useful for the setpoint use
            int iIndex = gf.getListAxeRepresentation().IndexOf("X");
            if (iIndex >= 0)
            {
                Prompt.SIM_Assistant_Creation_Graphics_Filters Graph;
                if (Tag.isChartNode)
                {
                    Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);
                    Graph.SetPointEdit_Click(sender, e);
                }
                else
                {
                    //Si la table courante n'est pas présente dans le gestionnaire de données.
                    if (!DonneesEnCours.tableEstPresente(Tag.ScenarioName, Tag.Name) && (!(Tag.IsExceptionNode)))
                    {
                        return;
                    }
                    GraphicFilter filtre = null;
                    DataTable dtTable = null;
                    if (Tag.IsExceptionNode)
                    {
                        filtre = DonneesEnCours.getExceptionTableGraphicFilter(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                        dtTable = DonneesEnCours.getExceptionTable(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                    }
                    else
                    {
                        filtre = DonneesEnCours.getGraphicFilter(Tag.ScenarioName, Tag.Name);
                        dtTable = DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name);
                    }

                    // << Task #8319 Pax2Sim - Pax2Sim - Charts - Title format: ScenarioName - ChartName
                    Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(filtre, dtTable, imageList1, Tag.ScenarioName);
                    // >> Task #8319 Pax2Sim - Pax2Sim - Charts - Title format: ScenarioName - ChartName
                }
                String type;
                DataTable dtTAble = Graph.testTypeColonne(out type);

                if (type == "DateTime")
                {
                    if (gf.getListColumnsNames() != null && iIndex < gf.getListColumnsNames().Count
                        && gf.getListColumnsNames()[iIndex] != null)
                    {
                        int dateTimeColumnIndex = dtTAble.Columns.IndexOf(gf.getListColumnsNames()[iIndex].ToString());
                        if (dateTimeColumnIndex != -1)  // >> Bug #13387 Default Analysis Charts X axis time range C#14
                        {
                            setpointWindow.DateTimeAbscissa = true;
                            setpointWindow.SetAbscissaDateLimits(OverallTools.DataFunctions
                                .getMinDate(dtTAble, dateTimeColumnIndex), OverallTools.DataFunctions.getMaxDate(dtTAble, dateTimeColumnIndex));
                        }
                        else
                        {
                            OverallTools.ExternFunctions.PrintLogFile("Pax2Sim SetPoint click event: Error while setting the time axis limits." 
                                + Environment.NewLine + "The column \"" + gf.getListColumnsNames()[iIndex] + "\" couldn't be found in the table \"" + dtTAble.TableName + "\".");
                        }
                    }
                }
                else
                    setpointWindow.DateTimeAbscissa = false;
            }
            else
            {
                  // >> Bug #15147 Charts Setpoints only work for first series chart location (frame) C#15
                DateTime minDate = DateTime.MaxValue;
                DateTime maxDate = DateTime.MinValue;
                if (allAbscissaColumnsAreDateTime(gf.getlistColumnsOrigin(), DonneesEnCours, out minDate, out maxDate)
                    && minDate != DateTime.MaxValue && maxDate != DateTime.MinValue)
                {
                    setpointWindow.DateTimeAbscissa = true;
                    setpointWindow.SetAbscissaDateLimits(minDate, maxDate);
                }
                else
                {
                    setpointWindow.DateTimeAbscissa = false;
                }
                // << Bug #15147 Charts Setpoints only work for first series chart location (frame) C#15
            }
            if (setpointWindow.ShowDialog() != DialogResult.OK)
                return;

            gf.setListSetPointValue(setpointWindow.Value);
            gf.setListSetPointValue2(setpointWindow.Value2);
            gf.setListSetPointBDateTime(setpointWindow.beginDateTime);
            gf.setListSetPointEDateTime(setpointWindow.endDateTime);
            gf.setListSetPointStrokeCouleurs(setpointWindow.listSetPointStrokeColor);
            gf.setListSetPointFillColor(setpointWindow.listSetPointFillColor);
            gf.setListIsArea(setpointWindow.isArea);
            gf.setListIsActivated(setpointWindow.isActivated);
            gf.setListSetPointAxis(setpointWindow.axis);
            gf.setPoints = setpointWindow.setPoints;    // >> Bug #15147 Charts Setpoints only work for first series chart location (frame)

            //If there is at least one activated setpoint, set the Setpoint Icon to checked state

            for (int j = 0; j < gf.getListSetPointValue().Count; j++)
            {
                if (gf.getListIsActivated()[j])
                {
                    ((NCommand)sender).Checked = true;
                    setpointActivated = 1;
                }
            }
            if (setpointActivated == 0)
                ((NCommand)sender).Checked = false;


            if (Tag.isChartNode)
            {
                DonneesEnCours.UpdateGeneralGraphicFilter(gf);
                afficherGraphique(gf.Name);
            }
            else
            {
                if (Tag.IsExceptionNode)
                {
                    SIMCORE_TOOL.DataManagement.NormalTable ntTable = DonneesEnCours.GetExceptionTable(Tag.ScenarioName, gf.Name, Tag.ExceptionName);
                    if (ntTable != null)
                    {
                        ntTable.GraphicDefinition = gf;
                        afficherGraphique(ntTable.Table, ntTable.GraphicDefinition);
                    }
                }
                else
                {
                    DonneesEnCours.AddReplaceGraphicFilter(Tag.ScenarioName, gf);
                    afficherGraphique(Tag.ScenarioName, CurrentNode.Name);
                }
            }
        }
        
        // >> Bug #15147 Charts Setpoints only work for first series chart location (frame) C#15
        public static bool allAbscissaColumnsAreDateTime(ArrayList columnOrigin, GestionDonneesHUB2SIM donnees,
            out DateTime minDate, out DateTime maxDate)
        {
            minDate = DateTime.MaxValue;
            maxDate = DateTime.MinValue;
            if (columnOrigin == null)
            {
                return false;
            }
            for (int i = 0; i < columnOrigin.Count; i++)
            {
                if (columnOrigin[i] != null && columnOrigin[i].GetType() == typeof(ColumnInformation))
                {
                    ColumnInformation ci = (ColumnInformation)columnOrigin[i];
                    string abscissaColumnName = ci.AbscissaColumnName;
                    string tableName = ci.TableName;
                    string scenarioName = ci.DataSet;
                    DataTable table = donnees.getTable(scenarioName, tableName);
                    if (table == null || table.Columns.IndexOf(abscissaColumnName) == -1)
                    {
                        return false;
                    }
                    DataColumn column = table.Columns[abscissaColumnName];
                    if (column.DataType != typeof(DateTime))
                    {
                        return false;
                    }
                    DateTime currentMinDate = OverallTools.DataFunctions.getMinDate(table, table.Columns.IndexOf(abscissaColumnName));
                    if (minDate > currentMinDate)
                    {
                        minDate = currentMinDate;
                    }
                    DateTime currentMaxDate = OverallTools.DataFunctions.getMaxDate(table, table.Columns.IndexOf(abscissaColumnName));
                    if (maxDate < currentMaxDate)
                    {
                        maxDate = currentMaxDate;
                    }
                }
            }
            return true;
        }
        // << Bug #15147 Charts Setpoints only work for first series chart location (frame) C#15

        void FormMouseClick(object sender, MouseEventArgs e)
        {
            if (nChartCommandBarsManager1.Toolbars["Tools"].Commands[3].Checked &&
                (nChartCommandBarsManager1.Toolbars["Customize"].Commands[7].Checked ||
                nChartCommandBarsManager1.Toolbars["Customize"].Commands[8].Checked))
            {
                nChartCommandBarsManager1.Toolbars["Tools"].Commands[0].PerformClick();
            }

            ///on vérifie que le bouton droit
            if (e.Button != MouseButtons.Left)
                return;

            TreeViewTag Tag = CheckCurrentNode();

            if ((Tag == null) || (Tag.isDirectoryNode) || (Tag.isResultNode) || (Tag.isAirportNode))
            {
                return;
            }


            GraphicFilter gf = null;
            if (Tag.isChartNode)
                gf = DonneesEnCours.GetGeneralGraphicFilter(Tag.Name);
            else if (Tag.IsExceptionNode)
                gf = DonneesEnCours.getExceptionTableGraphicFilter(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
            else
                gf = DonneesEnCours.getGraphicFilter(Tag.ScenarioName, CurrentNode.Name);
            if (gf == null)
                return;
            //HitTest Refers all the informations bound to the object clicked, the place...            
            NHitTestResult hitTest = Graphique.HitTest(e.X, e.Y);
            //If click on the graphic for adding annotation
            if (isModeAnnotation)
            {
                gf.SetAnnotation(Graphique, hitTest);   //Add the annotation

                AddNote.Checked = false;  //Uncheck the AddAnnotation button
                isModeAnnotation = false;
                Graphique.Refresh();
                return;
            }
            //If click on the graphic for suppressing annotation
            else if (isSuppressModeAnnotation)
            {
                gf.SuppressAnnotation(Graphique, hitTest);
                SupprNote.Checked = false;
                isSuppressModeAnnotation = false;
                if (Tag.isChartNode)
                    afficherGraphique(gf.Name);
                else
                {
                    if (Tag.IsExceptionNode)
                    {
                        SIMCORE_TOOL.DataManagement.NormalTable ntTable = DonneesEnCours.GetExceptionTable(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                        if (ntTable != null)
                        {
                            ntTable.GraphicDefinition = gf;
                            afficherGraphique(ntTable.Table, ntTable.GraphicDefinition);
                        }
                    }
                    else
                    {
                        afficherGraphique(Tag.ScenarioName, CurrentNode.Name);
                    }
                }
            }

        }

        #endregion
        #endregion

        #region Menus contextuels
        private void cmsCharts_Opening(object sender, CancelEventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {
                e.Cancel = true;
                return;
            }
            deleteChartToolStripMenuItem.Enabled = DonneesEnCours.GraphicFilterExist(CurrentNode.Name);
            if (CurrentNode.ImageIndex == 0)
                deleteChartToolStripMenuItem.Enabled = false;
            editChartToolStripMenuItem.Enabled = deleteChartToolStripMenuItem.Enabled;
            createFilterToolStripMenuItem2.Enabled = deleteChartToolStripMenuItem.Enabled;
            pasteFilterToolStripMenuItem1.Enabled = deleteChartToolStripMenuItem.Enabled;
            // >> Task #10375 Pax2Sim - Chart - copy chart definition does not exist at Global Charts & User Graphic level
            copyChartDefinitionToolStripMenuItem.Enabled = deleteChartToolStripMenuItem.Enabled;
            pasteChartDefinitionToolStripMenuItem.Enabled = deleteChartToolStripMenuItem.Enabled;
            // << Task #10375 Pax2Sim - Chart - copy chart definition does not exist at Global Charts & User Graphic level
            manageChartLinksToolStripMenuItem.Enabled = deleteChartToolStripMenuItem.Enabled;   // >> Task #13384 Report Tree-view C#37 (global chart links)

            // Ajout et/ou initialisation du menu pour les notes
            InitNoteTootStripMenu(sender as ContextMenuStrip);
            noteToolStripMenuItem.Enabled = deleteChartToolStripMenuItem.Enabled;
            UpdateNoteMenu(Tag.Name, Tag.ScenarioName, Tag.ExceptionName);
        }

        private void addChartToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Graph = new SIMCORE_TOOL.Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, null,imageList1);
            if (Graph.ShowDialog() != DialogResult.OK)
            {
                return;
            }
            GraphicFilter gf = Graph.getFilter();
            if (gf == null)
                return;
            DonneesEnCours.AddGeneralGraphicFilter(gf);
            Graphique.Charts.Clear();
            TreeViewTag Tag = TreeViewTag.getChartNode(gf.Name);
            TreeNode node = OverallTools.TreeViewFunctions.createBranch(gf.Name, gf.Name, Tag, cmsCharts);
            OverallTools.TreeViewFunctions.AddSortedNode(treeView1.Nodes[3], node);
            //treeView1.Nodes[3].Nodes.Add(node);
            treeView1.Nodes[3].Expand();
            SelectNode(node);
        }

        private void deleteChartToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            if (!Tag.isChartNode)
                return;
            if (MessageBox.Show("Are you sure that you want to delete this chart ?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                return;
            DonneesEnCours.DeleteGraphicFilter(CurrentNode.Name);
            CurrentNode.Parent.Nodes.Remove(CurrentNode);
            this.setChartList(DonneesEnCours, new EventHandler(AddChartClick));
        }


        /// <summary>
        /// The handler called when the user right click on a table in the treeview and tried to
        /// add the content to a chart.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void AddChartClick(object sender, EventArgs e)
        {
            TreeViewTag tt = CheckCurrentNode();
            GraphicFilter gf;
            ColumnInformation SelectedTable;
            Prompt.CompareChart cc;
            Prompt.SIM_Graphic_Association sga;

            if (tt == null)
                return;



            cc = new Prompt.CompareChart(DonneesEnCours, treeView1, imageList1, ((ToolStripMenuItem)sender));
            Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, cc.getGf(), imageList1);



            try
            {
                String s = ((ToolStripMenuItem)sender).OwnerItem.Text.ToString();
                if (s.CompareTo("One column") == 0)
                {
                    DataTable dt = DonneesEnCours.getTable(tt.ScenarioName, tt.Name);
                    if ((dt != null) && (dt.Columns.Count > 1))
                    {
                        SelectedTable = new ColumnInformation(tt.ScenarioName, tt.Name, dt.Columns[1].ColumnName, tt.ScenarioName + "." + tt.Name + "." + dt.Columns[1].ColumnName);
                    }
                    else
                    {
                        SelectedTable = new ColumnInformation(tt.ScenarioName, tt.Name, tt.Name, tt.ScenarioName + tt.Name);
                    }

                    if (((ToolStripMenuItem)sender).ToString().CompareTo("New") == 0)
                    {
                        gf = DonneesEnCours.GetGeneralGraphicFilter(tt.Name);
                        Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);
                        sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, SelectedTable, imageList1);
                        sga.changeLabel1();
                        //sga.setTableNameMode();
                        if (sga.ShowDialog() != DialogResult.OK)
                        {
                            return;
                        }
                        else
                        {

                            SelectedTable = new ColumnInformation(tt.ScenarioName,
                                sga.Column.TableName,
                                sga.Column.ColumnName,
                                sga.Column.AbscissaColumnName,
                                sga.Column.DisplayedName);
                            Graph.Add_Column_Click(SelectedTable);

                            if (Graph.ShowDialog() != DialogResult.OK)
                            {
                                return;
                            }
                            else
                            {
                                gf = Graph.getFilter();
                                if (gf == null)
                                    return;
                                MyShowAssistant(gf, (ToolStripMenuItem)sender, false);

                            }
                        }

                    }
                    else
                    {
                        // Add data to a chart that already exist
                        List<string> chartList = DonneesEnCours.GetGeneralGraphicFilter();

                        for (int i = 0; i < chartList.Count; i++)
                        {
                            if (((ToolStripMenuItem)sender).Text.CompareTo(chartList[i]) == 0)
                            {

                                gf = DonneesEnCours.GetGeneralGraphicFilter(chartList[i]);
                                Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);
                                sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, SelectedTable, imageList1);
                                sga.changeLabel1();
                                if (sga.ShowDialog() != DialogResult.OK)
                                {
                                    return;
                                }
                                else
                                {
                                    SelectedTable = new ColumnInformation(tt.ScenarioName,
                                        sga.Column.TableName,
                                        sga.Column.ColumnName,
                                        sga.Column.AbscissaColumnName,
                                        sga.Column.DisplayedName);
                                    Graph.Add_Column_Click(SelectedTable);

                                    if (Graph.ShowDialog() != DialogResult.OK)
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        gf = Graph.getFilter();
                                        if (gf == null)
                                            return;
                                        MyShowAssistant(gf, (ToolStripMenuItem)sender, true);
                                    }
                                }
                            }
                        }
                    }

                }
                else
                {
                    if (((ToolStripMenuItem)sender).ToString().CompareTo("New") == 0)
                    {
                        Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, null, imageList1);


                        //GraphicFilter gf2 = DonneesEnCours.getGraphicFilter(tt.Name);
                        DataTable dt = DonneesEnCours.getTable(tt.ScenarioName, tt.Name);
                        for (int i = 0; i < dt.Columns.Count; i++)
                        {
                            SelectedTable = new ColumnInformation(tt.ScenarioName, tt.Name, dt.Columns[i].ColumnName, tt.ScenarioName + tt.Name + dt.Columns[i].ColumnName);
                            Graph.Add_Column_Click(SelectedTable);
                        }

                        if (Graph.ShowDialog() != DialogResult.OK)
                        {
                            return;
                        }
                        gf = Graph.getFilter();
                        if (gf == null)
                            return;
                        MyShowAssistant(gf, (ToolStripMenuItem)sender, false);
                    }
                    else
                    {
                        gf = DonneesEnCours.GetGeneralGraphicFilter(((ToolStripMenuItem)sender).Text);
                        Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);


                        DataTable dt = DonneesEnCours.getTable(tt.ScenarioName, tt.Name);

                        for (int i = 0; i < dt.Columns.Count; i++)
                        {
                            SelectedTable = new ColumnInformation(tt.ScenarioName, tt.Name, dt.Columns[i].ColumnName, tt.ScenarioName + tt.Name + dt.Columns[i].ColumnName);
                            Graph.Add_Column_Click(SelectedTable);
                        }
                        //Being able to change the name of the table generated
                        //Graph.setTxt_FilterNameEnable();

                        if (Graph.ShowDialog() != DialogResult.OK)
                        {
                            return;
                        }
                        else
                        {
                            gf = Graph.getFilter();
                            if (gf == null)
                                return;
                            MyShowAssistant(gf, (ToolStripMenuItem)sender, true);
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                OverallTools.ExternFunctions.PrintLogFile("Except02029: " + this.GetType().ToString() + " throw an exception: " + exc.Message);
            }
        }

        /// <summary>
        /// Fonction appelée depuis la fenêtre itinerary et qui permet l'accès aux données d'un scénario, ou la création
        /// de graphiques
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void Draw_Assistant_Click(object sender, EventArgs e)
        {
            Prompt.CompareChart cc;
            GraphicFilter gf;
            ColumnInformation SelectedTable;
            Prompt.SIM_Graphic_Association sga;


            //We check the sender of the event. (The sender has to be a toolStripMenuItem, and contains in its tag
            //the name of the selected node.
            if ((sender == null) || (sender.GetType() != typeof(ToolStripMenuItem)))
                return;
            // If right click in table that is in the tree don't test the sender
            if (!TreeRightClick)
            {
                if ((((ToolStripMenuItem)sender).Tag == null) || (((ToolStripMenuItem)sender).Tag.GetType() != typeof(String)))
                    return;
            }


            List<String> ScenarioNames = DonneesEnCours.getScenariosReadyToSimulate();


            cc = new Prompt.CompareChart(DonneesEnCours, treeView1, imageList1, ((ToolStripMenuItem)sender));
            Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, cc.getGf(), imageList1);

            //SelectedTable = new ColumnInformation(alScenarioNames[0].ToString(), ((ToolStripMenuItem)sender).Tag.ToString(), ((ToolStripMenuItem)sender).Tag.ToString(), ((ToolStripMenuItem)sender).Tag.ToString());
            //            sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, SelectedTable, imageList1);


            if (((ToolStripMenuItem)sender).Text.CompareTo("Chart") == 0)
            {
                //The user just clicks on the Compare Button == Compare>>Chart
                if (cc.ShowDialog() == DialogResult.OK)
                {
                    gf = cc.getGf();
                    Graph = cc.getSacgf();
                    MyShowAssistant(gf, ((ToolStripMenuItem)sender), false);
                }
            }
            else if (((ToolStripMenuItem)sender).Text.CompareTo("Whole Table") == 0)
            {
                //The user just click on the Compare Button == Compare>>Whole Table
                cc.setWholeChartMode();
                if (cc.ShowDialog() == DialogResult.OK)
                {
                    gf = cc.getGf();
                    Graph = cc.getSacgf();
                    MyShowAssistant(gf, ((ToolStripMenuItem)sender), false);
                }
            }
            else if (((ToolStripMenuItem)sender).ToString().CompareTo("New") == 0)
            {
                //We are in the case of addition a data to a new Chart. Add to Chart>>Scenario x>>Global Chart>>New
                //CurrentNode

                // If the user did a right click on a tree table and AddToChart >> New



                SelectedTable = new ColumnInformation(((ToolStripMenuItem)sender).OwnerItem.OwnerItem.Text.ToString(), ((ToolStripMenuItem)sender).Tag.ToString(), ((ToolStripMenuItem)sender).Tag.ToString(), ((ToolStripMenuItem)sender).Tag.ToString());
                sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, SelectedTable, imageList1);

                gf = DonneesEnCours.GetGeneralGraphicFilter(((ToolStripMenuItem)sender).Tag.ToString());
                Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);
                sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, SelectedTable, imageList1);
                sga.changeLabel1();
                sga.setTableNameMode();
                if (sga.ShowDialog() != DialogResult.OK)
                {
                    return;
                }
                else
                {

                    SelectedTable = new ColumnInformation(((ToolStripMenuItem)sender).OwnerItem.OwnerItem.Text.ToString(),
                        sga.Column.TableName,
                        sga.Column.ColumnName,
                        sga.Column.AbscissaColumnName,
                        ((ToolStripMenuItem)sender).OwnerItem.OwnerItem.Text.ToString() + "." + sga.Column.DisplayedName);
                    Graph.Add_Column_Click(SelectedTable);

                    if (Graph.ShowDialog() != DialogResult.OK)
                    {
                        return;
                    }
                    else
                    {
                        gf = Graph.getFilter();
                        if (gf == null)
                            return;
                        MyShowAssistant(gf, (ToolStripMenuItem)sender, false);

                    }
                }

            }
            else
            {
                // Add data to a chart that already exist
                List<String> chartList = DonneesEnCours.GetGraphicFilter();

                for (int i = 0; i < chartList.Count; i++)
                {
                    if (((ToolStripMenuItem)sender).Text.CompareTo(chartList[i]) == 0)
                    {

                        gf = DonneesEnCours.GetGeneralGraphicFilter(chartList[i]);

                        Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);

                        SelectedTable = new ColumnInformation(((ToolStripMenuItem)sender).OwnerItem.OwnerItem.Text.ToString(), ((ToolStripMenuItem)sender).Tag.ToString(), ((ToolStripMenuItem)sender).Tag.ToString(), ((ToolStripMenuItem)sender).Tag.ToString());
                        sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, SelectedTable, imageList1);
                        sga.changeLabel1();
                        if (sga.ShowDialog() != DialogResult.OK)
                        {
                            return;
                        }
                        else
                        {
                            SelectedTable = new ColumnInformation(
                                ((ToolStripMenuItem)sender).OwnerItem.OwnerItem.Text.ToString(),
                                sga.Column.TableName,
                                sga.Column.ColumnName,
                                sga.Column.AbscissaColumnName,
                                ((ToolStripMenuItem)sender).OwnerItem.OwnerItem.Text.ToString() + sga.Column.TableName + sga.Column.AbscissaColumnName);
                            Graph.Add_Column_Click(SelectedTable);

                            if (Graph.ShowDialog() != DialogResult.OK)
                            {
                                return;
                            }
                            else
                            {
                                gf = Graph.getFilter();
                                if (gf == null)
                                    return;
                                MyShowAssistant(gf, (ToolStripMenuItem)sender, true);
                            }
                        }
                    }
                }

            }
            //We are in the case of accessing the results for the selected node.
            //We just have to navigate in the right position in the treeview.
            String ScenarioName = ((ToolStripMenuItem)sender).Text;
            String GroupName = (String)((ToolStripMenuItem)sender).Tag;
            TreeNode tnNode = OverallTools.TreeViewFunctions.RechercherNom(ScenarioName, treeView1.Nodes["Analysis"]);
            if (tnNode == null)
                return;
            TreeNode NewNode = OverallTools.TreeViewFunctions.RechercherNom(GroupName, tnNode);
            if (NewNode == null)
                return;
            treeView1.CollapseAll();
            SelectNode(null);
            SelectNode(NewNode);
            if (CurrentNode != null)
                CurrentNode.Expand();
            tabControl.SelectedIndex = 0;
            if (TreeRightClick)
                TreeRightClick = false;
        }


        void MyShowAssistant(GraphicFilter gf, ToolStripMenuItem sender, Boolean ChartEdition)
        {
            if (DonneesEnCours == null)
                return;

            if (!ChartEdition)
            {
                DonneesEnCours.AddGeneralGraphicFilter(gf);
                Graphique.Charts.Clear();
                Tag = TreeViewTag.getChartNode(gf.Name);
                TreeNode node = OverallTools.TreeViewFunctions.createBranch(gf.Name, gf.Name, Tag, cmsCharts);
                OverallTools.TreeViewFunctions.AddSortedNode(treeView1.Nodes[3], node);
                treeView1.Nodes[3].Expand();
                SelectNode(node);
            }
            DonneesEnCours.UpdateGeneralGraphicFilter(gf);
            afficherGraphique(gf.Name);
            return;
        }

        private void MyaddChartToolStripMenuItem()
        {
            Graph = new SIMCORE_TOOL.Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, null, imageList1);
            if (Graph.ShowDialog() != DialogResult.OK)
            {
                return;
            }
            GraphicFilter gf = Graph.getFilter();
            if (gf == null)
                return;
            DonneesEnCours.AddGeneralGraphicFilter(gf);
            Graphique.Charts.Clear();
            TreeViewTag Tag = TreeViewTag.getChartNode(gf.Name);
            TreeNode node = OverallTools.TreeViewFunctions.createBranch(gf.Name, gf.Name, Tag, cmsCharts);
            OverallTools.TreeViewFunctions.AddSortedNode(treeView1.Nodes[3], node);
            //treeView1.Nodes[3].Nodes.Add(node);
            treeView1.Nodes[3].Expand();
            SelectNode(node);
        }
        //Gets the list of charts available and puts it in addToChartToolstripMenuItem when right click on a table situed in the tree
        private void setChartList(GestionDonneesHUB2SIM gdh_Data, EventHandler Draw_Assistant_Click)
        {
            ToolStripMenuItem tsChartChoice;
            ToolStripItem tsChart;

            ToolStripMenuItem tsFilterChoice;
            ToolStripItem tsFilter;

            List<String> ChartNames;
            TreeRightClick = true;

            addToChartTableToolStripMenuItem.DropDownItems.Clear();
            addToChartFilterToolStripMenuItem.DropDownItems.Clear();

            ChartNames = gdh_Data.GetGraphicFilter();
            addToChartTableToolStripMenuItem.DropDownItems.Add("One column");
            addToChartTableToolStripMenuItem.DropDownItems.Add("All columns");

            addToChartFilterToolStripMenuItem.DropDownItems.Add("One column");
            addToChartFilterToolStripMenuItem.DropDownItems.Add("All columns");

            for (int i = 0; i < 2; i++)
            {
                tsChart = addToChartTableToolStripMenuItem.DropDownItems[i];
                tsChartChoice = (ToolStripMenuItem)tsChart;

                tsFilter = addToChartFilterToolStripMenuItem.DropDownItems[i];
                tsFilterChoice = (ToolStripMenuItem)tsFilter;

                //Add a new
                tsChartChoice.DropDownItems.Add("New");
                tsChartChoice.DropDownItems[tsChartChoice.DropDownItems.Count - 1].Click += Draw_Assistant_Click;

                tsFilterChoice.DropDownItems.Add("New");
                tsFilterChoice.DropDownItems[tsFilterChoice.DropDownItems.Count - 1].Click += Draw_Assistant_Click;



                //Add a separator
                tsChartChoice.DropDownItems.Add(new ToolStripSeparator());
                tsChartChoice.DropDownItems[tsChartChoice.DropDownItems.Count - 1].Click += Draw_Assistant_Click;

                tsFilterChoice.DropDownItems.Add(new ToolStripSeparator());
                tsFilterChoice.DropDownItems[tsFilterChoice.DropDownItems.Count - 1].Click += Draw_Assistant_Click;



                //Add the charts
                foreach (String ChartName in ChartNames)
                {
                    tsChartChoice.DropDownItems.Add(ChartName);
                    tsChartChoice.DropDownItems[tsChartChoice.DropDownItems.Count - 1].Click += Draw_Assistant_Click;

                    tsFilterChoice.DropDownItems.Add(ChartName);
                    tsFilterChoice.DropDownItems[tsFilterChoice.DropDownItems.Count - 1].Click += Draw_Assistant_Click;

                }
            }
        }

        // >> Task #10375 Pax2Sim - Chart - copy chart definition does not exist at Global Charts & User Graphic level
        void copyGlobalChartDefinitionClick(object sender, EventArgs e)
        {            
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;

            String tableName = CurrentNode.Name;
            GraphicFilter gfGraphic = DonneesEnCours.GetGeneralGraphicFilter(tableName);
            if (gfGraphic == null)
            {
                MessageBox.Show("There is no graphic definition for the selected table.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            Clipboard.SetText(gfGraphic.ToString());
        }

        void pasteGlobalChartDefinitionClick(object sender, EventArgs e)
        {            
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;

            String tableName = CurrentNode.Name;
            DataTable table = DonneesEnCours.getTable(Tag.ScenarioName, tableName);
            if (table == null)
            {
                MessageBox.Show("The selected table is empty. Unable to paste the graphic definition.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            GraphicFilter oldGraphicFilter = DonneesEnCours.GetGeneralGraphicFilter(tableName);
            GraphicFilter gfFilter = getGraphicFilterFromClipboard();
            
            if (oldGraphicFilter.getListAxeRepresentation().Count == gfFilter.getListAxeRepresentation().Count)
            {
                ArrayList oldColumnsOrigin = oldGraphicFilter.getlistColumnsOrigin();
                ArrayList newColumnsOrigin = gfFilter.getlistColumnsOrigin();
                ArrayList newColumnNames = gfFilter.getListColumnsNames();

                for (int k = 0; k < oldGraphicFilter.getListAxeRepresentation().Count; k++)
                {                    
                    ColumnInformation oldColumnInfo = (ColumnInformation)oldColumnsOrigin[k];
                    ColumnInformation newColumnInfo = (ColumnInformation)newColumnsOrigin[k];

                    DataTable oldGraphSourceTable = DonneesEnCours.getTable(oldColumnInfo.DataSet, oldColumnInfo.TableName);
                    if (oldGraphSourceTable == null || !oldGraphSourceTable.Columns.Contains(newColumnInfo.ColumnName))
                    {
                        MessageBox.Show("The table \'" + oldColumnInfo.TableName + "\' from the \'" + oldColumnInfo.DataSet
                            + "\' dataset does not contain the column \'" + newColumnInfo.ColumnName + "\'." + Environment.NewLine
                            + "The operation is aborted.", "Warning", 
                            MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }

                    newColumnInfo.DataSet = oldColumnInfo.DataSet;
                    newColumnInfo.TableName = oldColumnInfo.TableName;
                    
                    if (newColumnNames.Count > k)
                    {
                        newColumnNames[k] = newColumnInfo.DataSet + "." + newColumnInfo.TableName + "." + newColumnInfo.ColumnName;
                        newColumnInfo.DisplayedName = newColumnInfo.DataSet + "." + newColumnInfo.TableName + "." + newColumnInfo.ColumnName;
                    }
                }
                gfFilter.Name = table.TableName;
                DonneesEnCours.UpdateGeneralGraphicFilter(gfFilter);
                afficherGraphique(gfFilter.Name);
            }
        }
        // << Task #10375 Pax2Sim - Chart - copy chart definition does not exist at Global Charts & User Graphic level
        #endregion

        #region Fonction pour l'affichage du graphique.

        private Boolean CheckGraphicArea(Boolean bShowMessage)
        {
            if (Graphique == null)
            {
                String sMessage = "Err00300 : An internal occurs. " + OverallTools.AssemblyActions.AssemblyTitle + " cannot continue displaying the charts. Please restart " + OverallTools.AssemblyActions.AssemblyTitle + " to fix the problem";
                try
                {
                    if (this.panel1.Controls.ContainsKey("Graphique"))
                    {
                        //this.Graphique = (NChartControl)this.panel1.Controls["Graphique"];
                        /*if (Graphique != null)
                        {
                            OverallTools.ExternFunctions.PrintLogFile(DateTime.Now.ToString() + " Warn00301 : The graphic area has problems. " + OverallTools.AssemblyActions.AssemblyTitle + " succeded in opening again this resource.");
                            return true;
                        }*/
                    }
                    OverallTools.ExternFunctions.PrintLogFile(DateTime.Now.ToString() + " " + sMessage);
                    if (statusStrip1.Text == sMessage)
                        return false;
                    statusStrip1.Text = sMessage;
                    if (bShowMessage)
                        MessageBox.Show(sMessage, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return false;
                }
                catch (Exception e)
                {
                    //OverallTools.ExternFunctions.PrintLogFile(DateTime.Now.ToString() + " Warn00302 : The graphic area has problems. \n" + e.ToString());
                    OverallTools.ExternFunctions.PrintLogFile("Warn00302: (The graphic area has problems.)" + this.GetType().ToString() + " throw an exception: " + e.Message);
                    return false;
                }

            }
            return true;
        }

        internal void afficherGraphique(String nomGraphique)
        {
            try
            {
                if (!CheckGraphicArea(true))
                    return;
                Graphique.Charts.Clear();
                GraphicFilter.EraseLegend(m_legend);
                GraphicFilter gf = DonneesEnCours.GetGeneralGraphicFilter(nomGraphique);
                if (gf == null)
                    return;
                m_Header.Text = gf.Title;
                m_legend = Graphique.Legends[0];
                DataTable dtGraphic;
                gf.CreateGraphicZone(Graphique, DonneesEnCours, m_legend, out dtGraphic);
                TreeViewTag tvtTag = CheckCurrentNode();
                ViewTable(dtGraphic, tvtTag);
                dataGridView1.DataSource = dtGraphic;
                if (Graphique.Charts.Count == 0)
                {

                    //MessageBox.Show("No columns available in data table ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    OverallTools.ExternFunctions.PrintLogFile("Error while trying to generate the chart " + nomGraphique + ". No columns available in data table.");
                    for (int i = 2; i < toolbar.Commands.Count; i++)

                        toolbar.Commands[i].Enabled = false;
                }

                else
                {
                    for (int i = 2; i < toolbar.Commands.Count; i++)
                        toolbar.Commands[i].Enabled = true;
                    gf.CreateLegend(m_legend);
                    //gf.CreateSetPoint(Graphique, Graphique.Charts[0]);    // >> Bug #15147 Charts Setpoints only work for first series chart location (frame)
                    gf.DisplayAnnotation(Graphique);
                }

                int setpointActivated = 0;
                for (int j = 0; j < gf.getListSetPointValue().Count; j++)
                    if (gf.getListIsActivated()[j])
                    {
                        toolbar.Commands[9].Checked = true;
                        setpointActivated = 1;
                    }
                if (setpointActivated == 0)
                    toolbar.Commands[9].Checked = false;

                m_Header.BringToFront();
                Graphique.Refresh();
                UpdateItineraryView();
            }

            catch (Exception e)
            {
                //OverallTools.ExternFunctions.PrintLogFile("Unable to show the graphic : " + e.Message);
                OverallTools.ExternFunctions.PrintLogFile("Except02047: (Unable to show the graphic) " + this.GetType().ToString() + " throw an exception: " + e.Message);
            }
        }
        internal void afficherGraphique(DataTable dtTable, GraphicFilter gfDefinition)
        {
            try
            {
                if (!CheckGraphicArea(true))
                    return;
                if ((dtTable == null) || (gfDefinition == null))
                {
                    Graphique.Charts.Clear();
                    Graphique.Refresh();
                    GraphicFilter.EraseLegend(m_legend);
                    if (m_Header != null)
                        m_Header.Text = "";
                    return;
                }

                if (Graphique != null)
                    Graphique.Charts.Clear();

                recreateGraphLabel();
                m_Header.Text = gfDefinition.Title;
                m_legend = Graphique.Legends[0];
                gfDefinition.CreateGraphicZone(Graphique, dtTable, m_legend);
                if (Graphique.Charts.Count == 0)
                {
                    //MessageBox.Show("No columns available in data table", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    OverallTools.ExternFunctions.PrintLogFile("Error while trying to generate the chart for the table " + dtTable.TableName
                        + ". No columns available in data table.");
                    toolbar.Commands[1].Enabled = true;
                    for (int i = 2; i < toolbar.Commands.Count; i++)
                        toolbar.Commands[i].Enabled = false;
                }
                else
                {
                    for (int i = 2; i < toolbar.Commands.Count; i++)
                        toolbar.Commands[i].Enabled = true;

                    gfDefinition.CreateLegend(m_legend);
                    //gfDefinition.CreateSetPoint(Graphique, Graphique.Charts[0]);  // >> Bug #15147 Charts Setpoints only work for first series chart location (frame)
                    gfDefinition.DisplayAnnotation(Graphique);
                }

                //If there is at least one activated setpoint, set the Setpoint Icon to checked state
                int setpointActivated = 0;
                for (int j = 0; j < gfDefinition.getListSetPointValue().Count; j++)
                    if (gfDefinition.getListIsActivated()[j])
                    {
                        toolbar.Commands[9].Checked = true;
                        setpointActivated = 1;
                    }
                if (setpointActivated == 0)
                    toolbar.Commands[9].Checked = false;


                m_Header.BringToFront();
                Graphique.Refresh();
                UpdateItineraryView();
                if (OutilsGraphiques.Visible == true)
                    OutilsGraphiques.initializeGraphicFilter(gfDefinition, Graphique, new RefreshGraphDelegate(RefreshGraph));
            }
            catch (Exception e)
            {
                //OverallTools.ExternFunctions.PrintLogFile(DateTime.Now.ToString() + " : Unable to show the graphic : " + e.Message);
                OverallTools.ExternFunctions.PrintLogFile("Except02055: (Unable to show the graphic) " + this.GetType().ToString() + " throw an exception: " + e.Message);
            }
        }
        // create a new object to hold the Graphic's Title
        internal void recreateGraphLabel()
        {
            Graphique.Panels.Remove(m_Header);
            m_Header = new NLabel("");
            m_Header.Dock = DockStyle.Top;
            m_Header.ContentAlignment = ContentAlignment.MiddleCenter;
            m_Header.TextStyle.FontStyle.Name = "Arial";
            m_Header.TextStyle.FontStyle.EmSize = new NLength(13, NGraphicsUnit.Point);
            m_Header.TextStyle.FillStyle = new NGradientFillStyle(Color.LightBlue, Color.DarkBlue);
            m_Header.TextStyle.ShadowStyle.Type = ShadowType.LinearBlur;
            m_Header.TextStyle.BackplaneStyle.Visible = true;
            m_Header.TextStyle.BackplaneStyle.FillStyle.SetTransparencyPercent(50);
            m_Header.TextStyle.BorderStyle.Width = new NLength(1);
            m_Header.TextStyle.BorderStyle.Color = Color.Black;
            Graphique.Panels.Add(m_Header);
        }

        internal void afficherGraphique(String dataset, String nomTable)
        {
            try
            {
                if (!CheckGraphicArea(true))
                    return;
                #region Vérification préalable avant l'affichage de n'importe quelle courbe.
                if (((DonneesEnCours == null) ||
                   (nomTable == null) || ((dataset == null) && (!DonneesEnCours.tableEstPresente(dataset, nomTable)))))
                {

                    Graphique.Charts.Clear();
                    Graphique.Refresh();
                    GraphicFilter.EraseLegend(m_legend);
                    if (m_Header != null)
                        m_Header.Text = "";
                    return;
                }
                #endregion

                GraphicFilter gf = DonneesEnCours.getGraphicFilter(dataset, nomTable);
                if (gf == null)
                    return;

                //If there is at least one activated setpoint, set the Setpoint Icon to checked state
                int setpointActivated = 0;
                for (int j = 0; j < gf.getListSetPointValue().Count; j++)
                {
                    if (gf.getListIsActivated()[j])
                    {
                        toolbar.Commands[9].Checked = true;
                        setpointActivated = 1;
                    }
                }
                if (setpointActivated == 0)
                    toolbar.Commands[9].Checked = false;



                DataTable dtTable = DonneesEnCours.getTable(dataset, nomTable);
                afficherGraphique(dtTable, gf);
            }
            catch (Exception e)
            {
                //OverallTools.ExternFunctions.PrintLogFile(DateTime.Now.ToString() + " : Unable to show the graphic : " + e.Message);
                OverallTools.ExternFunctions.PrintLogFile("Except02056: (Unable to show the graphic) " + this.GetType().ToString() + " throw an exception: " + e.Message);
            }
        }
        private void Graphique_MouseMove(object sender, MouseEventArgs e)
        {
            NHitTestResult hitTestResult = Graphique.HitTest(e.X, e.Y);
            if (hitTestResult.Chart == null) return;
            if (hitTestResult.Chart.Tag == null) return;
            if (hitTestResult.Chart.Tag.ToString() == "NPieChart")
            {
                NPieSeries m_pie = (NPieSeries)hitTestResult.Chart.Series[0];
                for (int y = 0; y < m_pie.Values.Count; y++)
                {
                    m_pie.FillStyles[y] = new NColorFillStyle(sequenceCouleurs[y % sequenceCouleurs.Length]);
                }
                if (hitTestResult.ChartElement == ChartElement.DataPoint)
                {
                    m_pie.FillStyles[hitTestResult.DataPointIndex] = new NColorFillStyle(Color.FloralWhite);
                }
                Graphique.Refresh();
            }
        }

        private void Graphique_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button != MouseButtons.Left)
                return;

            NHitTestResult hitTestResult = Graphique.HitTest(e.X, e.Y);
            if (hitTestResult.Chart == null) return;
            if (hitTestResult.Chart.Tag == null) return;
            if (hitTestResult.Chart.Tag.ToString() == "NPieChart")
            {
                NPieSeries m_pie = (NPieSeries)hitTestResult.Chart.Series[0];
                for (int i = 0; i < m_pie.Detachments.Count; i++)
                {
                    m_pie.Detachments[i] = 0.0f;
                }
                for (int y = 0; y < m_pie.Values.Count; y++)
                {
                    m_pie.FillStyles[y] = new NColorFillStyle(sequenceCouleurs[y % sequenceCouleurs.Length]);
                }
                m_pie.Detachments[hitTestResult.DataPointIndex] = 25.0f;

                Graphique.Refresh();
            }
        }
        internal delegate String RefreshGraphDelegate();

        internal virtual String RefreshGraph()
        {
            TreeViewTag tt = CheckCurrentNode();
            if (DonneesEnCours == null)
                return "";
            TreeViewTag Tag = CheckCurrentNode();
            if ((Tag == null) || (Tag.isDirectoryNode) || (Tag.isResultNode) || (Tag.isAirportNode))
            {
                return "";
            }
            else if (Tag.isChartNode)
            {
                GraphicFilter gf = DonneesEnCours.GetGeneralGraphicFilter(CurrentNode.Name);
                afficherGraphique(CurrentNode.Name);
            }
            else
            {
                GraphicFilter filtre;
                if (Tag.IsExceptionNode)
                {
                    SIMCORE_TOOL.DataManagement.NormalTable ntTable = DonneesEnCours.GetExceptionTable(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                    if (ntTable == null)
                        return "";
                    {
                        afficherGraphique(ntTable.Table, ntTable.GraphicDefinition);
                    }
                }
                else
                {
                    //Si la table courante n'est pas présente dans le gestionnaire de données.
                    if (!DonneesEnCours.tableEstPresente(Tag.ScenarioName, CurrentNode.Name))
                    {
                        return "";
                    }
                    filtre = DonneesEnCours.getGraphicFilter(Tag.ScenarioName, CurrentNode.Name);
                    if (filtre != null)
                    {
                        afficherGraphique(Tag.ScenarioName, CurrentNode.Name);
                    }
                }

            }
            return "";
        }
        #endregion

        #region Custom graphics for Scenario

        private DataTable CustomGraphic(String sScenarionName, bool bAutomod)
        {
            Classes.ParamScenario paParam = DonneesEnCours.GetScenario(sScenarionName);
            openFileDialog1.FileName = "";
            openFileDialog1.Filter = "All(*.*)|*.*";
            if ((paParam != null) && ((paParam.PaxSimulation) || (paParam.BHSSimulation)))
                openFileDialog1.InitialDirectory = paParam.ModelName;
            if (openFileDialog1.ShowDialog() != DialogResult.OK)
                return null;
            ArrayList alErrors = new ArrayList();
            DataTable table = null;
            if (!bAutomod)
            {
                table = new DataTable(Path.GetFileNameWithoutExtension(openFileDialog1.FileName));
                if (!OverallTools.FonctionUtiles.LectureFichier(table, openFileDialog1.FileName, "\t", alErrors))
                {
                    table = null;
                }
            }
            if (table == null)
                table = OverallTools.AutomodFiles.openAutomodGraphic(openFileDialog1.FileName, paParam.DateDebut, alErrors);

            if (table == null)
            {
                String Errors = " : ";
                if (alErrors.Count > 0)
                    Errors += (String)alErrors[alErrors.Count - 1];
                MessageBox.Show("An error occurred during the graphic import" + Errors, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;
            }
            return table;
        }
        private void addCustomGraphicToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;
            String ScenarioName = ((TreeViewTag)CurrentNode.Parent.Tag).Name;
            DataTable table = CustomGraphic(ScenarioName, true);
            if (table == null)
                return;
            Prompt.SIM_AutomodGraphic sagAssistant = new Prompt.SIM_AutomodGraphic(table);
            if (sagAssistant.ShowDialog() != DialogResult.OK)
                return;
            DonneesEnCours.AddReplaceAutomodGraphic(ScenarioName, table);
            if (OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(table.TableName, CurrentNode) == null)
            {
                Object Tag = TreeViewTag.getTableNode(ScenarioName, table.TableName);
                TreeNode newTable = OverallTools.TreeViewFunctions.createBranch(table.TableName, table.TableName, Tag, cms_UserGraphics);
                OverallTools.TreeViewFunctions.AddSortedNode(CurrentNode, newTable);
            }
        }

        private void addCustomGraphToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;
            String ScenarioName = ((TreeViewTag)CurrentNode.Parent.Tag).Name;
            DataTable table = CustomGraphic(ScenarioName, false);
            if (table == null)
                return;
            Prompt.SIM_AutomodGraphic sagAssistant = new Prompt.SIM_AutomodGraphic(table);
            if (sagAssistant.ShowDialog() != DialogResult.OK)
                return;
            DonneesEnCours.AddReplaceAutomodGraphic(ScenarioName, table);
            if (OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(table.TableName, CurrentNode) == null)
            {
                Object Tag = TreeViewTag.getTableNode(ScenarioName, table.TableName);
                TreeNode newTable = OverallTools.TreeViewFunctions.createBranch(table.TableName, table.TableName, Tag, cms_UserGraphics);
                OverallTools.TreeViewFunctions.AddSortedNode(CurrentNode, newTable);
                if (isCustomFPIGanttTable(table.TableName))
                {
                    updateInputFlightCategories(table);
                }
            }
        }

        private void refreshDataToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;
            String ScenarioName = ((TreeViewTag)CurrentNode.Parent.Parent.Tag).Name;
            DataTable table = CustomGraphic(ScenarioName, true);
            if (table == null)
                return;
            DataTable OldTable = DonneesEnCours.getTable(tvtTag.ScenarioName, tvtTag.Name);
            if (OldTable.Columns.Count != table.Columns.Count)
            {
                MessageBox.Show("The new graphic does not have the same number of columns than the other graphic.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            for (int i = 0; i < table.Columns.Count; i++)
            {
                table.Columns[i].ColumnName = OldTable.Columns[i].ColumnName;
            }
            table.TableName = tvtTag.Name;
            DonneesEnCours.AddReplaceTable(tvtTag.ScenarioName, table);
            DonneesEnCours.aEteModifiee(tvtTag.ScenarioName, table.TableName);
            ViewTable(table, tvtTag);
            afficherGraphique(tvtTag.ScenarioName, table.TableName);

        }

        private void editColumnsNameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;
            //String ScenarioName = ((TreeViewTag)CurrentNode.Parent.Parent.Tag).Name;

            DataTable OldTable = DonneesEnCours.getTable(tvtTag.ScenarioName, tvtTag.Name);
            if (OldTable == null)
            {
                return;
            }
            DataTable NewTable = OldTable.Copy();
            Prompt.SIM_AutomodGraphic sagAssistant = new Prompt.SIM_AutomodGraphic(NewTable);
            if (sagAssistant.ShowDialog() != DialogResult.OK)
                return;
            NewTable.AcceptChanges();
            if (NewTable.TableName != OldTable.TableName)
            {
                DonneesEnCours.DeleteAutomodGraphic(tvtTag.ScenarioName, tvtTag.Name);
                CurrentNode.Parent.Nodes.Remove(CurrentNode);
                tvtTag = TreeViewTag.getTableNode(tvtTag.ScenarioName, NewTable.TableName);
                TreeNode newTable = OverallTools.TreeViewFunctions.createBranch(NewTable.TableName, NewTable.TableName, Tag, cms_UserGraphics);
                OverallTools.TreeViewFunctions.AddSortedNode(CurrentNode, newTable);
            }
            else
            {
                DonneesEnCours.AddReplaceAutomodGraphic(tvtTag.ScenarioName, NewTable);
            }

            ViewTable(NewTable, tvtTag);
            afficherGraphique(tvtTag.ScenarioName, NewTable.TableName);
        }
        private void deleteToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;

            if (MessageBox.Show("Are you sure that you want to delete the user graphic '" + tvtTag.Name + "' ?", "Warning", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.OK)
            {
                DonneesEnCours.DeleteAutomodGraphic(tvtTag.ScenarioName, tvtTag.Name);
                CurrentNode.Parent.Nodes.Remove(CurrentNode);
            }

            /*TreeNode newTable = OverallTools.TreeViewFunctions.createBranch(table.TableName, table.TableName, Tag, contextMenuInput);
            OverallTools.TreeViewFunctions.AddSortedNode(CurrentNode, newTable);*/
        }
        #endregion


        internal GraphicFilter getCurrentGraphicFilter()
        {
            if (DonneesEnCours == null)
                return null;
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return null;
            DataManagement.NormalTable ntTmp = null;
            if ((tvtTag.isTableNode) || (tvtTag.isFilterNode) || (tvtTag.isResultNode))
            {
                ntTmp = DonneesEnCours.GetTable(tvtTag.ScenarioName, tvtTag.Name);
            }
            else if (tvtTag.IsExceptionNode)
            {
                ntTmp = DonneesEnCours.GetExceptionTable(tvtTag.ScenarioName, tvtTag.Name, tvtTag.ExceptionName);
            }
            if (ntTmp != null)
                return ntTmp.GraphicDefinition;
            return DonneesEnCours.getGraphicFilter(tvtTag.ScenarioName, tvtTag.Name);
        }
        #endregion

        #region ##############       FILTERS

        #region Menu contextuel
        private void createFilterToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //Création d'un filtre sur la table sélectionnée.
            TreeNode NoeudParent = CurrentNode;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            String nomTable = CurrentNode.Name;
            DataTable dtTable = DonneesEnCours.getTable(Tag.ScenarioName, nomTable);
            if ((dtTable==null) ||
                (dtTable.Columns.Count == 0))
            {
                MessageBox.Show("The selected table does not have any columns");
                return;
            }
            Prompt.SIM_Assistant_Creation_Filtres ajoutFiltre = new Prompt.SIM_Assistant_Creation_Filtres(null, DonneesEnCours.getTable(Tag.ScenarioName, nomTable), Tag.ScenarioName, DonneesEnCours);
            if (ajoutFiltre.ShowDialog() == DialogResult.Cancel)
            {
                //L'utilisateur a annulé sa création de filtre.
                return;
            }
            //On récupère le filtre.
            Filter filtre = ajoutFiltre.getFilter();
            TreeNode node = CreateFilter(filtre, CurrentNode);
            if(node != null)
                SelectNode(node);
        }
        private void ContextMenuFilterEdit_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            String nomTable = CurrentNode.Parent.Name;
            String dataset = Tag.ScenarioName;
            bool t = DonneesEnCours.tableEstPresente(dataset, nomTable);
            if ((!DonneesEnCours.tableEstPresente(dataset, nomTable)) ||
                (DonneesEnCours.getTable(dataset, nomTable).Columns.Count == 0))
            {
                MessageBox.Show("The selected table does not have any columns");
                return;
            }
            Filter filtre = DonneesEnCours.getFilter(dataset, CurrentNode.Name);

            Prompt.SIM_Assistant_Creation_Filtres ajoutFiltre = new SIMCORE_TOOL.Prompt.SIM_Assistant_Creation_Filtres(filtre, DonneesEnCours.getTable(dataset, nomTable), dataset, DonneesEnCours);
            if (ajoutFiltre.ShowDialog() == DialogResult.Cancel)
            {
                //L'utilisateur a annulé sa création de filtre.
                return;
            }
            ViewTable(null,null);
            filtre = ajoutFiltre.getFilter();
            DonneesEnCours.createReplaceFilter(dataset, filtre);
//            DonneesEnCours.aEteModifiee(dataset, filtre.Name);
            DonneesEnCours.HasBeenUpdated(dataset, filtre.Name);

            /*TreeViewTag tag = TreeViewTag.getFilterNode(dataset, filtre.Name, filtre.Blocked, filtre.copyTable);
            //OverallTools.TreeViewFunctions.chooseImageFiltre(filtre, out image, out imageselect);
            CurrentNode.Tag = tag;*/

            Tag.UpdateFilterImage(filtre.Blocked, filtre.copyTable);
            Tag.isCopyTable = filtre.copyTable;
            CurrentNode.ImageIndex = Tag.ImageIndex;
            CurrentNode.SelectedImageIndex = Tag.SelectedImageIndex;
            TreeNode select = CurrentNode;
            SelectNode(null);
            SelectNode(select);
        }

        private void ContextMenuFilterRemove_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            if (MessageBox.Show("Are you sure that you want to delete the \""+Tag.Name+"\" filter ?", "Warning", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.Cancel)
                return;
            String dataset =Tag.ScenarioName;
            TreeNode parent = CurrentNode.Parent;
            supprimerEnfants(dataset, CurrentNode);
            DonneesEnCours.RemoveTable(dataset, CurrentNode.Name);
            parent.Nodes.Remove(CurrentNode);
            SelectNode(parent);
        }
        private void supprimerEnfants(String dataset, TreeNode node)
        {
            foreach (TreeNode enfant in node.Nodes)
            {
                if (node.Nodes.Count > 0)
                    supprimerEnfants(dataset, enfant);
                enfant.Nodes.Clear();
                DonneesEnCours.RemoveTable(dataset, enfant.Name);
            }
        }

        private void contextMenuFilterCopy_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            Filter fFiltre = DonneesEnCours.getFilter(Tag.ScenarioName, CurrentNode.Name);
            if (fFiltre != null)
            {
                GraphicFilter gfGraphic = DonneesEnCours.getGraphicFilter(Tag.ScenarioName, CurrentNode.Name);
                if (gfGraphic != null)
                    Clipboard.SetText(DonneesEnCours.getFilter(Tag.ScenarioName, CurrentNode.Name).ToString(gfGraphic));
                else
                    Clipboard.SetText(DonneesEnCours.getFilter(Tag.ScenarioName, CurrentNode.Name).ToString());
            }
        }
        private void contextMenuFilterPaste_Click(object sender, EventArgs e)
        {
            try
            {
                TreeViewTag Tag = CheckCurrentNode();
                if (Tag == null)
                    return;

                GraphicFilter gfGraphic;
                Filter filtre = getFilterFromClipboard(out gfGraphic);
                filtre.MotherTableName = CurrentNode.Name;
                if (!filtre.isValid(DonneesEnCours.getTable(Tag.ScenarioName, CurrentNode.Name)))
                {
                    MessageBox.Show("This filter cannot be applied to this Table.");
                    return;
                }
                Prompt.FilterName changeFilterName = new SIMCORE_TOOL.Prompt.FilterName(Tag.ScenarioName, filtre.Name, DonneesEnCours);
                if (changeFilterName.ShowDialog() == DialogResult.Cancel)
                    return;
                filtre.Name = changeFilterName.getName();
                if(gfGraphic!=null)
                    gfGraphic.Name = filtre.Name;
                CreateFilter(filtre, CurrentNode);
                if (gfGraphic != null)
                DonneesEnCours.AddReplaceGraphicFilter(Tag.ScenarioName, gfGraphic);
            }
            catch (Exception except)
            {
                OverallTools.ExternFunctions.PrintLogFile("Except02036: " + this.GetType().ToString() + " throw an exception: " + except.Message);
                MessageBox.Show("An error occurred when trying to paste filter.","Error",MessageBoxButtons.OK,MessageBoxIcon.Error);
            }
        }

        private void copyGraphicDefinitionToolStripMenuItem_Click(object sender, EventArgs e)
        {

            //Création d'un filtre sur la table sélectionnée.
            TreeNode NoeudParent = CurrentNode;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;

            String nomTable = CurrentNode.Name;
            GraphicFilter gfGraphic = DonneesEnCours.getGraphicFilter(Tag.ScenarioName, nomTable);
            if (gfGraphic == null)
            {
                MessageBox.Show("There is no graphic definition for the selected table.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            Clipboard.SetText(gfGraphic.ToString());
        }

        private void pasteGraphicDefinitionToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeNode NoeudParent = CurrentNode;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;

            String nomTable = CurrentNode.Name;
            DataTable dtTable = DonneesEnCours.getTable(Tag.ScenarioName, nomTable);
            if (dtTable == null)
            {
                MessageBox.Show("The selected table is empty. Unable to paste the graphic definition.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            GraphicFilter gfFilter = getGraphicFilterFromClipboard();
            gfFilter.Name = dtTable.TableName;
            DonneesEnCours.AddReplaceGraphicFilter(Tag.ScenarioName, gfFilter);
            afficherGraphique(Tag.ScenarioName, nomTable);
        }
        
        private Filter getFilterFromClipboard(out GraphicFilter gfGraphic)
        {
            gfGraphic = null;
            try
            {
                String filtreStr = Clipboard.GetText();
                if (filtreStr == null)
                    return null;
                return getFilterFromText(filtreStr, out gfGraphic);
            }
            catch //(Exception e)
            {
                //OverallTools.ExternFunctions.PrintLogFile(DateTime.Now.ToString() + " : Unable to paste the content of the clipboard : " + e.Message);
                //Console.WriteLine("Exception : " + e.Message);
            }
            return null;
        }
        private Filter getFilterFromText(String sText, out GraphicFilter gfGraphic)
        {
            gfGraphic = null;
            try
            {
                System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                doc.LoadXml(sText);
                Filter filtre = null;
                filtre = new Filter(doc.FirstChild);
                if (filtre.Formules.Count == 0)
                    return null;
                if (OverallTools.FonctionUtiles.hasNamedChild(doc.FirstChild, "GraphicFilter"))
                {
                    gfGraphic = new GraphicFilter(doc.FirstChild["GraphicFilter"]);
                }
                if ((bTrialVersion) && (filtre.copyTable))
                    return null;
                return filtre;
            }
            catch/* (Exception except)*/
            {

            }
            return null;
        }
        private GraphicFilter getGraphicFilterFromClipboard()
        {
            try
            {
                GraphicFilter gfGraphic = null;
                String filtreStr = Clipboard.GetText();
                if (filtreStr == null)
                    return null;
                System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                doc.LoadXml(filtreStr);
                gfGraphic = new GraphicFilter(doc.FirstChild);
                return gfGraphic;
            }
            catch //(Exception e)
            {
                //OverallTools.ExternFunctions.PrintLogFile(DateTime.Now.ToString() + " : Unable to paste the content of the clipboard : " + e.Message);
                //Console.WriteLine("Exception : " + e.Message);
            }
            return null;
        }

        private void ContextMenuFilter_Opening(object sender, CancelEventArgs e)
        {
            GraphicFilter gfGraphic;
            ContextMenuFilterPaste.Enabled = (getFilterFromClipboard(out gfGraphic) != null);
            pasteGraphicDefinitionToolStripMenuItem1.Enabled = (getGraphicFilterFromClipboard() != null);

            TreeNode NoeudParent = CurrentNode;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            copyGraphicDefinitionToolStripMenuItem1.Enabled = (DonneesEnCours.getGraphicFilter(Tag.ScenarioName,Tag.Name)!=null);

            DataManagement.NormalTable ntTable = DonneesEnCours.GetTable(Tag.ScenarioName, Tag.Name);
            if (ntTable != null)
            {
                List<String> lString = new List<string>();
                if (ntTable.isFilter)
                {
                    lString = DonneesEnCours.getValidTables(Tag.ScenarioName, ((DataManagement.IFilterTable)ntTable).Root.Name);
                }
                if (!lString.Contains(Tag.Name))
                {
                    UpdateMenu(ContextMenuFilter, SIMCORE_TOOL.DataManagement.ExceptionTable.ExceptionTableParameters.None);
                }
                else
                {
                    UpdateMenu(ContextMenuFilter, DonneesEnCours.GetExceptionParameters(Tag.ScenarioName, Tag.Name));
                }
            }
            // Ajout et/ou initialisation du menu pour les notes
            InitNoteTootStripMenu(sender as ContextMenuStrip);
            UpdateNoteMenu(Tag.Name, Tag.ScenarioName, Tag.ExceptionName);
            noteToolStripMenuItem.Enabled = true;

            // >> Task #10254 Pax2Sim - View statistics option
            TreeNode scenarioNode = getScenarioNode(CurrentNode);
            if (scenarioNode != null)
            {
                if (DonneesEnCours.ScenarioExist(scenarioNode.Name))                
                    viewFilterStatisticsToolStripRightClickMenuItem.Visible = true;                
                else                
                    viewFilterStatisticsToolStripRightClickMenuItem.Visible = false;                
            }
            // << Task #10254 Pax2Sim - View statistics option

            // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Task.2.            
            if (isTargetTableChild(CurrentNode))
            {
                if (CurrentNode.Name.Equals(TargetOverview.TARGET_OVERVIEW_TABLE_NAME))
                {
                    navigateToDeskFromFilterToolStripMenuItem.Visible = false;
                }
                else
                {                    
                    navigateToDeskFromFilterToolStripMenuItem.Visible = true;
                }
            }
            else
            {                
                navigateToDeskFromFilterToolStripMenuItem.Visible = false;
            }
            // << Task #16728 PAX2SIM Improvements (Recurring) C#30 Task.2.
            generateTextGanttFromFilterToolStripMenuItem.Visible = isCustomFPIGanttTable(CurrentNode.Name);  // >> Task #19522
            applyColorCodeOnFilterToolStripMenuItem.Visible = FlightPlanInformationToTextGantt.isFPITextGanttTable(CurrentNode.Name);
        }

        private void ContextMenuFilterCut_Click(object sender, EventArgs e)
        {
            contextMenuFilterCopy_Click(null, null);
            ContextMenuFilterRemove_Click(null, null);
        }

        private void createFilterToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            createFilterToolStripMenuItem_Click(sender, e);
        }

        private void pasteFilterToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            contextMenuFilterPaste_Click(sender, e);
        }

        #endregion

        #region Filters functions


        private TreeNode CreateFilter(Filter filtre, TreeNode NoeudParent)
        {
            return CreateFilter(filtre, NoeudParent, false);
        }
        private TreeNode CreateFilter(Filter filtre, TreeNode NoeudParent, bool bChargement)
        {
            if (!bChargement)//On est en mode chargement, le filtre est déjà présent dans la base de données.
            {
                if ((NoeudParent != null) && (NoeudParent.Tag != null) && (NoeudParent.Tag.GetType() == typeof(TreeViewTag)))
                    //On ajoute le nouveau filtre à la base de données
                    DonneesEnCours.createReplaceFilter(((TreeViewTag)NoeudParent.Tag).ScenarioName, filtre);
            }
            if (DonneesEnCours.getFilter(((TreeViewTag)NoeudParent.Tag).ScenarioName, filtre.Name) == null)
                return null;

            //On choisi l'image qui devra apparaître dans le treeview
            TreeViewTag Tag = TreeViewTag.getFilterNode(((TreeViewTag)NoeudParent.Tag).ScenarioName, filtre.Name, filtre.Blocked, filtre.copyTable);
            TreeNode nouveauFiltre = OverallTools.TreeViewFunctions.createBranch(filtre.Name, filtre.Name, Tag, ContextMenuFilter);
            OverallTools.TreeViewFunctions.AddSortedNode(NoeudParent, nouveauFiltre, true, true, false);
            //NoeudParent.Nodes.Add(nouveauFiltre);
            return nouveauFiltre;
        }

        /// <summary>
        /// Fonction that permits to add the filters contained in the \ref lsFilters to the actual
        /// tables contained in the \ref tnScenarioNode. it would look for the mother table first and then
        /// add the filter is this one is valid for the table.
        /// </summary>
        /// <param name="tnScenarioNode">Node that should contains all the tables on which the filters would be applied (not necessarly in that node but at leat in the children of that node)</param>
        /// <param name="lsFilters">List of filters that needs to be added to the scenario</param>
        private void UpdateFilters(TreeNode tnNode, List<String> lsFilters)
        {
            if (tnNode == null)
                return;
            if (tnNode.Tag == null)
                return;
            if (tnNode.Tag.GetType() != typeof(TreeViewTag))
                return;
            TreeViewTag Tag = (TreeViewTag)tnNode.Tag;
            GraphicFilter gfGraphic;
            try
            {
                foreach (String sFilter in lsFilters)
                {
                    Filter fFilter = getFilterFromText(sFilter, out gfGraphic);
                    if (fFilter == null)
                        continue;

                    TreeNode ntMother = OverallTools.TreeViewFunctions.RechercherNom(fFilter.MotherTableName, tnNode);
                    if (ntMother == null)
                        continue;
                    if (!fFilter.isValid(DonneesEnCours.getTable(Tag.Name, fFilter.MotherTableName)))
                        continue;

                    if (!ntMother.Nodes.ContainsKey(fFilter.Name))
                        CreateFilter(fFilter, ntMother);
                    else
                        DonneesEnCours.createReplaceFilter(Tag.ScenarioName, fFilter);
                }
            }
            catch (Exception except)
            {
                OverallTools.ExternFunctions.PrintLogFile("Except02073: " + this.GetType().ToString() + " throw an exception: " + except.Message);
            }

        }
        #endregion


        internal Filter getCurrentFilter()
        {
            if (DonneesEnCours == null)
                return null;
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return null;
            if (!tvtTag.isFilterNode)
                return null;
            return DonneesEnCours.getFilter(tvtTag.ScenarioName, tvtTag.Name);
        }
        #endregion

        #region ##############       TABLES

        #region # Toolbar

        /// <summary>
        /// Fonction qui permet d'exporter la table courante vers un document texte.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void enregistrerToolStripButton_Click(object sender, EventArgs e)
        {
            ///Validation du contenu de la cellule \ref ValidateCellContent() (si celle ci n'est pas valide, alors la fonction stoppe)
            if (!ValidateCellContent())
                return;
            if (CurrentNode == null)
                return;
            ///Récupération de la table courante \ref getCurrentTable()
            DataTable dtExportedTable = getCurrentTable();
            if (dtExportedTable == null)
            {
                MessageBox.Show("Error : The current table is not a valid table and can't be exported as an Excel file", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            saveFileDialog1.FileName = CurrentNode.Name + ".txt";
            saveFileDialog1.Filter = "Text file (*.txt)|*.txt|All (*.*)|*.*";
            ///Ouverture du formulaire pour demander à l'utilisateur où sauvegarder le fichier.
            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                String fichier = saveFileDialog1.FileName;
                ///Sauvegarde du fichier.
                OverallTools.FonctionUtiles.EcritureFichier(dtExportedTable, fichier, "\t", true);
            }
        }

        /// <summary>
        /// Fonction qui permet d'exporter la table courante vers un fichier Excel.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tsbExcel_Click(object sender, EventArgs e)
        {
            ///Validation du contenu de la cellule \ref ValidateCellContent() (si celle ci n'est pas valide, alors la fonction stoppe)
            if (!ValidateCellContent())
                return;
            ///Récupération de la table courante \ref getCurrentTable()
            DataTable dtExportedTable = getCurrentTable();
            if (dtExportedTable == null)
            {
                MessageBox.Show("Error : The current table is not a valid table and can't be exported as an Excel file", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            //saveFileDialog1.Filter = "Excel file(*.xls)|*.xls";
            saveFileDialog1.Filter = "Excel Worksheets|*.xlsx|Excel Worksheets|*.xls";
            saveFileDialog1.FileName = CurrentNode.Name;
            ///Ouverture du formulaire pour demander à l'utilisateur où sauvegarder le fichier.
            if (saveFileDialog1.ShowDialog() != DialogResult.OK)
                return;

            // >> Bug #13367 Liege allocation            
            SIMCORE_TOOL.Prompt.SIM_Chargement cht = null;
            if (!bDebug)
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                //cht.setChenillard = true;
                
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
            }
            OverallTools.ExternFunctions.PrintLogFile("Starting the Excel export.");
            ///Utilisation de la fonction \ref  OverallTools.FonctionUtiles.ExportToExcel() pour exporter la table vers Excel.
            String sResult = OverallTools.FonctionUtiles.ExportToExcel(
                new DataTable[] { dtExportedTable },
                new VisualisationMode[] { getCurrentModeVisualisation() }, saveFileDialog1.FileName, cht);
            OverallTools.ExternFunctions.PrintLogFile("Finishing the Excel export.");
            if (cht != null)
                cht.KillWindow();
            // << Bug #13367 Liege allocation

            if (sResult != "")
            {
                MessageBox.Show("A problem appeared during the process of saving the Excel file : " + sResult, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                string filePath = saveFileDialog1.FileName;
                if (filePath.LastIndexOf("\\") != -1)
                {
                    string directoryPath = filePath.Substring(0, filePath.LastIndexOf("\\"));
                    Process.Start(directoryPath);
                }
            }
        }

        /// <summary>
        /// Fonction qui permet de réduire la largeur de la totalité des colonnes de la table affichée à une taille proche d'un pixel.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CollapseAllColumn_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewColumn colonne in dataGridView1.Columns)
            {
                colonne.Width = colonne.MinimumWidth;
            }
        }

        /// <summary>
        /// Fonction qui permet de mettre à jour la largeur des colonnes en fonction du contenu de celles ci. (cela s'applique à toute la table).
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ExpandAll_Click(object sender, EventArgs e)
        {
            if (dataGridView1.Columns.Count > 0)
            {
                if (dataGridView1.Columns[0].Visible)
                {
                    dataGridView1.AutoResizeColumn(0, DataGridViewAutoSizeColumnMode.DisplayedCells);
                }
                for (int i = 1; i < dataGridView1.Columns.Count; i++)
                {
                    dataGridView1.AutoResizeColumn(i, DataGridViewAutoSizeColumnMode.DisplayedCells);
                }
            }
        }

        /// <summary>
        /// Fonction qui permet de mettre à jour la largeur des colonnes en fonction de la largeur de l'entete de celles ci. (cela s'applique à toute la table).
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ResizeAll_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < dataGridView1.Columns.Count; i++)
            {
                dataGridView1.AutoResizeColumn(i, DataGridViewAutoSizeColumnMode.ColumnHeader);
            }
        }

        private void MyPrintDocument_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            bool more = MyDataGridViewPrinter.DrawDataGridView(e.Graphics);
            if (more == true)
                e.HasMorePages = true;
        }

        /// <summary>
        /// Fonction qui permet d'imprimer la table courante.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void imprimerToolStripButton_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            if (CurrentNode == null)
                return;
            if (SetupPrinting())
                MyPrintDocument.Print();
        }

        /// <summary>
        /// Fonction pour configurer l'impression.
        /// </summary>
        /// <returns></returns>
        private bool SetupPrinting()
        {

            PrintDialog MyPrintDialog = new PrintDialog();
            MyPrintDialog.AllowCurrentPage = false;
            MyPrintDialog.AllowPrintToFile = false;
            MyPrintDialog.AllowSelection = false;
            MyPrintDialog.AllowSomePages = false;
            MyPrintDialog.PrintToFile = false;
            MyPrintDialog.ShowHelp = false;
            MyPrintDialog.ShowNetwork = false;

            if (MyPrintDialog.ShowDialog() != DialogResult.OK)
                return false;

            MyPrintDocument.DocumentName = "Table " + CurrentNode.Name;
            MyPrintDocument.PrinterSettings = MyPrintDialog.PrinterSettings;
            MyPrintDocument.DefaultPageSettings = MyPrintDialog.PrinterSettings.DefaultPageSettings;
            MyPrintDocument.DefaultPageSettings.Margins = new System.Drawing.Printing.Margins(40, 40, 40, 40);

            if (MessageBox.Show("Do you want the report to be centered on the page", "InvoiceManager - Center on Page", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                MyDataGridViewPrinter = new DataGridViewPrinter(dataGridView1, MyPrintDocument, true, true, "Customers", new Font("Tahoma", 18, FontStyle.Bold, GraphicsUnit.Point), Color.Black, true);
            else
                MyDataGridViewPrinter = new DataGridViewPrinter(dataGridView1, MyPrintDocument, false, true, "Customers", new Font("Tahoma", 18, FontStyle.Bold, GraphicsUnit.Point), Color.Black, true);

            return true;
        }

        /// <summary>
        /// Fonction pour avoir un aperçu de l'impression de la table.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void PrintPreview_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            if (CurrentNode == null)
                return;
            if (SetupPrinting())
            {
                PrintPreviewDialog MyPrintPreviewDialog = new PrintPreviewDialog();
                MyPrintPreviewDialog.Document = MyPrintDocument;
                MyPrintPreviewDialog.ShowDialog();
            }
        }

        /// <summary>
        /// Fonction appelée pour l'édition de la table contenue dans le datagridview.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tsb_Edit_Click(object sender, EventArgs e)
        {
            VisualisationMode mode = getCurrentModeVisualisation();
            if (mode == null)
                return;
            Filter filtre = getCurrentFilter();

            switch (mode.EditMode)
            {
                case VisualisationMode.EditModeEnum.Column:
                    if (mode.ColumnBlocked != null)
                    {
                        foreach (DataGridViewColumn colonne in dataGridView1.SelectedColumns)
                        {
                            foreach (int bloquee in mode.ColumnBlocked)
                            {
                                if (bloquee == colonne.Index)
                                {
                                    colonne.Selected = false;
                                }
                            }
                        }
                    }
                    if (dataGridView1.SelectedColumns.Count == 0)
                        break;
                    if (mode.AllowEditColumn)
                        editColumnToolStripMenuItem_Click(sender, e);
                    else if (mode.Modifiable)
                        editCellToolStripMenuItem_Click(sender, e);
                    break;
                case VisualisationMode.EditModeEnum.Cell:
                    if (mode.ColumnBlocked != null)
                    {
                        foreach (DataGridViewCell cell in dataGridView1.SelectedCells)
                        {
                            foreach (int bloquee in mode.ColumnBlocked)
                            {
                                if (bloquee == cell.ColumnIndex)
                                {
                                    cell.Selected = false;
                                    break;
                                }
                            }
                        }
                    }
                    if (dataGridView1.SelectedCells.Count == 0)
                        break;
                    if (mode.AllowEditColumn)
                        editColumnToolStripMenuItem_Click(sender, e);
                    else if (mode.Modifiable)
                        editCellToolStripMenuItem_Click(sender, e);
                    break;
                case VisualisationMode.EditModeEnum.Row:
                    if (mode.AllowEditRow)
                    {
                        if (dataGridView1.SelectedCells.Count == 0)
                            break;
                        editToolStripMenuItem_Click(sender, e);
                    }
                    else
                    {
                        if (!mode.Modifiable)
                            return;

                        if (mode.ColumnBlocked != null)
                        {
                            foreach (DataGridViewCell cell in dataGridView1.SelectedCells)
                            {
                                foreach (int bloquee in mode.ColumnBlocked)
                                {
                                    if (bloquee == cell.ColumnIndex)
                                    {
                                        cell.Selected = false;
                                        break;
                                    }
                                }
                            }
                        }
                        if (dataGridView1.SelectedCells.Count == 0)
                            break;
                        editCellToolStripMenuItem_Click(sender, e);
                    }
                    break;
            }
        }

        /// <summary>
        /// Fonction appelée lorsque l'utilisateur souhaite générer la table Opening CheckIn qui permet de définit manuellement les ouvertures 
        /// des Check In.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tsb_Allocate_CheckIn_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("This action will overwrite any content of this table. Do you want to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) == DialogResult.No)
                return;
            if (DonneesEnCours != null)
                DonneesEnCours.UpdateCheckInAllocation();
            ViewTable(null, null);
            TreeViewTag tvtTag = (TreeViewTag)CurrentNode.Tag;
            ViewTable(tvtTag.ScenarioName, tvtTag.Name, tvtTag);
        }

        #region Gestion des stats de table
        static Prompt.IgnoredLigne ilStatistics;
        internal void CloseStatistics()
        {
            if (ilStatistics == null)
                return;
            ilStatistics.Hide();
        }
        internal void UpdateStatistics()
        {
            if (ilStatistics == null)
                return;
            if (ilStatistics.Visible)
                viewStatisticsToolStripMenuItem_Click(null, null);
        }
                
        private void viewStatisticsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if ((dataGridView1.DataSource == null) ||
                (dataGridView1.DataSource.GetType() != typeof(DataTable)))
            {
                CloseStatistics();
                return;
            }
            DataTable dtTable = (DataTable)dataGridView1.DataSource;
            
            List<string> tableColumnNames = new List<string>();
            foreach (DataColumn column in dtTable.Columns)
            {
                tableColumnNames.Add(column.ColumnName);
            }
            List<int> selectedColumnIndexes = new List<int>();
            SIMCORE_TOOL.Prompt.Allocation.General.MultiSelectionPopUp multiSelector 
                = new SIMCORE_TOOL.Prompt.Allocation.General.MultiSelectionPopUp(tableColumnNames, new List<string>());
            if (multiSelector.ShowDialog() == DialogResult.OK)
            {
                foreach (string selectedColumnName in multiSelector.selectedItems)
                {
                    int selectedColumnIndex = dtTable.Columns.IndexOf(selectedColumnName);
                    if (selectedColumnIndex != -1)
                    {
                        selectedColumnIndexes.Add(selectedColumnIndex);
                    }
                }
            }
            else
            {
                CloseStatistics();
                return;
            }
            
            DataTable dtStats = null;
            // >> Task #10254 Pax2Sim - View statistics option C#19 - extended for all tables
            dtStats = OverallTools.DataFunctions.generateViewStatisticsTable(dtTable, selectedColumnIndexes, DonneesEnCours.Levels);

            if (dtStats == null)
            {
                CloseStatistics();
                return;
            }
            String sTitle = dtTable.TableName + " stats";
            if (ilStatistics == null)
                ilStatistics = new SIMCORE_TOOL.Prompt.IgnoredLigne(dtStats, sTitle);
            else
                ilStatistics.UpdateContent(dtStats, sTitle);
            ilStatistics.Show();
        }

        private void tsl_NumberRows_Click(object sender, EventArgs e)
        {
            cmsStatistics.Show(MousePosition);
        }
        #endregion

        #region Fonction lancée lorsque l'utilisateur clic sur le bouton valide.
        private void tsb_valid_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            String Value = tstb_Value.Text;
            bool bsValue = false;
            int iValue = 0;
            bool bIValue = false;
            Double dValue = 0;
            bool bdValue = false;
            bool bValue = false;
            bool bbValue = false;
            if (Value == "(Multiple)")
                return;
            if (dataGridView1.SelectedCells.Count == 0)
                return;
            if (!dataGridView1.SelectedCells[0].Visible)
                return;
            /*Gestion de la barre de progression.*/

            this.Enabled = false;
            Prompt.SIM_Chargement cht = null;
            ///Morceau de code qui permet de séparer le chargement de la visualisation.
            if ((!bDebug) && (dataGridView1.SelectedCells.Count > 500))
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);

                Thread.Sleep(100);
                cht.setFileNumber(dataGridView1.SelectedCells.Count);
            }


            dataGridView1.BeginEdit(true);
            for (int i = 0; i < dataGridView1.SelectedCells.Count; i++)
            {
                if (cht != null)
                {
                    cht.ChargementFichier(i.ToString());
                }
                if ((dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(String)) ||
                    dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(string))
                {

#if(NEWALLOCATIONSECU)
                    if ((CurrentNode.Name == GlobalNames.Alloc_PassportCheckTableName) ||
                        (CurrentNode.Name == GlobalNames.Alloc_SecurityCheckTableName) ||
                        (CurrentNode.Name == GlobalNames.Alloc_TransferDeskTableName)
                        || CurrentNode.Name == GlobalNames.Alloc_UserProcessCheckTableName) // << Task #7570 new Desk and extra information for Pax -Phase I B
                    {
                        //<< Task #7405 - new Desk and extra information for Pax                        
                        DataTable userAttributesTable = DonneesEnCours.getTable("Input", GlobalNames.sUserAttributesTableName);
                        int iExtraColumns = 0;
                        // << Task #9066 Pax2Sim - Peak FLows - BHS Inbounds Smooth/Instant
                        int nbOfNonUserAttributesColumns = 0;
                        // >> Task #9066 Pax2Sim - Peak FLows - BHS Inbounds Smooth/Instant
                        if (userAttributesTable != null)
                        {
                            // << Task #9066 Pax2Sim - Peak FLows - BHS Inbounds Smooth/Instant
                            foreach (DataRow dr in userAttributesTable.Rows)
                            {
                                String userAttribute = dr[GlobalNames.sUserAttributes_ColumnName].ToString();
                                if (GlobalNames.nonUserAttributesExceptionsList.Contains(userAttribute))
                                    nbOfNonUserAttributesColumns++;
                            }
                            iExtraColumns = userAttributesTable.Rows.Count - nbOfNonUserAttributesColumns;
                            //iExtraColumns = userAttributesTable.Rows.Count;
                            // >> Task #9066 Pax2Sim - Peak FLows - BHS Inbounds Smooth/Instant                            
                        }
                        //>> Task #7405 - new Desk and extra information for Pax
                        bsValue = OverallTools.DataFunctions.checkPassportNewFormat(Value, iExtraColumns);


#else
                    if ((CurrentNode.Name == "Alloc_PassportCheckTable") ||
                        (CurrentNode.Name == "Alloc_SecurityCheckTable"))
                    {
                        bsValue = OverallTools.DataFunctions.checkPassportValue(Value);
#endif
                        if (!bsValue)
                        {
                            if (cht != null)
                                cht.KillWindow();
                            this.Focus();
                            Thread.Sleep(10);
                            //DataColumn column = //((DataTable)dataGridView1.DataSource).Columns[e.ColumnIndex];
                            String msg = "Error : The data in the line '" + (dataGridView1.SelectedCells[i].RowIndex + 1).ToString() + "' and in the column '" + dataGridView1.SelectedCells[i].OwningColumn.Name + "' does not have a good format.";
#if(NEWALLOCATIONSECU)
                            msg += "\nThe syntax for each cells is :\"a;b;c;d;e;f;g\"\n\t\t- a : Number of opened desk in the group\n\t\t- b: Remaining time before STD for passenger to allow him to bypass the desk\n\t\t- c: Passport type of the passenger \n\t\t- d: Class of passenger\n\t\t- e: Allowed flight categories\n\t\t- f : Allowed airlines\n\t\t- g : Allowed flights";
#else
                            msg += "\nThe syntax for each cell is :\"x,y\"\n\t\t- x = (1: Local, 2 : Not local, 3 : Both)\n\t\t- y = Number of opened desks";
#endif
                            MessageBox.Show(msg, "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                            this.Enabled = true;
                            return;
                        }
                    }
                    if (bsValue)
                    {
                        dataGridView1.SelectedCells[i].Value = Value;
                    }
                }
                else if ((dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(Int32)) ||
                    dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(Int16) ||
                    dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(Int64) ||
                    dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(int))
                {
                    if (!bIValue)
                    {
                        if (!Int32.TryParse(Value, out iValue))
                        {
                            continue;
                        }
                        bIValue = true;
                    }
                    if (bIValue)
                    {
                        dataGridView1.SelectedCells[i].Value = iValue;
                    }
                }
                else if ((dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(Double)) ||
               dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(double))
                {
                    if (!bdValue)
                    {
                        if (!Double.TryParse(Value, out dValue))
                        {
                            continue;
                        }
                        bdValue = true;
                    }
                    if (bdValue)
                    {
                        dataGridView1.SelectedCells[i].Value = dValue;
                    }
                }
                else if ((dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(bool)) ||
            dataGridView1.SelectedCells[i].OwningColumn.ValueType == typeof(Boolean))
                {

                    if (!bbValue)
                    {
                        if (!Boolean.TryParse(Value, out bValue))
                        {
                            continue;
                        }
                        bbValue = true;
                    }
                    if (bbValue)
                    {
                        dataGridView1.SelectedCells[i].Value = bValue;
                    }
                }
            }
            if (cht != null)
                cht.KillWindow();
            this.Enabled = true;
            dataGridView1.EndEdit();
            dataGridView1.Refresh();
        }
        #endregion
        #endregion

        #region # TreeView Tables ContextMenu

        private void contextMenuInput_Opening(object sender, CancelEventArgs e)
        {
            GraphicFilter gfGraphic;
            InputContextMenuPasteFilter.Enabled = (getFilterFromClipboard(out gfGraphic) != null);
            pasteGraphicDefinitionToolStripMenuItem.Enabled = (getGraphicFilterFromClipboard() != null);
            EditTable.Enabled = ((CurrentNode != null) && ((CurrentNode.Name == GlobalNames.FPD_LoadFactorsTableName) ||
                (CurrentNode.Name == GlobalNames.FPA_LoadFactorsTableName) ||
                (CurrentNode.Name == GlobalNames.Transfer_ICTTableName) ||
                (CurrentNode.Name == GlobalNames.CI_ShowUpTableName) ||
                (CurrentNode.Name == GlobalNames.Parking_ShortStayTableName) ||
                (CurrentNode.Name == GlobalNames.Parking_LongStayTableName) ||
                ((CurrentNode.Name == GlobalNames.sParkingOccupationTimeName) && bPKG)||
                (CurrentNode.Name == GlobalNames.NbBagsTableName) ||
                (CurrentNode.Name == GlobalNames.NbVisitorsTableName) ||
                (CurrentNode.Name == GlobalNames.NbTrolleyTableName) ||
                (CurrentNode.Name == "Times_ProcessTable") ||
                (CurrentNode.Name == "ItineraryTable") ||
                (CurrentNode.Name == "OneofSpecificationTable") ||
                (CurrentNode.Name == "OCT_CITable") ||
                (CurrentNode.Name == "OCT_BaggageDropTable") ||   //baggDrop
                (CurrentNode.Name == "OCT_BoardGateTable") ||
                (CurrentNode.Name == "OCT_ArrivalGateTable") ||   //arrGate
                (CurrentNode.Name == "OCT_BaggageClaimTable") ||
                (CurrentNode.Name == "OCT_ParkingTable") ||
                (CurrentNode.Name == "OCT_ArrivalInfeedTable") ||   //arrInf
                (CurrentNode.Name == "OCT_RunwayTable") ||          //runway
                (CurrentNode.Name == "Alloc_PassportCheckTable") ||
                (CurrentNode.Name == "Alloc_SecurityCheckTable") ||
                (CurrentNode.Name == GlobalNames.Alloc_UserProcessCheckTableName) ||    // << Task #7570 new Desk and extra information for Pax -Phase I B
                (CurrentNode.Name == GlobalNames.capaProcessTableName) ||   // << Task #8759 Pax2Sim - Editor for Pax Process (Capacities) table
                (CurrentNode.Name == "Alloc_TransferDeskTable") ||
                (CurrentNode.Name == "Alloc_TransferDeskTable") ||
                (CurrentNode.Name == GlobalNames.Capa_QueuesTableName) ||
                (CurrentNode.Name == GlobalNames.Group_QueuesName) ||
                (CurrentNode.Name == GlobalNames.SegregationName) ||
                (CurrentNode.Name == GlobalNames.Animated_QueuesName)||
                (CurrentNode.Name == GlobalNames.ProcessScheduleName) ||
                (CurrentNode.Name == GlobalNames.FPLinksTableName) ||
                (CurrentNode.Name == GlobalNames.Transfer_FlightCategoryDitributionTableName) ||
                (CurrentNode.Name == GlobalNames.Transfer_TerminalDitributionTableName) ||
                (CurrentNode.Name == GlobalNames.sUserAttributesTableName) ||
                (CurrentNode.Name == GlobalNames.saturationParametersTableName) // << Task #9412 Pax2Sim - Scenario parameters files - Settings and OpeningOnSaturation
                ));
            //<< Task #7405 - new Desk and extra information for Pax
            if (CurrentNode != null && isUserAttributesTable(CurrentNode.Name))
                EditTable.Enabled = true;
            //>> Task #7405 - new Desk and extra information for Pax
            // << Task #9260 Pax2Sim - Static Analysis - EBS algorithm - EBS per Terminal
            if (CurrentNode != null)
            {
                if (GlobalNames.ebsRateTableNamesList.Contains(CurrentNode.Name)
                    || CurrentNode.Name.Equals(GlobalNames.numberOfPassengersTableName) // << Task #9536 Pax2Sim - table to specify direct the nb of different types of pax(orig, transf...)
                    || CurrentNode.Name.Equals(GlobalNames.numberOfBaggagesTableName)
                    || CurrentNode.Name.Equals(GlobalNames.USA_STANDARD_PARAMETERS_TABLE_NAME) // >> Task #9967 Pax2Sim - BNP development - Peak Flows - USA Standard parameters table 
                    || CurrentNode.Name.Equals(GlobalNames.parkingPrioritiesTableName)  // >> Bug #13367 Liege allocation
                    || CurrentNode.Name.Equals(GlobalNames.boardingGatesPrioritiesTableName))
                {
                    EditTable.Enabled = true;
                }
            }
            // >> Task #9260 Pax2Sim - Static Analysis - EBS algorithm - EBS per Terminal
            /*if(EditTable.Enabled)
                EditTable.bol*/
            if (!EditTable.Enabled && (CurrentNode != null))
                EditTable.Enabled = (CurrentNode.Text == "Mean Flows - Arrival Infeed") ||
                                    (CurrentNode.Text == "Mean Flows - Check In") ||
                                    (CurrentNode.Text == "Mean Flows - Transfer Infeed") ||
                                    (CurrentNode.Text == "General BHS Information") ||
                                    (CurrentNode.Text == "Make-Up (Open/Close Times)")||
                                    (CurrentNode.Text == "Check-In Collectors")||
                                    (CurrentNode.Text == "Check-In Routing")||
                                    (CurrentNode.Text == "Transfer Routing") ||
                                    (CurrentNode.Text == "HBS3 Routing") || 
                                    (CurrentNode.Text == "Arrival Containers") || 
                                    (CurrentNode.Text == "Flow Split") ||
                                    (CurrentNode.Text == "Process");
            TreeViewTag tvtTag = CheckCurrentNode();
            if ((tvtTag != null) && (tvtTag.ScenarioName == "Input")&&
                (DonneesEnCours.getTable("Input", CurrentNode.Name)!=null)&&
                (OverallTools.FonctionUtiles.indexDansListe(CurrentNode.Name ,GestionDonneesHUB2SIM.listeTable_FC)!=-1) &&
                (DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName).Rows.Count == 0))
                EditTable.Enabled = false;
            ImportTable.Enabled = getImportStatus();

            copyGraphicDefinitionToolStripMenuItem.Enabled = (DonneesEnCours.getGraphicFilter(tvtTag.ScenarioName, tvtTag.Name) != null);
            importFromExistingTableToolStripMenuItem.Enabled = ImportTable.Enabled;
            deleteTableToolStripMenuItem.Visible = false; 
            addToChartTableToolStripMenuItem.Visible = true;
            if ((tvtTag != null) && (tvtTag.ScenarioName == "Input"))
                deleteTableToolStripMenuItem.Visible = DonneesEnCours.isAllocatedTable(CurrentNode.Name);
            loadDefaultTableToolStripMenuItem.Enabled = OverallTools.FonctionUtiles.estPresentDansListe(CurrentNode.Name, GestionDonneesHUB2SIM.ListeTablesAvecDefault);

            UpdateMenu(contextMenuInput, DonneesEnCours.GetExceptionParameters(tvtTag.ScenarioName, tvtTag.Name));
 
            // Initialisation du menu pour les notes
            if (sender is ContextMenuStrip)
            {
                InitNoteTootStripMenu(sender as ContextMenuStrip);
                UpdateNoteMenu(tvtTag.Name, tvtTag.ScenarioName, tvtTag.ExceptionName);
                noteToolStripMenuItem.Enabled = true;
            }
            // >> Task #10156 Pax2Sim - Statistic dev - Target            
            TreeViewTag currentNodeTag = (TreeViewTag)CurrentNode.Tag;
            if (currentNodeTag != null 
                && (currentNodeTag.isResultNode 
                    || (currentNodeTag.isTableNode && currentNodeTag.Name.EndsWith(GlobalNames.BHS_STATS_TABLE_SUFFIX))
                    || (currentNodeTag.isTableNode && currentNodeTag.Name.StartsWith(GlobalNames.PAX_DISTRIBUTION_TABLE_PREFIX) 
                         && currentNodeTag.Name.EndsWith(GlobalNames.PAX_SUMMARY_DISTRIBUTION_TABLE_SUFFIX))
                    //|| (currentNodeTag.isTableNode && currentNodeTag.Name.StartsWith(EbsStatisticsGenerator.GLOBAL_EBS_SUMMARY_TABLE_NAME)) // >> Task #9171 Pax2Sim - Static Analysis - EBS algorithm - Throughputs C#5
                    ))
            {
                setTargetToolStripMenuItem.Visible = true;
            }
            else
            {
                setTargetToolStripMenuItem.Visible = false;
            }
            // << Task #10156 Pax2Sim - Statistic dev - Target

            // >> Task #10254 Pax2Sim - View statistics option
            TreeNode scenarioNode = getScenarioNode(CurrentNode);
            if (scenarioNode != null)
            {
                if (DonneesEnCours.ScenarioExist(scenarioNode.Name))
                {
                    viewStatisticsToolStripRightClickMenuItem.Visible = true;
                }
                else
                {
                    viewStatisticsToolStripRightClickMenuItem.Visible = false;
                }
            }
            // << Task #10254 Pax2Sim - View statistics option
            // >> Task #13880 Various UI improvements and fixes

            // << Task #13880 Various UI improvements and fixes
            if (isViewStatisticsTableChild(CurrentNode))
            {                
                EditTable.Enabled = false;
                deleteStatisticsToolStripMenuItem.Visible = true;
            }
            else
            {
                deleteStatisticsToolStripMenuItem.Visible = false;
            }
            // >> Task #10311 Pax2Sim - Statistic dev - Target - edit / delete target table
            if (isTargetTableChild(CurrentNode))
            {
                if (CurrentNode.Name.Equals(TargetOverview.TARGET_OVERVIEW_TABLE_NAME)) // >> Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table
                {
                    EditTable.Enabled = false;
                    deleteTargetTableToolStripMenuItem.Visible = false;
                    navigateToDeskFromTableToolStripMenuItem.Visible = false;
                }
                else
                {
                    EditTable.Enabled = true;
                    deleteTargetTableToolStripMenuItem.Visible = true;  // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Task.2.
                    navigateToDeskFromTableToolStripMenuItem.Visible = true;
                }
            }
            else
            {
                deleteTargetTableToolStripMenuItem.Visible = false;
                navigateToDeskFromTableToolStripMenuItem.Visible = false;
            }
            // << Task #10311 Pax2Sim - Statistic dev - Target - edit / delete target table
            
            // >> Task #10359 Pax2Sim - Counting functionality            
            if (CurrentNode.Parent != null)
            {
                currentNodeTag = (TreeViewTag)CurrentNode.Tag;
                TreeNode parentNode = CurrentNode.Parent;
                TreeViewTag parentNodeTag = (TreeViewTag)parentNode.Tag;

                if (currentNodeTag != null && parentNodeTag != null)
                {
                    if (parentNodeTag.isResultNode && currentNodeTag.isTableNode
                        && CurrentNode.Name != null && CurrentNode.Name.EndsWith(GlobalNames.IST_TABLE_SUFFIX))
                    {
                        setCountingParametersToolStripMenuItem.Enabled = true;
                        setCountingParametersToolStripMenuItem.Visible = true;
                    }
                    else
                    {
                        setCountingParametersToolStripMenuItem.Enabled = false;
                        setCountingParametersToolStripMenuItem.Visible = false;
                    }
                }
            }

            if (CountingTools.isCountingDirectoryChild(CurrentNode))
            {
                deleteCountResultTableToolStripMenuItem.Enabled = true;
                deleteCountResultTableToolStripMenuItem.Visible = true;
            }
            else
            {
                deleteCountResultTableToolStripMenuItem.Enabled = false;
                deleteCountResultTableToolStripMenuItem.Visible = false;
            }

            if (CountingTools.isCountResultChildTable(CurrentNode))
            {
                deleteISTCountedItemsTableToolStripMenuItem.Enabled = true;
                deleteISTCountedItemsTableToolStripMenuItem.Visible = true;
            }
            else
            {
                deleteISTCountedItemsTableToolStripMenuItem.Enabled = false;
                deleteISTCountedItemsTableToolStripMenuItem.Visible = false;
            }
            // << Task #10359 Pax2Sim - Counting functionality
            if (CurrentNode.Name == FPParametersTableConstants.TABLE_TECHNICAL_NAME)
            {
                EditTable.Enabled = true;
            }
            if (CurrentNode.Name == FlightGroupRulesEditor.FLIGHT_GROUP_RULES_TABLE_TECHNICAL_NAME
                || CurrentNode.Name == DeterministicTransferDistributionEditor.DETERMINISTIC_TRANSFER_DISTRIBUTION_TABLE_TECHNICAL_NAME)
            {
                EditTable.Enabled = true;
            }
            applyColorCodeOnGenericTableToolStripMenuItem.Visible = FlightPlanInformationToTextGantt.isFPITextGanttTable(CurrentNode.Name);
        }
        
        // >> Task #10254 Pax2Sim - View statistics option
        private void viesStatisticsToolStripRightClickMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null)
                return;

            TreeNode scenarioNode = getScenarioNode(CurrentNode);
            if (scenarioNode != null)
            {
                if (DonneesEnCours.ScenarioExist(scenarioNode.Name))
                {
                    if ((dataGridView1.DataSource != null) &&
                        (dataGridView1.DataSource.GetType() == typeof(DataTable)))
                    {
                        DataTable sourceTable = (DataTable)dataGridView1.DataSource;

                        // >> Task #10254 Pax2Sim - View statistics option C#14                        
                        List<string> tableColumnNames = new List<string>();
                        foreach (DataColumn column in sourceTable.Columns)
                        {
                            tableColumnNames.Add(column.ColumnName);
                        }
                        List<int> selectedColumnIndexes = new List<int>();
                        SIMCORE_TOOL.Prompt.Allocation.General.MultiSelectionPopUp multiSelector
                            = new SIMCORE_TOOL.Prompt.Allocation.General.MultiSelectionPopUp(tableColumnNames, new List<string>());
                        if (multiSelector.ShowDialog() == DialogResult.OK)
                        {
                            foreach (string selectedColumnName in multiSelector.selectedItems)
                            {
                                int selectedColumnIndex = sourceTable.Columns.IndexOf(selectedColumnName);
                                if (selectedColumnIndex != -1)
                                {
                                    selectedColumnIndexes.Add(selectedColumnIndex);
                                }
                            }
                        }
                        else
                        {
                            CloseStatistics();
                            return;
                        }
                        DataTable statsTable = null;
                        // >> Task #10254 Pax2Sim - View statistics option C#19 - extended for all tables
                        statsTable = OverallTools.DataFunctions.generateViewStatisticsTable(sourceTable, selectedColumnIndexes, DonneesEnCours.Levels);
                        
                        /*int[] columnIndexesList = new int[sourceTable.Columns.Count];
                        for (int i = 0; i < columnIndexesList.Length; i++)
                            columnIndexesList[i] = i;
                        DataTable statsTable = OverallTools.DataFunctions.GetStatTable(sourceTable, columnIndexesList);*/
                        // << Task #10254 Pax2Sim - View statistics option C#14

                        if (statsTable != null)
                        {                            
                            String viewStatsDirectoryName = GlobalNames.VIEW_STATS_DIRECTORY_NAME;
                            TreeNode viewStatsTreeNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(viewStatsDirectoryName, scenarioNode);

                            if (viewStatsTreeNode == null)
                            {
                                viewStatsTreeNode = OverallTools.TreeViewFunctions.createBranch(viewStatsDirectoryName, viewStatsDirectoryName,
                                                                                        TreeViewTag.getDirectoryNode(viewStatsDirectoryName), null);
                                scenarioNode.Nodes.Add(viewStatsTreeNode);
                            }

                            statsTable.TableName = CurrentNode.Name + GlobalNames.VIEW_STATS_TABLE_SUFFIX;
                            TreeNode viewStatsTableNode = MAJ_TableArbre(scenarioNode.Name, statsTable, viewStatsTreeNode, true, false);
                            if (viewStatsTableNode != null)
                                SelectNode(viewStatsTableNode);
                            
                        }
                    }
                }
            }
        }

        // >> Task #10254 Pax2Sim - View statistics option C#11 (update when reloading a scenario)
        public Dictionary<string, DataTable> getViewStatsTablesDictionary(TreeNode scenarioNode)
        {
            Dictionary<string, DataTable> viewStatsTables = new Dictionary<string, DataTable>();
            if (scenarioNode == null)
            {
                return viewStatsTables;
            }
            TreeNode viewStatsNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.VIEW_STATS_DIRECTORY_NAME, scenarioNode);
            if (viewStatsNode != null && viewStatsNode.Nodes != null)
            {
                foreach (TreeNode child in viewStatsNode.Nodes)
                {
                    DataTable viewStatsTable = DonneesEnCours.getTable(scenarioNode.Name, child.Name);
                    if (viewStatsTable != null)
                        viewStatsTables.Add(viewStatsTable.TableName, viewStatsTable.Copy());
                }
            }            
            return viewStatsTables;
        }

        public void updateViewStatsNode(TreeNode newScenarioNode, string oldScenarioName, Dictionary<string, DataTable> viewStatsTables,
            GestionDonneesHUB2SIM donnees, List<double> percentiles)
        {
            if (newScenarioNode == null || viewStatsTables == null)
            {
                return;
            }
            TreeNode viewStatsNewTreeNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.VIEW_STATS_DIRECTORY_NAME, newScenarioNode);
            if (viewStatsNewTreeNode == null)
            {
                viewStatsNewTreeNode = OverallTools.TreeViewFunctions.createBranch(GlobalNames.VIEW_STATS_DIRECTORY_NAME, GlobalNames.VIEW_STATS_DIRECTORY_NAME,
                                                                        TreeViewTag.getDirectoryNode(GlobalNames.VIEW_STATS_DIRECTORY_NAME), null);
                newScenarioNode.Nodes.Add(viewStatsNewTreeNode);
            }
            foreach (KeyValuePair<string, DataTable> pair in viewStatsTables)
            {
                string viewStatsTableName = pair.Key;
                if (!viewStatsTableName.Contains(GlobalNames.VIEW_STATS_TABLE_SUFFIX))
                {
                    OverallTools.ExternFunctions.PrintLogFile("Updating the View Statistics tables: Could not update \"" + viewStatsTableName + "\".");
                    continue;
                }
                string baseTableName = viewStatsTableName.Substring(0, viewStatsTableName.IndexOf(GlobalNames.VIEW_STATS_TABLE_SUFFIX));
                DataTable baseTable = donnees.getTable(oldScenarioName, baseTableName);
                if (baseTable != null)
                {
                    List<string> baseTableSelectedColumnNames = getBaseColumnNamesFromStatsTable(pair.Value, baseTableName);
                    List<int> selectedColumnIndexes = new List<int>();
                    foreach (string columnName in baseTableSelectedColumnNames)
                    {
                        if (baseTable.Columns.IndexOf(columnName) != -1)
                        {
                            selectedColumnIndexes.Add(baseTable.Columns.IndexOf(columnName));
                        }
                    }

                    DataTable newStatsTable = null;
                    // >> Task #10254 Pax2Sim - View statistics option C#19 - extended for all tables
                    newStatsTable = OverallTools.DataFunctions.generateViewStatisticsTable(baseTable, selectedColumnIndexes, percentiles.ToArray());
                    
                    if (newStatsTable != null)
                    {
                        newStatsTable.TableName = baseTable + GlobalNames.VIEW_STATS_TABLE_SUFFIX;
                        MAJ_TableArbre(newScenarioNode.Name, newStatsTable, viewStatsNewTreeNode, true, false);
                    }
                }
            }
        }

        private List<string> getBaseColumnNamesFromStatsTable(DataTable statsTable, string statsTableName)
        {
            List<string> columnNames = new List<string>();
            if (statsTable == null || statsTableName == null)
            {
                return columnNames;
            }
            int dataColumnIndex = statsTable.Columns.IndexOf(OverallTools.DataFunctions.STATS_TABLE_DATA_COLUMN_NAME);
            if (dataColumnIndex == -1)
            {
                return columnNames;
            }
            foreach (DataRow row in statsTable.Rows)
            {
                if (row[dataColumnIndex] == null)
                {
                    continue;
                }
                string data = row[dataColumnIndex].ToString();
                if (data.StartsWith(statsTableName))
                {
                    string columnName = data.Substring(statsTableName.Length + 1);
                    columnNames.Add(columnName);
                }
            }
            return columnNames;    
        }
        // << Task #10254 Pax2Sim - View statistics option C#11 (update when reloading a scenario)
        // << Task #10254 Pax2Sim - View statistics option

        // >> Task #10156 Pax2Sim - Statistic dev - Target        
        private void setTargetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null)
                return;

            if (nodeBelongsToPAXAnalysis(CurrentNode))
            {
                if (CurrentNode.Name.StartsWith(GlobalNames.PAX_DISTRIBUTION_TABLE_PREFIX)
                    && CurrentNode.Name.EndsWith(GlobalNames.PAX_SUMMARY_DISTRIBUTION_TABLE_SUFFIX))
                {
                    setPaxTimeDistributionTarget();
                }
                else
                {
                    setPAXTarget();
                }
            }
            else if (nodeBelongsToBHSAnalysis(CurrentNode))
                setBHSTarget();
        }

        private void setPaxTimeDistributionTarget()
        {
            TreeNode rootNode = getAirportReportsNode(CurrentNode);
            TreeNode scenarioNode = getScenarioNode(rootNode);

            if (scenarioNode == null || rootNode == null)
                return;
            DataTable summaryTable = DonneesEnCours.getTable(scenarioNode.Name, CurrentNode.Name);
            if (summaryTable == null)
                return;
            TargetAssistantBySummaryTable targetAssistant
                   = new TargetAssistantBySummaryTable(scenarioNode, DonneesEnCours, summaryTable);
            targetAssistant.ShowDialog();
            DataTable resultTable = targetAssistant.resultTable_;
            targetAssistant.Dispose();

            if (resultTable != null)
            {
                TreeNode tnTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.TARGET_DIRECTORY_NAME, rootNode);
                if (tnTarget == null)
                {
                    tnTarget = OverallTools.TreeViewFunctions.createBranch(GlobalNames.TARGET_DIRECTORY_NAME, GlobalNames.TARGET_DIRECTORY_NAME,
                        TreeViewTag.getDirectoryNode(GlobalNames.TARGET_DIRECTORY_NAME), null);
                    rootNode.Nodes.Add(tnTarget);
                }
                TreeNode targetResultNode = MAJ_TableArbre(scenarioNode.Name, resultTable, tnTarget, true, false);
                                
                DataTable overviewTable = TargetOverview.refreshTargetOverviewTable(CurrentNode, DonneesEnCours);
                if (tnTarget != null && overviewTable != null)
                {
                    MAJ_TableArbre(scenarioNode.Name, overviewTable, tnTarget, true, false);
                }
                
                if (targetResultNode != null)
                    SelectNode(targetResultNode);
            }
        }

        private void setPAXTarget()
        {
            if (CurrentNode.Text.Equals(GlobalNames.AIRPORT_REPORTS_NODE_NAME))
            {
                TreeNode scenarioNode = getScenarioNode(CurrentNode);

                if (scenarioNode != null)
                {
                    Dictionary<String, TreeNode> terminalsDictionary = new Dictionary<string, TreeNode>();
                    Dictionary<String, TreeNode> levelsDictionary = new Dictionary<string, TreeNode>();
                    Dictionary<String, TreeNode> groupsDictionary = new Dictionary<string, TreeNode>();
                    Dictionary<String, TreeNode> desksDictionary = new Dictionary<string, TreeNode>();

                    getProcessesDictionaries(CurrentNode, out terminalsDictionary,
                        out levelsDictionary, out groupsDictionary, out desksDictionary);

                    DataTable summaryTable = DonneesEnCours.getTable(scenarioNode.Name, CurrentNode.Name);

                    SetTargetAssistant setTargetAssistant
                        = new SetTargetAssistant(scenarioNode, terminalsDictionary, levelsDictionary,
                                                    groupsDictionary, desksDictionary, DonneesEnCours, summaryTable);
                    setTargetAssistant.ShowDialog();
                    DataTable resultTable = setTargetAssistant.resultTable_;
                    setTargetAssistant.Dispose();

                    if (resultTable != null)
                    {
                        String sTarget = GlobalNames.TARGET_DIRECTORY_NAME;
                        TreeNode tnTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(sTarget, CurrentNode);
                        if (tnTarget == null)
                        {
                            tnTarget = OverallTools.TreeViewFunctions.createBranch(sTarget, sTarget, TreeViewTag.getDirectoryNode(sTarget), null);
                            CurrentNode.Nodes.Add(tnTarget);
                        }
                        TreeNode targetResultNode = MAJ_TableArbre(scenarioNode.Name, resultTable, tnTarget, true, false);

                        // >> Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table
                        DataTable overviewTable = TargetOverview.refreshTargetOverviewTable(CurrentNode, DonneesEnCours);
                        if (tnTarget != null && overviewTable != null)
                        {
                            MAJ_TableArbre(scenarioNode.Name, overviewTable, tnTarget, true, false);
                        }
                        // << Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table

                        if (targetResultNode != null)
                            SelectNode(targetResultNode);
                    }
                }
            }
            else
            {
                TreeNode rootNode = getAirportReportsNode(CurrentNode);
                TreeNode scenarioNode = getScenarioNode(rootNode);

                if (scenarioNode != null && rootNode != null)
                {
                    Dictionary<String, TreeNode> terminalsDictionary = new Dictionary<string, TreeNode>();
                    Dictionary<String, TreeNode> levelsDictionary = new Dictionary<string, TreeNode>();
                    Dictionary<String, TreeNode> groupsDictionary = new Dictionary<string, TreeNode>();
                    Dictionary<String, TreeNode> desksDictionary = new Dictionary<string, TreeNode>();

                    getProcessesDictionaries(rootNode, out terminalsDictionary,
                        out levelsDictionary, out groupsDictionary, out desksDictionary);

                    DataTable summaryTable = DonneesEnCours.getTable(scenarioNode.Name, CurrentNode.Name);

                    SetTargetAssistant setTargetAssistant
                        = new SetTargetAssistant(scenarioNode, CurrentNode, terminalsDictionary, levelsDictionary,
                                                    groupsDictionary, desksDictionary, DonneesEnCours, summaryTable);
                    setTargetAssistant.ShowDialog();
                    DataTable resultTable = setTargetAssistant.resultTable_;
                    setTargetAssistant.Dispose();

                    if (resultTable != null)
                    {
                        String sTarget = GlobalNames.TARGET_DIRECTORY_NAME;
                        TreeNode tnTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(sTarget, rootNode);
                        if (tnTarget == null)
                        {
                            tnTarget = OverallTools.TreeViewFunctions.createBranch(sTarget, sTarget, TreeViewTag.getDirectoryNode(sTarget), null);
                            rootNode.Nodes.Add(tnTarget);
                        }
                        TreeNode targetResultNode = MAJ_TableArbre(scenarioNode.Name, resultTable, tnTarget, true, false);

                        // >> Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table
                        DataTable overviewTable = TargetOverview.refreshTargetOverviewTable(CurrentNode, DonneesEnCours);
                        if (tnTarget != null && overviewTable != null)
                        {
                            MAJ_TableArbre(scenarioNode.Name, overviewTable, tnTarget, true, false);
                        }
                        // << Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table

                        if (targetResultNode != null)
                            SelectNode(targetResultNode);
                    }
                }
            }
        }
        
        // >> Task #13390 Targets for BHS Analysis output tables
        private void setBHSTarget()
        {
            TreeNode bhsChildNode = getBaggageHandlingSystemNode(CurrentNode);
            TreeNode scenarioNode = getScenarioNode(bhsChildNode);

            if (scenarioNode != null && bhsChildNode != null)
            {
                DataTable summaryTable = DonneesEnCours.getTable(scenarioNode.Name, CurrentNode.Name);

                TargetAssistantBySummaryTable setBHSTargetAssistant
                    = new TargetAssistantBySummaryTable(scenarioNode, DonneesEnCours, summaryTable);
                setBHSTargetAssistant.ShowDialog();
                DataTable resultTable = setBHSTargetAssistant.resultTable_;
                setBHSTargetAssistant.Dispose();
                
                if (resultTable != null)
                {
                    String sTarget = GlobalNames.TARGET_DIRECTORY_NAME;
                    TreeNode tnTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(sTarget, bhsChildNode);
                    if (tnTarget == null)
                    {
                        tnTarget = OverallTools.TreeViewFunctions.createBranch(sTarget, sTarget, TreeViewTag.getDirectoryNode(sTarget), null);
                        bhsChildNode.Nodes.Add(tnTarget);
                    }
                    TreeNode targetResultNode = MAJ_TableArbre(scenarioNode.Name, resultTable, tnTarget, true, false);

                    // >> Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table
                    DataTable overviewTable = TargetOverview.refreshTargetOverviewTable(CurrentNode, DonneesEnCours);
                    if (tnTarget != null && overviewTable != null)
                    {
                        MAJ_TableArbre(scenarioNode.Name, overviewTable, tnTarget, true, false);
                    }
                    // << Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table

                    if (targetResultNode != null)
                        SelectNode(targetResultNode);
                }
            }
        }

        public static bool nodeBelongsToBHSAnalysis(TreeNode node)
        {
            if (node == null)
                return false;
            while (!node.Parent.Name.Equals(GlobalNames.BAG_HANDLING_SYSTEM_DIRECTORY_NAME))
                    //&& !node.Parent.Name.Equals(GestionDonneesHUB2SIM.sPeakFlows))  // >> Task #9171 Pax2Sim - Static Analysis - EBS algorithm - Throughputs C#5
            {                
                node = node.Parent;
                if (node.Parent == null)
                    return false;
            }
            return true;
        }
        public static bool nodeBelongsToPAXAnalysis(TreeNode node)
        {
            if (node == null)
                return false;
            while (!node.Parent.Name.Equals(GlobalNames.PAX_CAPACITY_ANALYSIS_NODE_NAME))
            {
                node = node.Parent;
                if (node.Parent == null)
                    return false;
            }
            return true;
        }
        // << Task #13390 Targets for BHS Analysis output tables

        private void testTarget(TreeNode CurrentNode)
        {
            if (CurrentNode.Text.Equals(GlobalNames.AIRPORT_REPORTS_NODE_NAME))
            {
                TreeNode scenarioNode = getScenarioNode(CurrentNode);

                if (scenarioNode != null)
                {
                    String sTarget = GlobalNames.TARGET_DIRECTORY_NAME;
                    TreeNode tnTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(sTarget, CurrentNode);
                    if (tnTarget == null)
                    {
                        tnTarget = OverallTools.TreeViewFunctions.createBranch(sTarget, sTarget, TreeViewTag.getDirectoryNode(sTarget), null);
                        CurrentNode.Nodes.Add(tnTarget);
                    }

                    DataTable empty = new DataTable("Empty1");
                    empty.Columns.Add("Scenario Name", typeof(String));
                    empty.Columns.Add("Process Observed", typeof(String));
                    empty.Columns.Add("Statistic Type", typeof(String));
                    empty.Columns.Add("Statistic Attribute", typeof(String));
                    empty.Columns.Add("Comparison Type", typeof(String));
                    empty.Columns.Add("Target Value", typeof(Double));
                    empty.Columns.Add("Value Observed", typeof(Double));
                    empty.Columns.Add("Target Achived", typeof(String));
                    empty.Columns.Add("% Success", typeof(Double));

                    DataTable t1l1occupation = DonneesEnCours.getTable(scenarioNode.Name, "T1L1_Occupation");
                    t1l1occupation.TableName = "T1L1_Occupation_MinOccupation_2 Target";

                    //hardcode for test
                    DataRow dr = empty.NewRow();
                    dr[0] = "Capa_BD";
                    dr[1] = "T1L1";
                    dr[2] = "Occupation";
                    dr[3] = "Min Occupation";
                    dr[4] = "<=";
                    dr[5] = 2500;
                    dr[6] = OverallTools.DataFunctions.getMaxValue(t1l1occupation, 1);
                    dr[7] = "Y";
                    dr[8] = Math.Round((2500 / OverallTools.DataFunctions.getMaxValue(t1l1occupation, 1)) * 100, 2);

                    empty.Rows.Add(dr);
                    empty.AcceptChanges();

                    dr = empty.NewRow();
                    dr[0] = "Capa_BD";
                    dr[1] = "T1L2";
                    dr[2] = "Occupation";
                    dr[3] = "Max Occupation";
                    dr[4] = "<=";
                    dr[5] = 2500;
                    dr[6] = OverallTools.DataFunctions.getMaxValue(t1l1occupation, 3);
                    dr[7] = "Y";
                    dr[8] = Math.Round((2500 / OverallTools.DataFunctions.getMaxValue(t1l1occupation, 3)) * 100, 2);

                    empty.Rows.Add(dr);
                    empty.AcceptChanges();
                    //

                    MAJ_TableArbre(scenarioNode.Name, t1l1occupation, tnTarget, true, false);
                    MAJ_TableArbre(scenarioNode.Name, empty, tnTarget, true, false);

                }
                //getProcessesDictionaries(CurrentNode);
                //OverallTools.DataFunctions.getMinValue
                //OverallTools.DataFunctions.getMaxValue

            }
        }

        private TreeNode getAirportReportsNode(TreeNode CurrentNode)
        {
            if (CurrentNode == null || CurrentNode.Parent == null)
                return null;

            TreeNode airportReportsNode = null;

            while (!CurrentNode.Parent.Name.Equals(GlobalNames.PAX_CAPACITY_ANALYSIS_NODE_NAME))
            {   
                airportReportsNode = CurrentNode.Parent;
                CurrentNode = CurrentNode.Parent;

                if (CurrentNode.Parent == null)
                    return airportReportsNode;
            }
            return airportReportsNode;
        }

        // >> Task #13390 Targets for BHS Analysis output tables
        public static TreeNode getBaggageHandlingSystemNode(TreeNode CurrentNode)
        {
            if (CurrentNode == null || CurrentNode.Parent == null)
                return null;

            TreeNode baggageHandlingSystemNode = CurrentNode;

            while (!baggageHandlingSystemNode.Name.Equals(GlobalNames.BAG_HANDLING_SYSTEM_DIRECTORY_NAME))
            {
                baggageHandlingSystemNode = baggageHandlingSystemNode.Parent;

                if (baggageHandlingSystemNode.Parent == null)
                    return baggageHandlingSystemNode;
            }
            return baggageHandlingSystemNode;
        }
        // << Task #13390 Targets for BHS Analysis output tables

        private TreeNode getScenarioNode(TreeNode CurrentNode)
        {
            if (CurrentNode == null || CurrentNode.Parent == null)
                return null;

            TreeNode scenarioNode = CurrentNode;

            while (!CurrentNode.Parent.Name.Equals("Analysis"))
            {
                scenarioNode = CurrentNode.Parent;
                CurrentNode = CurrentNode.Parent;

                if (CurrentNode.Parent == null)
                    return scenarioNode;
            }
            return scenarioNode;
        }

        private void getProcessesDictionaries(TreeNode airportReportsNode, out Dictionary<String, TreeNode> terminalsDictionary,
            out Dictionary<String, TreeNode> levelsDictionary, out Dictionary<String, TreeNode> groupsDictionary,
            out Dictionary<String, TreeNode> desksDictionary)
        {
            terminalsDictionary = new Dictionary<string, TreeNode>();
            levelsDictionary = new Dictionary<string, TreeNode>();
            groupsDictionary = new Dictionary<string, TreeNode>();
            desksDictionary = new Dictionary<string, TreeNode>();

            foreach (TreeNode airportReportChildNode in airportReportsNode.Nodes)
            {
                TreeViewTag airportReportsChildNodeTag = (TreeViewTag)airportReportChildNode.Tag;
                if (airportReportsChildNodeTag != null && airportReportsChildNodeTag.isResultNode)
                {
                    if (!terminalsDictionary.ContainsKey(airportReportChildNode.Name))
                        terminalsDictionary.Add(airportReportChildNode.Name, airportReportChildNode);
                }
            }

            foreach (KeyValuePair<String, TreeNode> terminalPair in terminalsDictionary)
            {
                TreeNode terminalNode = terminalPair.Value;
                foreach (TreeNode terminalChildNode in terminalNode.Nodes)
                {
                    TreeViewTag terminalChildNodeTag = (TreeViewTag)terminalChildNode.Tag;
                    if (terminalChildNodeTag != null && terminalChildNodeTag.isResultNode)
                    {
                        if (!levelsDictionary.ContainsKey(terminalChildNode.Name))
                            levelsDictionary.Add(terminalChildNode.Name, terminalChildNode);
                    }
                }
            }

            foreach (KeyValuePair<String, TreeNode> levelPair in levelsDictionary)
            {
                TreeNode levelNode = levelPair.Value;
                foreach (TreeNode levelChildNode in levelNode.Nodes)
                {
                    TreeViewTag groupChildNodeTag = (TreeViewTag)levelChildNode.Tag;
                    if (groupChildNodeTag != null && groupChildNodeTag.isResultNode)
                    {
                        if (!groupsDictionary.ContainsKey(levelChildNode.Name))
                            groupsDictionary.Add(levelChildNode.Name, levelChildNode);
                    }
                }
            }

            foreach (KeyValuePair<String, TreeNode> groupPair in groupsDictionary)
            {
                TreeNode groupNode = groupPair.Value;

                foreach (TreeNode groupChildNode in groupNode.Nodes)
                {
                    TreeViewTag groupChildNodeTag = (TreeViewTag)groupChildNode.Tag;
                    if (groupChildNodeTag != null && groupChildNodeTag.isDirectoryNode
                        && groupChildNode.Name.Equals("Details"))
                    {
                        foreach (TreeNode groupDetailsChildNode in groupChildNode.Nodes)
                        {
                            TreeViewTag groupDetailsChildNodeTag = (TreeViewTag)groupDetailsChildNode.Tag;
                            if (groupDetailsChildNodeTag != null && groupDetailsChildNodeTag.isResultNode)
                            {
                                if (!desksDictionary.ContainsKey(groupDetailsChildNode.Name))
                                    desksDictionary.Add(groupDetailsChildNode.Name, groupDetailsChildNode);
                            }
                        }
                    }
                }
            }
        }

        private TreeNode getAirportReportsNodeFromScenarioNode(TreeNode scenarioNode)
        {
            TreeNode airportReportsNode = null;

            if (scenarioNode != null)
            {
                foreach (TreeNode tn in scenarioNode.Nodes)
                {
                    if (tn.Name.Equals("Airport Reports"))
                        airportReportsNode = tn;
                }
            }
            return airportReportsNode;
        }
        // << Task #10156 Pax2Sim - Statistic dev - Target        

        // >> Task #10312 Pax2Sim - Statistic dev - Target - save target tables
        private TreeNode getAirportReportsNodeFromHigherNode(TreeNode higherNode)
        {
            if (higherNode == null || higherNode.Nodes == null)
                return null;

            if (higherNode.Name.Equals(GlobalNames.AIRPORT_REPORTS_NODE_NAME))
                return higherNode;
            
            foreach (TreeNode childNode in higherNode.Nodes)
            {
                TreeNode nodeCheck = getAirportReportsNodeFromHigherNode(childNode);
                if (nodeCheck != null && nodeCheck.Name.Equals(GlobalNames.AIRPORT_REPORTS_NODE_NAME))
                    return nodeCheck;
            }
            return null;
        }

        private TreeNode getScenarioNodeFromAnalysisNode(TreeNode analysisNode, String scenarioName)
        {
            if (analysisNode == null || analysisNode.Nodes == null)
                return null;

            foreach (TreeNode childNode in analysisNode.Nodes)
            {
                if (childNode.Name.Equals(scenarioName))
                    return childNode;
            }
            return null;
        }
        // << Task #10312 Pax2Sim - Statistic dev - Target - save target tables

        // >> Task #10359 Pax2Sim - Counting functionality
        private void setCountingParametersToolStripMenuItem_Click(object sender, EventArgs e)
        {
            String scenarioName = "";

            if (CurrentNode != null)
            {
                TreeNode scenarioNode = getScenarioNode(CurrentNode);

                if (scenarioNode != null)
                {
                    scenarioName = scenarioNode.Name;
                    DataTable istTable = DonneesEnCours.getTable(scenarioName, CurrentNode.Name);

                    if (istTable != null)
                    {
                        CountingAssistant countingAssistant = new CountingAssistant(scenarioName, istTable, DonneesEnCours);
                        countingAssistant.ShowDialog();
                        DataTable countResultTable = countingAssistant.resultTable;
                        DataTable countedItemsTable = countingAssistant.resultedISTTable;
                        countingAssistant.Dispose();

                        TreeNode airportReportsNode = getAirportReportsNode(CurrentNode);

                        if (airportReportsNode != null && countResultTable != null && countedItemsTable != null)
                        {
                            String countDirectoryName = GlobalNames.COUNT_DIRECTORY_NAME;
                            TreeNode tnCount = OverallTools.TreeViewFunctions.RechercherNomEnfants(countDirectoryName, airportReportsNode);
                            if (tnCount == null)
                            {
                                tnCount = OverallTools.TreeViewFunctions.createBranch(countDirectoryName, countDirectoryName, TreeViewTag.getDirectoryNode(countDirectoryName), null);
                                airportReportsNode.Nodes.Add(tnCount);
                            }
                            TreeNode tnCountResultNode = MAJ_TableArbre(scenarioNode.Name, countResultTable, tnCount, true, false);
                            TreeNode tnCountedItemsISTResultNode = MAJ_TableArbre(scenarioNode.Name, countedItemsTable, tnCountResultNode, true, false);
                            if (tnCountResultNode != null)
                                SelectNode(tnCountResultNode);
                        }
                    }
                }
            }
        }

        private void deleteCountResultTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tag = CheckCurrentNode();
            if (tag == null || !CountingTools.isCountingDirectoryChild(CurrentNode) || CurrentNode.Parent == null)
                return;
            if (MessageBox.Show("Are you sure that you want to delete the \"" + tag.Name + "\" table ?", "Warning",
                    MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.Cancel)
            {
                return;
            }
            String dataSet = tag.ScenarioName;
            TreeNode parentNode = CurrentNode.Parent;

            supprimerEnfants(dataSet, CurrentNode);
            DonneesEnCours.RemoveTable(dataSet, CurrentNode.Name);
            parentNode.Nodes.Remove(CurrentNode);

            SelectNode(parentNode);
        }

        private void deleteISTCountedItemsTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tag = CheckCurrentNode();
            if (tag == null || !CountingTools.isCountResultChildTable(CurrentNode) || CurrentNode.Parent == null)
                return;

            String dataSet = tag.ScenarioName;
            TreeNode parentNode = CurrentNode.Parent;
            DataTable countResultTable = null;

            if (dataSet != null)
            {
                countResultTable = DonneesEnCours.getTable(dataSet, parentNode.Name);
            }

            if (countResultTable == null)
                return;

            if (MessageBox.Show("Are you sure that you want to delete the \"" + tag.Name + "\" table ?", "Warning",
                    MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.Cancel)
            {
                return;
            }
            String countedItemsTableName = CurrentNode.Name;
            String countedItemsTableId = countedItemsTableName.Substring(countedItemsTableName.LastIndexOf(" ")).Trim();
            
            supprimerEnfants(dataSet, CurrentNode);
            DonneesEnCours.RemoveTable(dataSet, CurrentNode.Name);
            parentNode.Nodes.Remove(CurrentNode);

            //delete corresponding row from the parent table(Count Result)
            deleteCorrespondingCountResultRow(countResultTable, countedItemsTableId);

            SelectNode(parentNode);
        }

        private void deleteCorrespondingCountResultRow(DataTable countResultTable, String countedItemsTableId)
        {
            if (countResultTable == null)
                return;

            int idColumnIndex = countResultTable.Columns.IndexOf(GlobalNames.COUNT_RESULT_ID_COLUMN_NAME);
            if (idColumnIndex == -1)
                return;

            DataRow deletedRow = null;

            foreach (DataRow row in countResultTable.Rows)
            {
                String id = row[idColumnIndex].ToString();
                if (id.Trim().Equals(countedItemsTableId))
                {
                    deletedRow = row;
                    break;
                }
            }

            if (deletedRow != null)
                countResultTable.Rows.Remove(deletedRow);
        }
        // << Task #10359 Pax2Sim - Counting functionality

        // >> Task #10311 Pax2Sim - Statistic dev - Target - edit / delete target table
        private void deleteTargetTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tag = CheckCurrentNode();
            if (tag == null || !isTargetTableChild(CurrentNode))
                return;
            if (MessageBox.Show("Are you sure that you want to delete the \"" + tag.Name + "\" table ?", "Warning",
                    MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.Cancel)
            {
                return;
            }
            String dataSet = tag.ScenarioName;
            TreeNode parentNode = CurrentNode.Parent;

            supprimerEnfants(dataSet, CurrentNode);
            DonneesEnCours.RemoveTable(dataSet, CurrentNode.Name);
            parentNode.Nodes.Remove(CurrentNode);

            // >> Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table
            TreeNode tnTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.TARGET_DIRECTORY_NAME, CurrentNode);
            DataTable overviewTable = TargetOverview.refreshTargetOverviewTable(CurrentNode, DonneesEnCours);
            if (tnTarget != null && overviewTable != null)
            {
                MAJ_TableArbre(dataSet, overviewTable, tnTarget, true, false);
            }            
            // << Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table

            SelectNode(parentNode);
        }

        public bool isTargetTableChild(TreeNode node)
        {
            if (node.Parent != null)
            {
                TreeNode parent = node.Parent;
                TreeViewTag tvtParent = (TreeViewTag)(parent.Tag);
                if (tvtParent.isDirectoryNode && parent.Name.Equals(GlobalNames.TARGET_DIRECTORY_NAME))
                    return true;
            }
            else
                return false;

            return isTargetTableChild(node.Parent);
        }
        // << Task #10311 Pax2Sim - Statistic dev - Target - edit / delete target table

        // >> Task #13880 Various UI improvements and fixes
        public bool isViewStatisticsTableChild(TreeNode node)
        {
            if (node.Parent != null)
            {
                TreeNode parent = node.Parent;
                TreeViewTag tvtParent = (TreeViewTag)(parent.Tag);
                if (tvtParent.isDirectoryNode
                    && parent.Name.Equals(GlobalNames.VIEW_STATS_DIRECTORY_NAME))
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
            return isTargetTableChild(node.Parent);
        }
        public void deleteViewStatisticsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tag = CheckCurrentNode();
            if (tag == null || !isViewStatisticsTableChild(CurrentNode))
                return;
            if (MessageBox.Show("Are you sure that you want to delete the \"" + tag.Name + "\" table ?", "Warning",
                    MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.Cancel)
            {
                return;
            }
            String dataSet = tag.ScenarioName;
            TreeNode parentNode = CurrentNode.Parent;

            supprimerEnfants(dataSet, CurrentNode);
            DonneesEnCours.RemoveTable(dataSet, CurrentNode.Name);
            parentNode.Nodes.Remove(CurrentNode);

            SelectNode(parentNode);
        }
        // << Task #13880 Various UI improvements and fixes

        private void deleteTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if ((Tag == null) || (Tag.ScenarioName != "Input"))
                return;
            if (MessageBox.Show("Are you sure that you want to delete the \"" + Tag.Name + "\" table ?", "Warning", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.Cancel)
                return;
            String dataset = Tag.ScenarioName;
            TreeNode parent = CurrentNode.Parent;
            supprimerEnfants(dataset, CurrentNode);
            DonneesEnCours.RemoveTable(dataset, CurrentNode.Name);
                DonneesEnCours.deleteAllocatedTable(CurrentNode.Name);
            parent.Nodes.Remove(CurrentNode);
            SelectNode(parent);

        }
        private void EditTable_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null)
                return;
            contextMenuInput_Opening(sender,null);
            if (!EditTable.Enabled)
                return;

            if (OverallTools.FonctionUtiles.estPresentDansListe(CurrentNode.Text, GestionDonneesHUB2SIM.ListeNomTableCompletsBHS))
            {
                switch(CurrentNode.Text)
                {
                    case "General BHS Information":
                        Assistant.BHS_General_Assistant bhsga = new SIMCORE_TOOL.Assistant.BHS_General_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                        bhsga.ShowDialog();
                        bhsga.Dispose();
                        break;
                    case "Mean Flows - Arrival Infeed":
                    case "Mean Flows - Check In":
                    case "Mean Flows - Transfer Infeed":
                        Assistant.Mean_Flows_Assistant aa = new Assistant.Mean_Flows_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                        aa.ShowDialog();
                        aa.Dispose();
                        break;
                    case "Check-In Collectors":
                        Assistant.BHS_CI_Collectors_Assistant bcca = new SIMCORE_TOOL.Assistant.BHS_CI_Collectors_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name), treeView1.Nodes[0]);
                        bcca.ShowDialog();
                        bcca.Dispose();
                        break;
                    case "Check-In Routing":
                    case "Transfer Routing":
                        Assistant.BHS_CI_Routing_Assistant bcra = new SIMCORE_TOOL.Assistant.BHS_CI_Routing_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name), treeView1.Nodes[0], "Transfer Routing" == CurrentNode.Text);
                        bcra.ShowDialog();
                        bcra.Dispose();
                        break;
                    case "Arrival Containers":
                        Assistant.BHS_Arrival_Containers_Assistant BACa = new Assistant.BHS_Arrival_Containers_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                        BACa.ShowDialog();
                        BACa.Dispose();
                        break;
                    case "Flow Split":
                        Assistant.BHS_Flow_Split_Assistant bfsa = new SIMCORE_TOOL.Assistant.BHS_Flow_Split_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                        bfsa.ShowDialog();
                        bfsa.Dispose();
                        break;
                    case "Process":
                        Assistant.BHS_Process_Assistant bpa = new SIMCORE_TOOL.Assistant.BHS_Process_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                        bpa.ShowDialog();
                        bpa.Dispose();
                        break;
                    case "HBS3 Routing":
                        Assistant.BHS_HBS3_Routing_Assistant bhra = new SIMCORE_TOOL.Assistant.BHS_HBS3_Routing_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name), treeView1.Nodes[0]);
                        bhra.ShowDialog();
                        bhra.Dispose();
                        break;

                    default : return;
                }
                UpdateTable();
                return;
            }
            
            //<< Task #7405 - new Desk and extra information for Pax
            if (isUserAttributesTable(CurrentNode.Name))
            {
                Assistant.UserAttributesDistributionEditor userAttributesDistributionEditor = new SIMCORE_TOOL.Assistant.UserAttributesDistributionEditor(DonneesEnCours.getTable("Input", CurrentNode.Name));
                userAttributesDistributionEditor.ShowDialog();
                userAttributesDistributionEditor.Dispose();
            }
            //>> Task #7405 - new Desk and extra information for Pax

            // >> Task #10311 Pax2Sim - Statistic dev - Target - edit / delete target table
            if (isTargetTableChild(CurrentNode))
            {
                TreeNode scenarioNode = getScenarioNode(CurrentNode);
                if (scenarioNode != null)
                {
                    DataTable targetTable = DonneesEnCours.getTable(scenarioNode.Name, CurrentNode.Name);

                    if (targetTable != null && targetTable.Rows.Count > 0)
                    {
                        Assistant.SetTargetEditor setTargetEditor
                            = new SetTargetEditor(targetTable, DonneesEnCours);
                        setTargetEditor.ShowDialog();
                        setTargetEditor.Dispose();

                        // >> Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table                        
                        TreeNode tnTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.TARGET_DIRECTORY_NAME, CurrentNode);
                        DataTable overviewTable = TargetOverview.refreshTargetOverviewTable(CurrentNode, DonneesEnCours);
                        if (tnTarget != null && overviewTable != null)
                        {
                            MAJ_TableArbre(scenarioNode.Name, overviewTable, tnTarget, true, false);
                        }                        
                        // << Task #13205 Pax2Sim - Dynamic Analysis - Target Overview table
                    }
                    else
                    {
                        MessageBox.Show("The target table doesn't have any data. The editor can not be opened.",
                            "Target Editor", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            // << Task #10311 Pax2Sim - Statistic dev - Target - edit / delete target table

            switch (CurrentNode.Name)
            {
                case "Times_ProcessTable":
                    // << Task #8731 Pax2Sim - Adapt the ProcessAssistant to include the new time distribution
                    //Obtain the Groups+descriptions dictionary
                    Dictionary<String, String> groupsWithDescriptionsDictionary = ProcessFlowServices.getAllGroupDescriptions(this);                    
                    Assistant.Process_Assistant pa = new SIMCORE_TOOL.Assistant.Process_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name),
                        DonneesEnCours.getTable("Input", "OneofSpecificationTable"), groupsWithDescriptionsDictionary);
                    // >> Task #8731 Pax2Sim - Adapt the ProcessAssistant to include the new time distribution
                    pa.ShowDialog();
                    pa.Dispose();
                    break;
                case "FPD_LoadFactorsTable"/*GlobalNames.FPD_LoadFactorsTableName*/:
                    Assistant.LFD_Assistant lfd = new SIMCORE_TOOL.Assistant.LFD_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    lfd.ShowDialog();
                    lfd.Dispose();
                    break;
                case "FPA_LoadFactorsTable"/*GlobalNames.FPA_LoadFactorsTableName*/:
                    Assistant.LFA_Assistant lfa = new SIMCORE_TOOL.Assistant.LFA_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    lfa.ShowDialog();
                    lfa.Dispose();
                    break;
                case "Transfer_ICTTable"/*GlobalNames.Transfer_ICTTableName*/:
                case "CI_ShowUpTable"/*GlobalNames.CI_ShowUpTableName*/:
                #region 26/03/2012 - SGE - Parking Mulhouse
                case GlobalNames.Parking_ShortStayTableName:
                case GlobalNames.Parking_LongStayTableName:
                #endregion //26/03/2012 - SGE - Parking Mulhouse
                case GlobalNames.sParkingOccupationTimeName:
                    Assistant.ICT_ShowUp_Assistant isua = new SIMCORE_TOOL.Assistant.ICT_ShowUp_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name), CurrentNode.Name == GlobalNames.sParkingOccupationTimeName);
                    if (isua.DialogResult != DialogResult.Abort)    // >> Bug #14888 Pax Capacity launcher blocking Simulation for dummy reason
                    {
                        isua.ShowDialog();
                        isua.Dispose();
                    }
                    break;
                case "NbBagsTable"/*GlobalNames.NbBagsTableName*/:
                case "NbVisitorsTable"/*GlobalNames.NbVisitorsTableName*/:
                case "Segregation":

                    Assistant.Nb_Bags_Visitors_Assistant nbma = new SIMCORE_TOOL.Assistant.Nb_Bags_Visitors_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    nbma.ShowDialog();
                    nbma.Dispose();
                    break;
                case "NbTrolleyTable"/*GlobalNames.NbTrolleyTableName*/:
                    //Assistant.Nb_Trolley_Assistant nbta = new SIMCORE_TOOL.Assistant.Nb_Trolley_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    Assistant.Trolley_Assistant nbta = new SIMCORE_TOOL.Assistant.Trolley_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    nbta.ShowDialog();
                    nbta.Dispose();
                    break;
                case "ItineraryTable":
                    // << Task #6386 Itinerary process
                    //tabControl.SelectedTab = tp_Itinerary;
                    tabControl.SelectedTab = tabNewItinerary;
                    // >> Task #6386 Itinerary process                    
                    break;
                case "OCT_MakeUp":
                    Assistant.OCT_AssistantMakeUp OCTamu = new Assistant.OCT_AssistantMakeUp(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    OCTamu.ShowDialog();
                    OCTamu.Dispose();
                    break;
                case "OCT_CITable": // >> Bug #13367 Liege allocation
                    {
                        Assistant.OCT_Assistant_CheckIn octCheckInAssistant = new Assistant.OCT_Assistant_CheckIn(DonneesEnCours.getTable("Input", CurrentNode.Name));
                        octCheckInAssistant.ShowDialog();
                        octCheckInAssistant.Dispose();
                        break;
                    }
                case "OCT_BaggageClaimTable":
                case "OCT_BoardGateTable":                
                case "OCT_ParkingTable":
                case "OCT_ArrivalGateTable":    //arrGate
                case "OCT_BaggageDropTable":    //bagDrop
                case "OCT_ArrivalInfeedTable":    //arrInf
                case "OCT_RunwayTable":         //runway
                    Assistant.OCT_Assistant OCTa = new Assistant.OCT_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    OCTa.ShowDialog();
                    OCTa.Dispose();
                    break;
                case "Alloc_TransferDeskTable":
                case "Alloc_SecurityCheckTable":
                case "Alloc_UserProcessCheckTable":  // << Task #7570 new Desk and extra information for Pax -Phase I B
                case "Alloc_PassportCheckTable":
                    {
#if(NEWALLOCATIONSECU)
                        //<< Task #7405 - new Desk and extra information for Pax                        
                        Assistant.AllocationAssistantManager aa = new SIMCORE_TOOL.Assistant.AllocationAssistantManager(DonneesEnCours.getTable("Input", CurrentNode.Name), DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName), DonneesEnCours.getTable("Input", GlobalNames.FP_AirlineCodesTableName), DonneesEnCours.getTable("Input", GlobalNames.FPATableName), DonneesEnCours.getTable("Input", GlobalNames.FPDTableName), (CurrentNode.Name == GlobalNames.Alloc_PassportCheckTableName), DonneesEnCours);
                        //>> Task #7405 - new Desk and extra information for Pax
#else 
                    Assistant.Allocation_Assistant aa = new Assistant.Allocation_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name), (CurrentNode.Name == "Alloc_PassportCheckTable"), (CurrentNode.Name == GlobalNames.Alloc_SecurityCheckTableName));
#endif
                        aa.ShowDialog();
                        aa.Dispose();
                        break;
                    }
                case "Capa_QueuesTable":
                case "Group_Queues":
                // << Task #8758 Pax2Sim - Editor for Groups
                case GlobalNames.capaProcessTableName:
                // >> Task #8758 Pax2Sim - Editor for Groups
                    Assistant.SubForms.Capacity_SubForm csb_Tmp = 
                        new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm(
                            SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node.GetTree(DonneesEnCours.getRacine(), DonneesEnCours.getTable("Input", GlobalNames.Group_QueuesName)), 
                            DonneesEnCours.getTable("Input", GlobalNames.Group_QueuesName), 
                            DonneesEnCours.getTable("Input", GlobalNames.Capa_QueuesTableName),
                            // << Task #8759 Pax2Sim - Editor for Pax Process (Capacities) table
                            DonneesEnCours.getTable("Input", GlobalNames.capaProcessTableName));
                            // >> Task #8759 Pax2Sim - Editor for Pax Process (Capacities) table                            
                    List<Form> lfContent = new List<Form>();
                    lfContent.Add(csb_Tmp);
                    Assistant.Edit_Assistant ea = new SIMCORE_TOOL.Assistant.Edit_Assistant("Edit the queues capacity for groups and stations", lfContent);
                    if (ea.ShowDialog() == DialogResult.OK)
                    {
                        if (!csb_Tmp.Save())
                        {
                            MessageBox.Show("Err00323 : A error occurs while trying to save the changes in the table.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.Group_QueuesName);
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.Capa_QueuesTableName);
                    }
                    ea.Dispose();
                    csb_Tmp.Dispose();
                    /*Assistant.Queue_Assistant qa = new Assistant.Queue_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    if (qa.ShowDialog() == DialogResult.OK)
                    {
                        DonneesEnCours.ReplaceTable("Input", qa.getQueueTable());
                    }
                    qa.Dispose();*/
                    break;
                case "Animated_Queues":
                    Assistant.Animated_Queues aq = new SIMCORE_TOOL.Assistant.Animated_Queues("Animated Queues", DonneesEnCours.getTable("Input", CurrentNode.Name), treeView1.Nodes[0], imageList1);
                    aq.ShowDialog();
                    aq.Dispose();
                    break;
                case "OneofSpecificationTable":
                    Assistant.Oneof_Assistant AssistantOne = new SIMCORE_TOOL.Assistant.Oneof_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    AssistantOne.ShowDialog();
                    AssistantOne.Dispose();
                    break;
                case GlobalNames.ProcessScheduleName:
                    Assistant.Schedule_Assistant sa = new Assistant.Schedule_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name),GestionDonneesHUB2SIM.ListeTableLinks_ProcessScheduleTable, DonneesEnCours);
                    sa.ShowDialog();
                    sa.Dispose();
                    break;
                case GlobalNames.FPLinksTableName:
                    Assistant.AircraftLinks_Assistant aira = new SIMCORE_TOOL.Assistant.AircraftLinks_Assistant(DonneesEnCours.getTable("Input", GlobalNames.FPATableName), DonneesEnCours.getTable("Input", GlobalNames.FPDTableName), DonneesEnCours.getTable("Input", CurrentNode.Name));
                    aira.ShowDialog();
                    aira.Dispose();
                    break;
                case GlobalNames.Transfer_TerminalDitributionTableName:
                case GlobalNames.Transfer_FlightCategoryDitributionTableName:
                    Assistant.Transfert_Distri_Assistant tda = new SIMCORE_TOOL.Assistant.Transfert_Distri_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    tda.ShowDialog();
                    tda.Dispose();
                    break;
                case GlobalNames.sUserAttributesTableName:
                    Assistant.UserAttributesEditor userAttributesEditor = new SIMCORE_TOOL.Assistant.UserAttributesEditor(DonneesEnCours.getTable("Input", CurrentNode.Name),DonneesEnCours);
                    userAttributesEditor.ShowDialog();
                    userAttributesEditor.Dispose();
                    ReinitInputTable();
                    break;
                case GlobalNames.userAttributesEBSInputRateTableName:   // << Task #9260 Pax2Sim - Static Analysis - EBS algorithm - EBS per Terminal
                case GlobalNames.userAttributesEBSOutputRateTableName:
                    {
                        Assistant.EBSRatesAssistant ebsRatesAssistant = new EBSRatesAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                        ebsRatesAssistant.ShowDialog();
                        ebsRatesAssistant.Dispose();
                        break;
                    }
                case GlobalNames.saturationParametersTableName: // << Task #9412 Pax2Sim - Scenario parameters files - Settings and OpeningOnSaturation
                    {
                        Assistant.SubForms.SaturationParameters_SubForm saturationSubForm
                            = new SIMCORE_TOOL.Assistant.SubForms.SaturationParameters_SubForm(
                                SIMCORE_TOOL.Assistant.SubForms.SaturationParameters_SubForm.Node
                                    .GetTree(DonneesEnCours.getRacine(),
                                             DonneesEnCours.getTable("Input", GlobalNames.saturationParametersTableName)),
                                             DonneesEnCours.getTable("Input", GlobalNames.saturationParametersTableName));
                        List<Form> subFormsList = new List<Form>();
                        subFormsList.Add(saturationSubForm);
                         
                        Assistant.Edit_Assistant editor = new SIMCORE_TOOL.Assistant
                            .Edit_Assistant("Edit local saturation rules", subFormsList);
                        if (editor.ShowDialog() == DialogResult.OK)
                        {
                            if (!saturationSubForm.save())
                            {
                                MessageBox.Show("Err00323 : A error occurs while trying to save the changes in the table.",
                                    "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        editor.Dispose();
                        saturationSubForm.Dispose();

                        break;
                    }
                case GlobalNames.numberOfPassengersTableName:   // << Task #9536 Pax2Sim - table to specify direct the nb of different types of pax(orig, transf...)
                    {
                        Assistant.NbOfPaxBagsAssistant nbPaxAssistant
                            = new NbOfPaxBagsAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name),
                                                        GlobalNames.PAX_TYPE_IDENTIFIER);
                        nbPaxAssistant.ShowDialog();
                        nbPaxAssistant.Dispose();
                        break;
                    }
                case GlobalNames.numberOfBaggagesTableName:     // << Task #9536 Pax2Sim - table to specify direct the nb of different types of pax(orig, transf...)
                    {
                        Assistant.NbOfPaxBagsAssistant nbBagsAssistant
                            = new NbOfPaxBagsAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name),
                                                        GlobalNames.BAG_TYPE_IDENTIFIER);
                        nbBagsAssistant.ShowDialog();
                        nbBagsAssistant.Dispose();
                        break;
                    }
                case GlobalNames.USA_STANDARD_PARAMETERS_TABLE_NAME:    // >> Task #9967 Pax2Sim - BNP development - Peak Flows - USA Standard parameters table
                    {
                        Assistant.usaStandardParamAssistant usaStandardParamAssistant
                            = new usaStandardParamAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                        usaStandardParamAssistant.ShowDialog();
                        usaStandardParamAssistant.Dispose();
                        break;
                    }
                case GlobalNames.parkingPrioritiesTableName:    // >> Bug #13367 Liege allocation
                case GlobalNames.boardingGatesPrioritiesTableName:
                    {
                        PrioritiesAssistant prioritiesAssistant
                            = new PrioritiesAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                        prioritiesAssistant.ShowDialog();
                        prioritiesAssistant.Dispose();
                        break;
                    }
                case FPParametersTableConstants.TABLE_TECHNICAL_NAME:
                    {
                        DataTable rootArrivalFlightPlan = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                        DataTable rootDepartureFlightPlan = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);
                        DataTable selectedFlightPlanParametersTable = DonneesEnCours.getTable("Input", CurrentNode.Name);
                        FPParametersEditor fpParametersEditor = new FPParametersEditor(selectedFlightPlanParametersTable, rootArrivalFlightPlan, rootDepartureFlightPlan);
                        fpParametersEditor.ShowDialog();
                        fpParametersEditor.Dispose();
                        break;
                    }
                case FlightGroupRulesEditor.FLIGHT_GROUP_RULES_TABLE_TECHNICAL_NAME:
                    {
                        if (treeView1.Nodes == null || treeView1.Nodes.Count < 2)
                            return;
                        TreeNode rootFpaNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPATableName, treeView1.Nodes[1]);
                        TreeNode rootFpdNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPDTableName, treeView1.Nodes[1]);
                        if (rootFpaNode == null || rootFpdNode == null)
                            return;
                        DataTable selectedTable = DonneesEnCours.getTable("Input", CurrentNode.Name);
                        FlightGroupRulesEditor editor
                            = new FlightGroupRulesEditor(selectedTable, getTableWithChildren(new List<TreeNode>(new TreeNode[] { rootFpaNode, rootFpdNode })));
                        editor.ShowDialog();
                        editor.Dispose();
                        break;
                    }
                case DeterministicTransferDistributionEditor.DETERMINISTIC_TRANSFER_DISTRIBUTION_TABLE_TECHNICAL_NAME:
                    {
                        if (treeView1.Nodes == null || treeView1.Nodes.Count < 2)
                            return;
                        TreeNode rootFpaNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPATableName, treeView1.Nodes[1]);
                        TreeNode rootFpdNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPDTableName, treeView1.Nodes[1]);
                        if (rootFpaNode == null || rootFpdNode == null)
                            return;
                        List<DataTable> flightPlans = getTableWithChildren(new List<TreeNode>(new TreeNode[] { rootFpaNode }));
                        DataTable deterministicTransferDistributionTable = DonneesEnCours.getTable("Input", CurrentNode.Name);
                        DataTable flightGroupRulesTable = DonneesEnCours.getTable("Input", FlightGroupRulesEditor.FLIGHT_GROUP_RULES_TABLE_TECHNICAL_NAME);
                        DeterministicTransferDistributionEditor editor 
                            = new DeterministicTransferDistributionEditor(flightPlans, flightGroupRulesTable, deterministicTransferDistributionTable);
                        editor.ShowDialog();
                        editor.Dispose();
                        break;
                    }
                default:
                    dataGridView1.EditMode = DataGridViewEditMode.EditOnEnter;
                    return;
            }
            UpdateTable();
        }
        /// Gestion du menu contextuel pour l'import des tables
        private void ImportTable_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            TreeViewTag Tag = CheckCurrentNode();
            if (DonneesEnCours.IsUserData(Tag.Name))
            {
                tsmi_AddUserData_Click(sender, e);
                return;
            }


            openFileDialog1.FileName = CurrentNode.Name + ".txt";
            this.openFileDialog1.CheckFileExists = true;
            this.openFileDialog1.Filter = "Table file(*.txt)|*.txt|All(*.*)|*.*";
            this.openFileDialog1.Title = "Select the file table :";
            if (openFileDialog1.ShowDialog() != DialogResult.Cancel)
            {
                if (!DonneesEnCours.ChargerFichierTable(Tag.ScenarioName, CurrentNode.Name, openFileDialog1.FileName,false))
                {
                    String Error = GestionDonneesHUB2SIM.getLastError();
                    if (Error != "" && Error != null)
                        MessageBox.Show(Error, "Loading table error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    GestionDonneesHUB2SIM.EraseWarningsErrorsProject();
                }
                if (PAX2SIM.errorList.Count > 0)
                {
                    setErrors(PAX2SIM.errorList, true);
                    PAX2SIM.errorList = new ArrayList();
                }
            }
            UpdateTable();
        }

        private void importFromExistingTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //Ici mettre le code pour sélectionner dans l'arbre, une table à mettre dans la table sélectionnée.
            Prompt.SIM_Import_Table sit = new SIMCORE_TOOL.Prompt.SIM_Import_Table(treeView1,imageList1);
            if (sit.ShowDialog() == DialogResult.OK)
            {
                TreeNode node = sit.getSelectedNode();
                if( node.Tag==null)
                    return;
                TreeViewTag tvtTagImport = (TreeViewTag)node.Tag;
                TreeViewTag tvtTagTable = CheckCurrentNode();
                if (tvtTagTable == null)
                    return;
                if ((tvtTagImport.ScenarioName == tvtTagTable.ScenarioName) &&
                    (tvtTagImport.Name == tvtTagTable.Name))
                {
                    MessageBox.Show("The origin and destination table are the same.", "Invalid table", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                if (!DonneesEnCours.ChargerFichierTable(tvtTagTable.ScenarioName, tvtTagTable.Name, tvtTagImport.ScenarioName, tvtTagImport.Name))
                {
                    MessageBox.Show("The imported table is not valid for the selected table.", "Invalid table", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                UpdateTable();
            }
        }
        private void loadDefaultTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            DonneesEnCours.LoadDefaultTable(Tag.Name);
            UpdateTable();
        }
        #endregion

        #region # DataGridView ContextMenu

        private void addNewRowToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            TreeViewTag tag = CheckCurrentNode();
            if (tag == null)
                return;
            DataTable dataSource = (DataTable)dataGridView1.DataSource;
            //dataGridView1.DataSource = null;
            ViewTable(null,null);
            ViewTable(dataSource,tag);
            //dataGridView1.DataSource = dataSource;
            switch (CurrentNode.Name)
            {
                case "FPDTable"/*GlobalNames.FPDTableName*/:
                    Assistant.FPD_Assistant AssistantFPD = new Assistant.FPD_Assistant(DonneesEnCours,epPerimetre);
                    AssistantFPD.ShowDialog();
                    break;
                case "FPATable"/*GlobalNames.FPATableName*/:
                    Assistant.FPA_Assistant AssistantFPA = new Assistant.FPA_Assistant(DonneesEnCours, epPerimetre);
                    AssistantFPA.ShowDialog();
                    break;
                case FPParametersTableConstants.TABLE_TECHNICAL_NAME:   // >> Task #17690 PAX2SIM - Flight Plan Parameters table
                    {
                        DataTable rootArrivalFlightPlan = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                        DataTable rootDepartureFlightPlan = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);
                        DataTable selectedFlightPlanParametersTable = DonneesEnCours.getTable("Input", CurrentNode.Name);
                        FPParametersEditor fpParametersEditor = new FPParametersEditor(selectedFlightPlanParametersTable, rootArrivalFlightPlan, rootDepartureFlightPlan);
                        fpParametersEditor.ShowDialog();
                        break;
                    }
                case "FP_AircraftTypesTable"/*GlobalNames.FP_AircraftTypesTableName*/:
                    Assistant.FP_AssistantAircraft AssistantAircraftFP = new Assistant.FP_AssistantAircraft(DonneesEnCours.getTable("Input", CurrentNode.Name), "Add an item in the \"" + CurrentNode.Text + "\" table.");
                    AssistantAircraftFP.ShowDialog();
                    break;
                case "FP_AirlineCodesTable"/*GlobalNames.FP_AirlineCodesTableName*/:
                case "FP_AirportCodesTable"/*GlobalNames.FP_AirportCodesTableName*/:
                case "FP_FlightCategoriesTable"/*GlobalNames.FP_FlightCategoriesTableName*/:
                    Assistant.FP_Assistant AssistantFP = new Assistant.FP_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name), "Add an item in the \"" + CurrentNode.Text + "\" table.");
                    AssistantFP.ShowDialog();
                    break;
                case "OneofSpecificationTable":
                    Assistant.Oneof_Assistant AssistantOne = new SIMCORE_TOOL.Assistant.Oneof_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    AssistantOne.ShowDialog();
                    break;
                case FlightGroupRulesEditor.FLIGHT_GROUP_RULES_TABLE_TECHNICAL_NAME:
                    {
                        if (treeView1.Nodes == null || treeView1.Nodes.Count < 2)
                            return;
                        TreeNode rootFpaNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPATableName, treeView1.Nodes[1]);
                        TreeNode rootFpdNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPDTableName, treeView1.Nodes[1]);
                        if (rootFpaNode == null || rootFpdNode == null)
                            return;
                        DataTable selectedTable = DonneesEnCours.getTable("Input", CurrentNode.Name);
                        FlightGroupRulesEditor editor
                            = new FlightGroupRulesEditor(selectedTable, getTableWithChildren(new List<TreeNode>(new TreeNode[] { rootFpaNode, rootFpdNode })));
                        editor.ShowDialog();
                        break;
                    }
                case DeterministicTransferDistributionEditor.DETERMINISTIC_TRANSFER_DISTRIBUTION_TABLE_TECHNICAL_NAME:
                    {
                        if (treeView1.Nodes == null || treeView1.Nodes.Count < 2)
                            return;
                        TreeNode rootFpaNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPATableName, treeView1.Nodes[1]);
                        TreeNode rootFpdNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPDTableName, treeView1.Nodes[1]);
                        if (rootFpaNode == null || rootFpdNode == null)
                            return;
                        List<DataTable> flightPlans = getTableWithChildren(new List<TreeNode>(new TreeNode[] { rootFpaNode }));
                        DataTable deterministicTransferDistributionTable = DonneesEnCours.getTable("Input", CurrentNode.Name);
                        DataTable flightGroupRulesTable = DonneesEnCours.getTable("Input", FlightGroupRulesEditor.FLIGHT_GROUP_RULES_TABLE_TECHNICAL_NAME);
                        DeterministicTransferDistributionEditor editor
                            = new DeterministicTransferDistributionEditor(flightPlans, flightGroupRulesTable, deterministicTransferDistributionTable);
                        editor.ShowDialog();
                        break;
                    }
                default:
                    return;
            }
            UpdateTable();
        }
        private List<DataTable> getTableWithChildren(List<TreeNode> rootNodes)
        {
            List<DataTable> result = new List<DataTable>();
            foreach (TreeNode rootNode in rootNodes)
                result.AddRange(getTableAndChildren(rootNode));
            return result;
        }
/*
        private Dictionary<string, DataTable> getTableAndChildrenDictionary(List<TreeNode> rootNodes)
        {
            Dictionary<string, DataTable> result = new Dictionary<string, DataTable>();
            List<DataTable> tableAndChildren = new List<DataTable>();
            foreach (TreeNode rootNode in rootNodes)
                tableAndChildren.AddRange(getTableAndChildren(rootNode));
            foreach (DataTable table in tableAndChildren)
                if (!result.ContainsKey(table.TableName))
                    result.Add(table.TableName, table);
            return result;
        }
        private Dictionary<string, DataTable> getTableAndChildrenDictionary(TreeNode rootNode)
        {
            Dictionary<string, DataTable> result = new Dictionary<string, DataTable>();
            List<DataTable> tableAndChildren = getTableAndChildren(rootNode);
            foreach (DataTable table in tableAndChildren)
                if (!result.ContainsKey(table.TableName))
                    result.Add(table.TableName, table);
            return result;
        }
 */
        private List<DataTable> getTableAndChildren(TreeNode rootNode)
        {
            List<DataTable> tables = new List<DataTable>();
            DataTable rootTable = DonneesEnCours.getTable("Input", rootNode.Name);
            if (rootTable != null)
                tables.Add(rootTable);
            if (rootNode.Nodes != null)
            {
                foreach (TreeNode child in rootNode.Nodes)
                    tables.AddRange(getTableAndChildren(child));
            }
            return tables;
        }

        private void editCellToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dataGridView1.CurrentCell != null)
            {
                dataGridView1.EditMode = DataGridViewEditMode.EditProgrammatically;
                dataGridView1.BeginEdit(true);
                bOnEditMode = true;
                iEditColumnIndex = dataGridView1.CurrentCell.ColumnIndex;
                iEditRowIndex = dataGridView1.CurrentCell.RowIndex;
            }
        }
        public TreeViewTag CheckCurrentNode()
        {
            if (CurrentNode == null)
                return null;
            if ((CurrentNode.Tag == null) || CurrentNode.Tag.GetType() != typeof(TreeViewTag))
                return null;
            return (TreeViewTag)CurrentNode.Tag;
        }
        private void editToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            String refName = CurrentNode.Name;
            DataManagement.NormalTable ntTable = DonneesEnCours.GetTable(Tag.ScenarioName, Tag.Name);
            if (ntTable != null && ntTable.isFilter)
                refName = (ntTable as DataManagement.FilterTable).Root.Name;
            int identifiant;
            bool recalcul = false;
            for (int i = 0; i < dataGridView1.SelectedRows.Count; i++)
            {
                if ((dataGridView1.SelectedRows[i].Cells[0].Value != null) && ((dataGridView1.SelectedRows[i].Cells[0].Value.ToString() != "")))
                {
                    //<< Task #7405 - new Desk and extra information for Pax
                    if (isUserAttributesTable(refName))
                    {
                        Assistant.UserAttributesDistributionEditor userAttributesDistributionEditor = new SIMCORE_TOOL.Assistant.UserAttributesDistributionEditor(DonneesEnCours.getTable("Input", CurrentNode.Name), dataGridView1.SelectedRows[i].Cells[0].Value.ToString());
                        userAttributesDistributionEditor.ShowDialog();
                        userAttributesDistributionEditor.Dispose();
                    }
                    //>> Task #7405 - new Desk and extra information for Pax                    
                    
                    switch (refName)
                    {
                        case "FPDTable"/*GlobalNames.FPDTableName*/:
                            if (Int32.TryParse(dataGridView1.SelectedRows[i].Cells[0].Value.ToString(), out identifiant))
                            {
                                Assistant.FPD_Assistant AssistantFPD = new Assistant.FPD_Assistant(DonneesEnCours, identifiant, epPerimetre);
                                if (AssistantFPD.ShowDialog() != DialogResult.Cancel)
                                {
                                    recalcul = true;
                                }
                                else
                                    break;
                            }
                            else
                            {
                                MessageBox.Show("You cannot open the assistant for this Row");
                            }
                            break;
                        case "FPATable"/*GlobalNames.FPATableName*/:
                            if (Int32.TryParse(dataGridView1.SelectedRows[i].Cells[0].Value.ToString(), out identifiant))
                            {
                                Assistant.FPA_Assistant AssistantFPA = new Assistant.FPA_Assistant(DonneesEnCours, identifiant, epPerimetre);
                                if (AssistantFPA.ShowDialog() != DialogResult.Cancel)
                                {
                                    recalcul = true;
                                }
                                else
                                    break;
                            }
                            else
                            {
                                MessageBox.Show("You cannot open the assistant for this Row");
                            }
                            break;
                        case FPParametersTableConstants.TABLE_TECHNICAL_NAME:   // >> Task #17690 PAX2SIM - Flight Plan Parameters table
                            {
                                if (dataGridView1.DataSource.GetType() == typeof(DataTable))
                                {
                                    DataTable fpParametersTable = (DataTable)dataGridView1.DataSource;
                                    if (fpParametersTable == null)
                                    {
                                        break;
                                    }
                                    int columnIndexFlightId = fpParametersTable.Columns.IndexOf(FPParametersTableConstants.COLUMN_NAME_FLIGHT_ID);
                                    int columnIndexArrOrDep = fpParametersTable.Columns.IndexOf(FPParametersTableConstants.COLUMN_NAME_ARR_OR_DEP);
                                    if (columnIndexFlightId == -1 || columnIndexArrOrDep == -1)
                                    {
                                        break;
                                    }
                                    int flightId = -1;
                                    if (dataGridView1.SelectedRows[i].Cells[columnIndexFlightId] != null && dataGridView1.SelectedRows[i].Cells[columnIndexFlightId].Value != null
                                        && dataGridView1.SelectedRows[i].Cells[columnIndexArrOrDep] != null && dataGridView1.SelectedRows[i].Cells[columnIndexArrOrDep].Value != null
                                        && int.TryParse(dataGridView1.SelectedRows[i].Cells[columnIndexFlightId].Value.ToString(), out flightId))
                                    {
                                        FlightAttribute.ARR_OR_DEP_FLIGHT_TAG arrOrDep = FlightAttribute.ARR_OR_DEP_FLIGHT_TAG.NONE;
                                        try
                                        {
                                            arrOrDep = (FlightAttribute.ARR_OR_DEP_FLIGHT_TAG)Enum
                                                .Parse(typeof(FlightAttribute.ARR_OR_DEP_FLIGHT_TAG), dataGridView1.SelectedRows[i].Cells[columnIndexArrOrDep].Value.ToString());
                                        }
                                        catch (Exception ex)
                                        {                                            
                                            OverallTools.ExternFunctions.PrintLogFile("Error while retrieving the selected Flight Plan parameter from the table \""
                                                + fpParametersTable.TableName + "\". " + ex.Message);
                                            break;
                                        }
                                        if (arrOrDep == FlightAttribute.ARR_OR_DEP_FLIGHT_TAG.NONE)
                                        {
                                            continue;
                                        }
                                        DataTable rootArrivalFlightPlan = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                                        DataTable rootDepartureFlightPlan = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);
                                        FPParametersEditor flightPlanParametersEditor = new FPParametersEditor(fpParametersTable, rootArrivalFlightPlan, rootDepartureFlightPlan,
                                            arrOrDep, flightId);
                                        flightPlanParametersEditor.ShowDialog();
                                    }
                                }
                                break;
                            }
                        case FlightGroupRulesEditor.FLIGHT_GROUP_RULES_TABLE_TECHNICAL_NAME:
                            {
                                if (dataGridView1.CurrentRow == null)
                                    return;
                                if (treeView1.Nodes == null || treeView1.Nodes.Count < 2)
                                    return;
                                TreeNode rootFpaNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPATableName, treeView1.Nodes[1]);
                                TreeNode rootFpdNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPDTableName, treeView1.Nodes[1]);
                                if (rootFpaNode == null || rootFpdNode == null)
                                    return;
                                DataTable selectedTable = DonneesEnCours.getTable("Input", CurrentNode.Name);
                                int editedRowIndex = dataGridView1.CurrentRow.Index;
                                FlightGroupRulesEditor editor = new FlightGroupRulesEditor(
                                    selectedTable, getTableWithChildren(new List<TreeNode>(new TreeNode[] { rootFpaNode, rootFpdNode })), editedRowIndex);
                                editor.ShowDialog();
                                break;
                            }
                        case DeterministicTransferDistributionEditor.DETERMINISTIC_TRANSFER_DISTRIBUTION_TABLE_TECHNICAL_NAME:
                            {
                                if (treeView1.Nodes == null || treeView1.Nodes.Count < 2)
                                    return;
                                TreeNode rootFpaNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPATableName, treeView1.Nodes[1]);
                                TreeNode rootFpdNode = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.FPDTableName, treeView1.Nodes[1]);
                                if (rootFpaNode == null || rootFpdNode == null)
                                    return;
                                List<DataTable> flightPlans = getTableWithChildren(new List<TreeNode>(new TreeNode[] { rootFpaNode }));
                                DataTable deterministicTransferDistributionTable = DonneesEnCours.getTable("Input", CurrentNode.Name);
                                DataTable flightGroupRulesTable = DonneesEnCours.getTable("Input", FlightGroupRulesEditor.FLIGHT_GROUP_RULES_TABLE_TECHNICAL_NAME);
                                int editedRowIndex = dataGridView1.CurrentRow.Index;
                                DeterministicTransferDistributionEditor editor
                                    = new DeterministicTransferDistributionEditor(flightPlans, flightGroupRulesTable, deterministicTransferDistributionTable, editedRowIndex);
                                editor.ShowDialog();
                                break;
                            }
                        case "FP_AircraftTypesTable":
                            Assistant.FP_AssistantAircraft AssistantAircraftFP = new Assistant.FP_AssistantAircraft(DonneesEnCours.getTable("Input", CurrentNode.Name), "Edit an item from the \"" + CurrentNode.Text + "\" table.", dataGridView1.SelectedRows[i]);
                            if (AssistantAircraftFP.ShowDialog() != DialogResult.Cancel)
                            {
                                recalcul = true;
                            }
                            else
                                break;
                            break;
                        case "FP_AirlineCodesTable"/*GlobalNames.FP_AirlineCodesTableName*/:
                        case "FP_AirportCodesTable"/*GlobalNames.FP_AirportCodesTableName*/:
                        case "FP_FlightCategoriesTable"/*GlobalNames.FP_FlightCategoriesTableName*/:
                        case "Capa_QueuesTable":
                            Assistant.FP_Assistant AssistantFP = new Assistant.FP_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name), "Edit an item from the \"" + CurrentNode.Text + "\" table.", dataGridView1.SelectedRows[i].Cells[0].Value.ToString());
                            if (AssistantFP.ShowDialog() != DialogResult.Cancel)
                            {
                                recalcul = true;
                            }
                            else
                                break;
                            break;

                        case "Times_ProcessTable":
                            // << Task #8731 Pax2Sim - Adapt the ProcessAssistant to include the new time distribution
                            //Obtain the Groups+descriptions dictionary
                            Dictionary<String, String> groupsWithDescriptionsDictionary = ProcessFlowServices.getAllGroupDescriptions(this);                            
                            Assistant.Process_Assistant pa = new SIMCORE_TOOL.Assistant.Process_Assistant(DonneesEnCours.getTable("Input", "Times_ProcessTable"), DonneesEnCours.getTable("Input", "OneofSpecificationTable"),
                                dataGridView1.SelectedRows[i].Cells[0].Value.ToString(), groupsWithDescriptionsDictionary);
                            // >> Task #8731 Pax2Sim - Adapt the ProcessAssistant to include the new time distribution
                            pa.ShowDialog();
                            pa.Dispose();
                            break;
                        case GlobalNames.Transfer_TerminalDitributionTableName:
                        case GlobalNames.Transfer_FlightCategoryDitributionTableName:
                            Assistant.Transfert_Distri_Assistant tda = new SIMCORE_TOOL.Assistant.Transfert_Distri_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name), dataGridView1.SelectedRows[i].Cells[0].Value.ToString());
                            tda.ShowDialog();
                            tda.Dispose();
                            break;
                        case GlobalNames.sUserAttributesTableName:
                            Assistant.UserAttributesEditor userAttributesEditor = new SIMCORE_TOOL.Assistant.UserAttributesEditor(DonneesEnCours.getTable("Input", CurrentNode.Name), dataGridView1.SelectedRows[i].Cells[0].Value.ToString(), DonneesEnCours);
                            userAttributesEditor.ShowDialog();
                            userAttributesEditor.Dispose();
                            ReinitInputTable();
                            break;
                        case GlobalNames.userAttributesEBSInputRateTableName:   // << Task #9260 Pax2Sim - Static Analysis - EBS algorithm - EBS per Terminal
                        case GlobalNames.userAttributesEBSOutputRateTableName:
                            {
                                Assistant.EBSRatesAssistant ebsRatesAssistant
                                    = new EBSRatesAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                                ebsRatesAssistant.ShowDialog();
                                ebsRatesAssistant.Dispose();
                                break;
                            }
                        case GlobalNames.numberOfPassengersTableName:   // << Task #9536 Pax2Sim - table to specify direct the nb of different types of pax(orig, transf...)
                            {
                                Assistant.NbOfPaxBagsAssistant nbPaxAssistant
                                    = new NbOfPaxBagsAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name),
                                                                GlobalNames.PAX_TYPE_IDENTIFIER);
                                nbPaxAssistant.ShowDialog();
                                nbPaxAssistant.Dispose();
                                break;
                            }
                        case GlobalNames.numberOfBaggagesTableName:     // << Task #9536 Pax2Sim - table to specify direct the nb of different types of pax(orig, transf...)
                            {
                                Assistant.NbOfPaxBagsAssistant nbBagsAssistant
                                    = new NbOfPaxBagsAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name),
                                                                GlobalNames.BAG_TYPE_IDENTIFIER);
                                nbBagsAssistant.ShowDialog();
                                nbBagsAssistant.Dispose();
                                break;
                            }
                        case GlobalNames.USA_STANDARD_PARAMETERS_TABLE_NAME:    // >> Task #9967 Pax2Sim - BNP development - Peak Flows - USA Standard parameters table
                            {
                                Assistant.usaStandardParamAssistant usaStandardParamAssistant
                                    = new usaStandardParamAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                                usaStandardParamAssistant.ShowDialog();
                                usaStandardParamAssistant.Dispose();
                                break;
                            }
                        case GlobalNames.parkingPrioritiesTableName:    // >> Bug #13367 Liege allocation
                        case GlobalNames.boardingGatesPrioritiesTableName:
                            {
                                PrioritiesAssistant prioritiesAssistant
                                    = new PrioritiesAssistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                                prioritiesAssistant.ShowDialog();
                                prioritiesAssistant.Dispose();
                                break;
                            }
                        default:
                            return;
                    }
                }
                else
                {
                    MessageBox.Show("You cannot open the assistant for this Row");
                }
                if (!recalcul)
                    break;
            }
            UpdateTable();
        }

        /// suppression d'une ligne
        private void deleteRowToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            if (MessageBox.Show("This row will be deleted. Do you want to continue ?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2) == DialogResult.No)
                return;
            //Parcours de toutes les lignes de la table, et suppression de celles sélectionnées.
            //On parcours la table en sens inverse, car sinon il y a suppression de toutes les lignes.
            for (int i = dataGridView1.Rows.Count - 1; i >= 0; i--)
            {
                if ((dataGridView1.Rows[i].Selected) && !dataGridView1.Rows[i].IsNewRow)
                {
                    dataGridView1.Rows.Remove(dataGridView1.Rows[i]);
                }
            }
            ((DataTable)dataGridView1.DataSource).AcceptChanges();
            dataGridView1.DataSource = null;
            UpdateTable();
        }

        private void contextMenuDataView_Opening(object sender, CancelEventArgs e)
        {
            if (dataGridView1.SelectedCells.Count == 0)
            {
                e.Cancel = true;
                return;
            }
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {
                e.Cancel = true;
                return;
            }
            if (Tag.ScenarioName == "")
            {
                e.Cancel = true;
                return;
            }

            addNewRowToolStripMenuItem.Enabled = false;
            editCellToolStripMenuItem.Enabled = false;
            editToolStripMenuItem.Enabled = false;
            editColumnToolStripMenuItem.Enabled = false;
            deleteRowToolStripMenuItem.Enabled = false;
            importTableToolStripMenuItem.Enabled = getImportStatus();
            navigateToDeskFromDatagridToolStripMenuItem.Visible = allowNavigateToDeskFromDatagrid();            
            
            if (dataGridView1.SelectedCells.Count != 0)
            {
                VisualisationMode mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, Tag.Name);
                if (mode == null)
                    mode = VisualisationMode.LockMode;
                if (mode != null)
                {
                    Filter filtre = DonneesEnCours.getFilter(Tag.ScenarioName, Tag.Name);
                    switch (mode.EditMode)
                    {
                        case VisualisationMode.EditModeEnum.Column:
                            if (mode.ColumnBlocked != null)
                            {
                                foreach (DataGridViewColumn colonne in dataGridView1.SelectedColumns)
                                {
                                    foreach (int bloquee in mode.ColumnBlocked)
                                    {
                                        if (bloquee == colonne.Index)
                                        {
                                            colonne.Selected = false;
                                        }
                                    }
                                }
                            }
                            if (dataGridView1.SelectedColumns.Count == 0)
                                break;
                            editColumnToolStripMenuItem.Enabled = mode.AllowEditColumn;
                            editCellToolStripMenuItem.Enabled = mode.Modifiable;
                            break;
                        case VisualisationMode.EditModeEnum.Cell:
                            if (mode.ColumnBlocked != null)
                            {
                                foreach (DataGridViewCell cell in dataGridView1.SelectedCells)
                                {
                                    foreach (int bloquee in mode.ColumnBlocked)
                                    {
                                        if (bloquee == cell.ColumnIndex)
                                        {
                                            cell.Selected = false;
                                            break;
                                        }
                                    }
                                }
                            }
                            if (dataGridView1.SelectedCells.Count == 0)
                                break;
                            editColumnToolStripMenuItem.Enabled = mode.AllowEditColumn;
                            editCellToolStripMenuItem.Enabled = mode.Modifiable;
                            break;
                        case VisualisationMode.EditModeEnum.Row:
                            addNewRowToolStripMenuItem.Enabled = mode.AllowAddLine && DonneesEnCours.TrialCanAddRow(Tag);
                            deleteRowToolStripMenuItem.Enabled = mode.AllowAddLine;
                            Boolean AllowEditCell = mode.Modifiable;
                            if (mode.ColumnBlocked != null)
                            {
                                foreach (int bloquee in mode.ColumnBlocked)
                                {
                                    if (dataGridView1.CurrentCell.ColumnIndex == bloquee)
                                        AllowEditCell = false;

                                }
                            }
                            editCellToolStripMenuItem.Enabled = AllowEditCell;
                            editToolStripMenuItem.Enabled = mode.AllowEditRow && (!Tag.IsExceptionNode);
                            break;
                        case VisualisationMode.EditModeEnum.None:
                            break;
                    }
                }
            }
        }

        private bool getImportStatus()
        {
            if (DonneesEnCours == null)
                return false;
            TreeViewTag tvtTmp = CheckCurrentNode();
            if (tvtTmp == null)
                return false;
            DataManagement.NormalTable ntTmp = DonneesEnCours.GetTable(tvtTmp.ScenarioName, tvtTmp.Name);
            if (ntTmp == null)
                return false;
            if ((ntTmp.isFilter) && (!((DataManagement.IFilterTable)ntTmp).Definition.copyTable))
                return false;
            if (ntTmp.Mode == null)
                return false;
            if (tvtTmp.IsExceptionNode) // >> Bug #10066 Pax2Sim - Airline exception editor
                return false;
            if (bJNK && (tvtTmp.Name == GlobalNames.PaxPlanName))
                return true;
            return ntTmp.Mode.Modifiable;
        }

        private bool allowNavigateToDeskFromDatagrid()  // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Task.2.
        {
            if (CurrentNode != null && isTargetTableChild(CurrentNode)
                && dataGridView1.SelectedRows != null && dataGridView1.SelectedRows.Count == 1)
            {
                return true;
            }
            return false;
        }

        private void editColumnToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            if (dataGridView1.SelectedCells.Count == 0)
                return;
            String selectedColumnName;
            if (dataGridView1.SelectionMode == DataGridViewSelectionMode.FullColumnSelect)
            {
                selectedColumnName = dataGridView1.SelectedColumns[0].Name;
            }
            else
            {
                selectedColumnName = dataGridView1.Columns[dataGridView1.SelectedCells[0].ColumnIndex].Name;
            }
            DataTable dtCurrentTable;
            if (Tag.IsExceptionNode)
            {
                dtCurrentTable = DonneesEnCours.getExceptionTable(Tag.ScenarioName,Tag.Name,Tag.ExceptionName);
            }
            else
            {
                dtCurrentTable = DonneesEnCours.getTable("Input", Tag.Name);
            }

            //<< Task #7405 - new Desk and extra information for Pax
            if (isUserAttributesTable(DonneesEnCours.getMotherTable(Tag.ScenarioName, Tag.Name)))
            {
                Assistant.UserAttributesDistributionEditor userAttributesDistributionEditor = new SIMCORE_TOOL.Assistant.UserAttributesDistributionEditor(dtCurrentTable, selectedColumnName);
                userAttributesDistributionEditor.ShowDialog();
                userAttributesDistributionEditor.Dispose();
            }
            //>> Task #7405 - new Desk and extra information for Pax

            switch (DonneesEnCours.getMotherTable(Tag.ScenarioName, Tag.Name))
            {   
                case "FPD_LoadFactorsTable"/*GlobalNames.FPD_LoadFactorsTableName*/:
                    Assistant.LFD_Assistant lfd = new SIMCORE_TOOL.Assistant.LFD_Assistant(dtCurrentTable, selectedColumnName);
                    lfd.ShowDialog();
                    lfd.Dispose();
                    break;
                case "FPA_LoadFactorsTable"/*GlobalNames.FPA_LoadFactorsTableName*/:
                    Assistant.LFA_Assistant lfa = new SIMCORE_TOOL.Assistant.LFA_Assistant(dtCurrentTable, selectedColumnName);
                    lfa.ShowDialog();
                    lfa.Dispose();
                    break;
                case "Transfer_ICTTable"/*GlobalNames.Transfer_ICTTableName*/:
                case "CI_ShowUpTable"/*GlobalNames.CI_ShowUpTableName*/:
                #region 26/03/2012 - SGE - Parking Mulhouse
                case GlobalNames.Parking_ShortStayTableName:
                case GlobalNames.Parking_LongStayTableName:
                #endregion //26/03/2012 - SGE - Parking Mulhouse
                case GlobalNames.sParkingOccupationTimeName:
                    Assistant.ICT_ShowUp_Assistant isua = new SIMCORE_TOOL.Assistant.ICT_ShowUp_Assistant(dtCurrentTable, GlobalNames.sParkingOccupationTimeName == DonneesEnCours.getMotherTable(Tag.ScenarioName, Tag.Name), selectedColumnName);
                    isua.ShowDialog();
                    isua.Dispose();
                    break;
                case "NbBagsTable"/*GlobalNames.NbBagsTableName*/:
                case "NbVisitorsTable"/*GlobalNames.NbVisitorsTableName*/:
                case "Segregation":
                    Assistant.Nb_Bags_Visitors_Assistant nbma = new SIMCORE_TOOL.Assistant.Nb_Bags_Visitors_Assistant(dtCurrentTable, selectedColumnName);
                    nbma.ShowDialog();
                    nbma.Dispose();
                    break;
                case "NbTrolleyTable"/*GlobalNames.NbTrolleyTableName*/:
                    Assistant.Trolley_Assistant nbta = new SIMCORE_TOOL.Assistant.Trolley_Assistant(dtCurrentTable, selectedColumnName);
                    nbta.ShowDialog();
                    nbta.Dispose();
                    break;
                case "OCT_MakeUp":
                    Assistant.OCT_AssistantMakeUp OCTamu = new Assistant.OCT_AssistantMakeUp(dtCurrentTable, selectedColumnName);
                    OCTamu.ShowDialog();
                    OCTamu.Dispose();
                    break;
                case "OCT_CITable": // >> Bug #13367 Liege allocation
                    {
                        Assistant.OCT_Assistant_CheckIn octCheckInAssistant = new Assistant.OCT_Assistant_CheckIn(dtCurrentTable, selectedColumnName);
                        octCheckInAssistant.ShowDialog();
                        octCheckInAssistant.Dispose();
                        break;
                    }
                case "OCT_BaggageClaimTable":
                case "OCT_BoardGateTable":                
                case "OCT_ParkingTable":
                case "OCT_ArrivalGateTable":    //arrGate
                case "OCT_BaggageDropTable":    //bagDrop
                case "OCT_ArrivalInfeedTable":    //arrInf
                case "OCT_RunwayTable":           //runway
                    Assistant.OCT_Assistant OCTa = new Assistant.OCT_Assistant(dtCurrentTable, selectedColumnName);
                    OCTa.ShowDialog();
                    OCTa.Dispose();
                    break;
                case "Alloc_TransferDeskTable":
                case "Alloc_SecurityCheckTable":
                case "Alloc_UserProcessCheckTable":   // << Task #7570 new Desk and extra information for Pax -Phase I B
                case "Alloc_PassportCheckTable":
                    {
#if(NEWALLOCATIONSECU)
                        //<< Task #7405 - new Desk and extra information for Pax                        
                        Assistant.AllocationAssistantManager aa = new SIMCORE_TOOL.Assistant.AllocationAssistantManager(DonneesEnCours.getTable("Input", CurrentNode.Name), DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName), DonneesEnCours.getTable("Input", GlobalNames.FP_AirlineCodesTableName), DonneesEnCours.getTable("Input", GlobalNames.FPATableName), DonneesEnCours.getTable("Input", GlobalNames.FPDTableName), (CurrentNode.Name == GlobalNames.Alloc_PassportCheckTableName), DonneesEnCours);
                        //>> Task #7405 - new Desk and extra information for Pax
#else          
                    Assistant.Allocation_Assistant aa = new Assistant.Allocation_Assistant(dtCurrentTable, (Tag.Name == "Alloc_PassportCheckTable"), (Tag.Name == GlobalNames.Alloc_SecurityCheckTableName), selectedColumnName);
#endif
                        aa.ShowDialog();
                        aa.Dispose();
                        break;
                    }
                case "Capa_QueuesTable":
                case "Group_Queues":
                // << Task #8758 Pax2Sim - Editor for Groups
                case GlobalNames.capaProcessTableName:
                // >> Task #8758 Pax2Sim - Editor for Groups
                    Assistant.SubForms.Capacity_SubForm csb_Tmp =
                        new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm(
                            SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node.GetTree(DonneesEnCours.getRacine(), DonneesEnCours.getTable("Input", GlobalNames.Group_QueuesName)),
                            DonneesEnCours.getTable("Input", GlobalNames.Group_QueuesName),
                            DonneesEnCours.getTable("Input", GlobalNames.Capa_QueuesTableName),
                            // << Task #8759 Pax2Sim - Editor for Pax Process (Capacities) table                        
                            DonneesEnCours.getTable("Input", GlobalNames.capaProcessTableName));
                            // >> Task #8759 Pax2Sim - Editor for Pax Process (Capacities) table
                    List<Form> lfContent = new List<Form>();
                    lfContent.Add(csb_Tmp);
                    Assistant.Edit_Assistant ea = new SIMCORE_TOOL.Assistant.Edit_Assistant("Edit the queues capacity for groups and stations", lfContent);
                    if (ea.ShowDialog() == DialogResult.OK)
                    {
                        if (!csb_Tmp.Save())
                        {
                            MessageBox.Show("Err00323 : A error occurs while trying to save the changes in the table.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.Group_QueuesName);
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.Capa_QueuesTableName);
                    }
                    ea.Dispose();
                    csb_Tmp.Dispose();
                    /*Assistant.Queue_Assistant qa = new Assistant.Queue_Assistant(DonneesEnCours.getTable("Input", CurrentNode.Name));
                    if (qa.ShowDialog() == DialogResult.OK)
                    {
                        DonneesEnCours.ReplaceTable("Input", qa.getQueueTable());
                    }
                    qa.Dispose();*/
                    break;
                case "OneofSpecificationTable":
                    Assistant.Oneof_Assistant AssistantOne = new SIMCORE_TOOL.Assistant.Oneof_Assistant(dtCurrentTable);
                    AssistantOne.ShowDialog();
                    AssistantOne.Dispose();
                    break;
                default:
                    return;
            }
            UpdateTable();
        }
        #endregion

        #region # Exceptions ContextMenu
        /// <summary>
        /// Fonction pour initialiser le contenu du menu
        /// </summary>
        private void cmsExceptionTable_Opening(object sender, CancelEventArgs e)
        {
            TreeNode NoeudParent = CurrentNode;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;

            // Ajout et/ou initialisation du menu pour les notes
            InitNoteTootStripMenu(sender as ContextMenuStrip);
            UpdateNoteMenu(Tag.Name, Tag.ScenarioName, Tag.ExceptionName);
            noteToolStripMenuItem.Enabled = true;
        }
        /// <summary>
        /// Fonction pour editer les tables d'exceptions
        /// </summary>
        private void tsmiEditExceptionTable_Click(object sender, EventArgs e)
        {
            if (!(sender is ToolStripMenuItem))
                return;
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;
            String sExceptionName = tvtTag.ExceptionName;

            DataTable dtResTable = null;
            String sRootTable = DonneesEnCours.getMotherTable(tvtTag.ScenarioName, tvtTag.Name); 
            String tableName = tvtTag.Name;
            TreeViewTag tvtParent = CurrentNode.Parent.Tag as TreeViewTag;
            if (tvtParent.isFilterNode) // si c'est un filtre, il faut ce baser sur le nom de la table d'origine
            {
                DataManagement.FilterTable ntParentTable = DonneesEnCours.GetTable(tvtParent.ScenarioName, tvtParent.Name) as DataManagement.FilterTable;
                tableName = ntParentTable.Root.Name;
            }
            if ((DataManagement.DataManagerInput.GetExceptionFormats( tableName )== DataManagement.ExceptionTable.ExceptionTableFormat.Line)
                && !sExceptionName.Equals(GlobalNames.FirstAndBusiness))
            {
                Prompt.ExceptionEditorLine eeEditor = new Prompt.ExceptionEditorLine(
                    DonneesEnCours.getExceptionTable(tvtTag.ScenarioName, tvtTag.Name, sExceptionName),
                    sExceptionName,
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FPDTableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FPATableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FP_FlightCategoriesTableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FP_AirlineCodesTableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, tvtTag.Name),
                    DonneesEnCours.GetExceptionParameters(tvtTag.ScenarioName, tvtTag.Name),
                    DonneesEnCours.GetExceptionFormat(tvtTag.ScenarioName, tvtTag.Name) == DataManagement.ExceptionTable.ExceptionTableFormat.Column,
                    (sRootTable == GlobalNames.FPD_LoadFactorsTableName) ||(sRootTable == GlobalNames.ProcessDistributionPaxInName),
                    (sRootTable == GlobalNames.FPA_LoadFactorsTableName) || (sRootTable == GlobalNames.ProcessDistributionPaxOutName)
                    );
                if (eeEditor.ShowDialog() != System.Windows.Forms.DialogResult.OK)
                    return;
                dtResTable = eeEditor.Table;
            }
            else
            {
                Prompt.ExceptionEditor eeEditor = new Prompt.ExceptionEditor(
                DonneesEnCours.getExceptionTable(tvtTag.ScenarioName, tvtTag.Name, sExceptionName),
                sExceptionName,
                DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FPDTableName),
                DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FPATableName),
                DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FP_FlightCategoriesTableName),
                DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FP_AirlineCodesTableName),
                DonneesEnCours.getTable(tvtTag.ScenarioName, tvtTag.Name),
                DonneesEnCours.GetExceptionParameters(tvtTag.ScenarioName, tvtTag.Name),
                DonneesEnCours.GetExceptionFormat(tvtTag.ScenarioName, tvtTag.Name) == DataManagement.ExceptionTable.ExceptionTableFormat.Column,
                (sRootTable == GlobalNames.FPD_LoadFactorsTableName) || (sRootTable == GlobalNames.ProcessDistributionPaxInName),
                (sRootTable == GlobalNames.FPA_LoadFactorsTableName) || (sRootTable == GlobalNames.ProcessDistributionPaxOutName),
                DonneesEnCours  // >> Task #10079 Pax2Sim - Exception Editor Search functionality
                );
                if (eeEditor.ShowDialog() != System.Windows.Forms.DialogResult.OK)
                    return;
                dtResTable = eeEditor.Table;
            }
            TreeNode tnNewNode = OverallTools.TreeViewFunctions.RechercherNom(sExceptionName, treeView1.SelectedNode);
            if (tnNewNode == null)
                return;
            DonneesEnCours.AddReplaceExceptionTable(tvtTag.ScenarioName, tvtTag.Name, dtResTable, sExceptionName);
            SelectNode(null);
            SelectNode(tnNewNode);
            DataManagement.DataManagerInput dmi = DonneesEnCours.GetDataManager("Input") as DataManagement.DataManagerInput;
            dmi.CheckExDiff(/*tableName*/ tvtTag.Name, sExceptionName);
        }
        /// <summary>
        /// Fonction pour suprimer une table d'exception
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tsmiDeleteExceptionTable_Click(object sender, EventArgs e)
        {
            if (!(sender is ToolStripMenuItem))
                return;
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;
            String sExceptionType = tvtTag.ExceptionName;

            // confirmation
            if (MessageBox.Show("Are you sure that you want to delete this Exception table ?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Information) != DialogResult.Yes)
                return;

            CurrentNode.Parent.Nodes.Remove(CurrentNode);
            
            DataManagement.ExceptionTable etTmp = DonneesEnCours.GetTable(tvtTag.ScenarioName, tvtTag.Name) as DataManagement.ExceptionTable;
            if (etTmp == null)
                return;
            if (sExceptionType.StartsWith(GlobalNames.FirstAndBusiness))
            {
                if (sExceptionType.EndsWith(GlobalNames.Flight))
                {
                    etTmp.ExceptionFlightFB = null;
                }
                else if (sExceptionType.EndsWith(GlobalNames.Airline))
                {
                    etTmp.ExceptionAirlineFB = null;
                }
                else if (sExceptionType.EndsWith(GlobalNames.FlightCategory))
                {
                    etTmp.ExceptionFCFB = null;
                }
                else
                {
                    etTmp.ExceptionFB = null;
                }
                return;
            }
            else
            {
                if (sExceptionType.EndsWith(GlobalNames.Flight))
                {
                    etTmp.ExceptionFlight = null;
                    return;
                }
                else if (sExceptionType.EndsWith(GlobalNames.Airline))
                {
                    etTmp.ExceptionAirline = null;
                    return;
                }
                else if (sExceptionType.EndsWith(GlobalNames.FlightCategory))
                {
                    etTmp.ExceptionFC = null;
                    return;
                }
            }
        }


        /// <summary>
        /// Fonction qui permet de générer l'arborescence du menu contextuel des tables et des filtres qui peuvent recevoir une
        /// (ou des) table d'exceptions. Ce menu permettra de générer les tables d'exceptions sur la table sélectionnée.
        /// </summary>
        /// <param name="cmsMenu">Menu contextuel dans lequel ajouter l'option de gestion des exceptions.</param>
        /// <param name="etpParameters">Paramétrage de la table courante pour les exceptions.</param>
        private void UpdateMenu(ContextMenuStrip cmsMenu, DataManagement.ExceptionTable.ExceptionTableParameters etpParameters)
        {
            ToolStripMenuItem tsmiException = null;
            if (!cmsMenu.Items.ContainsKey("Add / Edit Exception"))
            {
                tsmiException = new ToolStripMenuItem("Add / Edit Exception");
                tsmiException.Name = "Add / Edit Exception";
                ToolStripMenuItem tsmiFB = new ToolStripMenuItem(GlobalNames.FirstAndBusiness);
                tsmiFB.Click += new EventHandler(tsmiException_Click);
                tsmiFB.Name = GlobalNames.FirstAndBusiness;
                tsmiException.DropDownItems.Add(tsmiFB);

                ToolStripMenuItem tsmiFBTmp = new ToolStripMenuItem(GlobalNames.FlightCategory);
                tsmiFBTmp.Name = GlobalNames.FlightCategory;
                tsmiFBTmp.Click += new EventHandler(tsmiException_Click);
                tsmiFB.DropDownItems.Add(tsmiFBTmp);
                tsmiFBTmp = new ToolStripMenuItem(GlobalNames.Airline);
                tsmiFBTmp.Name = GlobalNames.Airline;
                tsmiFBTmp.Click += new EventHandler(tsmiException_Click);
                tsmiFB.DropDownItems.Add(tsmiFBTmp);
                tsmiFBTmp = new ToolStripMenuItem(GlobalNames.Flight);
                tsmiFBTmp.Name = GlobalNames.Flight;
                tsmiFBTmp.Click += new EventHandler(tsmiException_Click);
                tsmiFB.DropDownItems.Add(tsmiFBTmp);

                tsmiFB = new ToolStripMenuItem(GlobalNames.FlightCategory);
                tsmiFB.Name = GlobalNames.FlightCategory;
                tsmiFB.Click += new EventHandler(tsmiException_Click);
                tsmiException.DropDownItems.Add(tsmiFB);

                tsmiFB = new ToolStripMenuItem(GlobalNames.Airline);
                tsmiFB.Name = GlobalNames.Airline;
                tsmiFB.Click += new EventHandler(tsmiException_Click);
                tsmiException.DropDownItems.Add(tsmiFB);

                tsmiFB = new ToolStripMenuItem(GlobalNames.Flight);
                tsmiFB.Name = GlobalNames.Flight;
                tsmiFB.Click += new EventHandler(tsmiException_Click);
                tsmiException.DropDownItems.Add(tsmiFB);

                cmsMenu.Items.Add(tsmiException);
            }
            tsmiException = (ToolStripMenuItem)cmsMenu.Items["Add / Edit Exception"];
            if (etpParameters == DataManagement.ExceptionTable.ExceptionTableParameters.None)
            {
                tsmiException.Visible = false;
                return;
            }
            tsmiException.Visible = true;
            UpdateMenu(tsmiException, etpParameters);
        }

        void tsmiException_Click(object sender, EventArgs e)
        {
            if (!(sender is ToolStripMenuItem))
                return;
            ToolStripMenuItem tsmiMenu = (ToolStripMenuItem)sender;
            bool bFirstBusiness = (tsmiMenu.OwnerItem.Name == GlobalNames.FirstAndBusiness);
            String sExceptionName = "";
            if (bFirstBusiness)
                sExceptionName += GlobalNames.FirstAndBusiness + " - ";
            sExceptionName += tsmiMenu.Name;

            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;

            DataTable dtExTable = null;
            String sRootTable = DonneesEnCours.getMotherTable(tvtTag.ScenarioName, tvtTag.Name);
            String tableName = tvtTag.Name;
            if (tvtTag.isFilterNode) // si c'est un filtre, il faut ce baser sur le nom de la table d'origine
            {
                DataManagement.FilterTable ntTable = DonneesEnCours.GetTable(tvtTag.ScenarioName, tvtTag.Name) as DataManagement.FilterTable;
                tableName = ntTable.Root.Name;
            }
            DataManagement.ExceptionTable.ExceptionTableFormat etfTmp = DataManagement.DataManagerInput.GetExceptionFormats(tableName);

            if (/*(tableName == GlobalNames.Times_ProcessTableName || tableName == GlobalNames.FP_AircraftTypesTableName )*/
                (etfTmp == DataManagement.ExceptionTable.ExceptionTableFormat.Line)
                && !sExceptionName.Equals(GlobalNames.FirstAndBusiness))
            {
                Prompt.ExceptionEditorLine eeEditor = new Prompt.ExceptionEditorLine(
                    DonneesEnCours.getExceptionTable(tvtTag.ScenarioName, tvtTag.Name, sExceptionName),
                    sExceptionName,
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FPDTableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FPATableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FP_FlightCategoriesTableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FP_AirlineCodesTableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, tvtTag.Name),
                    DonneesEnCours.GetExceptionParameters(tvtTag.ScenarioName, tvtTag.Name),
                    DonneesEnCours.GetExceptionFormat(tvtTag.ScenarioName, tvtTag.Name) == DataManagement.ExceptionTable.ExceptionTableFormat.Column,
                    (sRootTable == GlobalNames.FPD_LoadFactorsTableName) || (sRootTable == GlobalNames.ProcessDistributionPaxInName),
                    (sRootTable == GlobalNames.FPA_LoadFactorsTableName) || (sRootTable == GlobalNames.ProcessDistributionPaxOutName)
                    );
                if (eeEditor.ShowDialog() != System.Windows.Forms.DialogResult.OK)
                    return;
                else
                    dtExTable = eeEditor.Table;
            }
            else
            {
                Prompt.ExceptionEditor eeEditor = new Prompt.ExceptionEditor(
                    DonneesEnCours.getExceptionTable(tvtTag.ScenarioName, tvtTag.Name, sExceptionName),
                    sExceptionName,
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FPDTableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FPATableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FP_FlightCategoriesTableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, GlobalNames.FP_AirlineCodesTableName),
                    DonneesEnCours.getTable(tvtTag.ScenarioName, tvtTag.Name),
                    DonneesEnCours.GetExceptionParameters(tvtTag.ScenarioName, tvtTag.Name),
                    DonneesEnCours.GetExceptionFormat(tvtTag.ScenarioName, tvtTag.Name) == DataManagement.ExceptionTable.ExceptionTableFormat.Column,
                   (sRootTable == GlobalNames.FPD_LoadFactorsTableName) || (sRootTable == GlobalNames.ProcessDistributionPaxInName),
                    (sRootTable == GlobalNames.FPA_LoadFactorsTableName) || (sRootTable == GlobalNames.ProcessDistributionPaxOutName),
                    DonneesEnCours // >> Task #10079 Pax2Sim - Exception Editor Search functionality
                    );
                if (eeEditor.ShowDialog() != System.Windows.Forms.DialogResult.OK)
                    return;
                else
                    dtExTable = eeEditor.Table;
            }

            TreeNode tnNewNode = OverallTools.TreeViewFunctions.RechercherNom(sExceptionName, treeView1.SelectedNode);
            if (tnNewNode == null)
            {
                TreeViewTag tvtNewTag;
                if (tvtTag.isTableNode)
                {
                    tvtNewTag = TreeViewTag.getExceptionTableNode(tvtTag.ScenarioName, tvtTag.Name, sExceptionName);
                }
                else
                {
                    tvtNewTag = TreeViewTag.getExceptionFilterNode(tvtTag.ScenarioName, tvtTag.Name, sExceptionName, false, true);
                }

                tnNewNode = OverallTools.TreeViewFunctions.createBranch(sExceptionName, sExceptionName, tvtNewTag, cmsExceptionTable);
                OverallTools.TreeViewFunctions.AddSortedNode(treeView1.SelectedNode, tnNewNode, true, true, true);
            }
            DonneesEnCours.AddReplaceExceptionTable(tvtTag.ScenarioName, tvtTag.Name, dtExTable, sExceptionName);
            SelectNode(tnNewNode);
        }

        /// <summary>
        /// Fonction qui permet de générer l'arborescence du menu contextuel des tables et des filtres qui peuvent recevoir une
        /// (ou des) table d'exceptions. Ce menu permettra de générer les tables d'exceptions sur la table sélectionnée.
        /// </summary>
        /// <param name="cmsMenu">Sous menu contenant des options pour l'ajout des tables d'exception</param>
        /// <param name="etpParameters">Paramétrage de la table courante pour les exceptions.</param>
        private void UpdateMenu(ToolStripMenuItem cmsMenu, DataManagement.ExceptionTable.ExceptionTableParameters etpParameters)
        {

            foreach (ToolStripMenuItem tsddTmp in cmsMenu.DropDownItems)
            {
                if (tsddTmp.Name == GlobalNames.FirstAndBusiness)
                {
                    tsddTmp.Visible = (etpParameters & DataManagement.ExceptionTable.ExceptionTableParameters.FirstAndBusiness) == DataManagement.ExceptionTable.ExceptionTableParameters.FirstAndBusiness;
                }
                else if (tsddTmp.Name == GlobalNames.FlightCategory)
                {
                    tsddTmp.Visible = (etpParameters & DataManagement.ExceptionTable.ExceptionTableParameters.FlightCategory) == DataManagement.ExceptionTable.ExceptionTableParameters.FlightCategory;
                }
                else if (tsddTmp.Name == GlobalNames.Airline)
                {
                    tsddTmp.Visible = (etpParameters & DataManagement.ExceptionTable.ExceptionTableParameters.Airline) == DataManagement.ExceptionTable.ExceptionTableParameters.Airline;
                }
                else if (tsddTmp.Name == GlobalNames.Flight)
                {
                    tsddTmp.Visible = (etpParameters & DataManagement.ExceptionTable.ExceptionTableParameters.Flight) == DataManagement.ExceptionTable.ExceptionTableParameters.Flight;
                }
                UpdateMenu(tsddTmp, etpParameters);
            }
        }

        #endregion

        #region # UserData ContextMenu

        private void cmsUserData_Opening(object sender, CancelEventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
            {
                e.Cancel = true;
                return;
            }
            if (tvtTag.isDirectoryNode)            
                tsmi_AddUserData.Text = "Add user data";
            else
                tsmi_AddUserData.Text = "Update user data";
            tsmi_DeleteUserData.Enabled = (CurrentNode.Name != "User Data");
            if (cmsUserData.Items.Count > 2)
                cmsUserData.Items.RemoveAt(2);
            /*if ((tvtTag.isDirectoryNode)&&(tsmi_DeleteUserData.Enabled ))
            {
                String DefaultTable = DonneesEnCours.getUserDataDefaultTable(tvtTag.Name);
                ToolStripMenuItem Tmp = new ToolStripMenuItem();
                Tmp.Text = DefaultTable;
                cmsUserData.Items.Add(Tmp); 
                //ToolStr
                String[] tsItems = DonneesEnCours.getUserDataChilds(tvtTag.Name);
                //DefaultTable
                foreach (String sItem in tsItems)
                {
                    ToolStripMenuItem Tmp2 = new ToolStripMenuItem();
                    Tmp2.Text = sItem;
                    if (DefaultTable == sItem)
                        Tmp2.Checked = true;
                    Tmp2.Click +=new EventHandler(ChangeDefaultOnClick);
                    Tmp.DropDownItems.Add(Tmp2);
                }
                //cmsUserData.Items[2].
            }*/


            // menu pour les notes
            InitNoteTootStripMenu(cmsUserData);
            UpdateNoteMenu(tvtTag.Name, tvtTag.ScenarioName, tvtTag.ExceptionName);
            this.noteToolStripMenuItem.Visible = (CurrentNode.Name != "User Data");
            this.noteToolStripMenuItem.Enabled = true;
        }

        private void tsmi_AddUserData_Click(object sender, EventArgs e)
        {
            openFileDialog1.FileName = "";
            openFileDialog1.Filter = "Data files (*.*)|*.*";
            openFileDialog1.Title = "Select an user data file";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                TreeViewTag tvtTag = CheckCurrentNode();
                String sNomTable = null;
                if (tvtTag.isTableNode)
                {
                    // >> Bug #14618 Pax2Sim - User Data update
                    if (openFileDialog1.SafeFileName != tvtTag.Name)
                    {
                        MessageBox.Show("The file selected as update source (" 
                            + openFileDialog1.SafeFileName + ") has a different name than the table (" + tvtTag.Name + ")." 
                            + Environment.NewLine + "The operation will be aborted.",
                            "Update User Data table", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return;
                    }
                    TreeNode firstParentDirectory = getFirstParentDirectory(CurrentNode);
                    if (firstParentDirectory != null)
                        DonneesEnCours.AddUserData(firstParentDirectory, cmsUserData, openFileDialog1.FileName, sNomTable);
                    // << Bug #14618 Pax2Sim - User Data update                    
                }
                else                
                    DonneesEnCours.AddUserData(CurrentNode, cmsUserData, openFileDialog1.FileName, sNomTable);
                
                sNomTable = openFileDialog1.SafeFileName;
                SelectNode(null);
                SelectNode(OverallTools.TreeViewFunctions.RechercherNom(sNomTable, treeView1.Nodes[1]));
            }
        }

        private TreeNode getFirstParentDirectory(TreeNode node)
        {
            if (node == null)
                return null;
            if (!(node.Tag is TreeViewTag))
                return null;
            if (((TreeViewTag)node.Tag).isDirectoryNode)
                return node;
            if (node.Parent == null)
                return null;
            return getFirstParentDirectory(node.Parent);
        }

        private void tsmi_DeleteUserData_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
            {
                return;
            }
            String sMessage = "Are you sure that you want to delete this ";
            if (tvtTag.isTableNode)
                sMessage += "table ?";
            else
                sMessage += "group of user data ?";

            if (MessageBox.Show(sMessage, "Warning", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.OK)
            {
                DonneesEnCours.DeleteUserData(CurrentNode,tvtTag.isDirectoryNode);
            }
        }
        #endregion
        
        #region Gestion de la table affichée dans le datagridview

        public void Pax2Sim_MouseWheel(Object sender, MouseEventArgs e)
        {
            return;/*
            Point pt = dataGridView1.PointToClient(MousePosition);
            if (pt.X > 0 && pt.Y > 0)
            {
                float fontSize = dataGridView1.Font.Size;
                if ((e.Delta < 0) && (fontSize > 2))
                {
                    fontSize -= 2;
                }
                else
                {
                    fontSize += 2;
                }

                dataGridView1.Font = new Font(dataGridView1.Font.Name, fontSize, FontStyle.Regular);
                ResizeAll_Click(null, null);
            }*/
        }

        #region Affichage de la table



        private void ViewTable(DataTable Table, TreeViewTag tvtTypeData)
        {
            int i;
            #region Activation, désactivation des boutons de la barre d'outil pour le dataGridView.
            bool bActive = (Table == null);

            ouvrirToolStripButton.Enabled = (!bActive) && getImportStatus();
            enregistrerToolStripButton.Enabled = !bActive;
            PrintPreview.Enabled = !bActive;
            imprimerToolStripButton.Enabled = !bActive;

            copierToolStripButton.Enabled = false;
            collerToolStripButton.Enabled = false;
            couperToolStripButton.Enabled = false;

            CollapseAllColumns.Enabled = !bActive;
            ExpandAllColumns.Enabled = !bActive;
            ResizeAllColumns.Enabled = !bActive;
            #endregion

            #region Réinitialisation du mode de visualisation, dans le cas ou la table est null.
            // La table que l'on souhaite visualiser n'existe pas
            if (bActive)
            {
                dataGridView1.DataSource = null;
                TabViewTable.Text = "Table";
                dataGridView1.Refresh();
                tstb_Value.Enabled = false;
                tsb_valid.Enabled = false;
                return;
            }
            #endregion

            #region Affichage du nombre de lignes dans la table
            tsl_NumberRows.Text = "";
            tsl_NumberRows.Text = "Rows : " + Table.Rows.Count.ToString();
            #endregion
            if (tvtTypeData == null)
                return;
                        
            if ((Table != null) && (Table.Columns.Count > 650))
            {
                MessageBox.Show("Unable to show current table, the number of columns is too big for being shown in the current system", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                dataGridView1.DataSource = null;
                return;
            }
            #region On réinitialise l'affichage pour les tables existantes.
            if (CurrentNode == null)
            {
                this.TabViewTable.Text = "> Table " + Table.TableName;
            }
            else
            {
                this.TabViewTable.Text = "> " + CurrentNode.Text;
            }

            //On bloque l'édition.
            if ((Table.TableName == "ParkingTable") || (Table.TableName == "Opening_CITable") || DonneesEnCours.IsUserData(Table.TableName) || tvtTypeData.IsExceptionNode)
            {
                this.dataGridView1.EditMode = DataGridViewEditMode.EditOnKeystrokeOrF2;
            }
            else
            {
                this.dataGridView1.EditMode = DataGridViewEditMode.EditProgrammatically;
            }
            #endregion

            #region Récupération du mode de visualisation pour cette table.
            VisualisationMode mode = null;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag != null)
            {
                if (Tag.IsExceptionNode)
                    mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, CurrentNode.Parent.Name, Tag.ExceptionName);
                else
                    mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, Table.TableName);
            }
            //Si le mode de visualisation n'existe pas, alors on en crée un par défaut.
            if (mode == null)
            {
                mode = new VisualisationMode(false, false, false, null, null);
            }
            #endregion

            #region En fonction des informations du mode de visualisation, on active ou non les boutons du menu contextuel
            dataGridView1.AllowUserToAddRows = false;//mode.AllowAddLine;
            dataGridView1.AllowUserToDeleteRows = mode.AllowAddLine || bJNK;
            tsb_Allocate_CheckIn.Enabled = (Table.TableName == GlobalNames.Opening_CITableName);
            tsb_AddRow.Enabled = mode.AllowAddLine;           
            tsb_DeleteRow.Enabled = mode.AllowAddLine || bJNK;
            EditTable.Enabled = mode.Modifiable || bJNK;
            tsb_Edit.Enabled = mode.Modifiable;


            tstb_Value.Enabled = (mode.EditMode == VisualisationMode.EditModeEnum.Cell);
            tsb_valid.Enabled = (mode.EditMode == VisualisationMode.EditModeEnum.Cell);

            //importTableToolStripMenuItem.Enabled = mode.Modifiable;
            ouvrirToolStripButton.Enabled = getImportStatus();
            if(tsb_AddRow.Enabled)
            {
                tsb_AddRow.Enabled = tsb_AddRow.Enabled && DonneesEnCours.TrialCanAddRow(tvtTypeData);
            }
            if (DonneesEnCours.TrialEraseLines(tvtTypeData))
            {
                MessageBox.Show("The number of line contained in the table \"" + Table.TableName + "\" is limited in the trial version.\n\rSome lines have been deleted from the table.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            // mise à jour de l'icone de la table
            if (tvtTypeData.isFilterNode && !tvtTypeData.isCopyTable)
            {
                List<TreeNode> treenodes = new List<TreeNode>();
                OverallTools.TreeViewFunctions.RechercheNodes(tvtTypeData.Name, treeView1.Nodes, ref treenodes);
                DataManagement.NormalTable nt = this.DonneesEnCours.GetTable(tvtTypeData.ScenarioName, tvtTypeData.Name);
                if(nt != null)
                    if (nt.isFilter && !(nt is DataManagement.ResultsFilterTable) && (nt is DataManagement.FilterTable))
                    {
                        tvtTypeData.UpdateFilterImage((nt as DataManagement.IFilterTable).Definition.Blocked, tvtTypeData.isCopyTable);
                        foreach (TreeNode node in treenodes)
                        {
                            TreeViewTag tvt = node.Tag as TreeViewTag;
                            if (tvt.ScenarioName != tvtTypeData.ScenarioName)
                                continue;
                            node.SelectedImageIndex = tvtTypeData.SelectedImageIndex;
                            node.ImageIndex = tvtTypeData.ImageIndex;
                        }
                    }
            }
            #endregion

            #region Affichage de la table, et initialisation des couleurs utilisées
            Cursor.Current = Cursors.WaitCursor;
            dataGridView1.DataSource = null;
            dataGridView1.SelectionMode = DataGridViewSelectionMode.CellSelect;

            dataGridView1.DataSource = Table;

            dataGridView1.DefaultCellStyle.BackColor = mode.BackgroundDefaultColor;
            dataGridView1.DefaultCellStyle.SelectionBackColor = mode.BackgroundSelectedColor;
            dataGridView1.DefaultCellStyle.ForeColor = mode.FontDefaultColor;
            dataGridView1.DefaultCellStyle.SelectionForeColor = mode.FontSelectedColor;
            #endregion

            #region Partie de code pour afficher ou non les header de ligne et la première ligne.
            dataGridView1.RowHeadersVisible = mode.ShowRowHeader;
            if (dataGridView1.Columns.Count != 0)
            {
                if (mode.FirstColumnInHeader && !mode.AllowAddLine)
                {
                    dataGridView1.Columns[0].Visible = false;
                    for (i = 0; i < Table.Rows.Count; i++)
                    {
                        dataGridView1.Rows[i].HeaderCell.Value = Table.Rows[i][0].ToString();
                    }
                }
                else
                {
                    if (dataGridView1.Columns.Count > 0)
                        dataGridView1.Columns[0].Visible = true;
                }
            }
            #endregion

            #region Gestion de l'affichage de chacune des colonnes.
            for (i = 0; i < dataGridView1.Columns.Count; i++)
            //foreach (DataGridViewColumn colonne in dataGridView1.Columns)
            {
                #region Gestion de la politique de tri de la table.
                
                    bool sortable = mode.Sortable;
                if((sortable)&&(((mode.allowSortColumn != null) && (mode.allowSortColumn.Length != 0))))
                    if (i < mode.allowSortColumn.Length)
                        sortable = mode.allowSortColumn[i];
                    else
                        sortable = mode.allowSortColumn[mode.allowSortColumn.Length - 1];
                if (sortable)
                {
                    dataGridView1.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }else{

                    dataGridView1.Columns[i].SortMode = DataGridViewColumnSortMode.NotSortable;
                }/*
                else
                {
                    if (i < mode.allowSortColumn.Length)
                    {
                        sortable = mode.allowSortColumn[i];
                    }
                    if (sortable)
                    {
                        dataGridView1.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                    }
                    else
                    {
                        dataGridView1.Columns[i].SortMode = DataGridViewColumnSortMode.NotSortable;
                    }
                }*/
                #endregion

                #region Gestion des largeurs des colonnes.
                if ((mode.ColumnWidth != null) && (mode.ColumnWidth.Length > 0))
                {
                    if (mode.ColumnWidth.Length > i)
                    {
                        dataGridView1.Columns[i].Width = mode.ColumnWidth[i];
                    }
                    else
                    {
                        dataGridView1.Columns[i].Width = mode.ColumnWidth[mode.ColumnWidth.Length - 1];
                    }
                }
                #endregion
            }
            if ((mode.ColumnWidth == null) || (mode.ColumnWidth.Length == 0))
            {
                ExpandAll_Click(null, null);
            }
            #endregion

            #region Gestion des colonnes gelées (ne se déplacent pas même si la barre du scroll du bas est utilisée.
            if ((mode.ColumnFrozen != null) && (mode.ColumnFrozen.Length != 0))
            {
                for (i = 0; i < mode.ColumnFrozen.Length; i++)
                {
                    if (i < dataGridView1.Columns.Count)
                    {
                        dataGridView1.Columns[i].Frozen = true;
                    }
                }
            }
            #endregion

            #region Gestion du mode de sélection de la table
            switch (mode.SelectionMode)
            {
                case VisualisationMode.SelectionModeEnum.Column:
                    dataGridView1.SelectionMode = DataGridViewSelectionMode.FullColumnSelect;
                    break;
                case VisualisationMode.SelectionModeEnum.Cell:
                    dataGridView1.SelectionMode = DataGridViewSelectionMode.CellSelect;
                    break;
                case VisualisationMode.SelectionModeEnum.Row:
                    dataGridView1.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
                    break;
            }
            #endregion

            //Redimensionnement de l'entete des lignes.
            dataGridView1.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders);

            for (i = 0; i < Table.Columns.Count;i++ )
            {
                if (Table.Columns[i].ExtendedProperties.Contains("ToolTip"))
                {
                    dataGridView1.Columns[i].ToolTipText = Table.Columns[i].ExtendedProperties["ToolTip"].ToString();
                }
            }
            /*dataGridView1.Columns[0].HeaderCell.Style = new DataGridViewCellStyle();*/
            
            // >> Task #10156 Pax2Sim - Statistic dev - Target
            if (CurrentNode != null && CurrentNode.Parent != null && CurrentNode.Parent.Tag != null)
            {
/*
                String parentName = CurrentNode.Parent.Name;
                TreeViewTag parentTag = (TreeViewTag)CurrentNode.Parent.Tag;

                if (parentName != null && parentTag != null 
                    && parentTag.isDirectoryNode && parentName.Equals(GlobalNames.TARGET_DIRECTORY_NAME))
                {
                    setColorCodeForTargetTable();
                }
*/
                if ((nodeBelongsToTargetDirectory(CurrentNode) && !CurrentNode.Name.Contains(GlobalNames.VIEW_STATS_TABLE_SUFFIX)) // >> Task #10254 Pax2Sim - View statistics option
                    || CurrentNode.Name.EndsWith(GlobalNames.TARGET_TABLE_NAME_SUFIX) || CurrentNode.Name.Equals(TargetOverview.TARGET_OVERVIEW_TABLE_NAME))   // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Bug.1.
                {
                    setColorCodeForTargetTable();
                }
            }
            // << Task #10156 Pax2Sim - Statistic dev - Target
            SearchToolStripTextBox.Text = "";   // >> Task #15717 PAX2SIM - Create Filter Assistant and Datagrid - new Features - C#9
            Cursor.Current = Cursors.Default;
        }

        // >> Task #10156 Pax2Sim - Statistic dev - Target

        private bool nodeBelongsToTargetDirectory(TreeNode node)
        {
            if (node != null)
            {
                while (node.Parent != null)
                {
                    if (node.Parent.Tag != null && node.Parent.Name != null)
                    {
                        TreeViewTag parentTag = (TreeViewTag)node.Parent.Tag;
                        if (parentTag.isDirectoryNode && node.Parent.Name.Equals(GlobalNames.TARGET_DIRECTORY_NAME))
                            return true;
                    }
                    node = node.Parent;
                }
            }
            return false;
        }

        private void setColorCodeForTargetTable()
        {
            foreach (DataGridViewRow row in dataGridView1.Rows)
            {
                if (row.Cells != null && row.Cells[GlobalNames.target_targetAchived_columnName] != null
                    && row.Cells[GlobalNames.target_targetAchived_columnName].Value != null)
                {
                    String targetAchieved = row.Cells[GlobalNames.target_targetAchived_columnName].Value.ToString();
                    if (targetAchieved != null)
                    {                        
                        if (targetAchieved.Equals(GlobalNames.TARGET_ACHIEVED_POSITIVE))
                        {
                            row.DefaultCellStyle.BackColor = Color.LightGreen;
                        }
                        else if (targetAchieved.Equals(GlobalNames.TARGET_ACHIEVED_NEGATIVE))
                        {                            
                            row.DefaultCellStyle.BackColor = ControlPaint.LightLight(Color.Red);
                        }
                    }
                }
            }
            dataGridView1.Refresh();
        }
        // << Task #10156 Pax2Sim - Statistic dev - Target

        private void ViewTable(String dataset, string NomTable, TreeViewTag tvtTypeData)
        {
            if (DonneesEnCours == null)
            {
                ViewTable((DataTable)null,null);
                return;
            }
            if ((NomTable != null) && (tvtTypeData != null) && (tvtTypeData.isFilterNode))
            {
                ViewTable(DonneesEnCours.getTable(dataset, NomTable), tvtTypeData);
            }
            else if ((dataset == null) || (NomTable == null))
            {
                ViewTable((DataTable)null, null);
                return;
            }
            else if (tvtTypeData.IsExceptionNode)
            {
                ViewTable(DonneesEnCours.getExceptionTable(dataset, NomTable,tvtTypeData.ExceptionName), tvtTypeData);
                return;
            }
            DonneesEnCours.UpdateAllocation(dataset, NomTable);
            ViewTable(DonneesEnCours.getTable(dataset, NomTable), tvtTypeData);            
        }
        private void ChangeStateButtons(TreeNode tnNode)
        {
            /*if(tnScenarioNode.Tag.GetType() != typeof(TreeViewTag))
            TreeViewTag tvtTmp = */
        }
        #endregion

        #region Mise en forme de la table.
        private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            // les données du datagridview sont vides, on n'a donc pas 
            // de mise en forme à faire.
            if (((DataGridView)sender).DataSource == null)
                return;

            TreeViewTag Tag = CheckCurrentNode();
            if ((Tag == null)||(Tag.ScenarioName == null))
                return;
            VisualisationMode mode = null;
            if (Tag.IsExceptionNode)
            {
                if (CurrentNode.Parent != null)
                    mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, CurrentNode.Parent.Name, Tag.ExceptionName);
            }
            else
                mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, Tag.Name);
            
            // = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, ((DataGridView)sender).DataSource.ToString());
            if (mode == null) 
                return;
            e.CellStyle.ForeColor = mode.FontDefaultColor;
            if (mode.FirstColumnInHeader)
            {
                if (e.ColumnIndex == 0)
                {
                    dataGridView1.Rows[e.RowIndex].HeaderCell.Value = e.Value;
                }
            }
            //Il n'y a pas de mise en forme particulière pour cette table.
            if (mode.ConditionnalFormatClass == null)
                return;
            if (mode.ConditionnalFormatClass[0] == null)
                return;
            //Si la valeur de la cellule est nulle, on ne fait rien.
            if (e.Value == null)
                return;
            if ((mode.ConditionnalFormatClass[0].GetType() == typeof(ConditionnalFormatErrors))||
                (mode.ConditionnalFormatClass[0].GetType() == typeof(ConditionnalFormatLine)))
            {
                e.CellStyle.BackColor = mode.getVisualisationMode(e.ColumnIndex, e.RowIndex);
                dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].ToolTipText = mode.getErrorText(e.ColumnIndex, e.RowIndex);
                e.Value = mode.getPrefixe(e.ColumnIndex, e.RowIndex) + e.Value + mode.getSuffixe(e.ColumnIndex, e.RowIndex) ;
            }
            else
            {
                e.CellStyle.BackColor = mode.getVisualisationMode(e.ColumnIndex,e.Value);
            }
        }

        void dataGridView1_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        { /*
            // les données du datagridview sont vides, on n'a donc pas 
            // de mise en forme à faire.
            if (((DataGridView)sender).DataSource == null)
                return;

            TreeViewTag Tag = CheckCurrentNode();
            if ((Tag == null) || (Tag.ScenarioName == null))
                return;
            VisualisationMode mode = null;
            if (Tag.IsExceptionNode)
            {
                if (CurrentNode.Parent != null)
                    mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, CurrentNode.Parent.Name, Tag.ExceptionName);
            }
            else
                mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, Tag.Name);

            if (mode == null)
                return;

            //Il n'y a pas de mise en forme particulière pour cette table.
            if (mode.ConditionnalFormatClass == null)
                return;
            if (mode.ConditionnalFormatClass[0] == null)
                return;
            //Si la valeur de la cellule est nulle, on ne fait rien.
            if ((mode.ConditionnalFormatClass[0].GetType() == typeof(ConditionnalFormatErrors)))
            {
                dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = ((DataTable)dataGridView1.DataSource).Rows[e.RowIndex][e.ColumnIndex].ToString();
            }*/

        }
        #endregion

        #region Fonction pour afficher le menu contextuel lors d'un clic droit dans le datagridview (vérifie également les données sélectionnées)
        private void dataGridView1_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (!ValidateCellContent())
                    return;
                if ((e.ColumnIndex == -1) || (e.RowIndex == -1))
                    return;
                if (dataGridView1.Rows.Count == 0)
                    return;
                if(e.RowIndex >= dataGridView1.Rows.Count )
                    return;
                switch (dataGridView1.SelectionMode)
                {
                    case DataGridViewSelectionMode.FullColumnSelect:
                        if (!this.dataGridView1.Columns[e.ColumnIndex].Selected)
                        {
                            foreach (DataGridViewColumn colonne in dataGridView1.SelectedColumns)
                            {
                                colonne.Selected = false;
                            }
                            this.dataGridView1.Columns[e.ColumnIndex].Selected = true;
                        }

                        break;
                    case DataGridViewSelectionMode.FullRowSelect:
                        if (!this.dataGridView1.Rows[e.RowIndex].Selected)
                        {
                            foreach (DataGridViewRow ligne in dataGridView1.SelectedRows)
                            {
                                ligne.Selected = false;
                            }
                            this.dataGridView1.Rows[e.RowIndex].Selected = true;
                        }
                        break;
                    case DataGridViewSelectionMode.CellSelect:
                        if (!this.dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].Selected)
                        {
                            foreach (DataGridViewCell cell in dataGridView1.SelectedCells)
                            {
                                cell.Selected = false;
                            }
                            this.dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex].Selected = true;
                        }
                        break;
                }
                dataGridView1.CurrentCell = dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex];
                contextMenuDataView.Show(MousePosition);
            }
            else if (e.Button == MouseButtons.Left)
            {
                if (!bOnEditMode)
                    return;
                TreeViewTag Tag = CheckCurrentNode();
                if (Tag == null)
                {
                    bOnEditMode = false;
                    if(AcceptData())
                        UpdateTable();
                    return;
                }
                int iNewColumn = dataGridView1.CurrentCell.ColumnIndex;
                int iNewRow = dataGridView1.CurrentCell.RowIndex;
                VisualisationMode mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, Tag.Name);
                if (mode == null)
                {
                    bOnEditMode = false;
                    if (AcceptData())
                    UpdateTable();
                    return;
                }
                if ((mode.ColumnBlocked != null) && (mode.ColumnBlocked.Length != 0))
                {
                    foreach (int iColumn in mode.ColumnBlocked)
                    {
                        if (iNewColumn == iColumn)
                        {
                            bOnEditMode = false;
                            if (AcceptData())
                            UpdateTable();
                            return;
                        }
                    }
                }
                if (((mode.EditMode == VisualisationMode.EditModeEnum.Row) && (iEditRowIndex != iNewRow)) ||
                    ((mode.EditMode == VisualisationMode.EditModeEnum.Column) && (iEditColumnIndex != iNewColumn)))
                {
                    bOnEditMode = false;
                   if(AcceptData())
                        UpdateTable();
                }
                else if (mode.EditMode != VisualisationMode.EditModeEnum.None)
                {
                    dataGridView1.BeginEdit(true);
                    bOnEditMode = true;
                    iEditColumnIndex = iNewColumn;
                    iEditRowIndex = iNewRow;
                }
            }
        }


        #region Partie utilisée pour le remplissage automatique des User des plans de vols
        private List<UserFilling> lus_AvailableLinks;

        private void InitializeAvailableLinks()
        {
            lus_AvailableLinks = new List<UserFilling>();
            lus_AvailableLinks.Add(new UserFilling(GlobalNames.FP_AirlineCodesTableName,
                                             GlobalNames.sFPD_A_Column_AirlineCode,
                                             GlobalNames.sFPAirline_AirlineCode,
                                             GlobalNames.sFPAirline_Description,
                                             ""));
            lus_AvailableLinks.Add(new UserFilling(GlobalNames.FP_AirlineCodesTableName,
                                             GlobalNames.sFPD_A_Column_AirlineCode,
                                             GlobalNames.sFPAirline_AirlineCode,
                                             GlobalNames.sFPAirline_GroundHandlers,
                                             ""));
            lus_AvailableLinks.Add(new UserFilling(GlobalNames.FP_AirportCodesTableName,
                                             GlobalNames.sFPD_A_Column_AirportCode,
                                             GlobalNames.sFPAirport_AirportCode,
                                             GlobalNames.sFPAirport_Description,
                                             ""));
            lus_AvailableLinks.Add(new UserFilling(GlobalNames.FP_FlightCategoriesTableName,
                                             GlobalNames.sFPD_A_Column_FlightCategory,
                                             GlobalNames.sFPFlightCategory_FC,
                                             GlobalNames.sFPFlightCategory_Description,
                                             ""));


            lus_AvailableLinks.Add(new UserFilling(GlobalNames.FP_AircraftTypesTableName,
                                             GlobalNames.sFPD_A_Column_AircraftType,
                                             GlobalNames.sFPAircraft_AircraftTypes,
                                             GlobalNames.sFPAircraft_NumberSeats,
                                             ""));
            lus_AvailableLinks.Add(new UserFilling(GlobalNames.FP_AircraftTypesTableName,
                                             GlobalNames.sFPD_A_Column_AircraftType,
                                             GlobalNames.sFPAircraft_AircraftTypes,
                                             GlobalNames.sTableColumn_ULDLoose,
                                             ""));
        }
        private void dataGridView1_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (!ValidateCellContent())
                return;
            TreeViewTag Tag = CheckCurrentNode();
            if(e.Button != MouseButtons.Right)
                return;
            if (Tag == null)
                return;
            if(Tag.ScenarioName != "Input")
                return;
            if(Tag.isFilterNode && (!Tag.isCopyTable))
                return;
            DataTable dtTable = null;
            if(Tag.IsExceptionNode)
                dtTable = DonneesEnCours.getExceptionTable(Tag.ScenarioName,Tag.Name,Tag.ExceptionName);
            else
                dtTable = DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name);
            if((dtTable == null) || (e.ColumnIndex>dtTable.Columns.Count))
                return;

            // S'il s'agit d'un click droit sur une colonne "User"
            if(dtTable.Columns[e.ColumnIndex].ColumnName.Contains("User "))
            {
                String sName = Tag.Name;


                String sMotherName = DonneesEnCours.getFilterRootName(Tag.ScenarioName,Tag.Name);
                if ((sName != GlobalNames.FPDTableName) &&
                    (sName != GlobalNames.FPATableName) &&
                    (sMotherName != GlobalNames.FPDTableName) &&
                    (sMotherName != GlobalNames.FPATableName))
                    return;

                if (lus_AvailableLinks == null)
                    InitializeAvailableLinks();
                String sColumn = dtTable.Columns[e.ColumnIndex].ColumnName;
                ToolStripMenuItem tsmi_Tmp;
                cms_ColumnHeader.Items.Clear();

                /*The clear Column button*/
                tsmi_Tmp = new ToolStripMenuItem();
                tsmi_Tmp.Name = "ClearColumn";
                tsmi_Tmp.Text = "Clear column";
                tsmi_Tmp.Click += new EventHandler(tsmi_Tmp_Click);
                tsmi_Tmp.Tag = sColumn;
                cms_ColumnHeader.Items.Add(tsmi_Tmp);
                /*Add a separator in the menu.*/
                ToolStripSeparator tss = new ToolStripSeparator();
                cms_ColumnHeader.Items.Add(tss );

                foreach (UserFilling ustmp in lus_AvailableLinks)
                {
                    if (dtTable.Columns.Contains(ustmp.sFPColumnLink_))
                    {
                        tsmi_Tmp = new ToolStripMenuItem();
                        tsmi_Tmp.Name = ustmp.sColumnInformation_.Replace(' ', '_');
                        tsmi_Tmp.Text = "Fill " + sColumn + " with " + ustmp.sColumnInformation_ + " contained in table " + ustmp.sTableName_ + ".";
                        tsmi_Tmp.Click += new System.EventHandler(this.FillUserWithToolStripMenuItem_Click);
                        ustmp.sColumnUser_ = sColumn;
                        tsmi_Tmp.Tag = ustmp;
                        cms_ColumnHeader.Items.Add(tsmi_Tmp);
                    }
                }

                //this.fillWithAirportNameToolStripMenuItem.Name = "fillWithAirportNameToolStripMenuItem";
                //resources.ApplyResources(this.fillWithAirportNameToolStripMenuItem, "fillWithAirportNameToolStripMenuItem");
           

                if(cms_ColumnHeader.Items.Count>0)
                    cms_ColumnHeader.Show(MousePosition);
            }

            // S'il s'agit 'un click droit sur les colonnes "Aircraft type", "Airport code", "Flight Category" et "Airline code" des tables FPA et FPD
            else if (dtTable.TableName == GlobalNames.FPATableName || dtTable.TableName == GlobalNames.FPDTableName)
            {
                ToolStripMenuItem tsmi_Tmp = new ToolStripMenuItem();
                tsmi_Tmp.Tag = e.ColumnIndex;
                String sColumnName = dtTable.Columns[e.ColumnIndex].ColumnName;

                //si on est pas sur la bonne colonne on quitte
                if (!(sColumnName.Contains(GlobalNames.sFPD_A_Column_AirlineCode) ||
                    sColumnName.Contains(GlobalNames.sFPD_A_Column_AirportCode) ||
                    sColumnName.Contains(GlobalNames.sFPD_A_Column_AircraftType) ||
                    sColumnName.Contains(GlobalNames.sFPD_A_Column_FlightCategory)))
                    return;

                // set ContextMenuStrip
                tsmi_Tmp.Name = "Add unknown " + sColumnName[0] + sColumnName.ToLower().Substring(1);
                tsmi_Tmp.Text = tsmi_Tmp.Name;
                cms_ColumnHeader.Items.Clear();
                cms_ColumnHeader.Items.Add(tsmi_Tmp);
                cms_ColumnHeader.Show(MousePosition);
                tsmi_Tmp.Click += new System.EventHandler(this.tsmiAddUnknow_Click);
                
                
            }
        }
        /// <summary>
        /// Fonction lancé au click droit sur les colonnes "Aircraft type", "Airport code", "Flight Category"
        /// et "Airline code" pour ajouter les elements inexistant dans les tables coorecpondantes.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tsmiAddUnknow_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            if (Tag.ScenarioName != "Input")
                return;
            if (Tag.isFilterNode && (!Tag.isCopyTable))
                return;
            DataTable dtTable = DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name);
            int? iColumnIndex = (sender as ToolStripMenuItem).Tag as int?;
            if (iColumnIndex == null)
                return;
            String sColumnName = dtTable.Columns[(int)iColumnIndex].ColumnName;
            DataTable dtRefTable;

            if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AirlineCode))
            {
                dtRefTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AirlineCodesTableName);
            }
            else if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AirportCode))
            {
                dtRefTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AirportCodesTableName);
            }
            else if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AircraftType))
            {
                dtRefTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AircraftTypesTableName);
            }
            else if (sColumnName.Contains(GlobalNames.sFPD_A_Column_FlightCategory))
            {
                dtRefTable = DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName);
            }
            else
                return;
            if (dtTable == null)
                return;

            // recherche des elements unique
            int nb = 0;
            String[] values = OverallTools.DataFunctions.obtenirListeDifferents(dtTable, (int)iColumnIndex);
            foreach (String value in values)
            {
                bool found = false;
                // on cherche si la valeur est présente dans la première colonne de la table de reference                
                foreach (DataRow dr in dtRefTable.Rows)
                {
                    String presentValue = dr[0].ToString();                    
                    if (presentValue == value)
                    {
                        found = true;
                        break;
                    }
                }

                // si la valeur n'est pas trouvée, on l'ajoute
                if (!found)
                {
                    nb++;
                    if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AirlineCode) ||
                        sColumnName.Contains(GlobalNames.sFPD_A_Column_AirportCode) ||
                        sColumnName.Contains(GlobalNames.sFPD_A_Column_FlightCategory))
                        OverallTools.DataFunctions.AddLine_FP(dtRefTable, value, null, null, false);                        
                    else if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AircraftType))
                        OverallTools.DataFunctions.AddLine_FP_Aircraft(dtRefTable, value, null, null, null, "0", GlobalNames.sTableContent_ULD, false);
                }
            }

            // affichage du nombre de truc ajouté
            if (nb>0)
            {
                String eltName = sColumnName[0] + sColumnName.ToLower().Substring(1);
                String msg = nb.ToString() + " " + eltName +
                    " has been added to the " + eltName + " table.";
                MessageBox.Show(
                    msg,
                    "Element added",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
            }

            // force update the modified table
            DonneesEnCours.aEteModifiee("Input", dtRefTable.TableName);
            AcceptData();
            UpdateTable();
        }

        private void tsmiAddUnknow_Click_2(object sender, EventArgs e)  // >> Task #16654 Reclaim - import and allocation for Narita
        {
            if (!ValidateCellContent())
                return;
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            if (Tag.ScenarioName != "Input")
                return;
            if (Tag.isFilterNode && (!Tag.isCopyTable))
                return;
            DataTable dtTable = DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name);
            int? iColumnIndex = (sender as ToolStripMenuItem).Tag as int?;
            if (iColumnIndex == null)
                return;
            String sColumnName = dtTable.Columns[(int)iColumnIndex].ColumnName;
            DataTable dtRefTable;

            if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AirlineCode))
            {
                dtRefTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AirlineCodesTableName);
            }
            else if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AirportCode))
            {
                dtRefTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AirportCodesTableName);
            }
            else if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AircraftType))
            {
                dtRefTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AircraftTypesTableName);
            }
            else if (sColumnName.Contains(GlobalNames.sFPD_A_Column_FlightCategory))
            {
                dtRefTable = DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName);
            }
            else
                return;
            if (dtTable == null)
                return;

            int user4ColumnIndex = dtTable.Columns.IndexOf(GlobalNames.sFPD_A_Column_User4);    // >> Task #16654 Reclaim - import and allocation for Narita

            // recherche des elements unique
            int nb = 0;
            Dictionary<string, string> dictionary = new Dictionary<string, string>();            
            String[] values = OverallTools.DataFunctions.obtenirListeDifferents_2(dtTable, (int)iColumnIndex, user4ColumnIndex, out dictionary);
            foreach (String value in values)
            {
                bool found = false;
                // on cherche si la valeur est présente dans la première colonne de la table de reference                
                foreach (DataRow dr in dtRefTable.Rows)
                {
                    String presentValue = dr[0].ToString();
                    if (presentValue == value)
                    {
                        found = true;
                        break;
                    }
                }

                // si la valeur n'est pas trouvée, on l'ajoute
                if (!found)
                {
                    string ghPlusUser4AllianceValue = "GH_" + dictionary[value];// << Task #16654 Reclaim - import and allocation for Narita
                    nb++;
                    if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AirlineCode) ||
                        sColumnName.Contains(GlobalNames.sFPD_A_Column_AirportCode) ||
                        sColumnName.Contains(GlobalNames.sFPD_A_Column_FlightCategory))                        
                        OverallTools.DataFunctions.AddLine_FP(dtRefTable, value, null, ghPlusUser4AllianceValue, false);    // << Task #16654 Reclaim - import and allocation for Narita
                    else if (sColumnName.Contains(GlobalNames.sFPD_A_Column_AircraftType))
                        OverallTools.DataFunctions.AddLine_FP_Aircraft(dtRefTable, value, null, null, null, "0", GlobalNames.sTableContent_ULD, false);
                }
            }

            // affichage du nombre de truc ajouté
            if (nb > 0)
            {
                String eltName = sColumnName[0] + sColumnName.ToLower().Substring(1);
                String msg = nb.ToString() + " " + eltName +
                    " has been added to the " + eltName + " table.";
                MessageBox.Show(
                    msg,
                    "Element added",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
            }

            // force update the modified table
            DonneesEnCours.aEteModifiee("Input", dtRefTable.TableName);
            AcceptData();
            UpdateTable();
        }

        private class UserFilling
        {
            internal String sTableName_;
            internal String sFPColumnLink_;
            internal String sColumnLink_;
            internal String sColumnInformation_;
            internal String sColumnUser_;
            internal UserFilling(String sTableName, String sFPColumnLink, String sColumnLink, String sColumnInformation, String sColumnUser)
            {
                sTableName_ = sTableName;
                sFPColumnLink_ = sFPColumnLink;
                sColumnLink_ = sColumnLink;
                sColumnInformation_ = sColumnInformation;
                sColumnUser_ = sColumnUser;
            }
            internal UserFilling Copy()
            {
                return new UserFilling(sTableName_, sFPColumnLink_, sColumnLink_, sColumnInformation_, sColumnUser_);
            }
        }

        void tsmi_Tmp_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            if ((sender == null) || (sender.GetType() != typeof(ToolStripMenuItem)))
                return;
            ToolStripMenuItem tsmi_Sender = (ToolStripMenuItem)sender;
            if ((tsmi_Sender.Tag == null) || (tsmi_Sender.Tag.GetType() != typeof(String)))
                return;
            String sColumn = tsmi_Sender.Tag.ToString();
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            DataTable dtTable = DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name);
            if (dtTable == null)
                return;
            int iIndexColumn = dtTable.Columns.IndexOf(sColumn);
            if(iIndexColumn ==-1)
                return;

            // confirmation
            if (MessageBox.Show("Are you sure that you want to delete this column content ?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Information) != DialogResult.Yes)
                return;

            foreach (DataRow drRow in dtTable.Rows)
            {
                drRow[iIndexColumn] = "";
            }
            dtTable.AcceptChanges();
            DonneesEnCours.aEteModifiee(Tag.ScenarioName, Tag.Name);
        }
        private void FillUserWithToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            if ((sender==null)||(sender.GetType() != typeof(ToolStripMenuItem)))
                return;
            ToolStripMenuItem tsmi_Sender = (ToolStripMenuItem)sender;
            if ((tsmi_Sender.Tag == null) || (tsmi_Sender.Tag.GetType() != typeof(UserFilling)))
                return;
            UserFilling uf_Sender = (UserFilling)tsmi_Sender.Tag;


            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            DataTable dtTable = DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name);
            if(dtTable == null) 
                return;
            DataTable dtSecondTable = DonneesEnCours.getTable(Tag.ScenarioName, uf_Sender.sTableName_);
            if (dtSecondTable == null)
                return;
            FillUser(dtTable, dtSecondTable, uf_Sender);
            DonneesEnCours.aEteModifiee(Tag.ScenarioName, Tag.Name);
        }
        private static void FillUser(DataTable dtMainTable, DataTable dtInformationTable, UserFilling usLinks)
        {
            if ((dtMainTable == null)||
                (dtInformationTable == null)||
                (usLinks == null)||
                (!dtMainTable.Columns.Contains(usLinks.sFPColumnLink_))||
                (!dtMainTable.Columns.Contains(usLinks.sColumnUser_))||
                (!dtInformationTable.Columns.Contains(usLinks.sColumnLink_))||
                (!dtInformationTable.Columns.Contains(usLinks.sColumnInformation_)))
                return;
            int iIndexFPLink = dtMainTable.Columns.IndexOf(usLinks.sFPColumnLink_);
            int iIndexFPUser = dtMainTable.Columns.IndexOf(usLinks.sColumnUser_);

            int iIndexLink = dtInformationTable.Columns.IndexOf(usLinks.sColumnLink_);
            int iIndexInformation = dtInformationTable.Columns.IndexOf(usLinks.sColumnInformation_);
            for (int i = 0; i < dtMainTable.Rows.Count; i++)
            {
                String sLink = dtMainTable.Rows[i][iIndexFPLink].ToString();
                String sValue = OverallTools.DataFunctions.getValue(dtInformationTable, sLink, iIndexLink, iIndexInformation);
                if (sValue == null)
                    sValue = "";
                dtMainTable.Rows[i][iIndexFPUser] = sValue;
            }
            dtMainTable.AcceptChanges();
        }
        #endregion
        #endregion

        #region Gestion des erreurs sur les données
        private bool AcceptData()
        {
            if (DonneesEnCours == null)
                return false;
            String sortedColumn = null;
            if (bPAX)   // PAX key flag disabled
            {
                if ((DonneesEnCours.getTable("Input", GlobalNames.FPDTableName).Rows.Count == 0) &&
                    (DonneesEnCours.getTable("Input", GlobalNames.FPATableName).Rows.Count == 0))
                    return true;
            }
            ArrayList ListeErreurs = new ArrayList();
            if (CurrentNode != null)
            {
                if ((dataGridView1.DataSource != null) && (((DataTable)dataGridView1.DataSource).Columns.Count > 0))
                {
                    if (dataGridView1.SortedColumn == null)
                        sortedColumn = ((DataTable)dataGridView1.DataSource).Columns[0].ColumnName;
                    else
                        sortedColumn = dataGridView1.SortedColumn.Name;
                }
                ListeErreurs = DonneesEnCours.CheckTable(CurrentNode.Name, sortedColumn, dataGridView1.SortOrder);
            }
            else
            {
                if (bPAX)   // PAX key flag disabled
                {
                    ListeErreurs = DonneesEnCours.CheckFlightPlans(sortedColumn, dataGridView1.SortOrder);
                }
            }            
            setErrors(ListeErreurs,true);
            if ((ListeErreurs == null)||(ListeErreurs.Count == 0))
                return true;
            return false;
        }

        internal static ArrayList errorList = new ArrayList();// >> Bug #14618 Pax2Sim - User Data update
        
        private void setErrors(ArrayList ErrorList,bool bShowMessages)
        {
            if ((ErrorList == null) || (ErrorList.Count == 0))
            {
                //S'il n'y a eu aucune erreur durant la vérification des données
                bDataAreValids = true;
                if (lesErreurs != null)
                {
                    lesErreurs.setErrors(null);
                    lesErreurs.Hide();
                    errorList.Clear();  // >> Task #16728 #54
                }
            }
            else if (!bDataAreValids)
            {
                //S'il y a eu des erreurs lors de la vérification des données, et que la fenêtre des erreurs 
                //a déjà été affichée, alors on réactualise son contenu et on la réaffiche.
                lesErreurs.setErrors(ErrorList);
                lesErreurs.Show();
                errorList.AddRange(ErrorList);  // >> Task #16728 #54
            }
            else
            {
                //Sinon on affiche la fenêtre regroupant toutes les erreurs.
                bDataAreValids = false;
                if(bShowMessages)
                    MessageBox.Show("There were error between the Flight plans and the Airport structure.","Warning",MessageBoxButtons.OK,MessageBoxIcon.Exclamation);
                if (lesErreurs == null)
                {
                    lesErreurs = new Errors(ErrorList);
                    //lesErreurs.Parent = this;
                    lesErreurs.Location = this.Location;
                    cms_NotifyMenu.Items.Add("Errors list",null,tsmi_ErrorList_Click);
                }
                else
                {
                    lesErreurs.setErrors(ErrorList);
                }
                lesErreurs.Show();
                errorList.AddRange(ErrorList);  // >> Task #16728 #54
            }
        }

        private void dataGridView1_DataError(object sender, DataGridViewDataErrorEventArgs e)
        {
            e.Cancel = true;
        }

        private void dataGridView1_Sorted(object sender, EventArgs e)
        {
            //Pour que les erreurs soient colorées correctement.
            AcceptData();
        }

        private void dataGridView1_CellToolTipTextNeeded(object sender, DataGridViewCellToolTipTextNeededEventArgs e)
        {
            // les données du datagridview sont vides, il n'y a donc aucun tooltip à afficher.
            if (((DataGridView)sender).DataSource == null)
                return;

            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            VisualisationMode mode;
            if (Tag.IsExceptionNode)
                mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, CurrentNode.Parent.Name, Tag.ExceptionName);
            else
                mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, Tag.Name);
            
            //VisualisationMode mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, ((DataGridView)sender).DataSource.ToString());
            if (mode == null)
                return;
            if (mode.ConditionnalFormatClass == null)
                return;
            if (mode.ConditionnalFormatClass.GetType() == typeof(ConditionnalFormatErrors))
            {
                e.ToolTipText = OverallTools.FonctionUtiles.FormatString(((ConditionnalFormatErrors)mode.ConditionnalFormatClass[0]).getError(e.ColumnIndex, e.RowIndex), 35);
            }
        }
        #endregion

        #region Fonctions pour la validation des données

        private bool ValidateCellContent()
        {
            if (bOnEditMode)
            {
                if (dataGridView1.Rows.Count == 0)
                    return true;
                if (!ValidateCellContent(iEditColumnIndex, iEditRowIndex, dataGridView1.Rows[iEditRowIndex].Cells[iEditColumnIndex].EditedFormattedValue.ToString()))
                    return false;
                bOnEditMode = false;
                if (AcceptData())
                UpdateTable();
            }
            return true;
        }
        private bool ValidateCellContent(int iColumn, int iRow, String sValue)
        {

            TreeViewTag Tag = CheckCurrentNode();
            if (dataGridView1.DataSource == null)
                return true;
            if (((DataTable)dataGridView1.DataSource).TableName != Tag.ScenarioName)
                return true;
            if (Tag == null)
                return true;
            DataTable table = DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name);
            if (table == null)
                return true;
            if (iColumn > table.Columns.Count)
                return true;
            Type ColumnType = table.Columns[iColumn].DataType;
            DataColumn column = ((DataTable)dataGridView1.DataSource).Columns[iColumn];
            String msg = "Error : The data in the line '" + (iRow + 1).ToString() + "' and in the column '" + column.ColumnName + "' does not have a good format.";


            
            if ((ColumnType == typeof(String)) ||
                (ColumnType == typeof(string)))
            {
                /*
#if(NEWALLOCATIONSECU)
                        if (bPassportTable)
                        {
                            if (!OverallTools.DataFunctions.checkPassportValue(table.Rows[i][j].ToString()))
#else
                        if (!OverallTools.DataFunctions.checkPassportNewFormat(table.Rows[i][j].ToString()))
#endif*/
                
#if(NEWALLOCATIONSECU)
                if((CurrentNode.Name == GlobalNames.Alloc_PassportCheckTableName) ||
                    (CurrentNode.Name == GlobalNames.Alloc_SecurityCheckTableName) ||
                    (CurrentNode.Name == GlobalNames.Alloc_TransferDeskTableName)
                 || (CurrentNode.Name == GlobalNames.Alloc_UserProcessCheckTableName))   // << Task #7570 new Desk and extra information for Pax -Phase I B
                {
                    //<< Task #7405 - new Desk and extra information for Pax
                    DataTable userAttributesTable = DonneesEnCours.getTable("Input", GlobalNames.sUserAttributesTableName);
                    int iExtraColumns = 0;
                    // << Task #9066 Pax2Sim - Peak FLows - BHS Inbounds Smooth/Instant
                    int nbOfNonUserAttributesColumns = 0;
                    // >> Task #9066 Pax2Sim - Peak FLows - BHS Inbounds Smooth/Instant
                    if (userAttributesTable != null)
                    {
                        // << Task #9066 Pax2Sim - Peak FLows - BHS Inbounds Smooth/Instant
                        foreach (DataRow dr in userAttributesTable.Rows)
                        {
                            String userAttribute = dr[GlobalNames.sUserAttributes_ColumnName].ToString();
                            if (GlobalNames.nonUserAttributesExceptionsList.Contains(userAttribute))
                                nbOfNonUserAttributesColumns++;
                        }
                        iExtraColumns = userAttributesTable.Rows.Count - nbOfNonUserAttributesColumns;
                        //iExtraColumns = userAttributesTable.Rows.Count;
                        // >> Task #9066 Pax2Sim - Peak FLows - BHS Inbounds Smooth/Instant                            
                    }
                    //>> Task #7405 - new Desk and extra information for Pax
                    if (OverallTools.DataFunctions.checkPassportNewFormat(sValue, iExtraColumns))
                        return true;
                    msg += "\nThe syntax for each cells is :\"a;b;c;d;e;f;g\"\n\t\t- a : Number of opened desk in the group\n\t\t- b: Remaining time before STD for passenger to allow him to bypass the desk\n\t\t- c: Passport type of the passenger \n\t\t- d: Class of passenger\n\t\t- e: Allowed flight categories\n\t\t- f : Allowed airlines\n\t\t- g : Allowed flights";
                }
                else
                    return true;
#else
                if ((CurrentNode.Name == "Alloc_PassportCheckTable") && iColumn != 0)
                {
                    if (OverallTools.DataFunctions.checkPassportValue(sValue))
                        return true;
                    msg += "\nThe syntax for each cell is :\"x,y\"\n\t\t- x = (1: Local, 2 : Not local, 3 : Both)\n\t\t- y = Number of opened desks";
                }
                else
                    return true;
#endif
            }
            else if ((ColumnType == typeof(int)) ||
                (ColumnType == typeof(Int32)) ||
                (ColumnType == typeof(Int64)) ||
                (ColumnType == typeof(Int16)))
            {
                Int64 iValue;
                if (Int64.TryParse(sValue, out iValue))
                    return true;
                msg += "The value type for this column is an integer, please check the values.";
            }
            else if ((ColumnType == typeof(Double)) ||
                (ColumnType == typeof(double)))
            {
                Double dValue;
                if (Double.TryParse(sValue, out dValue))
                    return true;
                msg += "The value type for this column is a double, please check the values.";
            }
            else if (ColumnType == typeof(DateTime))
            {
                DateTime dtValue;
                if (DateTime.TryParse(sValue, out dtValue))
                    return true;
                msg += "The value type for this column is a date (or a date with a time), please check the values.";
            }
            else if (ColumnType == typeof(TimeSpan))
            {
                TimeSpan tsValue;
                if (TimeSpan.TryParse(sValue, out tsValue))
                    return true;
                msg += "The value type for this column is a time, please check the values.";
            }
            else if ((ColumnType == typeof(Boolean)) ||
                    (ColumnType == typeof(bool)))
            {
                Boolean bValue;
                if (Boolean.TryParse(sValue, out bValue))
                    return true;
                msg += "The value type for this column is a boolean, please check the values.";
            }

            MessageBox.Show(msg, "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            return false;
        }
        private void dataGridView1_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            e.Cancel = !ValidateCellContent(e.ColumnIndex, e.RowIndex, e.FormattedValue.ToString());
        }
        #endregion

        //####
        #endregion


        private void UpdateTable()
        {
            TreeViewTag Tag = null;
            TreeNode tmp = CurrentNode;
            if (tmp != null)
            {
                Tag = CheckCurrentNode();
            }
            SelectNode(null);
            if (Tag != null)
            {
                if(Tag.IsExceptionNode)
                    DonneesEnCours.aEteModifiee(Tag.ScenarioName,Tag.Name, Tag.ExceptionName);
                else
                DonneesEnCours.aEteModifiee(Tag.ScenarioName, tmp.Name);
                AcceptData();
            }
            SelectNode(tmp);
        }

        #region Fonctions pour l'édition des tables et la gestion du copier coller sur les tables.



            #region Fonction pour convertir une chaine de caractère en un type de donné.
        private Object ConvertValue(Type type, String value)
        {
            if (type == typeof(String))
                return value;
            else if ((type == typeof(Int32)) ||
                    type == typeof(Int16) ||
                    type == typeof(Int64) ||
                    type == typeof(int))
            {
                int iValue;
                if (!Int32.TryParse(value, out iValue))
                {
                    return null;
                }
                return iValue;
            }
            else if ((type == typeof(Double)) ||
                   (type == typeof(double)))
            {
                Double dValue;
                if (!Double.TryParse(value, out dValue))
                {
                    return null;
                }
                return dValue;
            }else if(type == typeof(DateTime))
            {
                DateTime dtValue;
                if (!DateTime.TryParse(value, out dtValue))
                {
                    return null;
                }
                return dtValue;
            }
            else if (type == typeof(TimeSpan))
            {
                TimeSpan tsValue;
                if (!TimeSpan.TryParse(value, out tsValue))
                {
                    return null;
                }
                return tsValue;
            }
            else if ((type == typeof(Boolean))||
                    (type == typeof(bool)))
            {
                Boolean bValue;
                if (!Boolean.TryParse(value, out bValue))
                {
                    return null;
                }
                return bValue;
            }
            return null;
        }
            #endregion

            #region fonction pour appeler la fonction de validation.
        private void tstb_Value_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                tsb_valid_Click(sender, e);
        }
            #endregion

            #region Fonctions lancées lors de l'utilisation du clavier sur le datatable.
        private void dataGridView1_KeyDown(object sender, KeyEventArgs e)
        {
            int i;
            if ((e.KeyCode == Keys.Enter) || (e.KeyCode == Keys.Left)
                || (e.KeyCode == Keys.Up) || (e.KeyCode == Keys.Right)
                || (e.KeyCode == Keys.Down))
            {
                if (!bOnEditMode)
                    return;
                bOnEditMode = false;
                if (AcceptData())
                UpdateTable();
                return;
            }
            else if (e.KeyCode == Keys.Delete)
            {
                deleteRowToolStripMenuItem_Click(sender, e);    // >> Bug #13367 Liege allocation
                return;
            }
            #region L'analyse du contenu du presse papier et de la table courante.
            ///Si les touches Control V ont été pressée.
            if (!((e.Control) && (e.KeyCode == Keys.V)))
                return;
            //Le contenu du presse papier est une donnée exploitable.
            if (!Clipboard.ContainsText())
                return;

            //Est ce qu'il y a un table dans le datagridview?
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;


            //Est ce que la table courante existe dans le système de données ?
            if (DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name) == null)
                return;

            //On récupère le mode de visualisation de la table.
            VisualisationMode mode = DonneesEnCours.getModeVisualisation(Tag.ScenarioName, Tag.Name);
            if (mode.EditMode == VisualisationMode.EditModeEnum.None)
                return;
            //Si la table n'est pas modifiable, ce n'est pas la pein de continuer.
            if (!mode.Modifiable)
                return;

            //On récupère le contenu du presse papier.
            String value = Clipboard.GetText();
            value = value.Replace("\r\n", "\n");
            String[] Lignes = value.Split(new char[] { '\n' }, StringSplitOptions.RemoveEmptyEntries); // >> Bug #10066 Pax2Sim - Airline exception editor
            if (Lignes.Length == 0)
                return;
            int NbColumn = Lignes[0].Split('\t').Length;
            if (NbColumn == 0)
                return;
            #endregion
            ///Le mode d'édition de la table courante est cellule par cellule.
            #region Mode d'édition de la table courante : par cellule
            if (mode.EditMode == VisualisationMode.EditModeEnum.Cell)
            {
                if (dataGridView1.SelectedCells.Count == 0)
                    return;
                ///Dans le presse papier, il n'y a qu'une seule case, il faut donc la copier dans chaque case sélectionnée.
                #region La donnée à ajouter est unique, on remplace donc toutes les données présentes dans la table par la valeur.
                if ((Lignes.Length == 1) && (NbColumn == 1))
                {
                    for (i = 0; i < dataGridView1.SelectedCells.Count; i++)
                    {
                        Object obj = ConvertValue(dataGridView1.SelectedCells[i].OwningColumn.ValueType, Lignes[0]);
                        if (obj == null)
                        {
                            MessageBox.Show("The values on the clipboard does not have some good format", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            break;
                        }
                        dataGridView1.SelectedCells[i].Value = obj;
                    }
                }
                #endregion
                else
                ///Il y a dans le presse papier un tableau complet, et il faut vérifier la taille 
                ///présente pour l'ajout de ces informations.
                #region Cas où il y a un tableau dans le presse papier
                {
                    int iIndexCell = 0;
                    ///Il y a plus d'une cellule de sélectionnée, il va falloir sélectionner uniquement 
                    ///celle qui a le plus petit index.
                    if (dataGridView1.SelectedCells.Count != 1)
                    {
                        for (i = 1; i < dataGridView1.SelectedCells.Count; i++)
                        {
                            if (dataGridView1.SelectedCells[0].RowIndex > dataGridView1.SelectedCells[i].RowIndex)
                            {
                                iIndexCell = i;
                                continue;
                            }
                            else if ((dataGridView1.SelectedCells[0].RowIndex == dataGridView1.SelectedCells[i].RowIndex) &&
                                    (dataGridView1.SelectedCells[0].ColumnIndex > dataGridView1.SelectedCells[i].ColumnIndex))
                            {
                                iIndexCell = i;
                                continue;
                            }
                        }
                    }
                    if (Lignes.Length > (dataGridView1.Rows.Count - dataGridView1.SelectedCells[iIndexCell].RowIndex))
                    {
                        //Impossible de copier toutes les lignes voulues.
                        return;
                    }
                    if (NbColumn > (dataGridView1.Columns.Count - dataGridView1.SelectedCells[iIndexCell].ColumnIndex))
                    {
                        //Impossible de copier toutes les colonnes.
                        return;
                    }
                    //if (MessageBox.Show("The table in the clipboard will be paste on the range. The data in the range will be owerwritten.\nWould you like to continue?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Error) != DialogResult.Yes)
                    //    return;
                    int j = dataGridView1.SelectedCells[iIndexCell].RowIndex;
                    int column = dataGridView1.SelectedCells[iIndexCell].ColumnIndex;
                    foreach (String ligne in Lignes)
                    {
                        String[] Values = ligne.Split('\t');
                        if (Values.Length != NbColumn)
                            continue;
                        for (i = 0; i < NbColumn; i++)
                        {

                            Object obj = ConvertValue(dataGridView1.Columns[i + column].ValueType, Values[i]);
                            if (obj == null)
                            {
                                MessageBox.Show("The values on the clipboard does not have some good format", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                break;
                            }
                            dataGridView1[i + column, j].Value = obj;
                        }
                        j++;
                    }
                }
                #endregion
            #endregion
            }///Fin - - - if (mode.EditMode == VisualisationMode.EditModeEnum.Cell)
            #region Mode d'édition de la table courante : par Ligne
            else if (mode.EditMode == VisualisationMode.EditModeEnum.Row)
            {
                if ((dataGridView1.SelectedRows.Count == 0) ||
                    ((dataGridView1.SelectedRows.Count == 1) && (dataGridView1.SelectedRows[0].IsNewRow)))
                {
                    #region Lorsqu'aucune ligne n'est sélectionnée, on doit ajouter des lignes.
                    if (!mode.AllowAddLine)
                    {
                        return;
                    }
                    DataTable table = DonneesEnCours.getTable(Tag.ScenarioName, CurrentNode.Name);
                    if (NbColumn != table.Columns.Count)
                        return;
                    dataGridView1.DataSource = null;
                    Boolean bNewLineOk = false;
                    foreach (String ligne in Lignes)
                    {
                        string[] Values = ligne.Split('\t');
                        if (Values.Length != NbColumn)
                            continue;
                        if (mode.PrimaryKey != null)
                        {
                            bool bSkipLine = false;
                            //Il faut vérifier les contraintes de Primary key.
                            foreach (int iPrimaryKey in mode.PrimaryKey)
                            {
                                Object obj = ConvertValue(table.Columns[iPrimaryKey].DataType, Values[iPrimaryKey]);
                                if (obj == null)
                                    bSkipLine = true;
                                for (i = 0; i < table.Rows.Count; i++)
                                {
                                    if (table.Rows[i][iPrimaryKey].ToString() == obj.ToString())
                                    {
                                        bSkipLine = true;
                                        break;
                                    }
                                }
                                if (bSkipLine)
                                    break;
                            }
                            if (bSkipLine)
                                continue;
                        }
                        bNewLineOk = true;
                        DataRow oNewRow = table.NewRow();
                        for (i = 0; i < Values.Length; i++)
                        {
                            if(ConvertValue(table.Columns[i].DataType, Values[i])==null)
                            {
                                MessageBox.Show("The values on the clipboard does not have good format", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                bNewLineOk = false;
                                break;
                            }
                        oNewRow[i] = ConvertValue(table.Columns[i].DataType, Values[i]);
                        }
                        if (bNewLineOk)
                            table.Rows.Add(oNewRow);
                    }
                    dataGridView1.DataSource = table;
                    if (bNewLineOk)
                    {
                        while (dataGridView1.SelectedRows.Count > 0)
                        {
                            dataGridView1.SelectedRows[0].Selected = false;
                        }
                        dataGridView1.Rows[dataGridView1.Rows.Count - 2].Selected = true;
                    }
                    #endregion
                }
                else
                {
                    #region Lorsque l'on a une ou plusieurs lignes de sélectionnée.
                    int iNbColumn = dataGridView1.Columns.Count;
                    if (mode.ColumnBlocked != null)
                    {
                        if (((iNbColumn - mode.ColumnBlocked.Length) != NbColumn) && (iNbColumn != NbColumn))
                            return;
                    }
                    else
                    {
                        if (iNbColumn != NbColumn)
                            return;
                    }
                    int iIndexPremiereLigne = dataGridView1.SelectedRows[0].Index;
                    if (dataGridView1.SelectedRows.Count != 1)
                    {
                        for (i = 0; i < dataGridView1.SelectedRows.Count; i++)
                        {
                            if (iIndexPremiereLigne > dataGridView1.SelectedRows[i].Index)
                                iIndexPremiereLigne = dataGridView1.SelectedRows[i].Index;
                        }
                    }
                    if ((dataGridView1.Rows.Count - dataGridView1.Rows[iIndexPremiereLigne].Index) < Lignes.Length)
                        return; // Il n'est pas possible d'insérer plus de lignes que le nombre de lignes présentes
                    //dans la table.

                    int j = dataGridView1.Rows[iIndexPremiereLigne].Index;
                    int iColumn;
                    foreach (String ligne in Lignes)
                    {
                        iColumn = 0;
                        String[] Values = ligne.Split('\t');
                        if (Values.Length != NbColumn)
                            continue;
                        for (i = 0; i < Values.Length; i++)
                        {
                            if (iNbColumn == NbColumn)
                            {
                                #region Cas où le nombre de colonne à insérer est identique au nombre de colonnes contenues dans la table
                                if (mode.ColumnBlocked != null)
                                {
                                    bool blocked = false;
                                    for (int o = 0; o < mode.ColumnBlocked.Length; o++)
                                    {
                                        if (mode.ColumnBlocked[o] == i)
                                        {
                                            blocked = true;
                                            break;
                                        }
                                    }
                                    if (blocked)
                                        continue;
                                }
                                Object obj = ConvertValue(dataGridView1.Columns[i].ValueType, Values[i]);
                                if (obj == null)
                                {
                                    MessageBox.Show("The values on the clipboard does not have good format", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    break;
                                }
                                dataGridView1[i, j].Value = obj;
                                #endregion
                            }
                            else
                            {
                                #region Cas où le nombre de colonne à insérer coincide avec le nombre de colonne non bloquée de la table
                                for (int o = 0; o < mode.ColumnBlocked.Length; o++)
                                {
                                    if (mode.ColumnBlocked[o] == iColumn)
                                    {
                                        iColumn++;
                                    }
                                }
                                Object obj = ConvertValue(dataGridView1.Columns[iColumn].ValueType, Values[i]);
                                if (obj == null)
                                {
                                    MessageBox.Show("The values on the clipboard does not have good format", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    break;
                                }
                                dataGridView1[iColumn, j].Value = obj;
                                #endregion
                            }
                            iColumn++;
                        }
                        j++;
                    }

                    #endregion
                }
            #endregion
            }///fin if (mode.EditMode == VisualisationMode.EditModeEnum.Row)
            #region Mode d'édition de la table courante : par Colonne
            else if (mode.EditMode == VisualisationMode.EditModeEnum.Column)
            {
                if (mode.ColumnBlocked != null)
                {
                    for(i=0; i< mode.ColumnBlocked.Length;i++)
                        dataGridView1.Columns[mode.ColumnBlocked[i]].Selected = false;
                }
                if (dataGridView1.SelectedColumns.Count == 0)
                    return;
                int iNbLigne = dataGridView1.Rows.Count;
                int iNbColumn = dataGridView1.Columns.Count;

                int iIndexPremiereColonne = dataGridView1.SelectedColumns[0].Index;
                if (dataGridView1.SelectedColumns.Count != 1)
                {
                    for (i = 0; i < dataGridView1.SelectedColumns.Count; i++)
                    {
                        if (dataGridView1.Columns[iIndexPremiereColonne].Index > dataGridView1.SelectedColumns[i].Index)
                            iIndexPremiereColonne = dataGridView1.SelectedColumns[i].Index;
                    }
                }
                bool bIgnoreFirstRow = false;
                bool bIgnoreFirstColumn = false;
                if ((dataGridView1.Rows.Count) != Lignes.Length)
                {
                    // Il n'est pas possible d'insérer plus de lignes que le nombre de lignes présentes
                    //dans la table.
                    if ((Lignes.Length - 1) != (dataGridView1.Rows.Count ))
                    {
                        return; 
                    }
                    bIgnoreFirstRow = true;
                }

                String[][]Values = new String[Lignes.Length][];
                i=0;
                foreach (String ligne in Lignes)
                {
                    Values[i] = ligne.Split('\t');
                    if (Values[i].Length != NbColumn)
                        return;
                    i++;
                }
                if (mode.ColumnBlocked != null)
                {
                    if (Values[0].Length > iNbColumn)
                        return;
                    if (Values[0].Length == iNbColumn)
                    {
                        if (iIndexPremiereColonne != 1)
                            return;
                        bIgnoreFirstColumn = true;
                        iIndexPremiereColonne--;
                    }
                }
                else
                {
                    if (Values[0].Length > iNbColumn)
                        return;
                }
                if(iIndexPremiereColonne + Values[0].Length > iNbColumn)
                    return;
                int j = 0;
                if (bIgnoreFirstRow)
                    j++;
                for (i = 0; i < Values[0].Length; i++)
                {
                    if (bIgnoreFirstColumn && (i == 0))
                        continue;
                    for (int o = 0; o <iNbLigne; o++)
                    {
                        Object obj = ConvertValue(dataGridView1.Columns[iIndexPremiereColonne + i].ValueType, Values[o + j][i]);
                        if (obj == null)
                        {
                            MessageBox.Show("The values on the clipboard does not have good format", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            break;
                        }
                        dataGridView1[i + iIndexPremiereColonne, o].Value = obj;
                    }
                }
            #endregion
            }
        }

        private void dataGridView1_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                TreeViewTag Tag= CheckCurrentNode();
                DonneesEnCours.aEteModifiee(Tag.ScenarioName, Tag.Name);
                AcceptData();
            }
        }
        #endregion
        #endregion



        internal DataTable getCurrentTable()
        {
            if (DonneesEnCours == null)
                return null;
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return null;
            if ((tvtTag.isTableNode) || (tvtTag.isFilterNode) || (tvtTag.isResultNode) || (tvtTag.isChartNode))
            {
                return DonneesEnCours.getTable(tvtTag.ScenarioName, tvtTag.Name);
            }
            else if (tvtTag.IsExceptionNode)
            {
                return DonneesEnCours.getExceptionTable(tvtTag.ScenarioName, tvtTag.Name, tvtTag.ExceptionName);
            }
            return null;
        }
        internal VisualisationMode getCurrentModeVisualisation()
        {
            if (DonneesEnCours == null)
                return null;
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return null;
            DataManagement.NormalTable ntTmp = null;
            if (tvtTag.isChartNode)
            {
                return DonneesEnCours.getModeVisualisation(tvtTag.ScenarioName, tvtTag.Name);

            }
            else if ((tvtTag.isTableNode) || (tvtTag.isFilterNode) || (tvtTag.isResultNode))
            {
                ntTmp = DonneesEnCours.GetTable(tvtTag.ScenarioName, tvtTag.Name);
            }
            else if (tvtTag.IsExceptionNode)
            {
                ntTmp = DonneesEnCours.GetExceptionTable(tvtTag.ScenarioName, tvtTag.Name, tvtTag.ExceptionName);
            }
            if (ntTmp != null)
                return ntTmp.Mode;
            return null;
        }
        #endregion

        #region ##############       NOTES

        private ToolStripMenuItem noteToolStripMenuItem;
        private ToolStripMenuItem tsmiDeleteNote;
        private ToolStripMenuItem tsmiEditNote;
        private ToolStripMenuItem tsmiCutNote;
        private ToolStripMenuItem tsmiCopyNote;
        private ToolStripMenuItem tsmiPasteNote;
        /// <summary>
        /// Fonction pour editer ou ajouter une note
        /// </summary>
        private void tmsiEditNote_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            String sValue = null;
            String paragName = "";

            /// S'il s'agit d'une note sur un scenario, on recupère la note dans la liste des paragraphes
            if (CurrentNode.Parent.Name == "Analysis")
            {
                paragName = "Assumption_" + Tag.Name;
                GestionDonneesHUB2SIM.Paragraph parag = DonneesEnCours.getParagraph("Assumption_" + Tag.Name);
                if (parag == null)
                {
                    List<String> review;
                    ParamScenario scenario = DonneesEnCours.GetScenario(Tag.Name);
                    if (scenario == null)
                    {
                        review = new List<string>();
                        review.Add(" ");
                    }
                    else
                        review = scenario.getReview(false);
                    sValue = OverallTools.FonctionUtiles.AsumptionToHtml(review);
                }
                else
                {
                    sValue = parag.Content;
                }
                Prompt.SIM_Htmleditor shEditor = new Prompt.SIM_Htmleditor(sValue);

                if (shEditor.ShowDialog() == DialogResult.OK)
                {
                    if (parag == null)
                        parag = new GestionDonneesHUB2SIM.Paragraph(paragName, paragName, shEditor.Note);
                    else
                        parag.Content = shEditor.Note;
                    DonneesEnCours.setParagraph(paragName, parag);
                }
            }
            /// Sinon, on recupère la note directement dans la NormalTable
            else
            {
                if (Tag.IsExceptionNode)
                    sValue = DonneesEnCours.getExNote(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                else
                    sValue = DonneesEnCours.getNote(Tag.ScenarioName, Tag.Name);
                if (sValue == null)
                    sValue = DonneesEnCours.getGeneralNote(Tag.Name);

                Prompt.SIM_Htmleditor shEditor = new Prompt.SIM_Htmleditor(sValue);

                //Prompt.SIM_Annotation sa = new SIMCORE_TOOL.Prompt.SIM_Annotation(sValue);
                if (shEditor.ShowDialog() == DialogResult.OK)
                {

                    if (Tag.IsExceptionNode)
                        DonneesEnCours.setExNote(Tag.ScenarioName, Tag.Name, Tag.ExceptionName, shEditor.Note);
                    else
                        DonneesEnCours.setNote(Tag.ScenarioName, Tag.Name, shEditor.Note);
                    Tag.HasNote = (shEditor.Note != "");
                    treeView1.SelectedNode.ImageIndex = Tag.ImageIndex;
                    treeView1.SelectedNode.SelectedImageIndex = Tag.SelectedImageIndex;
                }
            }
        }
        /// <summary>
        /// Fonction pour suprimer une note
        /// </summary>
        private void tmsiDeleteNote_Click(object sender, EventArgs e)
        {
            String warningMessage = "Are you sure that you want to delete this Note ?";
            if (MessageBox
                .Show(warningMessage, "Warning", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning,
                        MessageBoxDefaultButton.Button2) == DialogResult.OK) // << Task #9127 Pax2Sim - Note - Warning message when deleting a Note
            {
                TreeViewTag Tag = CheckCurrentNode();
                if (Tag == null)
                    return;
                if (CurrentNode.Parent.Name == "Analysis")
                    DonneesEnCours.setParagraph("Assumption_" + Tag.Name, null);
                else if (Tag.IsExceptionNode)
                    DonneesEnCours.setExNote(Tag.ScenarioName, Tag.Name, Tag.ExceptionName, null);
                else
                    DonneesEnCours.setNote(Tag.ScenarioName, Tag.Name, null);
                Tag.HasNote = false;
                treeView1.SelectedNode.ImageIndex = Tag.ImageIndex;
                treeView1.SelectedNode.SelectedImageIndex = Tag.SelectedImageIndex;
            }
        }
        /// <summary>
        /// Fonction pour suprimer une note et l'ajouter dans le Clipboard 
        /// </summary>
        private void tsmiCutNote_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            String note = null;
            if (CurrentNode.Parent.Name == "Analysis")
            {
                GestionDonneesHUB2SIM.Paragraph parag = DonneesEnCours.getParagraph("Assumption_" + Tag.Name);
                if (parag != null)
                    note = parag.Content;
            }
            else if (Tag.IsExceptionNode)
                note = DonneesEnCours.getExNote(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
            else
                note = DonneesEnCours.getNote(Tag.ScenarioName, Tag.Name);
            if (note != null)
            {
                try
                {
                    Clipboard.Clear();
                    Clipboard.SetText(note);
                    tmsiDeleteNote_Click(sender, e);
                }
                catch (Exception exc) 
                {
                    OverallTools.ExternFunctions.PrintLogFile("Except02033: " + this.GetType().ToString() + " throw an exception: " + exc.Message);
                }
            }
        }
        /// <summary>
        /// Fonction pour copier une note dans le Clipboard
        /// </summary>
        private void tmsiCopyNote_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            String note = null;
            if (CurrentNode.Parent.Name == "Analysis")
            {
                GestionDonneesHUB2SIM.Paragraph parag = DonneesEnCours.getParagraph("Assumption_" + Tag.Name);
                if (parag != null)
                    note = parag.Content;
            }
            else if (Tag.IsExceptionNode)
                note = DonneesEnCours.getExNote(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
            else
                note = DonneesEnCours.getNote(Tag.ScenarioName, Tag.Name);
            if (note != null)
            {
                try
                {
                    Clipboard.Clear();
                    Clipboard.SetText(note);
                }
                catch (Exception exc)
                {
                    OverallTools.ExternFunctions.PrintLogFile("Except02034: " + this.GetType().ToString() + " throw an exception: " + exc.Message);
                }
            }
        }
        /// <summary>
        /// Fonction pour ajouter une note a partir du Clipboard
        /// </summary>
        private void tmsiPasteNote_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            try
            {
                String note = Clipboard.GetText();
                if (note != null)
                {
                    if (CurrentNode.Parent.Name == "Analysis")
                    {
                        String paragName = "Assumption_" + Tag.Name;
                        GestionDonneesHUB2SIM.Paragraph parag = DonneesEnCours.getParagraph(paragName);
                        if (parag != null)
                            parag.Content = note;
                        else
                            parag = new GestionDonneesHUB2SIM.Paragraph(paragName, paragName, note);
                        DonneesEnCours.setParagraph(paragName, parag);
                    }
                    else if (Tag.IsExceptionNode)
                        DonneesEnCours.setExNote(Tag.ScenarioName, Tag.Name, Tag.ExceptionName, note);
                    else
                        DonneesEnCours.setNote(Tag.ScenarioName, Tag.Name, note);
                    Tag.HasNote = true;
                    treeView1.SelectedNode.ImageIndex = Tag.ImageIndex;
                    treeView1.SelectedNode.SelectedImageIndex = Tag.SelectedImageIndex;
                }
            }
            catch (Exception exc)
            {
                OverallTools.ExternFunctions.PrintLogFile("Except02035: " + this.GetType().ToString() + " throw an exception: " + exc.Message);
            }
        }
        /// <summary>
        /// Fonction pour créer le sous-menu Note.
        /// </summary>
        private void InitNoteTootStripMenu(ContextMenuStrip menu)
        {
            /// Create instances
            if (this.noteToolStripMenuItem == null)
            {
                this.noteToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
                this.tsmiEditNote = new System.Windows.Forms.ToolStripMenuItem();
                this.tsmiDeleteNote = new System.Windows.Forms.ToolStripMenuItem();
                this.tsmiCutNote = new System.Windows.Forms.ToolStripMenuItem();
                this.tsmiCopyNote = new System.Windows.Forms.ToolStripMenuItem();
                this.tsmiPasteNote = new System.Windows.Forms.ToolStripMenuItem();

                /// Apply configure them
                // noteToolStripMenuItem
                this.noteToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
                    this.tsmiEditNote,
                    this.tsmiDeleteNote,
                    this.tsmiCutNote,
                    this.tsmiCopyNote,
                    this.tsmiPasteNote});
                this.noteToolStripMenuItem.Name = "Note";
                this.noteToolStripMenuItem.Text = this.noteToolStripMenuItem.Name;
                // tsmiEditNote
                this.tsmiEditNote.Name = "Edit";
                this.tsmiEditNote.Text = this.tsmiEditNote.Name;
                this.tsmiEditNote.Click += new System.EventHandler(this.tmsiEditNote_Click);
                // tsmiDeleteNote
                this.tsmiDeleteNote.Name = "Delete";
                this.tsmiDeleteNote.Text = this.tsmiDeleteNote.Name;
                this.tsmiDeleteNote.Click += new System.EventHandler(this.tmsiDeleteNote_Click);
                // tsmiCutNote
                this.tsmiCutNote.Name = "Cut";
                this.tsmiCutNote.Text = this.tsmiCutNote.Name;
                this.tsmiCutNote.Click += new System.EventHandler(this.tsmiCutNote_Click);
                // tsmiCopyNote
                this.tsmiCopyNote.Name = "Copy";
                this.tsmiCopyNote.Text = this.tsmiCopyNote.Name;
                this.tsmiCopyNote.Click += new System.EventHandler(this.tmsiCopyNote_Click);
                // tsmiPasteNote
                this.tsmiPasteNote.Name = "Paste";
                this.tsmiPasteNote.Text = this.tsmiPasteNote.Name;
                this.tsmiPasteNote.Click += new System.EventHandler(this.tmsiPasteNote_Click);
            }

            if(!menu.Items.Contains(noteToolStripMenuItem))
                menu.Items.Add(noteToolStripMenuItem);
        }
        /// <summary>
        /// Fonction qui active ou desactive les options concernant les notes.
        /// </summary>
        /// <param name="NodeName">Nom de la node</param>
        /// <param name="ScenarioName">Nom du scenario</param>
        private void UpdateNoteMenu(String NodeName, String ScenarioName, String exceptionType)
        {
            // Activation/Desactivation des options concernant les notes
            bool hasNote = false;
            String n = DonneesEnCours.getExNote(ScenarioName, NodeName, exceptionType);
            if (exceptionType != null && exceptionType != "")
                hasNote = DonneesEnCours.getExNote(ScenarioName, NodeName, exceptionType) != null;
            else
                hasNote = DonneesEnCours.getNote(ScenarioName, NodeName) != null;
            tsmiCutNote.Enabled = hasNote;
            tsmiCopyNote.Enabled = hasNote;
            tsmiDeleteNote.Enabled = hasNote;
            tsmiEditNote.Enabled = true;
            if (hasNote)
                tsmiEditNote.Text = "Edit";
            else
                tsmiEditNote.Text = "Create";
            tsmiPasteNote.Enabled = Clipboard.ContainsText();
        }
        /// <summary>
        /// Fonction qui active ou desactive les options concernant la note sur un scenario.
        /// </summary>
        private void UpdateNoteMenu()
        {
            //desactivation de tout les item du menu
            tsmiEditNote.Enabled = false;
            tsmiCutNote.Enabled = false;
            tsmiCopyNote.Enabled = false;
            tsmiDeleteNote.Enabled = false;

            //recupère du nom du scenario selectionné
            String sScenarioName;
            if (CurrentNode == null)
                return;
            sScenarioName = CurrentNode.Name;

            //cherche si une note lui est associé dans la liste des paragraphes
            bool hasNote = false;
            String n;
            GestionDonneesHUB2SIM.Paragraph parag = DonneesEnCours.getParagraph("Assumption_" + sScenarioName);
            if (parag == null)
                n = null;
            else
                n = parag.Content;
            hasNote = (n != null);
            tsmiCutNote.Enabled = hasNote;
            tsmiCopyNote.Enabled = hasNote;
            tsmiDeleteNote.Enabled = hasNote;
            tsmiEditNote.Enabled = true;
            //__si oui on affiche "Edit"
            if (hasNote)
                tsmiEditNote.Text = "Edit";
            //__sinon on affiche "Create"
            else
                tsmiEditNote.Text = "Create";
            tsmiPasteNote.Enabled = Clipboard.ContainsText();

        }

        #endregion

        #region ##############       SCENARIO

        #region Gestion du menu contextuel d'un scenario donné

        /// <summary>
        /// Fonction appelée lorsque l'utilisateur clic droit sur la racine d'un scénario dans le treeview. Cela permet
        /// de définir les options présentes dans le menu affiché.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cmsBranchTestMenu_Opening(object sender, CancelEventArgs e)
        {
            ///Appel de la fonction \ref SelectNode()
            SelectNode(treeView1.SelectedNode);
            ///Vérification de la présence de l'option de copie d'un scénario, Si en mode Runtime, l'utilisateur ne peut
            ///pas ajouter de scénario. S'il est en mode version d'évaluation il faut le vérifier avec \ref GestionDonneesHUB2SIM.CanAddScenario() 
            tsmiCopy.Enabled = (!bRuntime)&& DonneesEnCours.CanAddScenario();
            ///Vérification de la présence de l'option de suppresion d'un scénario, Si en mode Runtime, l'utilisateur ne peut
            ///pas supprimer de scénario.
            tsmiDelete.Enabled = (!bRuntime);

            ///Ajout du menu pour les notes
            if (sender is ContextMenuStrip)
            {
                InitNoteTootStripMenu(sender as ContextMenuStrip);
                UpdateNoteMenu();
                noteToolStripMenuItem.Enabled = true;
            }
        }

        /// <summary>
        /// Fonction appelée lorsque l'utilisateur édite un scénario en faisant clic droit, puis properties.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tsmiProperties_Click(object sender, EventArgs e)
        {
            ///Vérification de la validité de la clef de protection.
            if (!CheckKey())
            {
                this.closeProject();
                this.Close();
                return;
            }
            ///Si l'application est en mode Reporter, alors appel de la fonction \ref ReporterFunction(VRAI) et arrèt de la fonction courante.
            if (bReporter)
            {
                ReporterFunction(true);
                return;
            }
            List<String> lsTmp;
            #region Parking
            ///Si l'application est en mode Parking, alors il faut lancer la fonction de Parking.
            if (epPerimetre == EnumPerimetre.PKG)
            {
                lsTmp = DonneesEnCours.getScenarioParking();
                if ((lsTmp == null) || (!lsTmp.Contains(CurrentNode.Name)))
                {
                    MessageBox.Show("The selected scenario is not a Parking scenarios.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
                ParkingAllocation(CurrentNode.Name);
                return;
            }
            #endregion

            #region Allocation
            ///Si l'application est en mode Parking, alors il faut lancer la fonction de Parking.
            lsTmp = DonneesEnCours.getScenarioAllocation();
            if ((lsTmp != null) && (lsTmp.Contains(CurrentNode.Name)))
            {
                // >> Bug #13367 Liege allocation
                if (liegeMode)
                {
                    GenerateAllocationTool currentAllocationScenario = DonneesEnCours.GetAllocation(CurrentNode.Name);
                    if (currentAllocationScenario != null && !currentAllocationScenario.isLiegeAllocation)
                    {
                        MessageBox.Show("The selected scenario is not a Liege Allocation scenario. Please use the Liege Allocation assistant.",
                            "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }
                }
                // << Bug #13367 Liege allocation
                Allocate(CurrentNode.Name);
                return;
            }
            #endregion

            if (DonneesEnCours.GetScenario(CurrentNode.Name) == null)
            {
                MessageBox.Show("The selected scenario is not valid for PAX/BHS scenarios.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            // >> Bug #13367 Liege allocation
            if (liegeMode || dubaiMode)
            {
                ParamScenario currentScenario = DonneesEnCours.GetScenario(CurrentNode.Name);
                if (currentScenario != null && currentScenario.isLiegeAllocation)
                {
                    // >> Task #13367 Liege allocation C#109
                    DataTable parametersTable = DonneesEnCours.getTable(CurrentNode.Name, ALLOCATION_PARAMETERS_TABLE_NAME);
                    if (parametersTable == null)
                    {
                        MessageBox.Show("The parameters table could not be loaded for the scenario \"" + CurrentNode.Name + "\".",
                            "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }
                    else
                    {
                        AllocationParameters parameters = LiegeTools.AllocationParametersTools.getParametersFromParametersTable(parametersTable);
                        AllocationAssistant allocationAssistant = new AllocationAssistant(DonneesEnCours, parameters);
                        if (liegeMode)
                        {
                            generateLiegeAllocation(allocationAssistant);
                        }
                        else if (dubaiMode) // >> Task #14727 Dubai allocation C#20
                        {
                            generateDubaiAllocation(allocationAssistant);
                        }
                    }
                    // << Task #13367 Liege allocation C#109
                    //MessageBox.Show("The selected scenario is not a Capacity scenario. Please use the Allocation assistant.",
                    //    "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
            }
            // << Bug #13367 Liege allocation

            ///Création d'une nouvelle instance de \ref  Prompt.SIM_Scenarios_Assistant avec comme paramêtres le scénario courant.
            Prompt.SIM_Scenarios_Assistant Scenario = new SIMCORE_TOOL.Prompt.SIM_Scenarios_Assistant(DonneesEnCours, DonneesEnCours.GetScenario(CurrentNode.Name), epPerimetre, treeView1.Nodes[0], lesErreurs);

            DialogResult drResult = Scenario.ShowDialog();
            ///Si l'utilsateur a quitter la fenêtre d'édition du scénario sans valider, alors la fonction s'arrète.
            if ((drResult != DialogResult.OK) && (drResult != DialogResult.Yes))
                return;
            // << Task #9123 Pax2Sim - Scenario Properties - Parameters Saving issue - use directly Scenario.Analysis
            //the other way would bring the old parameters from the Scenario
            ///Récupération des paramètres du scénario modifié. (\ref Classes.ParamScenario)
             // << Task #7570 new Desk and extra information for Pax -Phase I B  - commented the line bellow
            Classes.ParamScenario Parametres = Scenario.Analysis;     
            //Classes.ParamScenario Parametres = DonneesEnCours.GetScenario(Scenario.Analysis.Name);
            // >> Task #9123 Pax2Sim - Scenario Properties - Parameters Saving issue

            ///Si les parametres sont NULL, alors la fonction s'arrète.
            if (Parametres == null)
                return;

            // >> Task #10312 Pax2Sim - Statistic dev - Target - save target tables            
            String oldScenarioName = "";
            if (CurrentNode != null)
                oldScenarioName = CurrentNode.Name;

            TreeNode oldScenarioNode = null;
            TreeNode analysisNode = OverallTools.TreeViewFunctions.RechercherNomEnfants("Analysis", treeView1.Nodes[2]);

            if (analysisNode != null && oldScenarioName != "")
                oldScenarioNode = (TreeNode)getScenarioNodeFromAnalysisNode(analysisNode, oldScenarioName).Clone();
            
            Dictionary<String, DataTable> oldScenarioTargetTablesDictionary = getTargetTablesDictionaryFromScenario(oldScenarioNode);
            // << Task #10312 Pax2Sim - Statistic dev - Target - save target tables

            Dictionary<string, DataTable> oldScenarioViewStatsTablesDictionary = getViewStatsTablesDictionary(oldScenarioNode); // >> Task #10254 Pax2Sim - View statistics option C#11 (update when reloading a scenario)

            ///Appel de la fonction \ref GestionScenarios pour mettre à jour les données sur les scénarios.
            GestionScenarios(Parametres);
                        
            ///Récupération des classes résultats.
            Hashtable htBagsResults = Scenario.getBagsResults();
            OverallTools.PaxTraceAnalysis ptaPaxResults = Scenario.getPaxResults();

////////////////////////////////////TEST/////////////////////////////////////
/*            
            String sPaxTraceLocation = "C:\\Users\\PowerUser\\Desktop\\New folder\\PaxTrace.txt";
            ptaPaxResults = OverallTools.PaxTraceAnalysis.AnalysePaxTrace(Parametres.Name,
                    sPaxTraceLocation, null, DonneesEnCours, Parametres.SamplingStep, Parametres.WarmUp * 60,
                    Parametres.SaveTraceMode, false);
            ptaPaxResults.GenerateAllTable(treeView1.Nodes[0]);

            // >> Task #10312 Pax2Sim - Statistic dev - Target - save target tables                
            TreeNode newScenarioNode = null;

            if (analysisNode != null)
                newScenarioNode = getScenarioNodeFromAnalysisNode(analysisNode, Parametres.Name);

            if (newScenarioNode != null && oldScenarioNode != null)
            {
                updateTargetNode(newScenarioNode, oldScenarioNode, ptaPaxResults, oldScenarioTargetTablesDictionary);
            }
            // << Task #10312 Pax2Sim - Statistic dev - Target - save target tables
 */ 
///////////////////////////////////////////////////////////////////////////
            
            setUpScenarioInformationTable(Parametres);  // >> Task #13240 Pax2Sim - Dynamic simulation - scenario note update
            saveResultFiltersTable(Parametres.Name, Parametres.analysisResultsFilters); // >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
            saveSettingsTable(Parametres);
            saveScenarioInputDataTables(Parametres, Scenario); // >> Task #13361 FP AutoMod Data tables V3
            saveTracesTables(Parametres.Name, Parametres.bagTracePath);
            
            // >> Task #16728 PAX2SIM Improvements (Recurring) C#17
            if ((htBagsResults != null) || (ptaPaxResults != null))
            {
                bool bErase = false;
                bErase = MessageBox.Show("Do you want to replace the old graphic definition with the new definition ?", "Information", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1) == DialogResult.Yes;

                //if (Parametres.SaveTraceMode)
               //{
                    DataManagement.DataManagerPaxBHS gdData = (DataManagement.DataManagerPaxBHS)DonneesEnCours.GetDataManager(Parametres.Name);
                    if (gdData != null)
                    {
                        String sPath = OverallTools.ExternFunctions.getTempDirectoryForPax2sim();
                        if (htBagsResults != null)
                            gdData.BagTraceLocation = sPath + Parametres.Name + "_BagTrace.tmp";

                        if (ptaPaxResults != null)
                            gdData.PaxTraceLocation = sPath + Parametres.Name + "_PaxTrace.tmp";
                    }
                //}
                // << Task #16728 PAX2SIM Improvements (Recurring) C#17

                InsertBHSResults(Parametres.Name, Scenario.getBagsResults(), Scenario.BHSUsedNames, bErase, Parametres.bhsGenerateMUPSegregation, 
                    Parametres.analysisResultsFiltersSplittedByFlow, Parametres.flowTypes, null);   // >> Task #14280 Bag Trace Loading time too long
                InsertPAXResults(Parametres.Name, Scenario.getPaxResults(), bErase, false, Parametres.percentilesLevels); //InsertPAXResults(Parametres.Name, ptaPaxResults, bErase, false);//InsertPAXResults(Parametres.Name, Scenario.getPaxResults(), bErase, false);//////////TEST///////
                InsertPRKResults(Parametres.Name, Scenario.getPKGResults());

                // >> Task #10312 Pax2Sim - Statistic dev - Target - save target tables                
                TreeNode newScenarioNode = null;
                if (analysisNode != null)
                {
                    newScenarioNode = getScenarioNodeFromAnalysisNode(analysisNode, Parametres.Name);
                }
                if (newScenarioNode != null && oldScenarioNode != null)
                {                    
                    updateTargetNode(newScenarioNode, oldScenarioNode, ptaPaxResults, oldScenarioTargetTablesDictionary, Parametres.percentilesLevels);                    
                }
                // << Task #10312 Pax2Sim - Statistic dev - Target - save target tables
                if (newScenarioNode != null && oldScenarioViewStatsTablesDictionary.Count > 0)  // >> Task #10254 Pax2Sim - View statistics option C#11 (update when reloading a scenario)
                {
                    updateViewStatsNode(newScenarioNode, oldScenarioNode.Name, oldScenarioViewStatsTablesDictionary, DonneesEnCours, Parametres.percentilesLevels);
                }
                addFlightPlanStatisticsForBHS(Parametres, Scenario.getBagsResults());   // >> Task #19467
            }
            else
            {                
                if (!Parametres.isTraceAnalysisScenario)    // >> Task #15556 Pax2Sim - Scenario Properties Assistant issues - C#13
                {
                    DonneesEnCours.SetUseException(Parametres);
                    ///Si l'utilisateur avait demandé explicitement le PeakFlows ou s'il n'y avait aucun résultat et que l'utilisateur a valider la demande de recalcule des données,
                    ///alors appel de la fonction \ref CalcStaticScenario                
                    if ((drResult == DialogResult.Yes) || (MessageBox.Show("Do you want to recalculate the scenario?", "Recalculate scenario", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes))
                    {
                        tsmiReload_Click(null, null);   // >> Task #16728 PAX2SIM Improvements (Recurring) C#9
                        CalcStaticScenario(Parametres.Name);
                    }
                    if (Parametres.InitialCarStock != "")
                    {
                        bool bErase = false;
                        bErase = MessageBox.Show("Do you want to replace the old graphic definition with the new definition ?", "Information", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1) == DialogResult.Yes;
                        //InsertBHSResults(Parametres.Name, Scenario.getBagsResults(), Scenario.BHSUsedNames, bErase);
                    }
                    DonneesEnCours.ResetUseException();
                }
                else
                    tsmiReload_Click(null, null);   // >> Task #15556 Pax2Sim - Scenario Properties Assistant issues - C#13
                // >> Task #10254 Pax2Sim - View statistics option C#11 (update when reloading a scenario)                
                TreeNode newScenarioNode = null;
                if (analysisNode != null)
                {
                    newScenarioNode = getScenarioNodeFromAnalysisNode(analysisNode, Parametres.Name);
                }
                if (newScenarioNode != null && oldScenarioViewStatsTablesDictionary.Count > 0)  // >> Task #10254 Pax2Sim - View statistics option C#11 (update when reloading a scenario)
                {
                    updateViewStatsNode(newScenarioNode, oldScenarioNode.Name, oldScenarioViewStatsTablesDictionary, DonneesEnCours, Parametres.percentilesLevels);
                }
                // << Task #10254 Pax2Sim - View statistics option C#11 (update when reloading a scenario)
            }
            OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres,
                treeView1.Nodes, DonneesEnCours, cmsReports); // >> Task #13384 Report Tree-view C#51
            /*if (!Parametres.SaveTraceMode)  // >> Task #1954_exportOutputTables
            {
                TreeNode scenarioNode = getScenarioNodeFromAnalysisNode(analysisNode, Parametres.Name);
                string projectDirectoryPath = DonneesEnCours.getDossierEnregistrement();
                string scenarioDirectory = projectDirectoryPath + "Output\\" + Parametres.Name + "\\";
                exportTextFilesFromScenarioNodeToGivenPath(scenarioNode, scenarioDirectory);
            }*/
        }

        // >> Task #10312 Pax2Sim - Statistic dev - Target - save target tables
        private Dictionary<String, DataTable> getTargetTablesDictionaryFromScenario(TreeNode scenarioNode)
        {
            Dictionary<String, DataTable> scenarioTargetTablesDictionary = new Dictionary<String, DataTable>();
            
            TreeNode airportReportsNode = getAirportReportsNodeFromHigherNode(scenarioNode);
            
            if (airportReportsNode != null)
            {
                TreeNode targetNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.TARGET_DIRECTORY_NAME, airportReportsNode);
                if (targetNode != null && targetNode.Nodes != null)
                {
                    foreach (TreeNode targetChild in targetNode.Nodes)
                    {
                        DataTable targetTable = DonneesEnCours.getTable(scenarioNode.Name, targetChild.Name);
                        if (targetTable != null)
                            scenarioTargetTablesDictionary.Add(targetTable.TableName, targetTable.Copy());
                    }
                }
            }

            return scenarioTargetTablesDictionary;            
        }

        private void updateTargetNode(TreeNode newScenarioNode, TreeNode oldScenarioNode, OverallTools.PaxTraceAnalysis ptaPaxResults,
            Dictionary<String, DataTable> oldScenarioTargetTablesDictionary, List<double> scenarioPercentiles)
        {
            if (newScenarioNode != null)
            {
                TreeNode newAirportReportsNode = getAirportReportsNodeFromHigherNode(newScenarioNode);
                if (newAirportReportsNode != null)
                {
                    TreeNode newTargetNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.TARGET_DIRECTORY_NAME, newAirportReportsNode);
                    if (newTargetNode != null && newTargetNode.Nodes != null)
                    {
                        setPercentileAttributeDegreeList(scenarioPercentiles); // >> Task #11212 Pax2Sim - Target - add missing Attribute degree

                        foreach (KeyValuePair<String, DataTable> pair in oldScenarioTargetTablesDictionary)
                        {
                            DataTable targetTable = pair.Value;
                            if (targetTable != null)
                                updateTargetTable(targetTable, newScenarioNode, newTargetNode, ptaPaxResults);
                        }
                    }
                }
            }
        }

        private void updateTargetTable(DataTable targetTable, TreeNode newScenarioNode, TreeNode newTargetNode, OverallTools.PaxTraceAnalysis ptaPaxResults)
        {
            if (targetTable != null)
            {
                #region target table indexes
                int scenarioNameColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_scenarioName_columnName);
                int processObservedColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_processObserved_columnName);
                int statisticTypeColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_statisticType_columnName);
                int attributeDegreeColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_attributeDegree_columnName);
                int statisticAttributeColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_statisticAttribute_columnName);
                int comparisonTypeColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_comparisonType_columnName);
                int targetValueColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_targetValue_columnName);
                int valueObservedColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_valueObserved_columnName);
                int differenceColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_difference_columnName);
                int targetAchievedColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_targetAchived_columnName);
                int successColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_percentSuccess_columnName);
                #endregion

                if (scenarioNameColumnIndex != -1 && processObservedColumnIndex != -1 && statisticTypeColumnIndex != -1 
                    && attributeDegreeColumnIndex != -1 && statisticAttributeColumnIndex != -1 && comparisonTypeColumnIndex != -1 
                    && targetValueColumnIndex != -1 && differenceColumnIndex != -1 && valueObservedColumnIndex != -1 && targetAchievedColumnIndex != -1 
                    && successColumnIndex != -1)
                {
                    foreach (DataRow row in targetTable.Rows)
                    {
                        String processObserved = row[processObservedColumnIndex].ToString();
                        String statisticType = row[statisticTypeColumnIndex].ToString();
                        String statisticAttribute = row[statisticAttributeColumnIndex].ToString();
                        String attributeDegree = row[attributeDegreeColumnIndex].ToString();
                        String comparisonType = row[comparisonTypeColumnIndex].ToString();

                        String targetAchievedString = "";
                        double difference = 0;
                        double percSuccess = 0;

                        String processObservedCode = "";
                        if (processObserved.IndexOf("(") != -1)
                            processObservedCode = processObserved.Substring(0, processObserved.IndexOf("(")).Trim();
                        else
                            processObservedCode = processObserved;

                        //DataTable statisticTable = getStatisticTable(newScenarioNode.Name, processObservedCode, statisticType);
                        DataTable summaryTable = DonneesEnCours.getTable(newScenarioNode.Name, processObservedCode);    // >> Task #11212 Pax2Sim - Target - add missing Attribute degree

                        if (summaryTable != null)
                        {
                            //int targetedColumnIndex = getTargetedColumnIndexFromStatisticTable(statisticTable, statisticType, statisticAttribute);
                            double valueObserved = Double.MinValue;
                            //if (targetedColumnIndex != -1)
                            //{                                
                            valueObserved = getValueObserved(summaryTable, statisticType,
                                                              statisticAttribute, attributeDegree);
                            //}
                            double targetValue = 0;
                            if (Double.TryParse(row[targetValueColumnIndex].ToString(), out targetValue) 
                                && valueObserved != Double.MinValue)
                            {
                                calculateTargetData(targetValue, valueObserved, comparisonType, out targetAchievedString,
                                    out difference, out percSuccess);

                                row[scenarioNameColumnIndex] = newScenarioNode.Name;
                                row[valueObservedColumnIndex] = valueObserved;
                                row[targetAchievedColumnIndex] = targetAchievedString;
                                row[differenceColumnIndex] = difference;
                                row[successColumnIndex] = percSuccess;
                            }
                        }
                    }
                    targetTable.AcceptChanges();
                    MAJ_TableArbre(newScenarioNode.Name, targetTable, newTargetNode, true, false);
                }
            }
        }

        private DataTable getStatisticTable(String scenarioName, String processObserved, String statisticType)
        {
            DataTable statisticTable;
            String statisticTableName = "";
            if (statisticType.Equals(GlobalNames.STATISTIC_TYPE_TIME)
                    || statisticType.Equals(GlobalNames.STATISTIC_TYPE_REMAINING_TIME))
            {
                statisticTableName = processObserved + GlobalNames.IST_TABLE_SUFFIX;
                statisticTable = DonneesEnCours.getTable(scenarioName, statisticTableName);
            }
            else
            {
                statisticTableName = processObserved + "_" + statisticType;
                statisticTable = DonneesEnCours.getTable(scenarioName, statisticTableName);
            }
            return statisticTable;
        }

        private int getTargetedColumnIndexFromStatisticTable(DataTable statisticTable, String statisticType, String statisticAttribute)
        {
            String columnName = "";
            int columnIndex = -1;

            if (statisticTable != null)
            {
                if (statisticType.Equals(GlobalNames.STATISTIC_TYPE_TIME))
                {
                    if (statisticAttribute.Equals(GlobalNames.TIME_STATS_TOTAL_TIME))
                        columnName = GlobalNames.IST_TOTAL_TIME_COLUMN_NAME;
                    else if (statisticAttribute.Equals(GlobalNames.TIME_STATS_DELAY_TIME))
                        columnName = GlobalNames.sPaxPlan_DelayTime;
                    else if (statisticAttribute.Equals(GlobalNames.TIME_STATS_PROCESS_TIME))
                        columnName = GlobalNames.IST_PROCESS_TIME_COLUMN_NAME;
                    else if (statisticAttribute.Equals(GlobalNames.TIME_STATS_WAITING_GROUP_TIME))
                        columnName = GlobalNames.IST_WAITING_GROUP_TIME_COLUMN_NAME;
                    else if (statisticAttribute.Equals(GlobalNames.TIME_STATS_WAITING_DESK_TIME))
                        columnName = GlobalNames.IST_WAITING_DESK_TIME_COLUMN_NAME;

                    columnIndex = statisticTable.Columns.IndexOf(columnName);
                }
                else if (statisticType.Equals(GlobalNames.STATISTIC_TYPE_REMAINING_TIME))
                {
                    columnName = GlobalNames.IST_REMAINING_TIME_COLUMN_NAME;
                    columnIndex = statisticTable.Columns.IndexOf(columnName);
                }
                else
                {
                    columnName = statisticAttribute;
                    columnIndex = statisticTable.Columns.IndexOf(columnName);
                }
            }
            return columnIndex;
        }
        
        private double getValueObserved(DataTable summaryTable, String statisticType,
            String statisticAttribute, String attributeDegree)
        {
            double valueObserved = 0;

            if (statisticType.Equals(GlobalNames.STATISTIC_TYPE_OVERVIEW)
                || statisticType.Equals(GlobalNames.STATISTIC_TYPE_OCCUPATION)
                || statisticType.Equals(GlobalNames.STATISTIC_TYPE_DWELL_AREA)
                || statisticType.Equals(GlobalNames.STATISTIC_TYPE_UTILIZATION)
                || statisticType.Equals(GlobalNames.STATISTIC_TYPE_TIME)
                || statisticType.Equals(GlobalNames.STATISTIC_TYPE_REMAINING_TIME))
            {
                if (attributeDegree.Equals(GlobalNames.ATTRIBUTE_DEGREE_MIN))
                {
                    valueObserved = getValueFromSummaryTable(summaryTable, statisticAttribute, GlobalNames.SUMMARY_TABLE_MIN_VALUE_COLUMN_NAME);
                    //valueObserved = OverallTools.DataFunctions.getMinValue(statisticTable, targetedColumnIndex);
                }
                else if (attributeDegree.Equals(GlobalNames.ATTRIBUTE_DEGREE_MAX))
                {
                    valueObserved = getValueFromSummaryTable(summaryTable, statisticAttribute, GlobalNames.SUMMARY_TABLE_MAX_VALUE_COLUMN_NAME);
                    //valueObserved = OverallTools.DataFunctions.getMaxValue(statisticTable, targetedColumnIndex);
                }
                else if (attributeDegree.Equals(GlobalNames.ATTRIBUTE_DEGREE_AVG))      // >> Task #11212 Pax2Sim - Target - add missing Attribute degree
                {
                    valueObserved = getValueFromSummaryTable(summaryTable, statisticAttribute, GlobalNames.SUMMARY_TABLE_AVG_VALUE_COLUMN_NAME);
                    //valueObserved = OverallTools.DataFunctions.getAvgValue(statisticTable, targetedColumnIndex);
                }
                else if (percentileAttributeDegreeList.Contains(attributeDegree))       // >> Task #11212 Pax2Sim - Target - add missing Attribute degree
                {
                    valueObserved = getValueFromSummaryTable(summaryTable, statisticAttribute, attributeDegree);
                }
                else if (attributeDegree.Equals(GlobalNames.ATTRIBUTE_DEGREE_TOTAL))    // >> Task #11217 Pax2Sim - Target - add missing Attribute degree stage2
                {
                    valueObserved = getValueFromSummaryTable(summaryTable, statisticAttribute, GlobalNames.SUMMARY_TABLE_VALUE_COLUMN_NAME);
                }
            }
            return valueObserved;
        }
        /*
        private double getValueObserved(DataTable statisticTable, DataTable summaryTable, int targetedColumnIndex, String statisticType,
                                        String statisticAttribute, String attributeDegree)
        {
            double valueObserved = 0;

            if (statisticType.Equals(GlobalNames.STATISTIC_TYPE_OCCUPATION)
                || statisticType.Equals(GlobalNames.STATISTIC_TYPE_DWELL_AREA)
                || statisticType.Equals(GlobalNames.STATISTIC_TYPE_UTILIZATION)
                || statisticType.Equals(GlobalNames.STATISTIC_TYPE_TIME)
                || statisticType.Equals(GlobalNames.STATISTIC_TYPE_REMAINING_TIME))
            {
                if (attributeDegree.Equals(GlobalNames.ATTRIBUTE_DEGREE_MIN))
                {
                    valueObserved = OverallTools.DataFunctions.getMinValue(statisticTable, targetedColumnIndex);
                }
                else if (attributeDegree.Equals(GlobalNames.ATTRIBUTE_DEGREE_MAX))
                {
                    valueObserved = OverallTools.DataFunctions.getMaxValue(statisticTable, targetedColumnIndex);
                }
                else if (attributeDegree.Equals(GlobalNames.ATTRIBUTE_DEGREE_AVG))  // >> Task #11212 Pax2Sim - Target - add missing Attribute degree
                {
                    valueObserved = OverallTools.DataFunctions.getAvgValue(statisticTable, targetedColumnIndex);
                }
                else if (percentileAttributeDegreeList.Contains(attributeDegree))  // >> Task #11212 Pax2Sim - Target - add missing Attribute degree
                {
                    valueObserved = getPercentileValueFromSummaryTable(summaryTable, statisticAttribute, attributeDegree);
                }
            }
            return valueObserved;
        }
*/
        // >> Task #11212 Pax2Sim - Target - add missing Attribute degree
        private List<String> percentileAttributeDegreeList = new List<String>();

        private void setPercentileAttributeDegreeList(List<double> scenarioPercentiles)
        {
            double[] percentiles = new double[3];
            if (scenarioPercentiles == null || scenarioPercentiles.Count == 0)
                percentiles = DonneesEnCours.Levels;
            else            
                percentiles = scenarioPercentiles.ToArray();

            percentileAttributeDegreeList.Clear();
            for (int i = 0; i < percentiles.Length; i++)
            {
                String percentileLabel = percentiles[i].ToString() + GlobalNames.SUMMARY_TABLE_DISTRIBUTION_LEVEL_COLUMN_SUFIX;
                percentileAttributeDegreeList.Add(percentileLabel);
            }            
        }

        private double getValueFromSummaryTable(DataTable summaryTable, String statisticAttribute, String attributeDegree)
        {
            double valueFromSummary = -1;

            if (summaryTable != null && GlobalNames.targetStatisticAttributeSummaryTableStatisticNameMap.ContainsKey(statisticAttribute))
            {
                String summaryKpiName = "";
                if (GlobalNames.targetStatisticAttributeSummaryTableStatisticNameMap.TryGetValue(statisticAttribute, out summaryKpiName))
                {
                    int kpiNameColumnIndex = summaryTable.Columns.IndexOf(GlobalNames.SUMMARY_TABLE_DATA_COLUMN_NAME);
                    int valueColumnIndex = summaryTable.Columns.IndexOf(attributeDegree);

                    if (kpiNameColumnIndex != -1 && valueColumnIndex != -1)
                    {
                        String kpiNameFromTable = "";
                        foreach (DataRow row in summaryTable.Rows)
                        {
                            if (row[kpiNameColumnIndex] != null)
                            {
                                kpiNameFromTable = row[kpiNameColumnIndex].ToString();
                                if (summaryKpiName.Equals(kpiNameFromTable))
                                {
                                    if (row[valueColumnIndex] != null)
                                    {
                                        String valueFromTable = row[valueColumnIndex].ToString();
                                        Double.TryParse(valueFromTable, out valueFromSummary);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            return valueFromSummary;
        }
        /*
        private double getPercentileValueFromSummaryTable(DataTable summaryTable, String statisticAttribute, String percentileAttributeDegree)
        {
            double percentileValue = -1;

            if (summaryTable != null && GlobalNames.targetStatisticAttributeSummaryTableStatisticNameMap.ContainsKey(statisticAttribute))
            {
                String summaryKpiName = "";
                if (GlobalNames.targetStatisticAttributeSummaryTableStatisticNameMap.TryGetValue(statisticAttribute, out summaryKpiName))
                {
                    int kpiNameColumnIndex = summaryTable.Columns.IndexOf(GlobalNames.SUMMARY_TABLE_DATA_COLUMN_NAME);
                    int percentileMaxValueColumnIndex = summaryTable.Columns.IndexOf(percentileAttributeDegree);

                    if (kpiNameColumnIndex != -1 && percentileMaxValueColumnIndex != -1)
                    {
                        String kpiNameFromTable = "";
                        foreach (DataRow row in summaryTable.Rows)
                        {
                            if (row[kpiNameColumnIndex] != null)
                            {
                                kpiNameFromTable = row[kpiNameColumnIndex].ToString();
                                if (summaryKpiName.Equals(kpiNameFromTable))
                                {
                                    if (row[percentileMaxValueColumnIndex] != null)
                                    {
                                        String valueFromTable = row[percentileMaxValueColumnIndex].ToString();
                                        Double.TryParse(valueFromTable, out percentileValue);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            return percentileValue;
        }*/
        // << Task #11212 Pax2Sim - Target - add missing Attribute degree

        private void calculateTargetData(double targetValue, double valueObserved, String comparisonType,
            out String targetAchievedString, out double difference, out double percentSuccess)
        {
            bool targetAchieved = false;
            difference = 0;
            percentSuccess = 0;
            
            if (comparisonType.Contains(">"))
            {
                percentSuccess = (valueObserved / targetValue) * 100;
                if (!comparisonType.Contains("=") && valueObserved == targetValue)
                    percentSuccess--;
            }
            else if (comparisonType.Contains("<"))
            {
                percentSuccess = (targetValue / valueObserved) * 100;
                if (!comparisonType.Contains("=") && valueObserved == targetValue)
                    percentSuccess--;
            }
            else if (comparisonType.Equals("="))
            {
                percentSuccess = (Math.Min(targetValue, valueObserved) / Math.Max(targetValue, valueObserved)) * 100;
                if (targetValue == valueObserved)
                    percentSuccess = 100;
            }
            percentSuccess = Math.Round(percentSuccess, 2);

            difference = Math.Round(Math.Abs(targetValue - valueObserved), 2);

            targetAchieved = isTargetAchieved(targetValue, valueObserved, comparisonType);
            if (targetAchieved)
            {
                targetAchievedString = GlobalNames.TARGET_ACHIEVED_POSITIVE;
            }
            else
            {
                targetAchievedString = GlobalNames.TARGET_ACHIEVED_NEGATIVE;
                difference = difference * (-1);
            }
        }
        
        private bool isTargetAchieved(double targetValue, double valueObserved, String comparisonType)
        {
            bool targetAchieved = false;

            switch (comparisonType)
            {
                case "<":
                    if (valueObserved < targetValue)
                        targetAchieved = true;
                    break;
                case "<=":
                    if (valueObserved <= targetValue)
                        targetAchieved = true;
                    break;
                case "=":
                    if (valueObserved == targetValue)
                        targetAchieved = true;
                    break;
                case ">=":
                    if (valueObserved >= targetValue)
                        targetAchieved = true;
                    break;
                case ">":
                    if (valueObserved > targetValue)
                        targetAchieved = true;
                    break;
            }
            return targetAchieved;

        }
        // << Task #10312 Pax2Sim - Statistic dev - Target - save target tables

        private void tsmiDelete_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Are you sure that you want to delete this Scenario ?", "Warning", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2) == DialogResult.OK)
            {
                DonneesEnCours.RemoveScenario(CurrentNode.Name);
                CurrentNode.Parent.Nodes.Remove(CurrentNode);
            UpdateItineraryView();
            }
        }

        private void tsmiCopy_Click(object sender, EventArgs e)
        {
            Prompt.ScenarioName changeName = new SIMCORE_TOOL.Prompt.ScenarioName(CurrentNode.Name, DonneesEnCours);
            if (changeName.ShowDialog() == DialogResult.OK)
            {
                ///Morceau de code qui permet de séparer le chargement de la visualisation.
                ///
               this.Enabled = false;
                /*XmlNode tmp = GestionDonneesHUB2SIM.exportBranchScenario2(DonneesEnCours.getGestionDonnees(CurrentNode.Name),
                    (Classes.ParamScenario)DonneesEnCours.GetScenario(CurrentNode.Name),
                    CurrentNode, new XmlDocument(), null, null);*/
                Prompt.SIM_Chargement cht = null;
                //int Resultat = GestionDonneesHUB2SIM.getFilesNumber((XmlElement)tmp);
                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                    cht.setFileNumber(100);
                }

                TreeNode node = null;
                try
                {
                    // >> Task #10326 Pax2Sim - Copy Scenario - copy process description
                    Dictionary<String, String> processAndDescriptionDictionary = getProcessAndDescriptionDictFromScenarioResultNodes(CurrentNode);

                    //node = DonneesEnCours.CopyScenario(changeName.getName(), CurrentNode.Name, cht, cmsBranchTestMenu, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cms_UserGraphics);
                    node = DonneesEnCours.CopyScenario(changeName.getName(), CurrentNode.Name, cht, cmsBranchTestMenu, contextMenuInput,
                        ContextMenuFilter, cmsAutomodMenu, cms_UserGraphics, processAndDescriptionDictionary);
                    // << Task #10326 Pax2Sim - Copy Scenario - copy process description
                                        
                    
                    // >> Task #10312 Pax2Sim - Statistic dev - Target - save target tables
                    copyTargetTables(CurrentNode, node);
                    // << Task #10312 Pax2Sim - Statistic dev - Target - save target tables
                }
                catch (Exception except)
                {
                    this.Enabled = true;
                    if (!bDebug)
                        cht.KillWindow();
                    OverallTools.ExternFunctions.PrintLogFile("Err00516 Exception while trying to copy a Scenario : " + except.Message);
                    MessageBox.Show("Err00516 Exception while trying to copy a Scenario");
                    return;
                }
                this.Enabled = true;
                if (!bDebug)
                    cht.KillWindow();
                if (node != null)
                {
                    OverallTools.TreeViewFunctions.AddSortedNode(treeView1.Nodes[2], node);
                    //treeView1.Nodes[2].Nodes.Add(node);
                    treeView1.CollapseAll();
                    treeView1.SelectedNode = node;
                    node.Expand();
                }
            }
        }
        
        // >> Task #10326 Pax2Sim - Copy Scenario - copy process description
        public Dictionary<String, String> getProcessAndDescriptionDictFromScenarioResultNodes(TreeNode scenarioNode)
        {
            Dictionary<String, String> processAndDescriptionDictionary = new Dictionary<String, String>();

            TreeViewTag treeViewTag = (TreeViewTag)(scenarioNode.Tag);
            if (treeViewTag != null && treeViewTag.isResultNode)
            {
                if (!processAndDescriptionDictionary.ContainsKey(scenarioNode.Name))
                    processAndDescriptionDictionary.Add(scenarioNode.Name, scenarioNode.Text);                
            }

            foreach (TreeNode childNode in scenarioNode.Nodes)
            {                
                Dictionary<String, String> childDictionary = getProcessAndDescriptionDictFromScenarioResultNodes(childNode);
                foreach (KeyValuePair<String, String> pair in childDictionary)
                {
                    if (!processAndDescriptionDictionary.ContainsKey(pair.Key))
                        processAndDescriptionDictionary.Add(pair.Key, pair.Value);
                }                
            }

            return processAndDescriptionDictionary;
        }
        // << Task #10326 Pax2Sim - Copy Scenario - copy process description

        // >> Task #10312 Pax2Sim - Statistic dev - Target - save target tables
        public void copyTargetTables(TreeNode sourceScenario, TreeNode destinationScenario)
        {
            Dictionary<String, DataTable> targetTablesDictionary = getTargetTablesDictionaryFromScenario(sourceScenario);
            
            TreeNode destinationAirportReportsNode = getAirportReportsNodeFromHigherNode(destinationScenario);
            if (destinationAirportReportsNode != null)
            {
                String sTarget = GlobalNames.TARGET_DIRECTORY_NAME;
                TreeNode destinationTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(sTarget, destinationAirportReportsNode);

                if (destinationTarget == null)
                {

                    if (destinationAirportReportsNode != null)
                    {
                        destinationTarget = OverallTools.TreeViewFunctions.createBranch(sTarget, sTarget, TreeViewTag.getDirectoryNode(sTarget), null);
                        destinationAirportReportsNode.Nodes.Add(destinationTarget);
                    }
                }

                if (targetTablesDictionary != null)
                {
                    foreach (KeyValuePair<String, DataTable> pair in targetTablesDictionary)
                    {
                        if (pair.Value != null)
                        {
                            //we must remove the table from the scenario's used table names
                            //(it remained from the source scenario when the DonneesEnCours.CopyScenario was called)
                            DonneesEnCours.RemoveTable(destinationScenario.Name, pair.Value.TableName);
                            MAJ_TableArbre(destinationScenario.Name, pair.Value, destinationTarget, true, false);
                        }
                    }
                }
            }
        }
        // << Task #10312 Pax2Sim - Statistic dev - Target - save target tables

        #endregion
        
        #region gestion du menu contextuel pour l'analyse de résultats
        private void tmsi_analyseBHSResults_Click(object sender, EventArgs e)
        {
            Prompt.Sim_Analyse_Simulation_Results Analyse = null;
            if (CurrentNode.Text != "Analysis")
                Analyse = new Prompt.Sim_Analyse_Simulation_Results(DonneesEnCours, epPerimetre, CurrentNode.Text);
            else
                Analyse = new Prompt.Sim_Analyse_Simulation_Results(DonneesEnCours, epPerimetre);
            if (Analyse.ShowDialog() != DialogResult.OK)
                return;
            SIMCORE_TOOL.Prompt.SIM_Chargement cht = null;
            if (!bDebug)
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
            }
            Classes.ParamScenario Parametres = Analyse.AnalysisParameters;
            Classes.ParamScenario LastParameters = DonneesEnCours.GetScenario(Parametres.Name);
            if (LastParameters != null)
            {
                LastParameters.DateDebut = Parametres.DateDebut;
                LastParameters.DateFin = Parametres.DateFin;
                LastParameters.BHSSimulation = Parametres.BHSSimulation;
                LastParameters.PaxSimulation = Parametres.PaxSimulation;
                Parametres = LastParameters;
                Parametres.SamplingStep = Analyse.Step;
                Parametres.AnalysisRange = Analyse.AnalysisRange;   // << Task #9611 Pax2Sim - BHS - Analyse BHS Results Assistant - Analysis Range option  
                Parametres.bhsGenerateLocalIST = Analyse.AnalysisParameters.bhsGenerateLocalIST;    // >> Task #13955 Pax2Sim -BHS trace loading issue
                Parametres.bhsGenerateGroupIST = Analyse.AnalysisParameters.bhsGenerateGroupIST;    // >> Task #14280 Bag Trace Loading time too long
                Parametres.bhsGenerateMUPSegregation = Analyse.AnalysisParameters.bhsGenerateMUPSegregation;    // >> Task #14280 Bag Trace Loading time too long
                Parametres.SaveTraceMode = Analyse.AnalysisParameters.SaveTraceMode;    // >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
                Parametres.percentilesLevels = Analyse.AnalysisParameters.percentilesLevels;    // >> Task #10254 Pax2Sim - View statistics option C#14

                if (Parametres.analysisResultsFilters == null)
                    Parametres.analysisResultsFilters = new List<AnalysisResultFilter>();
                else
                    Parametres.analysisResultsFilters.Clear();
                Parametres.analysisResultsFilters.AddRange(Analyse.AnalysisParameters.analysisResultsFilters.ToArray());

                if (Parametres.flowTypes == null)
                    Parametres.flowTypes = new List<string>();
                else
                    Parametres.flowTypes.Clear();
                Parametres.flowTypes.AddRange(Analyse.AnalysisParameters.flowTypes.ToArray());

                Parametres.bagTracePath = Analyse.BagFileName;
                // >> Bug #15556 Pax2Sim - Scenario Properties Assistant issues C#23
                DialogResult dr = MessageBox.Show("Do you want to lock this scenario as a trace analysis scenario?", 
                    "Scenario type", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dr == DialogResult.Yes)
                    Parametres.isTraceAnalysisScenario = true;
                else
                    Parametres.isTraceAnalysisScenario = false;
                // << Bug #15556 Pax2Sim - Scenario Properties Assistant issues C#23
            }
            else
            {
                Parametres.isTraceAnalysisScenario = true;  // >> Bug #15556 Pax2Sim - Scenario Properties Assistant issues C#23
            }

            if (errorList.Count > 0)
            {
                clearListIfUserAgrees();
            }

            //setErrors(new ArrayList(), false);  // >> Task #19690

            Double dEndingTime = OverallTools.DataFunctions.MinuteDifference(Parametres.DateDebut, Parametres.DateFin);
            TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(Parametres.Name, treeView1.Nodes[2]);
            bool bErase = false;
            if (ScenarioPosition != null)
                bErase = MessageBox.Show("Do you want to replace the old graphic definition with the new definition ?", "Information", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1) == DialogResult.Yes;
             
            GestionScenarios(Parametres);
            ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(Parametres.Name, treeView1.Nodes[2]);
            if (ScenarioPosition == null)
                return;

            setUpScenarioInformationTable(Parametres);
            saveResultFiltersTable(Parametres.Name, Parametres.analysisResultsFilters); // >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
            saveScenarioInputDataTables(Parametres, null); // >> Task #13361 FP AutoMod Data tables V3
            saveSettingsTable(Parametres);
            saveTracesTables(Parametres.Name, Analyse.BagFileName);

            if (Analyse.PaxFileName != "")
            {
                if(cht !=null)
                    cht.ChargementFichier("Analyze passengers results");

                // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Analyzing passenger results");
                // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps

                OverallTools.PaxTraceAnalysis AnalysePaxTraceClass_ = OverallTools.PaxTraceAnalysis
                    .AnalysePaxTrace(Parametres.Name, Analyse.PaxFileName, null, DonneesEnCours, Parametres.SamplingStep,
                        Parametres.WarmUp * 60, Parametres.SaveTraceMode, false);

                if (AnalysePaxTraceClass_ != null)
                {
                    AnalysePaxTraceClass_.GenerateAllTable(treeView1.Nodes[0], DonneesEnCours, Parametres.Name, Parametres.SamplingStep, Parametres.percentilesLevels); // >> Task #10484 Pax2Sim - Pax analysis - Summary with distribution levels percent
                    InsertPAXResults(Parametres.Name, AnalysePaxTraceClass_, bErase, false, Parametres.percentilesLevels);
                }
                else
                {
                    // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                    OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Unable to process the passenger trace.");
                    // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                }

                // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Passenger results analysis finished");
                // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps

                // << Task #9249 Pax2Sim - Simulation - Optimise memory usage
                AnalysePaxTraceClass_ = null;
                // >> Task #9249 Pax2Sim - Simulation - Optimise memory usage
            }
            
            if (Analyse.BagFileName != "")
            {
                //Parametres.SaveTraceMode = true;    // >> Task #13955 Pax2Sim -BHS trace loading issue    // >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Analyzing baggage results");   // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps

                // >> Task #9936 Pax2Sim - project properties saved specifically for each scenario + Times stats Spec
                double percentile1 = -1;
                double percentile2 = -1;
                double percentile3 = -1;
                if (Parametres.percentilesLevels == null || Parametres.percentilesLevels.Count == 0)
                {
                    percentile1 = DonneesEnCours.Levels[0];
                    percentile2 = DonneesEnCours.Levels[1];
                    percentile3 = DonneesEnCours.Levels[2];
                }
                else if (Parametres.percentilesLevels.Count == 3)
                {
                    percentile1 = Parametres.percentilesLevels[0];
                    percentile2 = Parametres.percentilesLevels[1];
                    percentile3 = Parametres.percentilesLevels[2];
                }

                // << Task #9936 Pax2Sim - project properties saved specifically for each scenario + Times stats Spec

                OverallTools.BagTraceAnalysis bagAnalyse = new OverallTools.BagTraceAnalysis(Parametres.Name, Analyse.BagFileName, Analyse.WarmUp * 60, percentile1, percentile2, percentile3, Parametres);
                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Analyzing baggage results: Open Bag Trace Start");
                if (!bagAnalyse.OpenBagTrace(dEndingTime, Parametres.SaveTraceMode, cht))
                {
                    string errorMessage = Parametres.Name + " : " + "Unable to process the baggage trace. For details please check the application's log at "
                        + OverallTools.ExternFunctions.getPax2SimLogFilePath() + " or use the shortcut from the Settings menu.";
                    if (cht != null)
                        cht.KillWindow();
                    ArrayList errors = new ArrayList();
                    errors.Add(errorMessage);
                    if (lesErreurs == null)
                    {
                        lesErreurs = new Errors(errors);
                        lesErreurs.Location = this.Location;
                    }
                    else
                    {
                        lesErreurs.setErrors(errors);
                    }
                    lesErreurs.Show();
                    return;
                }
                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Analyzing baggage results: Open Bag Trace End");
                
                // << Task #9611 Pax2Sim - BHS - Analyse BHS Results Assistant - Analysis Range option                
                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Analyzing baggage results: GenerateResults Start");

                XmlNode airportStructure = DonneesEnCours.getRacine();  // >> Task #13659 IST MakeUp segregation
                Hashtable htResults = bagAnalyse.GenerateResults(Parametres.DateDebut, Parametres.DateFin, Analyse.Step,
                    1, 31, cht, Analyse.AnalysisRange, Parametres.bhsGenerateLocalIST, Parametres.bhsGenerateGroupIST,
                    Parametres.bhsGenerateMUPSegregation, airportStructure, Parametres.analysisResultsFilters,
                    Parametres.analysisResultsFiltersSplittedByFlow, Parametres.flowTypes, Parametres.percentilesLevels);   // >> Task #13955 Pax2Sim -BHS trace loading issue    // >> Task #14280 Bag Trace Loading time too long
                // >> Task #9611 Pax2Sim - BHS - Analyse BHS Results Assistant - Analysis Range option
                
                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Analyzing baggage results: GenerateResults End");

                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Analyzing baggage results: InsertBHSResults Start");
                InsertBHSResults(Parametres.Name, htResults, bagAnalyse.Names, bErase, Parametres.bhsGenerateMUPSegregation,
                    Parametres.analysisResultsFiltersSplittedByFlow, Parametres.flowTypes, cht);    // >> Task #14280 Bag Trace Loading time too long
                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Analyzing baggage results: InsertBHSResults End");

                // >> Task #10254 Pax2Sim - View statistics option C#11 (update when reloading a scenario)
                String oldScenarioName = "";
                if (CurrentNode != null)
                    oldScenarioName = CurrentNode.Name;
                TreeNode oldScenarioNode = null;
                TreeNode analysisNode = OverallTools.TreeViewFunctions.RechercherNomEnfants("Analysis", treeView1.Nodes[2]);

                if (analysisNode != null && oldScenarioName != "")
                    oldScenarioNode = (TreeNode)getScenarioNodeFromAnalysisNode(analysisNode, oldScenarioName).Clone();
                Dictionary<string, DataTable> oldScenarioViewStatsTablesDictionary = new Dictionary<string, DataTable>();
                if (oldScenarioNode != null)
                    oldScenarioViewStatsTablesDictionary = getViewStatsTablesDictionary(oldScenarioNode);

                TreeNode newScenarioNode = null;
                if (analysisNode != null)
                {
                    newScenarioNode = getScenarioNodeFromAnalysisNode(analysisNode, Parametres.Name);
                }
                if (newScenarioNode != null && oldScenarioViewStatsTablesDictionary.Count > 0)
                {
                    updateViewStatsNode(newScenarioNode, oldScenarioNode.Name, oldScenarioViewStatsTablesDictionary, DonneesEnCours, Parametres.percentilesLevels);
                }
                // << Task #10254 Pax2Sim - View statistics option C#11 (update when reloading a scenario)

                // >> Task #13955 Pax2Sim -BHS trace loading issue
                DataManagement.DataManagerPaxBHS gdData = (DataManagement.DataManagerPaxBHS)DonneesEnCours.GetDataManager(Parametres.Name);
                if (gdData != null)
                {
                    String sPath = OverallTools.ExternFunctions.getTempDirectoryForPax2sim();
                    gdData.BagTraceLocation = sPath + Parametres.Name + "_BagTrace.tmp";
                }
                addFlightPlanStatisticsForBHS(Parametres, htResults);   // >> Task #19467
                OverallTools.ExternFunctions.PrintLogFile(Parametres.Name + " : " + "Baggage results analysis finished");   // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                
                if (bagAnalyse.alErrorList.Count > 0)   // >> Bug #14134 BHS Trace not analyzed without warning
                {
                    errorList = new ArrayList(bagAnalyse.alErrorList);
                    if (lesErreurs == null)
                    {
                        lesErreurs = new Errors(bagAnalyse.alErrorList);
                        lesErreurs.Location = this.Location;
                    }
                    else
                    {
                        lesErreurs.setErrors(bagAnalyse.alErrorList);
                    }
                    lesErreurs.Show();
                }
                // << Task #9249 Pax2Sim - Simulation - Optimise memory usage
                htResults = null;
                bagAnalyse = null;
                // >> Task #9249 Pax2Sim - Simulation - Optimise memory usage                
            }
            UpdateItineraryView();
            if (cht != null)
                cht.KillWindow();

            // << Task #9249 Pax2Sim - Simulation - Optimise memory usage
            Parametres = null;

            System.GC.Collect();
            System.GC.WaitForPendingFinalizers();
            // >> Task #9249 Pax2Sim - Simulation - Optimise memory usage
        }

        private void launchMultipleScenariosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Prompt.MultipleScenarios Analyse = new SIMCORE_TOOL.Prompt.MultipleScenarios(DonneesEnCours, epPerimetre, treeView1.Nodes[0]);
            if(Analyse.ShowDialog() != DialogResult.OK)
                return;
            ArrayList alSimulatedScenarios = Analyse.SimulatedScenarios;
            bool bErase = false;
            foreach (Prompt.MultipleScenarios.ScenarioStatus ssTmp in alSimulatedScenarios)
            {
                if(!bReporter)
                    bErase = MessageBox.Show("Do you want to replace the old graphic definition with the new definition for Scenario \"" + ssTmp.ScenarioName+ "\"?", "Information", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1) == DialogResult.Yes;

                if (!ssTmp.Succeed)
                    continue;
                Hashtable htBags = ssTmp.BagsResults;
                Hashtable htPKGResult = ssTmp.htPKGResults;
                OverallTools.PaxTraceAnalysis ptaPax = ssTmp.AnalysePaxTraceClass;
                SIMCORE_TOOL.Prompt.TraceAnalyser.TraceAnalysis taTrace = ssTmp.ReporterResults; 
                Classes.ParamScenario Parametres = DonneesEnCours.GetScenario(ssTmp.ScenarioName);
                
                GestionScenarios(Parametres);
                //TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(Parametres.Name, treeView1.Nodes[2]);
                if (htBags != null)
                {
                    InsertBHSResults(Parametres.Name, htBags, ssTmp.lsBHSNames, bErase, Parametres.bhsGenerateMUPSegregation,
                        Parametres.analysisResultsFiltersSplittedByFlow, Parametres.flowTypes, null);   // >> Task #14280 Bag Trace Loading time too long
                }
                if (ptaPax != null)
                {
                    InsertPAXResults(Parametres.Name, ptaPax, bErase,false, Parametres.percentilesLevels);
                }
                if (htPKGResult != null)
                {
                    InsertPRKResults(Parametres.Name, htPKGResult);
                }
                if (taTrace != null)
                {
                    insertReporterResult(Parametres, taTrace);
                }

                UpdateItineraryView();
            }
        }

        #endregion

        #region La gestion des différents scénarios

        private void GestionScenarios(String sName)
        {
            if (sName == null)
                return;
            this.treeView1.CollapseAll();
            TreeNode tnScenario = null;
            if (DonneesEnCours.ScenarioExist(sName))
            {
                tnScenario = OverallTools.TreeViewFunctions.RechercherNomEnfants(sName, treeView1.Nodes[2]);
                if (tnScenario == null)
                {
                    tnScenario = OverallTools.TreeViewFunctions.CreateDirectory(sName, sName, cmsBranchTestMenu);
                    OverallTools.TreeViewFunctions.AddSortedNode(treeView1.Nodes[2], tnScenario);
                }
            }
            else
            {
                tnScenario = OverallTools.TreeViewFunctions.CreateDirectory(sName, sName, cmsBranchTestMenu);
                if (tnScenario == null)
                {
                    return;
                }
                OverallTools.TreeViewFunctions.AddSortedNode(treeView1.Nodes[2], tnScenario);
            }
            DonneesEnCours.Maj_Scenario(sName, tnScenario, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);

            SelectNode(null);
            SelectNode(OverallTools.TreeViewFunctions.RechercherNomEnfants(sName, treeView1.Nodes[2]));
            if (CurrentNode != null)
            {
                CurrentNode.Parent.Expand();
                CurrentNode.Expand();
                foreach (TreeNode node in CurrentNode.Nodes)
                {
                    node.Expand();
                }
            }
        }
        private void GestionScenarios(Classes.ParamScenario Scenario)
        {
            if (Scenario == null)
                return;
            this.treeView1.CollapseAll();
            if (DonneesEnCours.ScenarioExist(Scenario.Name))
            {
                TreeNode tnScenario = OverallTools.TreeViewFunctions.RechercherNomEnfants(Scenario.Name, treeView1.Nodes[2]);
                if (tnScenario == null)
                {
                    tnScenario = GestionDonneesHUB2SIM.createBranchScenario(Scenario.Name, Scenario, cmsBranchTestMenu, cmsAutomodMenu, exportScenarioTablesContextMenuStrip);
                    OverallTools.TreeViewFunctions.AddSortedNode(treeView1.Nodes[2], tnScenario);
                }
                DonneesEnCours.ReplaceScenario(Scenario.Name, Scenario);
                DonneesEnCours.Maj_Scenario(Scenario.Name, tnScenario, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
            }
            else
            {
                TreeNode tmp = DonneesEnCours.AddScenario(Scenario.Name, cmsBranchTestMenu, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, Scenario, exportScenarioTablesContextMenuStrip);
                if (tmp == null)
                {
                    return;
                }
                OverallTools.TreeViewFunctions.AddSortedNode(treeView1.Nodes[2], tmp);
            }
            SelectNode(null);
            SelectNode(OverallTools.TreeViewFunctions.RechercherNomEnfants(Scenario.Name, treeView1.Nodes[2]));
            if (CurrentNode != null)
            {
                CurrentNode.Parent.Expand();
                CurrentNode.Expand();
                foreach (TreeNode node in CurrentNode.Nodes)
                {
                    node.Expand();
                }
            }
        }
        #endregion

        #endregion

        #region ##############       TREEVIEW

        #region Fonction pour la sélection d'un élément dans le treeview.
        internal static bool stoppedLoadingScenario = false;   // >> Task #13955 Pax2Sim -BHS trace loading issue
        private void SelectNode(TreeNode node)
        {
            stoppedLoadingScenario = false;   // >> Task #13955 Pax2Sim -BHS trace loading issue
            

            if ((CurrentNode != null) && (node != null))
            {
                if ((CurrentNode.Text == node.Text) && (CurrentNode.Tag == node.Tag))
                    if (CurrentNode == node)
                        return;
            }
            //On supprime l'affichage du dataGrid et du graphique.
            ViewTable(null, null, null);
            afficherGraphique((string)null, (string)null);
            //On modifie les objets sélectionnés
            // << Task #8573 Pax2Sim - User Attributes - Tree View selection            
            if (node != null && node.Text == GlobalNames.sUserAttributesTableName)  //"User Attributes")
            {
                //Reopen the tree view at the User Attributes table - must select the index because of the getFullPath exception after updating a tree view
                if (treeView1.Nodes != null && treeView1.Nodes.Count >= 2)
                {
                    if (treeView1.Nodes[1] != null && treeView1.Nodes[1].Nodes != null && treeView1.Nodes[1].Nodes.Count >= 2)
                    {
                        if (treeView1.Nodes[1].Nodes[1] != null && treeView1.Nodes[1].Nodes[1].Nodes != null 
                            && treeView1.Nodes[1].Nodes[1].Nodes.Count >= 10)
                        {
                            treeView1.SelectedNode = treeView1.Nodes[1].Nodes[1].Nodes[10];
                        }
                    }
                }
            }
            else
                treeView1.SelectedNode = node;
            //treeView1.SelectedNode = node;
            // >> Task #8573 Pax2Sim - User Attributes - Tree View selection
            CurrentNode = node;
            if (node == null)
            {
                return;
            }
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;
            RefreshTab(false);
            if (Tag.isChartNode)
            {
                dataGridView1.DataSource = null;
                afficherGraphique(CurrentNode.Name);
                if (dataGridView1.DataSource != null)
                    RefreshTab(false);

            }
            else if ((Tag.isFilterNode) || (Tag.isTableNode) || (Tag.isResultNode) || Tag.IsExceptionNode)
            {
                TabViewTable.Text = "Table";
                if (DonneesEnCours.tableEstPresente(Tag.ScenarioName, Tag.Name))
                {
                    //La structure de l'aéroport a été modifié, on vérifie le contenu des FP.
                    if (DonneesEnCours.getStructureAEteModifie())
                    {
                        DonneesEnCours.MAJ_TablesSuivantStructureAeroport(treeView1.Nodes[0]);
                        DonneesEnCours.AirportStructureChange();
                        AcceptData();
                    }
                    if (Tag.isFilterNode)
                    {
                        DataManagement.IFilterTable nt = (DataManagement.IFilterTable)DonneesEnCours.GetTable(Tag.ScenarioName, Tag.Name);
                        if (nt != null)
                        {
                            // >> Task #13384 Report Tree-view            
                            if (!PAX2SIM.loadingScenarioToShowObject)
                            {
                                if (!nt.Root.tableIsLoaded && nt.Root is ResultsTable)
                                {
                                    ResultsTable resultsTable = (ResultsTable)nt.Root;
                                    if (resultsTable != null && resultsTable.CalculatedFromTrace)
                                    {
                                        string warningMessage = "This is a table based on a scenario (\"" + Tag.ScenarioName + "\"). "  // >> Task #16728 PAX2SIM Improvements (Recurring) C#13
                                            + Environment.NewLine
                                            + "The loading procedure may take a few minutes. Do you want to continue?";

                                        ParamScenario scenarioParams = DonneesEnCours.GetScenario(Tag.ScenarioName);
                                        List<AnalysisResultFilter> resultFilters = null;
                                        List<string> flowTypes = null;
                                        bool isBHSSimulation = false;
                                        if (scenarioParams != null)
                                        {
                                            resultFilters = scenarioParams.analysisResultsFilters;
                                            flowTypes = scenarioParams.flowTypes;
                                            isBHSSimulation = scenarioParams.BHSSimulation;

                                            if (scenarioParams.analysisResultsFilters != null && scenarioParams.analysisResultsFilters.Count > 0)
                                            {
                                                if (scenarioParams.flowTypes == null || scenarioParams.flowTypes.Count == 0)
                                                {
                                                    scenarioParams.flowTypes.Clear();
                                                    scenarioParams.flowTypes.Add(AnalysisResultFilter.DEPARTING_FLOW_TYPE_VISUAL_NAME);
                                                    //scenarioParams.flowTypes.Add(AnalysisResultFilter.ARRIVING_FLOW_TYPE_VISUAL_NAME);
                                                    scenarioParams.flowTypes.Add(AnalysisResultFilter.ORIGINATING_FLOW_TYPE_VISUAL_NAME);
                                                    //scenarioParams.flowTypes.Add(AnalysisResultFilter.TERMINATING_FLOW_TYPE_VISUAL_NAME);
                                                    scenarioParams.flowTypes.Add(AnalysisResultFilter.TRANSFERRING_FLOW_TYPE_VISUAL_NAME);
                                                }
                                            }
                                        }

                                        BHSCustomMessageBox customMessageBox = new BHSCustomMessageBox(warningMessage,
                                            isBHSSimulation, resultFilters, flowTypes, DonneesEnCours, BHSCustomMessageBox.generateParametersForPopup(scenarioParams));
                                        DialogResult dr = customMessageBox.ShowDialog();
                                        if (dr == DialogResult.No || dr == DialogResult.Cancel)
                                        {
                                            PAX2SIM.stoppedLoadingScenario = true;
                                            PAX2SIM.loadingScenarioToShowObject = false;    // >> Reload scenario Question bug
                                            return;
                                        }
                                        PAX2SIM.stoppedLoadingScenario = false;
                                        PAX2SIM.loadingScenarioToShowObject = true;                        

                                        PAX2SIM.generateLocalISTForBHS = customMessageBox.generateLocalIST;
                                        PAX2SIM.generateGroupISTForBHS = customMessageBox.generateGroupIST; // >> Task #14280 Bag Trace Loading time too long
                                        PAX2SIM.generateMUPSegregationForBHS = customMessageBox.generateMUPSegregation; // >> Task #14280 Bag Trace Loading time too long
                                        PAX2SIM.copyOutputTables = customMessageBox.copyOutputTables;

                                        if (scenarioParams != null && customMessageBox.resultFilters != null)
                                        {
                                            scenarioParams.analysisResultsFilters.Clear();
                                            scenarioParams.analysisResultsFilters.AddRange(customMessageBox.resultFilters);
                                        }
                                        if (scenarioParams != null && customMessageBox.flowTypes != null)
                                        {
                                            scenarioParams.flowTypes.Clear();
                                            scenarioParams.flowTypes.AddRange(customMessageBox.flowTypes);
                                        }
                                    }
                                }
                            }
                            // << Task #13384 Report Tree-view
                            nt.SetVisuMode();
                        }
                    }
                    ViewTable(Tag.ScenarioName, Tag.Name, Tag);
                    // >> Task #13955 Pax2Sim -BHS trace loading issue
                    if (stoppedLoadingScenario)
                    {
                        loadingScenarioToShowObject = false;
                        treeView1.Focus();
                        OutilsGraphiques.UpdateDisplay();
                        return;
                    }
                    // << Task #13955 Pax2Sim -BHS trace loading issue
                    if (Tag.IsExceptionNode)
                    {
                        SIMCORE_TOOL.DataManagement.NormalTable ntTable = DonneesEnCours.GetExceptionTable(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                        if (ntTable != null)
                        {
                            afficherGraphique(ntTable.Table, ntTable.GraphicDefinition);
                            if((ntTable.GraphicDefinition==null)&&
                                  (tabControl.SelectedIndex == 1))
                                tabControl.SelectedIndex = 0;
                        }
                    }
                    else
                    {
                        afficherGraphique(Tag.ScenarioName, Tag.Name);
                        if ((DonneesEnCours.getGraphicFilter(Tag.ScenarioName, Tag.Name) == null) &&
                            (tabControl.SelectedIndex == 1))
                            tabControl.SelectedIndex = 0;
                    }
                    loadingScenarioToShowObject = false;    // >> Task #13955 Pax2Sim -BHS trace loading issue
                }
            }
            treeView1.Focus();
            OutilsGraphiques.UpdateDisplay();
        }
        #endregion

        #region Gestion global du treeview entier, réinitialisation de l'arbre, recherche dans l'arbre...

        /// <summary>
        /// Fonction qui se charge de réinitialiser les branches de l'arbre. On supprime ainsi toutes
        /// les branches qui avaient été ajoutées pour les filtre.
        /// </summary>
        private void reinitialiserArbre()
        {
            treeView1.Nodes.Clear();            
            if (bTopase)
            {
                treeView1.Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Scenario Ref","Scenario Réf",TreeViewTag.getDirectoryNode("Scenario Réf"), null));
                treeView1.Nodes[0].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Scénario 1", "Scénario 1", TreeViewTag.getDirectoryNode("Scénario 1"), null));
                treeView1.Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Scenario Travail", "Scenario Travail", TreeViewTag.getDirectoryNode("Scenario Travail"), null));
                treeView1.Nodes[1].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Scénario 1", "Scénario 1", TreeViewTag.getDirectoryNode("Scénario 1"), null));
                treeView1.Nodes[1].Nodes[0].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Data", "Data", TreeViewTag.getDirectoryNode("Data"), null));
                treeView1.Nodes[1].Nodes[0].Nodes[0].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Graph", "Graph", TreeViewTag.getChartNode("Graph"), null));
                
                treeView1.Nodes[1].Nodes[0].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Paramètres", "Paramètres", TreeViewTag.getDirectoryNode("Paramètres"), null));
                treeView1.Nodes[1].Nodes[0].Nodes[1].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Parametres", "Parametres", TreeViewTag.getTableNode("Parametres", "Parametres"), null));
                
                treeView1.Nodes[1].Nodes[0].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Résultats", "Résultats", TreeViewTag.getDirectoryNode("Résultats"), null));
                treeView1.Nodes[1].Nodes[0].Nodes[2].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Graph", "Graph", TreeViewTag.getChartNode("Graph"), null));
                
                treeView1.Nodes[1].Nodes[0].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Rapport", "Rapport", TreeViewTag.getDirectoryNode("Rapport"), null));
                treeView1.Nodes[1].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Scénario 2", "Scénario 2", TreeViewTag.getDirectoryNode("Scénario 2"), null));
                treeView1.Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Synthèse", "Synthèse", TreeViewTag.getDirectoryNode("Synthèse"), null));
                treeView1.Nodes[2].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Rapport", "Rapport", TreeViewTag.getDirectoryNode("Rapport"), null));
                treeView1.Nodes[2].Nodes.Add(OverallTools.TreeViewFunctions.createBranch("Graphiques", "Graphiques", TreeViewTag.getDirectoryNode("Graphiques"), null));
                
                return;
            }
            treeView1.Nodes.Add(OverallTools.TreeViewFunctions.createBranch(sMainNodeName, sMainNodeName, TreeViewTag.getAirportNode(sMainNodeName, 0, sMainNodeName), contextMenuAirport));
            treeView1.Nodes[0].NodeFont = new Font(treeView1.Font, FontStyle.Bold);
            treeView1.Nodes[0].Text = treeView1.Nodes[0].Text;

            TreeNode InputData = OverallTools.TreeViewFunctions.createBranch("DataIn", "Input data",TreeViewTag.getDirectoryNode("DataIn"), null);
            InputData.NodeFont = new Font(treeView1.Font, FontStyle.Bold);            
            treeView1.Nodes.Add(InputData);
            InputData.Text = InputData.Text;
            ReinitInputTable();

            TreeNode OutputData = OverallTools.TreeViewFunctions.createBranch("Analysis", "Analysis", TreeViewTag.getDirectoryNode("Analysis"), null);
            OutputData.NodeFont = new Font(treeView1.Font, FontStyle.Bold);            
            treeView1.Nodes.Add(OutputData);
            OutputData.Text = OutputData.Text;

            TreeNode Charts = OverallTools.TreeViewFunctions.createBranch("Charts", "Charts", TreeViewTag.getDirectoryNode("Charts"), cmsCharts);
            Charts.NodeFont = new Font(treeView1.Font, FontStyle.Bold);            
            treeView1.Nodes.Add(Charts);
            Charts.Text = Charts.Text;
            // >> Task #13384 Report Tree-view
            //if (!liegeMode)
            //{
            TreeNode reportsNode = OverallTools.TreeViewFunctions.createBranch(GlobalNames.REPORTS_MAIN_NODE_NAME, GlobalNames.REPORTS_MAIN_NODE_NAME,
                                                                                TreeViewTag.getDirectoryNode(GlobalNames.REPORTS_MAIN_NODE_NAME), cmsReports);
            reportsNode.NodeFont = new Font(treeView1.Font, FontStyle.Bold);                
            treeView1.Nodes.Add(reportsNode);
            reportsNode.Text = reportsNode.Text;
            //}
            // << Task #13384 Report Tree-view

            // >> Task #16578 PAX2SIM - Documents - new node in main tree-view
            TreeNode documentsNode = OverallTools.TreeViewFunctions.createBranch(GlobalNames.DOCUMENTS_MAIN_NODE_NAME, GlobalNames.DOCUMENTS_MAIN_NODE_NAME,
                TreeViewTag.getDirectoryNode(GlobalNames.DOCUMENTS_MAIN_NODE_NAME), cmsDocuments);
            documentsNode.NodeFont = new Font(treeView1.Font, FontStyle.Bold);
            treeView1.Nodes.Add(documentsNode);
            documentsNode.Text = documentsNode.Text;
        }

        private void ReinitInputTable()
        {
            treeView1.Nodes[1].Nodes.Clear();
            TreeNode InputData = treeView1.Nodes[1];
            GestionDonneesHUB2SIM.UpdateInputTreeNode(InputData, contextMenuInput);
            
            /*if(DonneesEnCours != null)
                UpdateIconeNote(InputData.Nodes);*/
            /*
            int j = 0;
            for (int i = 0; i < GestionDonneesHUB2SIM.ListeNomsSeparation.Length; i++)
            {
                TreeNode tmp = OverallTools.TreeViewFunctions.createBranch(GestionDonneesHUB2SIM.ListeNomsSeparation[i], GestionDonneesHUB2SIM.ListeNomsCompletsSeparation[i], TreeViewTag.getDirectoryNode(GestionDonneesHUB2SIM.ListeNomsSeparation[i]), null);
                InputData.Nodes.Add(tmp);
                for (; j <= GestionDonneesHUB2SIM.ListeSeparation[i]; j++)
                {
                    if (!GestionDonneesHUB2SIM.ListeTablePAXVisible[j])
                        continue;
                    if ((GestionDonneesHUB2SIM.ListeNomTablePAX[j] == "OCT_MakeUp") ||
                        (GestionDonneesHUB2SIM.ListeNomTablePAX[j] == "Segregation"))
                    {
                        if ((!bShowAllocationTools) && ((epPerimetre != EnumPerimetre.BHS)&&(epPerimetre != EnumPerimetre.TMS)))
                            continue;
                        TreeNode tmp2;
                        if (!tmp.Nodes.ContainsKey("Make-Up Allocation"))
                        {
                            tmp2 = OverallTools.TreeViewFunctions.createBranch("Make-Up Allocation", "Make-Up Allocation", TreeViewTag.getDirectoryNode("Make-Up Allocation"), null);
                            tmp.Nodes.Add(tmp2);
                            if (DonneesEnCours != null)
                            {
                                if(DonneesEnCours.getGestionDonnees("Input") != null)
                                    DonneesEnCours.getGestionDonnees("Input").UpdateTreeMakeUpAllocatedTables(tmp2, contextMenuInput);
                            }
                        }
                        else
                        {
                            tmp2 = tmp.Nodes["Make-Up Allocation"];
                        }
                        int iIndex = 0;
                        if (GestionDonneesHUB2SIM.ListeNomTablePAX[j] == "Segregation")
                            iIndex++;

                        tmp2.Nodes.Insert(iIndex, OverallTools.TreeViewFunctions.createBranch(GestionDonneesHUB2SIM.ListeNomTablePAX[j],
                            GestionDonneesHUB2SIM.ListeNomsCompletsTablesPAX[j],
                            TreeViewTag.getTableNode("Input", GestionDonneesHUB2SIM.ListeNomTablePAX[j]),
                            contextMenuInput));
                    }else if(GestionDonneesHUB2SIM.ListeNomTablePAX[j] == "Baggage_Claim_Constraint")
                    {
                        if (!bShowAllocationTools)
                            continue;
                        TreeNode tmp2;
                        if (!tmp.Nodes.ContainsKey("Reclaim Allocation"))
                        {
                            tmp2 = OverallTools.TreeViewFunctions.createBranch("Reclaim Allocation", "Reclaim Allocation", TreeViewTag.getDirectoryNode("Reclaim Allocation"), null);
                            tmp.Nodes.Add(tmp2);
                            if (DonneesEnCours != null) 
                                if (DonneesEnCours.getGestionDonnees("Input") != null)
                                DonneesEnCours.getGestionDonnees("Input").UpdateTreeReclaimAllocatedTables(tmp2, contextMenuInput);
                        }
                        else
                        {
                            tmp2 = tmp.Nodes["Transfer Infeed Allocation"];
                        }

                        tmp2.Nodes.Insert(0, OverallTools.TreeViewFunctions.createBranch(GestionDonneesHUB2SIM.ListeNomTablePAX[j],
                            GestionDonneesHUB2SIM.ListeNomsCompletsTablesPAX[j],
                            TreeViewTag.getTableNode("Input", GestionDonneesHUB2SIM.ListeNomTablePAX[j]),
                            contextMenuInput));
                        
                    }
                    else if ((GestionDonneesHUB2SIM.ListeNomTablePAX[j] == "TransferInfeedAllocationRulesTable"))
                    {
                        if (!bShowAllocationTools)
                            continue;
                        TreeNode tmp2;
                        if (!tmp.Nodes.ContainsKey("Transfer Infeed Allocation"))
                        {
                            tmp2 = OverallTools.TreeViewFunctions.createBranch("Transfer Infeed Allocation", "Transfer Infeed Allocation", TreeViewTag.getDirectoryNode("Transfer Infeed Allocation"), null);
                            tmp.Nodes.Add(tmp2);
                            if (DonneesEnCours != null)
                            {
                                if (DonneesEnCours.getGestionDonnees("Input") != null)
                                    DonneesEnCours.getGestionDonnees("Input").UpdateTreeTransferInfeedAllocatedTables(tmp2, contextMenuInput);
                                //else
                                    //DonneesEnCours.UpdateAllocation
                            }
                        }
                        else
                        {
                            tmp2 = tmp.Nodes["Transfer Infeed Allocation"];
                        }
                        tmp2.Nodes.Insert(0,OverallTools.TreeViewFunctions.createBranch(GestionDonneesHUB2SIM.ListeNomTablePAX[j],
                            GestionDonneesHUB2SIM.ListeNomsCompletsTablesPAX[j],
                            TreeViewTag.getTableNode("Input", GestionDonneesHUB2SIM.ListeNomTablePAX[j]),
                            contextMenuInput));
                    }
                    else
                    {
                        tmp.Nodes.Add(OverallTools.TreeViewFunctions.createBranch(GestionDonneesHUB2SIM.ListeNomTablePAX[j],
                            GestionDonneesHUB2SIM.ListeNomsCompletsTablesPAX[j],
                            TreeViewTag.getTableNode("Input", GestionDonneesHUB2SIM.ListeNomTablePAX[j]),
                            contextMenuInput));
                    }

                }
            }*/
            if (DonneesEnCours != null)
            {
                DonneesEnCours.MajUserData(treeView1.Nodes[1], cmsUserData);
                if ((epPerimetre == EnumPerimetre.BHS)||(epPerimetre == EnumPerimetre.TMS))
                {
                    if(treeView1.Nodes[1].Nodes.ContainsKey("BHS"))
                        DonneesEnCours.UpdateBHSDirectory(treeView1.Nodes[0], /*treeView1.Nodes[1].Nodes["BHS"]*/null, contextMenuInput);
                }
                DonneesEnCours.UpdateFilters("Input", InputData, ContextMenuFilter, cmsExceptionTable);
            }
            if (treeView1.Nodes.Count > 2)
            {
                //On ajoute le menu d'analyse des résultats du bagtrace.
                treeView1.Nodes[2].ContextMenuStrip = null;
                if ((! bRuntime) && ((bReporter) || ((epPerimetre == EnumPerimetre.BHS) || (epPerimetre == EnumPerimetre.TMS))))
                {
                    treeView1.Nodes[2].ContextMenuStrip = cms_AnalyzeBHSResults;
                    launchMultipleScenariosToolStripMenuItem.Visible = bMultiScenario;
                    analyzeBHSResultsToolStripMenuItem.Visible = (!bReporter);
                    tmsi_analyzeBHSResults.Visible = (!bReporter);
                }
                else
                {
                    tmsi_analyzeBHSResults.Visible = false;
                    analyzeBHSResultsToolStripMenuItem.Visible = false;
                }
            }
            if (DonneesEnCours != null)
                UpdateIconeNote(InputData.Nodes);
        }
        /// <summary>
        /// Fonction pour mettre à jour l'icone des tables en fonction de la présence d'une note.
        /// </summary>
        /// <param name="nodes"></param>
        private void UpdateIconeNote(TreeNodeCollection nodes)
        {
            foreach (TreeNode node in nodes)
            {
                if (node.Tag != null)
                {
                    if (node.Tag.GetType() == typeof(TreeViewTag))
                    {
                        TreeViewTag Tag = (TreeViewTag)node.Tag;
                        if ((Tag != null) && (!Tag.isDirectoryNode))
                        {
                            String note = DonneesEnCours.getNote(Tag.ScenarioName, Tag.Name);
                            if(Tag.IsExceptionNode)
                                 note = DonneesEnCours.getExNote(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                            Tag.HasNote = note != null;
                            node.ImageIndex = Tag.ImageIndex;
                            node.SelectedImageIndex = Tag.SelectedImageIndex;
                        }
                    }
                }
                if (node.Nodes != null || node.Nodes.Count == 0)
                    UpdateIconeNote(node.Nodes);
            }
        }
        #endregion

        #region Gestion des évènements qui se produisent sur le treeview.
        private void treeView1_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            /*if (!CheckKey())
            {
                this.closeProject();
                this.Close();
                return;
            }*/
            if(e.Button == MouseButtons.Right)
                SelectNode(e.Node);
        }

        private void treeView1_DoubleClick(object sender, EventArgs e)
        {
            if (treeView1.SelectedNode == null)
                return;
            if (treeView1.SelectedNode.ContextMenuStrip != null)
            {
                TreeViewTag tvtNode = CheckCurrentNode();
                ///Si le fichier selectionné est une table Input
                if (bAIA && tvtNode.Name.ToString().Contains("Input"))
                {
                    ///On récupère les deux tables Input et process dont nous aurons besoins plus tard pour les paramètres
                    DataTable dt = DonneesEnCours.getTable(tvtNode.ScenarioName, tvtNode.Name);
                    DataTable dtProcess = DonneesEnCours.getTable(tvtNode.ScenarioName, "BHS_Terminal_1_Process");
                    if (dtProcess == null)
                        return;
                    
                    SIMCORE_TOOL.Prompt.SIM_ParametersIhm param = new SIMCORE_TOOL.Prompt.SIM_ParametersIhm(dt, dtProcess);
                    ///Si les parametres contenues dans la table sont corrects, alors on remplit les champs de l'assistant parametrage et on l'affiche
                    if (bAIA)
                    {
                        if (param.DataVerification())
                        {
                            param.fillFields();
                            param.ShowDialog();
                        }
                    }
                    return;
                }
                if (tvtNode.isChartNode)
                {
                    ShowAssistant_Click(sender, e);
                    return;
                }
                else if (tvtNode.isAirportNode)
                {
                    Edit_Click(sender, e);
                    return;
                }
                else if (tvtNode.isTableNode)
                {
                    EditTable_Click(sender, e);
                    return;
                }
                else if (tvtNode.isParagraphNode)   // >> Task #13384 Report Tree-view
                {
                    editNoteToolStripMenuItem_Click(sender, e);//tmsiEditNote_Click(sender, e);
                    return;
                }
                treeView1.SelectedNode.ContextMenuStrip.Show(MousePosition);
            }
        }

        private void treeView1_AfterSelect(object sender, TreeViewEventArgs e)
        {
            SelectNode(treeView1.SelectedNode);

            #region Gantt check when the user selects a table
            // check if we are in a FPD/A table or filter
            // and if the selected tab is Gantt we get the
            // data and fill the Gantt
            TreeNode selectedNode = treeView1.SelectedNode;
            if (selectedNode != null)
            {
                if (tabControl.SelectedIndex == tabControl.TabPages.IndexOf(tabGantt))
                {
                    TreeViewTag Tag = (TreeViewTag)selectedNode.Tag;
                    if ((Tag.isTableNode &&
                                (Tag.Name.Equals(GlobalNames.FPATableName) || Tag.Name.Equals(GlobalNames.FPDTableName)
                                    || Tag.Name.Equals(GlobalNames.Alloc_BaggageClaimTableName) || Tag.Name.Equals(GlobalNames.TransferInfeedAllocationRulesTableName)
                                    || Tag.Name.Equals(GlobalNames.OCT_ArrivalInfeedTableName) || Tag.Name.Equals(GlobalNames.OCT_ArrivalGateTableName)
                                    || Tag.Name.Equals(GlobalNames.Alloc_CITableName) || Tag.Name.Equals(GlobalNames.OCT_BaggDropTableName)
                                    || Tag.Name.Equals(GlobalNames.OCT_MakeUpTableName) || Tag.Name.EndsWith("_Alloc_MakeUp")  // >> Task #10272 Pax2Sim - MUP Allocation)
                                    || Tag.Name.Equals(GlobalNames.Alloc_BoardGateTableName)
                                    || Tag.Name.Equals(GlobalNames.Alloc_ParkingTableName) || Tag.Name.Equals(GlobalNames.OCT_RunwayTableName)
                                    || Tag.Name.Equals(GlobalNames.FPI_TableName) || Tag.Name.Equals(GlobalNames.StaticAlloc_ArrivalParking_TableName)
                                    || Tag.Name.Equals(GlobalNames.StaticAlloc_DepartureParking_TableName)
                                    || isCustomFPIGanttTable(Tag.Name)))
                        || (Tag.isFilterNode && isCustomFPIGanttTable(Tag.Name)))
                    {
                        if (Tag.Name.Equals(GlobalNames.FPATableName))
                        {
                            ganttTitle.Text = Model.DEFAULT_FPA_TITLE;
                            if (!ganttType.Equals(Model.FLIGHTGANTT))
                            {
                                ganttType = Model.FLIGHTGANTT;
                                //gantTypeChanged = true;
                                //ganttCreated = false;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.FPDTableName))
                        {
                            ganttTitle.Text = Model.DEFAULT_FPD_TITLE;
                            if (!ganttType.Equals(Model.FLIGHTGANTT))
                            {
                                ganttType = Model.FLIGHTGANTT;
                                //gantTypeChanged = true;
                                //ganttCreated = false;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.Alloc_BaggageClaimTableName))
                        {
                            ganttTitle.Text = Model.BAGGAGE_CLAIM_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT) && Tag.ScenarioName.Equals("Input"))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                            }
                            if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION) && !Tag.ScenarioName.Equals("Input"))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.TransferInfeedAllocationRulesTableName))
                        {
                            ganttTitle.Text = Model.TRANSFER_INFEED_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                                //gantTypeChanged = true;
                                //ganttCreated = false;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.OCT_ArrivalInfeedTableName))
                        {
                            ganttTitle.Text = Model.ARRIVAL_INFEED_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.OCT_ArrivalGateTableName))
                        {
                            ganttTitle.Text = Model.ARRIVAL_GATE_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                            }
                        }

                        if (Tag.Name.Equals(GlobalNames.Alloc_CITableName))
                        {
                            ganttTitle.Text = Model.CHECKIN_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT) && Tag.ScenarioName.Equals("Input"))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                            }
                            if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION) && !Tag.ScenarioName.Equals("Input"))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.OCT_BaggDropTableName))
                        {
                            ganttTitle.Text = Model.BAGGAGE_DROP_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.OCT_MakeUpTableName)
                            || Tag.Name.EndsWith("_Alloc_MakeUp"))   // >> Task #10272 Pax2Sim - MUP Allocation))
                        {
                            ganttTitle.Text = Model.MAKEUP_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                                //gantTypeChanged = true;
                                //ganttCreated = false;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.Alloc_BoardGateTableName))
                        {
                            ganttTitle.Text = Model.BOARDING_GATE_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT) && Tag.ScenarioName.Equals("Input"))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                            }
                            if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION) && !Tag.ScenarioName.Equals("Input"))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.Alloc_ParkingTableName))
                        {
                            ganttTitle.Text = Model.PARKING_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT) && Tag.ScenarioName.Equals("Input"))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                            }
                            if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION) && !Tag.ScenarioName.Equals("Input"))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.OCT_RunwayTableName))
                        {
                            ganttTitle.Text = Model.RUNWAY_TITLE;
                            if (!ganttType.Equals(Model.RESOURCESGANTT))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCESGANTT;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.FPI_TableName)
                            || isCustomFPIGanttTable(Tag.Name))
                        {
                            ganttTitle.Text = Model.FLIGHT_PLAN_INFO_TITLE + ": " + Tag.Name;
                            if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.StaticAlloc_ArrivalParking_TableName))
                        {
                            ganttTitle.Text = Model.PARKING_ARRIVAL_STATIC_ALLOC_TITLE;
                            if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                            }
                        }
                        if (Tag.Name.Equals(GlobalNames.StaticAlloc_DepartureParking_TableName))
                        {
                            ganttTitle.Text = Model.PARKING_DEPARTURE_STATIC_ALLOC_TITLE;
                            if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION))
                            {
                                colorByFlightCategory = true;
                                colorByAirlineCode = false;
                                colorByGroundHandlerCode = false;
                                ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                            }
                        }

                        createGantt();
                        exportXml = createFlightsListToExport();
                        if (ganttCreated)
                        {
                            canLoadXML();
                            //gantTypeChanged = false;
                        }
                    }
                    
                    if (Tag.isFilterNode)
                    {
                        Filter currentFilter = DonneesEnCours.getFilter(Tag.ScenarioName, Tag.Name);
                        String parentTableName = currentFilter.MotherTableName;
                        while (!parentTableName.Equals(GlobalNames.FPATableName) && !parentTableName.Equals(GlobalNames.FPDTableName)
                                && !parentTableName.Equals(GlobalNames.FPI_TableName))
                        {
                            currentFilter = DonneesEnCours.getFilter(Tag.ScenarioName, parentTableName);
                            // if the selected filter doesn't belong to FPD or FPA
                            // we terminate the search
                            if (currentFilter == null)
                                break;
                            parentTableName = currentFilter.MotherTableName;
                        }
                        if (parentTableName.Equals(GlobalNames.FPATableName) || parentTableName.Equals(GlobalNames.FPDTableName)
                            || parentTableName.Equals(GlobalNames.FPI_TableName))
                        {
                            if (parentTableName.Equals(GlobalNames.FPATableName))
                                ganttTitle.Text = currentFilter.Name + " - Filter from Arrival Flight Plans";
                            else
                                ganttTitle.Text = currentFilter.Name + " - Filter from Departure Flight Plans";

                            if (!ganttType.Equals(Model.FLIGHTGANTT))
                            {
                                ganttType = Model.FLIGHTGANTT;
                                // ganttCreated = false;
                            }

                            if (parentTableName.Equals(GlobalNames.FPI_TableName))
                            {
                                ganttTitle.Text = currentFilter.Name + " - Filter from Flight Plan Information";
                                if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION))
                                {
                                    colorByFlightCategory = true;
                                    colorByAirlineCode = false;
                                    colorByGroundHandlerCode = false;
                                    ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                                }
                            }

                            createGantt();
                            exportXml = createFlightsListToExport();
                            if (ganttCreated)
                                canLoadXML();
                        }
                    }
                }
            }
            #endregion

            // << Task #6386 Itinerary process            
            #region ProcessFlow check when the user selects a table
            // For the Itinerary table or any other table(and its filters) -> load the Process Flow for Itinerary table
            // For the Itinerary table's Filters - > load the corresponding Process Flow.
            if (selectedNode != null)
            {
                if (tabControl.SelectedIndex == tabControl.TabPages.IndexOf(tabNewItinerary) 
                    || (tabControl.SelectedIndex == tabControl.TabPages.IndexOf(tabNewItinerary) && previousProcessFlowLoaded == ""))
                {
                    TreeViewTag Tag = (TreeViewTag)selectedNode.Tag;

                    previousProcessFlowLoaded = processFlowName;                    

                    if (Tag.isTableNode && previousProcessFlowLoaded != GlobalNames.ItineraryTableName)
                    {
                        //load pf for Itinerary table
                        bool modifyProcessFlow = false;
                        modifyProcessFlowModeDictionary.TryGetValue(processFlowName, out modifyProcessFlow);
                        if (itineraryWasModified && modifyProcessFlow)
                        {
                            // we don't save the ProcessFlow object in the ItineraryGroups.txt,
                            //we only store them in the global list(for this session)
                            saveToDiskPreviousState = saveToDisk;
                            saveToDisk = false;
                            saveAllChangesCaller();
                        }                        
                        loadItinerarySWFFileIntoFlashObject();
                        if (readyToLoadXML)
                        {
                            processFlowName = GlobalNames.ItineraryTableName;
                            loadAllObjectsAsXMLFromAirportStructureForProcessFlow(false);
                            loadBackgroundImage();
                            itineraryWasModified = true;
                        }
                    }
                    else if (Tag.isFilterNode)
                    {
                        if (isSelectedFilteAGivenTableFilter(Tag, GlobalNames.ItineraryTableName))
                        {//itinerary table filter
                            //load pf for Itinerary table filter
                            bool modifyProcessFlow = false;
                            modifyProcessFlowModeDictionary.TryGetValue(processFlowName, out modifyProcessFlow);
                            if (itineraryWasModified && modifyProcessFlow)
                            {
                                // we don't save the ProcessFlow object in the ItineraryGroups.txt,
                                //we only store them in the global list(for this session)
                                saveToDiskPreviousState = saveToDisk;
                                saveToDisk = false;
                                saveAllChangesCaller();
                            }
                            loadItinerarySWFFileIntoFlashObject();
                            if (readyToLoadXML)
                            {                                
                                processFlowName = Tag.Name;
                                loadAllObjectsAsXMLFromAirportStructureForProcessFlow(false);
                                loadBackgroundImage();
                                itineraryWasModified = true;
                            }
                        }
                        else
                        {// filter for any other table
                            if (previousProcessFlowLoaded != GlobalNames.ItineraryTableName)
                            {
                                //load pf for itinerary table
                                bool modifyProcessFlow = false;
                                modifyProcessFlowModeDictionary.TryGetValue(processFlowName, out modifyProcessFlow);
                                if (itineraryWasModified && modifyProcessFlow)
                                {
                                    // we don't save the ProcessFlow object in the ItineraryGroups.txt,
                                    //we only store them in the global list(for this session)
                                    saveToDiskPreviousState = saveToDisk;
                                    saveToDisk = false;
                                    saveAllChangesCaller();
                                }
                                loadItinerarySWFFileIntoFlashObject();
                                if (readyToLoadXML)
                                {                                    
                                    processFlowName = GlobalNames.ItineraryTableName;
                                    loadAllObjectsAsXMLFromAirportStructureForProcessFlow(false);
                                    loadBackgroundImage();
                                    itineraryWasModified = true;
                                }
                            }
                        }
                    }           
                }
            }
            #endregion
            // >> Task #6386 Itinerary process

            // >> Task #10553 Pax2Sim - Pax analysis - Summary - Dashboard
            if (selectedNode != null)
            {
                if (tabControl.SelectedIndex == tabControl.TabPages.IndexOf(tabPageDashboard))
                {
                    TreeViewTag Tag = (TreeViewTag)selectedNode.Tag;
                    if (Tag != null 
                        && (Tag.isResultNode
                            || (Tag.isTableNode && GlobalNames.PEAK_FLOWS_STATISTICS_TABLE_NAMES_LIST.Contains(Tag.Name)) // >> Task #10720 Pax2Sim - Static analysis - redesign Peak flow statistics
                            || (Tag.isTableNode && Tag.Name.EndsWith(GlobalNames.BHS_STATS_TABLE_SUFFIX))
                            || (Tag.isTableNode && Tag.Name.EndsWith(GlobalNames.BHS_SUMMARY_TABLE_NAME_SUFFIX))    // >> Task #17222 PAX2SIM - FromTo Times statistics - global summaries
                            || (Tag.isTableNode && Tag.Name.StartsWith(GlobalNames.PAX_DISTRIBUTION_TABLE_PREFIX)
                                && Tag.Name.EndsWith(GlobalNames.PAX_SUMMARY_DISTRIBUTION_TABLE_SUFFIX))
                            || (Tag.isTableNode && Tag.Name.StartsWith(EbsStatisticsGenerator.GLOBAL_EBS_SUMMARY_TABLE_NAME))   // >> Task #9171 Pax2Sim - Static Analysis - EBS algorithm - Throughputs C#5
                            || isDashboardTableByTreeviewTag(Tag)   // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Bug.2.
                            )
                        )
                    {
                        TreeNode currentScenario = getScenarioNode(CurrentNode);
                        if (currentScenario != null)
                        {
                            DataTable summaryTable = DonneesEnCours.getTable(currentScenario.Name, Tag.Name);
                            if (summaryTable == null && dataGridView1 != null && dataGridView1.DataSource != null && dataGridView1.DataSource.GetType() == typeof(DataTable))   // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Bug.2.
                            {
                                List<string> allReportNames = getListOfAllReportsNames(DonneesEnCours.htReportParametres);
                                if (isChildOfReport(CurrentNode, allReportNames))
                                {
                                    summaryTable = (DataTable)dataGridView1.DataSource;
                                }
                            }
                            if (summaryTable != null)
                            {
                                createDashboard();
                                if (Tag.Name.EndsWith(GlobalNames.BHS_STATS_TABLE_SUFFIX)
                                    || Tag.Name.EndsWith(GlobalNames.BHS_SUMMARY_TABLE_NAME_SUFFIX) // >> Task #17222 PAX2SIM - FromTo Times statistics - global summaries
                                    || (Tag.Name.StartsWith(GlobalNames.PAX_DISTRIBUTION_TABLE_PREFIX) 
                                        && Tag.Name.EndsWith(GlobalNames.PAX_SUMMARY_DISTRIBUTION_TABLE_SUFFIX))
                                    || Tag.Name.StartsWith(EbsStatisticsGenerator.GLOBAL_EBS_SUMMARY_TABLE_NAME))   // >> Task #9171 Pax2Sim - Static Analysis - EBS algorithm - Throughputs C#5
                                {
                                    loadSummaryKPIsAsXMLForDashboard(summaryTable, CurrentNode.Text, true); //Tag.Name);
                                }
                                else
                                {
                                    loadSummaryKPIsAsXMLForDashboard(summaryTable, CurrentNode.Text, false); //Tag.Name);
                                }
                            }
                        }
                    }
                }
            }
            // << Task #10553 Pax2Sim - Pax analysis - Summary - Dashboard
            if (selectedNode != null && FlightPlanInformationToTextGantt.isFPITextGanttTable(selectedNode.Name))
            {
                TreeViewTag tvtTag = CheckCurrentNode();
                if (tvtTag == null)
                    return;
                if (!tvtTag.isTableNode && !tvtTag.isFilterNode)
                    return;

                applyColorCodeUsingSavedConfigurations(tvtTag.ScenarioName, CurrentNode.Name, textGanttColorParametersByTextGanttName);
                /*
                TreeNode textGanttNode = getTextGanttNodeFromScenario(tvtTag.ScenarioName, CurrentNode.Name);
                if (textGanttNode == null)
                    return;
                string parentFpiGanttTableName = getParentFpiGanttNodeName(textGanttNode);

                DataTable parentFpiGanttTable = DonneesEnCours.getTable(tvtTag.ScenarioName, parentFpiGanttTableName);
                DataTable textGanttTable = DonneesEnCours.getTable(tvtTag.ScenarioName, CurrentNode.Name);
                if (parentFpiGanttTable == null || textGanttTable == null)
                    return;

                TextGanttColorParameters colorParameters = TextGanttColorParameters.getDefaultParameters();
                if (textGanttColorParametersByTextGanttName.ContainsKey(textGanttTable.TableName))
                    colorParameters = textGanttColorParametersByTextGanttName[textGanttTable.TableName];
                applyColorCodeOnTextGantt(colorParameters, parentFpiGanttTable, textGanttTable, tvtTag.ScenarioName);
                */
            }
        }
                
        // << Task #6386 Itinerary process
        /// <summary>
        /// Checks if the filter received as parameter has
        /// as top level mother table the given table.
        /// </summary>
        /// <returns></returns>
        public bool isSelectedFilteAGivenTableFilter(TreeViewTag selectedFilterTag, String topLevelTableName)
        {
            Filter currentFilter = DonneesEnCours.getFilter(selectedFilterTag.ScenarioName, selectedFilterTag.Name);
            String parentTableName = "";
            while (currentFilter != null)
            {
                parentTableName = currentFilter.MotherTableName;
                if (parentTableName == topLevelTableName)
                    return true;
                currentFilter = DonneesEnCours.getFilter(selectedFilterTag.ScenarioName, parentTableName);
            }
            return false;
        }
        // >> Task #6386 Itinerary process

        private void treeView1_MouseClick(object sender, MouseEventArgs e)
        {
            if (!ValidateCellContent())
                return;
        }
        #endregion
        #endregion

        #region ##############       TABVIEW   &   HELP   &   Updates   &   Multilangue
        #region Gestion des onglets
        private void tabControl_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            //On a des actions à faire que dans le cas où c'est l'onglet du graphique qui est
            //sélectionné.
            if (outilsGraphiques != null)
                outilsGraphiques.Hide();

            UpdateItineraryView();
            TreeViewTag Tag = CheckCurrentNode();

            if (Tag == null)
                return;
            if (tabControl.SelectedIndex == tabControl.TabPages.IndexOf(TabChart))
            {
                if (bAfficheOutils)
                {
                    OutilsGraphiques.UpdateDisplay();
                    OutilsGraphiques.Show();
                }
                // >> Task #13384 Report Tree-view 
                string tableName = CurrentNode.Name;
                if (Tag.ScenarioName != null 
                    && (Tag.isTableNode || Tag.isFilterNode)
                    && tableName.StartsWith(Tag.ScenarioName)
                    && !DonneesEnCours.tableEstPresente(Tag.ScenarioName, tableName))
                {
                    // the Reports global charts contain the chart's child tables, named scenarioName-tableName
                    if (tableName.Length > Tag.ScenarioName.Length + 1)
                        tableName = tableName.Substring(Tag.ScenarioName.Length + 1);
                }
                GraphicFilter graphicFilter = null;
                if (Tag.IsExceptionNode)                
                    graphicFilter = DonneesEnCours.getExceptionTableGraphicFilter(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);                
                else
                    graphicFilter = DonneesEnCours.getGraphicFilter(Tag.ScenarioName, tableName);
                
                if ((graphicFilter == null && !Tag.isChartNode && !Tag.IsExceptionNode)
                    || (graphicFilter == null && Tag.IsExceptionNode))
                {
                    ShowAssistant_Click(null, null);
                }
                //if (((DonneesEnCours.getGraphicFilter(Tag.ScenarioName, CurrentNode.Name) == null)&&((!Tag.isChartNode)&&(!Tag.IsExceptionNode))) ||
                //    ((DonneesEnCours.getExceptionTableGraphicFilter(Tag.ScenarioName, Tag.Name, Tag.ExceptionName) == null) && (Tag.IsExceptionNode)))
                //    ShowAssistant_Click(null, null);
                // << Task #13384 Report Tree-view
            }

            // << Task #6386 Itinerary process
            bool modifyProcessFlow = false;
            modifyProcessFlowModeDictionary.TryGetValue(processFlowName, out modifyProcessFlow);
            if (itineraryWasModified && modifyProcessFlow)
            {
                // we don't save the ProcessFlow object in the ItineraryGroups.txt,
                //we only store them in the global list(for this session)
                saveToDiskPreviousState = saveToDisk;
                saveToDisk = false;
                saveAllChangesCaller();
            }
            if (tabControl.SelectedIndex == tabControl.TabPages.IndexOf(tabNewItinerary))
            {
                loadItinerarySWFFileIntoFlashObject();
                if (readyToLoadXML)
                {
                    if (Tag.isTableNode)
                    {
                        //if (Tag.Name.Equals(GlobalNames.ItineraryTableName))
                        //{
                        previousProcessFlowLoaded = processFlowName;
                        processFlowName = GlobalNames.ItineraryTableName;//Tag.Name;
                        //}
                    }
                    else if (Tag.isFilterNode)
                    {
                        Filter currentFilter = DonneesEnCours.getFilter(Tag.ScenarioName, Tag.Name);
                        String parentTableName = currentFilter.MotherTableName;
                        while (!parentTableName.Equals(GlobalNames.ItineraryTableName))
                        {
                            currentFilter = DonneesEnCours.getFilter(Tag.ScenarioName, parentTableName);
                            //if the filter doesn't belong to Itinerary table we terminate the search
                            if (currentFilter == null)
                                break;
                            parentTableName = currentFilter.MotherTableName;
                        }
                        if (parentTableName.Equals(GlobalNames.ItineraryTableName))
                        {
                            // when we are on the Itinerary table's Filter we load the Filter's Process Flow
                            previousProcessFlowLoaded = processFlowName;
                            processFlowName = Tag.Name;
                        }
                        else
                        {
                            // when we are on another table's filter than Itinerary's we load the Itinerary table Process Flow
                            previousProcessFlowLoaded = processFlowName;
                            processFlowName = GlobalNames.ItineraryTableName;//Tag.Name;
                        }
                    }

                    //clearItinerary();
                    loadAllObjectsAsXMLFromAirportStructureForProcessFlow(false);
                    loadBackgroundImage();
                    itineraryWasModified = true;
                }
            }
            // >> Task #6386 Itinerary process

            #region Gantt
            // when the user selects the Gantt tab
            // we get the data and fill the Gantt
            if (tabControl.SelectedIndex == tabControl.TabPages.IndexOf(tabGantt))
            {               
                if ((Tag.isTableNode &&
                                (Tag.Name.Equals(GlobalNames.FPATableName) || Tag.Name.Equals(GlobalNames.FPDTableName)
                                    || Tag.Name.Equals(GlobalNames.Alloc_BaggageClaimTableName) || Tag.Name.Equals(GlobalNames.TransferInfeedAllocationRulesTableName)
                                    || Tag.Name.Equals(GlobalNames.OCT_ArrivalInfeedTableName) || Tag.Name.Equals(GlobalNames.OCT_ArrivalGateTableName)
                                    || Tag.Name.Equals(GlobalNames.Alloc_CITableName) || Tag.Name.Equals(GlobalNames.OCT_BaggDropTableName)
                                    || Tag.Name.Equals(GlobalNames.OCT_MakeUpTableName)|| Tag.Name.EndsWith("_Alloc_MakeUp")   // >> Task #10272 Pax2Sim - MUP Allocation)
                                    || Tag.Name.Equals(GlobalNames.Alloc_BoardGateTableName)
                                    || Tag.Name.Equals(GlobalNames.Alloc_ParkingTableName) || Tag.Name.Equals(GlobalNames.OCT_RunwayTableName)
                                    || Tag.Name.Equals(GlobalNames.FPI_TableName) || Tag.Name.Equals(GlobalNames.StaticAlloc_ArrivalParking_TableName)
                                    || Tag.Name.Equals(GlobalNames.StaticAlloc_DepartureParking_TableName)
                                    || isCustomFPIGanttTable(Tag.Name)))
                    || (Tag.isFilterNode && isCustomFPIGanttTable(Tag.Name)))
                {
                    if (Tag.Name.Equals(GlobalNames.FPATableName))
                    {
                        ganttTitle.Text = Model.DEFAULT_FPA_TITLE;
                        if (!ganttType.Equals(Model.FLIGHTGANTT))
                        {
                            ganttType = Model.FLIGHTGANTT;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.FPDTableName))
                    {
                        ganttTitle.Text = Model.DEFAULT_FPD_TITLE;
                        if (!ganttType.Equals(Model.FLIGHTGANTT))
                        {
                            ganttType = Model.FLIGHTGANTT;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.Alloc_BaggageClaimTableName))
                    {
                        ganttTitle.Text = Model.BAGGAGE_CLAIM_TITLE;
                        if (!ganttType.Equals(Model.RESOURCESGANTT) && Tag.ScenarioName.Equals("Input"))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                        if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION) && !Tag.ScenarioName.Equals("Input"))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.TransferInfeedAllocationRulesTableName))
                    {
                        ganttTitle.Text = Model.TRANSFER_INFEED_TITLE;
                        if (!ganttType.Equals(Model.RESOURCESGANTT))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.OCT_ArrivalInfeedTableName))
                    {
                        ganttTitle.Text = Model.ARRIVAL_INFEED_TITLE;
                        if (!ganttType.Equals(Model.RESOURCESGANTT))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.OCT_ArrivalGateTableName))
                    {
                        ganttTitle.Text = Model.ARRIVAL_GATE_TITLE;
                        if (!ganttType.Equals(Model.RESOURCESGANTT))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                    }

                    if (Tag.Name.Equals(GlobalNames.Alloc_CITableName))
                    {
                        ganttTitle.Text = Model.CHECKIN_TITLE;
                        if (!ganttType.Equals(Model.RESOURCESGANTT) && Tag.ScenarioName.Equals("Input"))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                        if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION) && !Tag.ScenarioName.Equals("Input"))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.OCT_BaggDropTableName))
                    {
                        ganttTitle.Text = Model.BAGGAGE_DROP_TITLE;
                        if (!ganttType.Equals(Model.RESOURCESGANTT))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.OCT_MakeUpTableName)
                        || Tag.Name.EndsWith("_Alloc_MakeUp"))   // >> Task #10272 Pax2Sim - MUP Allocation)
                    {
                        ganttTitle.Text = Model.MAKEUP_TITLE;
                        if (!ganttType.Equals(Model.RESOURCESGANTT))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.Alloc_BoardGateTableName))
                    {
                        ganttTitle.Text = Model.BOARDING_GATE_TITLE;
                        if (!ganttType.Equals(Model.RESOURCESGANTT) && Tag.ScenarioName.Equals("Input"))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                        if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION) && !Tag.ScenarioName.Equals("Input"))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.Alloc_ParkingTableName))
                    {
                        ganttTitle.Text = Model.PARKING_TITLE;

                        if (!ganttType.Equals(Model.RESOURCESGANTT) && Tag.ScenarioName.Equals("Input"))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                        if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION) && !Tag.ScenarioName.Equals("Input"))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                        }

                    }
                    if (Tag.Name.Equals(GlobalNames.OCT_RunwayTableName))
                    {
                        ganttTitle.Text = Model.RUNWAY_TITLE;
                        if (!ganttType.Equals(Model.RESOURCESGANTT))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCESGANTT;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.FPI_TableName)
                        || isCustomFPIGanttTable(Tag.Name))
                    {
                        ganttTitle.Text = Model.FLIGHT_PLAN_INFO_TITLE + ": " + Tag.Name;
                        if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.StaticAlloc_ArrivalParking_TableName))
                    {
                        ganttTitle.Text = Model.PARKING_ARRIVAL_STATIC_ALLOC_TITLE;
                        if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                        }
                    }
                    if (Tag.Name.Equals(GlobalNames.StaticAlloc_DepartureParking_TableName))
                    {
                        ganttTitle.Text = Model.PARKING_DEPARTURE_STATIC_ALLOC_TITLE;
                        if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                            ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                        }
                    }


                    createGantt();
                    exportXml = createFlightsListToExport();
                    if (ganttCreated)
                    {
                        canLoadXML();
                    }
                }

                if (Tag.isFilterNode)
                {
                    Filter currentFilter = DonneesEnCours.getFilter(Tag.ScenarioName, Tag.Name);
                    String parentTableName = currentFilter.MotherTableName;
                    while (!parentTableName.Equals(GlobalNames.FPATableName) && !parentTableName.Equals(GlobalNames.FPDTableName)
                        && !parentTableName.Equals(GlobalNames.FPI_TableName))
                    {
                        currentFilter = DonneesEnCours.getFilter(Tag.ScenarioName, parentTableName);
                        // if the selected filter doesn't belong to FPD or FPA
                        // we terminate the search
                        if (currentFilter == null)
                            break;
                        parentTableName = currentFilter.MotherTableName;
                    }
                    if (parentTableName.Equals(GlobalNames.FPATableName) || parentTableName.Equals(GlobalNames.FPDTableName)
                        || parentTableName.Equals(GlobalNames.FPI_TableName))
                    {
                        if (parentTableName.Equals(GlobalNames.FPATableName))
                            ganttTitle.Text = currentFilter.Name + " - Filter from Arrival Flight Plans";
                        else
                            ganttTitle.Text = currentFilter.Name + " - Filter from Departure Flight Plans";
                        if (!ganttType.Equals(Model.FLIGHTGANTT))
                        {
                            ganttType = Model.FLIGHTGANTT;
                        }
                        if (parentTableName.Equals(GlobalNames.FPI_TableName))
                        {
                            ganttTitle.Text = currentFilter.Name + " - Filter from Flight Plan Information";
                            if (!ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION))
                                ganttType = Model.RESOURCE_GANTT_FOR_ALLOCATION;
                        }

                        createGantt();
                        exportXml = createFlightsListToExport();
                        if (ganttCreated)
                            canLoadXML();
                    }
                }
            }
            #endregion
            
            // >> Task #10553 Pax2Sim - Pax analysis - Summary - Dashboard            
            #region Summary Dashboard
            if (tabControl.SelectedIndex == tabControl.TabPages.IndexOf(tabPageDashboard))
            {
                if (Tag != null 
                    && (Tag.isResultNode
                        || (Tag.isTableNode && GlobalNames.PEAK_FLOWS_STATISTICS_TABLE_NAMES_LIST.Contains(Tag.Name))    // >> Task #10720 Pax2Sim - Static analysis - redesign Peak flow statistics
                        || (Tag.isTableNode && Tag.Name.EndsWith(GlobalNames.BHS_STATS_TABLE_SUFFIX))
                        || (Tag.isTableNode && Tag.Name.EndsWith(GlobalNames.BHS_SUMMARY_TABLE_NAME_SUFFIX))    // >> Task #17222 PAX2SIM - FromTo Times statistics - global summaries
                        || (Tag.isTableNode && Tag.Name.StartsWith(GlobalNames.PAX_DISTRIBUTION_TABLE_PREFIX) 
                            && Tag.Name.EndsWith(GlobalNames.PAX_SUMMARY_DISTRIBUTION_TABLE_SUFFIX))
                        || (Tag.isTableNode && Tag.Name.StartsWith(EbsStatisticsGenerator.GLOBAL_EBS_SUMMARY_TABLE_NAME))   // >> Task #9171 Pax2Sim - Static Analysis - EBS algorithm - Throughputs C#5
                        || isDashboardTableByTreeviewTag(Tag)  // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Bug.2.
                        )
                    )
                {
                    if (bAfficheOutils)
                    {
                        OutilsGraphiques.UpdateDisplay();
                        OutilsGraphiques.Show();
                    }
                    TreeNode currentScenario = getScenarioNode(CurrentNode);
                    if (currentScenario != null)
                    {
                        DataTable summaryTable = DonneesEnCours.getTable(currentScenario.Name, Tag.Name);
                        if (summaryTable == null && dataGridView1 != null && dataGridView1.DataSource != null && dataGridView1.DataSource.GetType() == typeof(DataTable))   // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Bug.2.
                        {
                            List<string> allReportNames = getListOfAllReportsNames(DonneesEnCours.htReportParametres);
                            if (isChildOfReport(CurrentNode, allReportNames))
                            {
                                summaryTable = (DataTable)dataGridView1.DataSource;
                            }
                        }
                        if (summaryTable != null)
                        {
                            createDashboard();
                            if (Tag.Name.EndsWith(GlobalNames.BHS_STATS_TABLE_SUFFIX) 
                                || (Tag.Name.StartsWith(GlobalNames.PAX_DISTRIBUTION_TABLE_PREFIX)
                                     && Tag.Name.EndsWith(GlobalNames.PAX_SUMMARY_DISTRIBUTION_TABLE_SUFFIX))
                                || Tag.Name.EndsWith(EbsStatisticsGenerator.GLOBAL_EBS_SUMMARY_TABLE_NAME) // >> Task #9171 Pax2Sim - Static Analysis - EBS algorithm - Throughputs C#5
                                || Tag.Name.EndsWith(GlobalNames.BHS_SUMMARY_TABLE_NAME_SUFFIX) // >> Task #17222 PAX2SIM - FromTo Times statistics - global summaries
                                )
                            {
                                loadSummaryKPIsAsXMLForDashboard(summaryTable, CurrentNode.Text, true);//Tag.Name);
                            }
                            else
                            {
                                loadSummaryKPIsAsXMLForDashboard(summaryTable, CurrentNode.Text, false);//Tag.Name);
                            }
                        }
                    }
                }
            }
            #endregion
            // << Task #10553 Pax2Sim - Pax analysis - Summary - Dashboard
        }

        #region Fonctions pour la gestion des onglets affichés suivant la sélection du treeview.

        private void RefreshTab(bool bSimul8Simulation)
        {
            TreeViewTag Tag = CheckCurrentNode();
            List<TabPage> dsbDisplayed = new List<TabPage>();

            tabControl.SelectedIndexChanged -= new EventHandler(tabControl_SelectedIndexChanged);
            TabPage tpSelected = null;
            if (tabControl.SelectedTab != null)
                tpSelected = tabControl.SelectedTab;
            int iNumberTab = tabControl.TabCount;
            int iTabPageSelected = tabControl.SelectedIndex;
            TabPage tpDefault = null;

            //ListTab->ListTab.AddRange(new TabPage[] { TabViewTable, TabChart, tp_Summary, tp_Itinerary, tabSimul8, tp_BHS });
#if(DEBUG)
            if (!bSimul8Simulation)
                dsbDisplayed.Add(tp_BHS);
#endif
            if (!bReporter)
                //if we are in Simul8 mode, then we add the Simul8 tab.
                if (bSimul8)
                    dsbDisplayed.Add(tabSimul8);
                else
                {
                    //In other case we add the normal itinerary.
                    // << Task #6386 Itinerary process                    
                    //dsbDisplayed.Add(tp_Itinerary);
                    // >> Task #6386 Itinerary process

                    // << Task #6386 Itinerary process
                    // The new Itinerary tab is also added.The swf file is loaded.
                    dsbDisplayed.Add(tabNewItinerary);
                    loadItinerarySWFFileIntoFlashObject();
                    // >> Task #6386 Itinerary process
                }

            //If we are not showing a table, then we dont need to show the graph, the table tab or the tab gantt. (or in Simul8 simulation mode)
            if (bSimul8Simulation || (Tag == null) || ((Tag.isAirportNode) || (Tag.isDirectoryNode)))
            {
            }
            else if ((Tag.isTableNode) || (Tag.isFilterNode)
                || (Tag.isResultNode) || (Tag.IsExceptionNode)) //==> Ajouter ici pour ne plus afficher le report
            {
                if ((Tag.isTableNode) || (Tag.isFilterNode) || (Tag.IsExceptionNode))
                    dsbDisplayed.Add(TabChart);
                dsbDisplayed.Add(TabViewTable);
                //for table nodes or filter nodes add the Gantt tab only for FPD and FPA tables and their related filters and Allocation tables
                if (((Tag.isTableNode) &&
                       (Tag.Name.Equals(GlobalNames.FPATableName) || Tag.Name.Equals(GlobalNames.FPDTableName)
                        || Tag.Name.Equals(GlobalNames.Alloc_BaggageClaimTableName) || Tag.Name.Equals(GlobalNames.TransferInfeedAllocationRulesTableName)
                        || Tag.Name.Equals(GlobalNames.OCT_ArrivalInfeedTableName) || Tag.Name.Equals(GlobalNames.OCT_ArrivalGateTableName)
                        || Tag.Name.Equals(GlobalNames.Alloc_CITableName) || Tag.Name.Equals(GlobalNames.OCT_BaggDropTableName)
                        || Tag.Name.Equals(GlobalNames.OCT_MakeUpTableName) || Tag.Name.EndsWith("_Alloc_MakeUp")   // >> Task #10272 Pax2Sim - MUP Allocation
                        || Tag.Name.Equals(GlobalNames.Alloc_BoardGateTableName)
                        || Tag.Name.Equals(GlobalNames.Alloc_ParkingTableName) || Tag.Name.Equals(GlobalNames.OCT_RunwayTableName)
                        || Tag.Name.Equals(GlobalNames.FPI_TableName) || Tag.Name.Equals(GlobalNames.StaticAlloc_ArrivalParking_TableName)
                        || Tag.Name.Equals(GlobalNames.StaticAlloc_DepartureParking_TableName)
                        || isCustomFPIGanttTable(Tag.Name)))
                    || (Tag.isFilterNode && isCustomFPIGanttTable(Tag.Name)))
                {
                    dsbDisplayed.Add(tabGantt);
                }
/* the Gantt is createFlightsListToExport reloaded. The createFlightsListToExportcreateFlightsListToExport function needs to receive the table
 * name and scenario name so that it will not check for the selected node
                if (Tag.isTableNode)
                {createFlightsListToExport
                    Filter currentFilter = DonneesEnCours.getFilter("Input", Tag.Name);
                    if (isAFitlerOfGanttTableByScenarioName(currentFilter, "Input"))
                        dsbDisplayed.Add(tabGantt);
                }
*/
                if (Tag.isFilterNode)
                {
                    Filter currentFilter = DonneesEnCours.getFilter(Tag.ScenarioName, Tag.Name);
                    if (isAFitlerOfGanttTableByScenarioName(currentFilter, Tag.ScenarioName))
                        dsbDisplayed.Add(tabGantt);
/*
                    String parentTableName = currentFilter.MotherTableName;
                    while (!parentTableName.Equals(GlobalNames.FPATableName) && !parentTableName.Equals(GlobalNames.FPDTableName)
                            && !parentTableName.Equals(GlobalNames.FPI_TableName))
                    {
                        currentFilter = DonneesEnCours.getFilter(Tag.ScenarioName, parentTableName);
                        // if the selected filter doesn't belong to FPD, FPA or FPI
                        // we terminate the search
                        if (currentFilter == null)
                            break;
                        parentTableName = currentFilter.MotherTableName;
                    }
                    if (parentTableName.Equals(GlobalNames.FPATableName) || parentTableName.Equals(GlobalNames.FPDTableName)
                        || parentTableName.Equals(GlobalNames.FPI_TableName))
                        dsbDisplayed.Add(tabGantt);
*/
                }
                // >> Task #10553 Pax2Sim - Pax analysis - Summary - Dashboard                
                if (Tag.isResultNode
                    || (Tag.isTableNode && GlobalNames.PEAK_FLOWS_STATISTICS_TABLE_NAMES_LIST.Contains(Tag.Name))    // >> Task #10720 Pax2Sim - Static analysis - redesign Peak flow statistics
                    || (Tag.isTableNode && Tag.Name.EndsWith(GlobalNames.BHS_STATS_TABLE_SUFFIX))  // >> Task #10985 Pax2Sim - BHS dynamic analysis - adapt statistics tables for the Dashboard    
                    || (Tag.isTableNode && Tag.Name.StartsWith(GlobalNames.PAX_DISTRIBUTION_TABLE_PREFIX)
                         && Tag.Name.EndsWith(GlobalNames.PAX_SUMMARY_DISTRIBUTION_TABLE_SUFFIX))
                    || (Tag.isTableNode && Tag.Name.StartsWith(EbsStatisticsGenerator.GLOBAL_EBS_SUMMARY_TABLE_NAME))    // >> Task #9171 Pax2Sim - Static Analysis - EBS algorithm - Throughputs C#5
                    || (Tag.isTableNode && Tag.Name.EndsWith(GlobalNames.BHS_SUMMARY_TABLE_NAME_SUFFIX))    // >> Task #17222 PAX2SIM - FromTo Times statistics - global summaries
                    )
                {
                    dsbDisplayed.Add(tabPageDashboard);
                }
                else    // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Bug.2.
                {
                    if (Tag.Name != null && Tag.ScenarioName != null && DonneesEnCours.tableEstPresente(Tag.ScenarioName, Tag.Name)
                        && DashboardTools.tableHasDashboardStructure(DonneesEnCours.getTable(Tag.ScenarioName, Tag.Name)))
                    {
                        dsbDisplayed.Add(tabPageDashboard);
                    }
                }
                // << Task #10553 Pax2Sim - Pax analysis - Summary - Dashboard
                tpDefault = TabViewTable;
            }
            else if (Tag.isChartNode)
            {
                dsbDisplayed.Add(TabChart);
                if (dataGridView1.DataSource != null)
                    dsbDisplayed.Add(TabViewTable);
                tpDefault = TabChart;
            }
            int iCurrentIndex = 0;

            foreach (TabPage tpTmp in ListTab)
            {
                if (!dsbDisplayed.Contains(tpTmp))
                {

                    if (tabControl.TabPages.Contains(tpTmp))
                    {
                        if ((tabControl.SelectedTab == tpTmp) && (dsbDisplayed.Count > 0))
                        {
                            tabControl.SelectedTab = dsbDisplayed[0];
                        }
                        tabControl.TabPages.Remove(tpTmp);
                    }
                }
                else
                {
                    if (!tabControl.TabPages.Contains(tpTmp))
                    {
                        tabControl.TabPages.Insert(iCurrentIndex, tpTmp);
                    }
                    iCurrentIndex++;
                }
            }
            //if((tpDefault != null) && (tpSelected != null)

            if ( (tpDefault != null)&&((tabControl.TabPages.Count > iNumberTab) || ((tpSelected != null)&&(!tabControl.TabPages.Contains(tpSelected)))) )
            {
                tabControl.SelectedTab = tpDefault;
            }
            tabControl.SelectedIndexChanged += new EventHandler(tabControl_SelectedIndexChanged);
        }

        private bool isAFitlerOfGanttTableByScenarioName(Filter givenFilter, String ganttTableScenarioName)
        {
            if (givenFilter == null)
                return false;
            String parentTableName = givenFilter.MotherTableName;
            if (parentTableName == null)
                return false;
            while (!parentTableName.Equals(GlobalNames.FPATableName) && !parentTableName.Equals(GlobalNames.FPDTableName)
                    && !parentTableName.Equals(GlobalNames.FPI_TableName))
            {
                givenFilter = DonneesEnCours.getFilter(ganttTableScenarioName, parentTableName);
                // if the selected filter doesn't belong to FPD, FPA or FPI
                // we terminate the search
                if (givenFilter == null)
                    break;
                parentTableName = givenFilter.MotherTableName;
            }
            if (parentTableName.Equals(GlobalNames.FPATableName) || parentTableName.Equals(GlobalNames.FPDTableName)
                || parentTableName.Equals(GlobalNames.FPI_TableName))
            {
                return true;//dsbDisplayed.Add(tabGantt);
            }
            return false;
        }
        #endregion

        #endregion

        #region Gestion de l'outil de mises à jour.
        void LoadSettings()
        {
        }

        private void automaticUpdater1_ClosingAborted(object sender, EventArgs e)
        {
            LoadSettings();
        }

        private void automaticUpdater1_BeforeChecking(object sender, wyDay.Controls.BeforeArgs e)
        {

        }

        private void automaticUpdater1_BeforeDownloading(object sender, wyDay.Controls.BeforeArgs e)
        {
        }

        private void automaticUpdater1_CheckingFailed(object sender, wyDay.Controls.FailArgs e)
        {
            tsl_WyStatus.Text = "Unable to check the updates for " + OverallTools.AssemblyActions.AssemblyTitle + ".";// + e.ErrorMessage;
        }

        private void automaticUpdater1_DownloadingOrExtractingFailed(object sender, wyDay.Controls.FailArgs e)
        {

            tsl_WyStatus.Text = "Unable to download or to extract the update for " + OverallTools.AssemblyActions.AssemblyTitle + "" + e.ErrorMessage;
        }

        private void automaticUpdater1_UpdateAvailable(object sender, EventArgs e)
        {
            tsl_WyStatus.Text = "A new update is available for " + OverallTools.AssemblyActions.AssemblyTitle + "";
        }

        private void automaticUpdater1_UpdateFailed(object sender, wyDay.Controls.FailArgs e)
        {
            tsl_WyStatus.Text = "Cannot update your " + OverallTools.AssemblyActions.AssemblyTitle + "" + e.ErrorMessage;
        }

        private void automaticUpdater1_UpdateSuccessful(object sender, wyDay.Controls.SuccessArgs e)
        {
            tsl_WyStatus.Text = OverallTools.AssemblyActions.AssemblyTitle + " updated successfully";
        }

        private void automaticUpdater1_UpToDate(object sender, wyDay.Controls.SuccessArgs e)
        {
            tsl_WyStatus.Text = "Your " + OverallTools.AssemblyActions.AssemblyTitle + " is up to date";
        }

        private void checkForUpdatesToolStripMenuItem_Click(object sender, EventArgs e)
        {
        }
        #endregion

        #region Gestion de l'aide et de la release note
        internal void help_HideInternHelp()
        {
            sc_Content_Help.Panel2Collapsed = true;/*
            helpToolStripMenuItem1.Checked = false;
            releaseNotesToolStripMenuItem.Checked = false;*/
        }
        internal void help_ShowInternHelp()
        {
            sc_Content_Help.Panel2Collapsed = false;/*
            helpToolStripMenuItem1.Checked = (hHelp!=null)&&(hHelp.URL != null)&&(!hHelp.URL.EndsWith("txt"));
            releaseNotesToolStripMenuItem.Checked = !helpToolStripMenuItem1.Checked;*/
        }
        internal Panel Help_GetPanel()
        {
            return sc_Content_Help.Panel2;
        }
        internal void ShowPanel(Boolean bShow)
        {
            if (hHelp == null)
            {
                hHelp = new SIMCORE_TOOL.Interface.Help(this);
                if (hHelp == null)
                    return;
            }
            if (bShow)
            {
                hHelp.ShowHelp();
            }
            else
            {
                hHelp.HideHelp();
            }
        }
        internal void ShowHelp(Boolean bShow)
        {
            ShowPanel(bShow);
            helpToolStripMenuItem1.Checked = bShow;
            releaseNotesToolStripMenuItem.Checked = false;
            if (hHelp != null)
            {
                //if( (hHelp.Navigation == null) /*||(hHelp.Navigation.EndsWith("txt") )*/)
                    //hHelp.Navigate(Application.StartupPath + @"/NetHelp/default.htm");
                // << Task #8493 - Pax2Sim - html documentation                
                hHelp.Navigate(Application.StartupPath + @"/NetHelp/index.html");
                //hHelp.Navigate(Application.StartupPath + @"/NetHelp/default.htm");
                // >> Task #8493 - Pax2Sim - html documentation
            }
        }
        internal void ShowRelease(Boolean bShow)
        {
            ShowPanel(bShow);
            releaseNotesToolStripMenuItem.Checked = bShow;
            helpToolStripMenuItem1.Checked = false;
            if (hHelp != null)
            {
                //if (hHelp.Navigation == null)
                    hHelp.Navigate(Application.StartupPath + "\\Ressources\\ReleaseNotes.html");
            }
        }
        internal void HideWindow()
        {
            releaseNotesToolStripMenuItem.Checked = false;
            helpToolStripMenuItem1.Checked = false;
        }
        private void helpToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ShowHelp(helpToolStripMenuItem1.Checked);
        }

        private void releaseNotesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ShowRelease(releaseNotesToolStripMenuItem.Checked);
        }
        #endregion

        #region Pour la gestion du multilangue

        ///////////////////////////////////////////////
        //Déclaration des différentes langues utilisées
        //déclaration d'un ResourceManager/////////////
        //////////////////////////////////////////////
        private CultureInfo englishCulture;
        private CultureInfo frenchCulture;
        public static ResourceManager manager;

        //Pour les messages utilisateur
        static string[] messages;
        static string[] noeuds;


        private void frenchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frenchToolStripMenuItem.Enabled = false;
            englishToolStripMenuItem.Enabled = true;
            ////////////////////////
            // Changement de culture 
            /////////////////////////
            if (System.Threading.Thread.CurrentThread.CurrentUICulture != frenchCulture)
            {
                System.Threading.Thread.CurrentThread.CurrentUICulture = frenchCulture;

            }
            ChangerDecor();
        }

        //Initialisation des messages

        private static void initMessages()
        {
            /////////////////////////////////////////////////////////////////////////////////////////
            // LeResourceManager prend en paramètre : nom_du_namespace.nom_de_la_ressource_principale
            /////////////////////////////////////////////////////////////////////////////////////////
            manager = new System.Resources.ResourceManager("SIMCORE_TOOL.PAX2SIM", Assembly.GetExecutingAssembly());

            //initialisation des messages
            messages = new string[67];

            for (int i = 0; i < messages.Length; i++)
            {
                messages[i] = manager.GetString("message" + (i + 1));
            }

        }

        //Initialisation des noeuds du treeview
        private static void initNoeuds()
        {
            noeuds = new string[7];
            for (int j = 0; j < noeuds.Length; j++)
            {
                noeuds[j] = manager.GetString("noeud" + (j + 1));
            }
        }


        //Méthode de gestion du resourceManager
        private void ChangerDecor()
        {
            //Initialisation des msg 
            initMessages();




            //obtention de la valeur des chaines pour la langue en cours
            AirportDef.ToolTipText = manager.GetString("AirportDef.ToolTipText");
            allocateMakeUpToolStripMenuItem.Text = manager.GetString("allocateMakeUpToolStripMenuItem.Text");
            allocateReclaimToolStripMenuItem.Text=manager.GetString("allocateReclaimToolStripMenuItem.Text");
            allocateTransferInfeedToolStripMenuItem.Text=manager.GetString("allocateTransferInfeedToolStripMenuItem.Text");
            appearenceToolStripMenuItem.Text=manager.GetString("appearenceToolStripMenuItem.Text");

            userManualToolStripMenuItem.Text = manager.GetString("userManualToolStripMenuItem.Text");
            helpToolStripMenuItem.Text = manager.GetString("helpToolStripMenuItem.Text");
            viewStatisticsToolStripMenuItem.Text = manager.GetString("viewStatisticsToolStripMenuItem.Text");
            aboutToolStripMenuItem.Text = manager.GetString("aboutToolStripMenuItem.Text");
            addNewRowToolStripMenuItem.Text = manager.GetString("addNewRowToolStripMenuItem.Text");
            addChartToolStripMenuItem.Text = manager.GetString("addChartToolStripMenuItem.Text");
            closeToolStripMenuItem.Text=manager.GetString("closeToolStripMenuItem.Text");

            DynamicAnalysis.ToolTipText = manager.GetString("DynamicAnalysis.ToolTipText");
            importProjectToolStripMenuItem.Text=manager.GetString("importProjectToolStripMenuItem.Text");
            InputData.ToolTipText = manager.GetString("InputData.ToolTipText");
            lancementEtape2ToolStripMenuItem.Text=manager.GetString("lancementEtape2ToolStripMenuItem.Text");
            languageToolStripMenuItem.Text=manager.GetString("languageToolStripMenuItem.Text");
            newToolStripMenuItem.Text=manager.GetString("newToolStripMenuItem.Text");
            openToolStripMenuItem.Text=manager.GetString("openToolStripMenuItem.Text");
            ouvrirToolStripButton.Text=manager.GetString("ouvrirToolStripButton.Text");
            PrintPreview.Text=manager.GetString("PrintPreview.Text");
            projectNameToolStripMenuItem.Text=manager.GetString("projectNameToolStripMenuItem.Text");
            projetToolStripMenuItem.Text=manager.GetString("projetToolStripMenuItem.Text");
            quitterToolStripMenuItem.Text=manager.GetString("quitterToolStripMenuItem.Text");
            ResizeAllColumns.Text=manager.GetString("ResizeAllColumns.Text");
            
            saveAsToolStripMenuItem.Text=manager.GetString("saveAsToolStripMenuItem.Text");
            saveToolStripMenuItem.Text=manager.GetString("saveToolStripMenuItem.Text");
            StaticAnalysis.ToolTipText= manager.GetString("StaticAnalysis.ToolTipText");
            TabChart.Text=manager.GetString("TabChart.Text");
            tp_Itinerary.Text=manager.GetString("tp_Itinerary.Text");
            tp_Summary.Text=manager.GetString("tp_Summary.Text");
            tsb_AddRow.Text=manager.GetString("tsb_AddRow.Text");
            tsb_Allocate_CheckIn.Text=manager.GetString("tsb_Allocate_CheckIn.Text");
            tsb_Chart.Text=manager.GetString("tsb_Chart.Text");
            tsb_DeleteRow.Text=manager.GetString("tsb_DeleteRow.Text");
            tsb_Edit.Text=manager.GetString("tsb_Edit.Text");
            tsb_Runway.ToolTipText=manager.GetString("tsb_Runway.ToolTipText");
            tsb_BHS.Text=manager.GetString("tsb_BHS.Text");
            tsb_valid.Text=manager.GetString("tsb_valid.Text");
            tsl_NumberRows.Text=manager.GetString("tsl_NumberRows.Text");
            tsbExcel.Text=manager.GetString("tsbExcel.Text");
            tsbStartSimulation.Text = manager.GetString("tsbStartSimulation.Text");
            tsmi_AddUserData.Text = manager.GetString("tsmi_AddUserData.Text");
            tsmi_DeleteUserData.Text=manager.GetString("tsmi_DeleteUserData.Text");
            tsmi_Properties.Text = manager.GetString("tsmi_Properties.Text");

            unitsAndSpeedsToolStripMenuItem.Text=manager.GetString("unitsAndSpeedsToolStripMenuItem.Text");
            toolStripButton1.ToolTipText = manager.GetString("toolStripButton1.ToolTipText");

            createFilterToolStripMenuItem.Text = manager.GetString("createFilterToolStripMenuItem.Text");
            contextMenuFilterCopy.Text = manager.GetString("contextMenuFilterCopy.Text");
            ContextMenuFilterCreate.Text = manager.GetString("ContextMenuFilterCreate.Text");
            ContextMenuFilterCut.Text = manager.GetString("ContextMenuFilterCut.Text");
            ContextMenuFilterEdit.Text = manager.GetString("ContextMenuFilterEdit.Text");
            ContextMenuFilterPaste.Text = manager.GetString("ContextMenuFilterPaste.Text");
            ContextMenuFilterRemove.Text = manager.GetString("ContextMenuFilterRemove.Text");
            Delete.Text = manager.GetString("Delete.Text");
            deleteChartToolStripMenuItem.Text = manager.GetString("deleteChartToolStripMenuItem.Text");
            deleteRowToolStripMenuItem.Text = manager.GetString("deleteRowToolStripMenuItem.Text");
            deleteTableToolStripMenuItem.Text = manager.GetString("deleteTableToolStripMenuItem.Text");
            deleteToolStripMenuItem.Text = manager.GetString("deleteToolStripMenuItem.Text");
            Edit.Text = manager.GetString("Edit.Text");
            editCellToolStripMenuItem.Text = manager.GetString("editCellToolStripMenuItem.Text");
            editChartToolStripMenuItem.Text = manager.GetString("editChartToolStripMenuItem.Text");
            editColumnToolStripMenuItem.Text = manager.GetString("editColumnToolStripMenuItem.Text");
            EditTable.Text = manager.GetString("EditTable.Text");
            editToolStripMenuItem.Text = manager.GetString("editToolStripMenuItem.Text");
            importFromExistingTableToolStripMenuItem.Text = manager.GetString("importFromExistingTableToolStripMenuItem.Text");
            importFromFPToolStripMenuItem.Text = manager.GetString("importFromFPToolStripMenuItem.Text");
            ImportTable.Text = manager.GetString("ImportTable.Text");
            importTableToolStripMenuItem.Text = manager.GetString("importTableToolStripMenuItem.Text");
            InputContextMenuPasteFilter.Text = manager.GetString("InputContextMenuPasteFilter.Text");
            imprimerToolStripButton.Text = manager.GetString("imprimerToolStripButton.Text");
            launchMultipleScenariosToolStripMenuItem.Text = manager.GetString("launchMultipleScenariosToolStripMenuItem.Text");
            loadDefaultTableToolStripMenuItem.Text = manager.GetString("loadDefaultTableToolStripMenuItem.Text");
            addToChartTableToolStripMenuItem.Text = manager.GetString("addToChartTableToolStripMenuItem.Text");
            New.Text = manager.GetString("New.Text");

            //Treeview
            /*foreach(TreeNode noeud in treeView1.Nodes)
             {
                
                 string valeur = noeud.Name + ".Text";
                 valeur= manager.GetString(valeur);
             }*/


            /*foreach (Control ctl in this.Controls)
            {
                while (ctl.HasChildren)
                {
                    foreach (Control c in ctl.Controls)
                    {
                        while (c.HasChildren)
                        {
                            Control encours = c.GetNextControl(c,true);
                            foreach (Control c1 in encours.Controls)
                            {
                                string valeur = "";
                                valeur = encours.Text + ".TEXT";
                                valeur = manager.GetString(valeur);
                            }
                        }
                        
                    }
                                        
                }

            }*/

            //Message.traduire("C:/Stage_2010/SIMCORE_TOOL_VS09_26.03/SIMCORE_TOOL_VS08_26.03.2010/SIMCORE_TOOL/PAX2SIM.fr.resx", this, manager);

            //Mise à jour de la fenetre Resource_Assistant
            UpdateItineraryView();
        }

        public static void ChangeCulture(Control ctrl)
        {
            ctrl.Text = manager.GetString(ctrl.Name + ".Text");
        }
        private void englishToolStripMenuItem_Click(object sender, EventArgs e)
        {
            englishToolStripMenuItem.Enabled = false;
            frenchToolStripMenuItem.Enabled = true;
            if (System.Threading.Thread.CurrentThread.CurrentUICulture != englishCulture)
            {
                System.Threading.Thread.CurrentThread.CurrentUICulture = englishCulture;

            }
            ChangerDecor();
        }
        #endregion
        #endregion

        #region ##############       Main menu
        #region Menu File
        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!CheckDecimalSeparator())
                return;
            if (!CheckIsAbleToContinue())
                return;
            if (!ValidateCellContent())
                return;
            ///Test si projet en cours
            if (DonneesEnCours != null)
            {
                if (!SaveChanges())
                    return;
            }
            /*We change the current perimeter to be sure that it would be initialized in the right order.*/
            String sCurrentPerimeter = epPerimetre.ToString();
            if (epPerimetre != EnumPerimetre.PAX)
                setPerimeter("PAX");

            /*Creation of the new project.*/
            DonneesEnCours = new GestionDonneesHUB2SIM(new GestionDonneesHUB2SIM.AnalyseTracesDelegate(AnalyseResults));
            /*Ask the user to define a project name and the settings for the flight plans.*/
            nomToolStripMenuItem_Click(null, null);
            /*If the project name is null, (the user has canceled the change for the new project),
             then we remove the class for the new project. */
            if (DonneesEnCours.getNomProjet() == null)
            {
                ActiveDesactiveControles(false);
                DonneesEnCours.Dispose();
                DonneesEnCours = null;
            }
            else
            {
                /*We activate the menu that the user can access.*/
                ActiveDesactiveControles(true);
                reinitialiserArbre();
                UpdateItineraryView();
                // << Task #6386 Itinerary process
                bool modifyProcessFlow = false;
                modifyProcessFlowModeDictionary.TryGetValue(processFlowName, out modifyProcessFlow);
                if (itineraryWasModified && modifyProcessFlow)
                {
                    // The user accepted to save the whole project
                    saveToDiskPreviousState = true;
                    saveToDisk = true;                    
                    saveAllChangesCaller();
                }
                // save all other process flows belonging to other tables: if the current one was modified we don't
                //include it here(because it was dealt with earlier(in SaveAllChangesCaller))
                if (modifyProcessFlow)
                    ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                                   processFlowName, DonneesEnCours, true);
                else
                    ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                                   processFlowName, DonneesEnCours, false);
                
                // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters                
                if (processFlowParametersDictionary != null)
                    updateItineraryParametersTables();
                // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters

                calledForANewEmptyProject = true;
                if (readyToLoadXML)
                {
                    // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters
                    if (processFlowParametersDictionary != null)
                        processFlowParametersDictionary.Clear();
                    // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters

                    // << Bug #8210 Pax2Sim - ProcessFlow - save issue                
                    globalItineraryDataListDictionary.Clear();
                    modifyProcessFlowModeDictionary.Clear();
                    // >> Bug #8210 Pax2Sim - ProcessFlow - save issue

                    previousProcessFlowLoaded = "";
                    processFlowName = GlobalNames.ItineraryTableName;
                    //clearItinerary();
                    loadAllObjectsAsXMLFromAirportStructureForProcessFlow(false);
                    loadBackgroundImage();
                    itineraryWasModified = true;
                }
                // >> Task #6386 Itinerary process
                this.Text = OverallTools.AssemblyActions.AssemblyProduct + " - " + OverallTools.AssemblyActions.AssemblyVersion + " - " + DonneesEnCours.getNomProjet();  // >> PAX2SIM - assembly version - projectName - add assembly version // >> Bug #13337 Project name not displayed in Title bar
                toolStripStatusLabel.Text = "Project : " + DonneesEnCours.getNomProjet();    // >> PAX2SIM - assembly version - projectName - add assembly version // >> Bug #13337 Project name not displayed in Title bar
            }
            /*We put back the perimeter to the selected perimeter.*/
            if (sCurrentPerimeter != "PAX")
                setPerimeter(sCurrentPerimeter);
        }

        /// Ouverture d'un projet
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!CheckDecimalSeparator())
                return;
            if (!CheckIsAbleToContinue())
                return;
            if (!ValidateCellContent())
                return;
            ///Test si il y a un projet en cours.
            if (this.DonneesEnCours != null)
            {
                if (!SaveChanges())
                    return;
            }

            /// CONFIGURATION DE LA BOITE DE DIALOGUE POUR RECHERCHE DU FICHIER
            this.openFileDialog1.CheckFileExists = true;
            this.openFileDialog1.FileName = "*." + PAX2SIM.sExtension;
            this.openFileDialog1.Filter = OverallTools.AssemblyActions.AssemblyTitle + " file(*." + PAX2SIM.sExtension + ")|*." + PAX2SIM.sExtension ;
            this.openFileDialog1.Title = "Select the project file :";
            if (this.openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                OpenProject(openFileDialog1.FileName);
            }
        }
        private void importProjectToolStripMenuItem_Click(object sender, EventArgs e)
        {

            /// CONFIGURATION DE LA BOITE DE DIALOGUE POUR RECHERCHE DU FICHIER
            this.openFileDialog1.CheckFileExists = true;
            this.openFileDialog1.FileName = "*." + PAX2SIM.sExtension;
            this.openFileDialog1.Filter = OverallTools.AssemblyActions.AssemblyTitle + " file(*." + PAX2SIM.sExtension + ")|*." + PAX2SIM.sExtension + "";
            this.openFileDialog1.Title = "Select the project file :";
            if (this.openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                //openFileDialog1.FileName
                Prompt.SIM_Open_Partial_Project Test = new Prompt.SIM_Open_Partial_Project(null, imageList1);
            }
        }
        /// Sauvegarde d'un projet
        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            if (DonneesEnCours == null)
                return;
            if (!DonneesEnCours.getAEteEnregistreUneFois())
            {
                saveAsToolStripMenuItem_Click(sender, e);
            }
            else
            {
                this.Text = OverallTools.AssemblyActions.AssemblyProduct + " - " + OverallTools.AssemblyActions.AssemblyVersion + " - " + DonneesEnCours.getNomProjet();  // >> PAX2SIM - assembly version - projectName - add assembly version // >> Bug #13337 Project name not displayed in Title bar
                SIMCORE_TOOL.Prompt.SIM_Chargement cht = null;
                this.Enabled = false;
                UpdateItineraryView();
                // << Task #6386 Itinerary process
                bool modifyProcessFlow = false;
                modifyProcessFlowModeDictionary.TryGetValue(processFlowName, out modifyProcessFlow);
                if (itineraryWasModified && modifyProcessFlow)
                {
                    saveToDiskPreviousState = saveToDisk;
                    saveToDisk = true;
                    saveAllChangesCaller();
                }
                // save all other process flows belonging to other tables: if the current one was modified we don't
                //include it here(because it was dealt with earlier(in SaveAllChangesCaller))
                if (sender != null)
                {
                    if (modifyProcessFlow)
                        ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                                       processFlowName, DonneesEnCours, true);
                    else
                        ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                                       processFlowName, DonneesEnCours, false);
                    
                    // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters                
                    if (processFlowParametersDictionary != null)
                        updateItineraryParametersTables();
                    // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters
                }
                // >> Task #6386 Itinerary process

                // >> Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
                String projectDirectoryPath = DonneesEnCours.getDossierEnregistrement();
                if (projectDirectoryPath != null)
                {
                    DashboardTools.saveDashboardConfigDataIntoTextFile(scenariosStationsDashboardDictionary, projectDirectoryPath);
                }
                // << Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration

                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                GestionDonneesHUB2SIM.EraseWarningsErrorsProject();
                Boolean bSuccessFullSave = false;
                String sErreur = "Err00208 : Unknow error while trying to save the project. Warning, the current project is still not saved.";
                try
                {
                    bSuccessFullSave = DonneesEnCours.saveProjet(treeView1.Nodes, cht);
                    DonneesEnCours.FinalyseSAving();
                }
                catch (Exception except)
                {
                    OverallTools.ExternFunctions.PrintLogFile("Except02030: " + this.GetType().ToString() + " throw an exception while trying to save the project: " + except.Message);
                    sErreur += " " + except.Message;
                    //The saving didn't work properly, then we move back the directory to the right position.
                    DonneesEnCours.RestoreCurrentDirectory(cht);
                }
                    
                this.Enabled = true;
                if (!bDebug)
                    cht.KillWindow();
                if (!bSuccessFullSave)
                {
                    ArrayList Errors = GestionDonneesHUB2SIM.getWarningsErreursProject();
                    if (Errors.Count > 0)
                    {
                        MessageBox.Show(Errors[Errors.Count - 1].ToString(), "Errors", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show(sErreur, "Errors", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }
        /// Sauvegarde d'un projet sous un autre nom
        private void saveAsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;            
            //nomToolStripMenuItem_Click(sender, e);
            if (changeProjectName(sender))
                SaveProject();
        }
        /// Fermeture d'un projet
        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            if (DonneesEnCours != null)
            {
                if (!SaveChanges())
                    return;
            }
            // << Task #6386 Itinerary process            
            loadBlankProcessFlow();
            // >> Task #6386 Itinerary process
        }

        /// Fermeture de l'application
        private void quitterToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            if (DonneesEnCours != null)
                if (!SaveChanges())
                    return;
            ///Fermeture de l'application
            if (lesErreurs != null)
                lesErreurs.Dispose();
            if (hHelp != null)
                hHelp.Close();
            if (outilsGraphiques != null)
                outilsGraphiques.Close();
            outilsGraphiques = null;
            this.Close();
            Application.Exit();
        }

        #endregion

            #region Menu Project
        private void nomToolStripMenuItem_Click(object sender, EventArgs e)
        {
            changeProjectName(sender);
        }

        private bool changeProjectName(object sender)   // Task ? PAX2SIM SaveAs assistant - cancelling saveAs still opens the folder browser
        {
            if (DonneesEnCours == null)
                return false;
            SIM_Edit_Project_Name EditNomProjet = new SIM_Edit_Project_Name(DonneesEnCours.getNomProjet(), DonneesEnCours.UseAlphaNumericForFlightInfo);
            if (EditNomProjet.ShowDialog() == DialogResult.OK)
            {
                if (DonneesEnCours.getNomProjet() != EditNomProjet.getNomProjet())
                {
                    if (sender != null && sender is ToolStripDropDownItem)    // >> PAX2SIM - assembly version - projectName - add assembly version
                    {
                        ToolStripDropDownItem item = (ToolStripDropDownItem)sender;
                        if (item.Text == "Project Name")
                        {
                            this.Text = OverallTools.AssemblyActions.AssemblyProduct + " - " + OverallTools.AssemblyActions.AssemblyVersion + " - " + EditNomProjet.getNomProjet();
                            toolStripStatusLabel.Text = "Project : " + EditNomProjet.getNomProjet();
                        }
                    }
                    DonneesEnCours.setNomProjet(EditNomProjet.getNomProjet());
                    if (bTrialVersion)
                    {
                        this.Text += " - Trial version";
                        if (iValidDaysTrialVersion > 0)
                            this.Text += " (" + iValidDaysTrialVersion.ToString() + " days remaining)";
                        else
                            this.Text += " (Trial period expired)";
                    }
                }
                DonneesEnCours.UseAlphaNumericForFlightInfo = EditNomProjet.getUseDescription();
                return true;
            }
            return false;
        }

        #endregion

            #region Menu settings
        private void styleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SIMCORE_TOOL.Prompt.Appearence app = new SIMCORE_TOOL.Prompt.Appearence();
            app.ShowDialog();
            RefreshDisplay();
            Refresh();
        }

        private void unitAndSpeedsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (DonneesEnCours == null)
                return;
            Prompt.Speed_Settings ss_Assistant = new SIMCORE_TOOL.Prompt.Speed_Settings(DonneesEnCours.DistanceUnit,
                DonneesEnCours.DistanceInitial, DonneesEnCours.TimeUnit, DonneesEnCours.Speed, DonneesEnCours.Tolerance,DonneesEnCours.AllocationStep, DonneesEnCours.Levels);
            if (ss_Assistant.ShowDialog() == DialogResult.OK)
            {
                DonneesEnCours.DistanceUnit = ss_Assistant.getDistanceUnit();
                DonneesEnCours.DistanceInitial = ss_Assistant.getDistanceInitial();
                DonneesEnCours.TimeUnit = ss_Assistant.getTimeUnit();
                DonneesEnCours.TimeInitial = ss_Assistant.getTimeInitial();
                DonneesEnCours.Speed = ss_Assistant.getSpeed();
                DonneesEnCours.Tolerance = ss_Assistant.getTolerance();
                DonneesEnCours.AllocationStep = ss_Assistant.getAllocationStep();
                DonneesEnCours.Levels = ss_Assistant.getLevels();

                OverallTools.FonctionUtiles.setCoefficient(DonneesEnCours.Speed, DonneesEnCours.TimeUnit, DonneesEnCours.Tolerance, DonneesEnCours.DistanceInitial);
                TreeNode tnNote = CurrentNode;
                SelectNode(null);

                SelectNode(tnNote);
            }
            UpdateItineraryView();
        }
            #endregion

            #region Menu About
        /// A Propos PAX2SIM
        private void aProposToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AboutPax2SIM About = new AboutPax2SIM();
            About.ShowDialog();
        }
            #endregion

            #region Menu Help
        const string USER_GUIDE_PATH = "\\Docs\\PAX2SIM_UserGuide.pdf";   // >> Task #15220 Pax2Sim - Release doc directory
        private void tsb_Help_Click(object sender, EventArgs e)
        {
            try
            {
                if (OverallTools.FonctionUtiles.currentAppIsRunningAsAdmin())
                    Process.Start("explorer.exe", Application.StartupPath + USER_GUIDE_PATH);
                else
                    Process.Start(Application.StartupPath + USER_GUIDE_PATH);
            }
            catch (Exception except)
            {
                OverallTools.ExternFunctions.PrintLogFile("Err00322: " + this.GetType().ToString() + " throw an exception while trying to open PAX2SIM_UserGuide.pdf : " + except.Message);
                MessageBox.Show("Err00322 : There was a problem while trying to open PAX2SIM_UserGuide.pdf", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        const string SYSTEM_REQ_PATH = "\\Docs\\PAX2SIM_SatisfyingSystemRequirements.pdf";    // >> Task #15220 Pax2Sim - Release doc directory
        private void systemRequirementsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                if (OverallTools.FonctionUtiles.currentAppIsRunningAsAdmin())
                    Process.Start("explorer.exe", Application.StartupPath + SYSTEM_REQ_PATH);
                else
                    Process.Start(Application.StartupPath + SYSTEM_REQ_PATH);
            }
            catch (Exception except)
            {
                OverallTools.ExternFunctions.PrintLogFile("Err00339: " + this.GetType().ToString() + " throw an exception while trying to open PAX2SIM_SatisfyingSystemRequirements.pdf : " + except.Message);
                MessageBox.Show("Err00339 : There was a problem while trying to open PAX2SIM_SatisfyingSystemRequirements.pdf", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
            #endregion

            #region Fonctions pour le chargement, la sauvegarde et la cloture des projets.
        private void ShowChargement(Object cht)
        {
            ((Prompt.SIM_Chargement)cht).ShowDialog();
            return;
        }

        private bool OpenPartialProject(String NomProject)
        {
            return false;
        }

        private bool OpenProject(String NomProject)
        {
            if (!CheckIsAbleToContinue())
                return false;
            if (!System.IO.File.Exists(NomProject))
            {
                MessageBox.Show("The project file does not exist, please check for the project path", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
            sSettings.AddHistoricProject(NomProject);
            sSettings.UpdateHistoric(lancementEtape2ToolStripMenuItem, 7, new EventHandler(Change_Project_Click));
            Cursor.Current = Cursors.WaitCursor;

            this.Enabled = false;
            Prompt.SIM_Chargement cht = null;
            ///Morceau de code qui permet de séparer le chargement de la visualisation.
            if (!bDebug)
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
            }
            String sLastPerimeter = epPerimetre.ToString();
            setPerimeter("PAX");
                        
            DonneesEnCours = GestionDonneesHUB2SIM.CreateProject(NomProject, new GestionDonneesHUB2SIM.AnalyseTracesDelegate(AnalyseResults), cht, treeView1.Nodes,
                  cmsBranchTestMenu, contextMenuInput, ContextMenuFilter, contextMenuAirport, cmsCharts, cmsAutomodMenu, cms_UserGraphics, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
                        
            this.Enabled = true;
            if (DonneesEnCours == null)
            {
                closeProject();
                Cursor.Current = Cursors.Default;
                String LastError = GestionDonneesHUB2SIM.getLastError();
                GestionDonneesHUB2SIM.EraseWarningsErrorsProject();
                if (cht != null)
                    cht.KillWindow();
                this.Focus();
                Thread.Sleep(10);
                if (LastError != null)
                    MessageBox.Show(LastError, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                setPerimeter(sLastPerimeter);
                return false;
            }
                        
            SelectNode(null);
                        
            //On met à jour le contenu de la table des trolley avant de faire la vérification.
            DonneesEnCours.MAJ_TablesSuivantStructureAeroport(treeView1.Nodes[0]);
                        
            DonneesEnCours.MajUserData(treeView1.Nodes[1], cmsUserData);
                        
            toolStripStatusLabel.Text = OverallTools.AssemblyActions.AssemblyTitle+": " + DonneesEnCours.getNomProjet();            
            this.Text = OverallTools.AssemblyActions.AssemblyProduct + " - " + OverallTools.AssemblyActions.AssemblyVersion + " - " + DonneesEnCours.getNomProjet();  // >> PAX2SIM - assembly version - projectName - add assembly version
            if (bTrialVersion)
            {
                this.Text += " - Trial version";
                if (iValidDaysTrialVersion > 0)
                    this.Text += " (" + iValidDaysTrialVersion.ToString() + " days remaining)";
                else
                    this.Text += " (Trial period expired)";
            }
            
            // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters
            if (processFlowParametersDictionary != null)
                processFlowParametersDictionary.Clear();
            // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters
            
            // << Task #6386 Itinerary process
            bool modifyProcessFlow = false;
            modifyProcessFlowModeDictionary.TryGetValue(processFlowName, out modifyProcessFlow);
            if (itineraryWasModified && modifyProcessFlow)
            {
                saveToDiskPreviousState = true;
                saveToDisk = true;
                saveAllChangesCaller();
            }
            /*
            // save all other process flows belonging to other tables: if the current one was modified we don't
            //include it here(because it was dealt with earlier(in SaveAllChangesCaller))
            if (modifyProcessFlow)
                ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                               processFlowName, DonneesEnCours, true);
            else
                ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                               processFlowName, DonneesEnCours, false);
             */ 
            if (readyToLoadXML)
            {
                // << Bug #8210 Pax2Sim - ProcessFlow - save issue                
                globalItineraryDataListDictionary.Clear();
                modifyProcessFlowModeDictionary.Clear();
                // >> Bug #8210 Pax2Sim - ProcessFlow - save issue

                previousProcessFlowLoaded = "";
                processFlowName = GlobalNames.ItineraryTableName;
                //clearItinerary();                
                loadAllObjectsAsXMLFromAirportStructureForProcessFlow(false);
                loadBackgroundImage();
                itineraryWasModified = true;
            }
            // >> Task #6386 Itinerary process
            UpdateItineraryView();
            /*Simul8*/
            
#if(SIMUL8_UTILISATION)
            if (bSimul8)
            {
                String sPath = System.IO.Path.GetDirectoryName(NomProject) + "\\Model";
                if (Directory.Exists(sPath))
                {
                    String[] tsFileNames = Directory.GetFiles(sPath);
                    for (int i = 0; i < tsFileNames.Length; i++)
                    {
                        if (tsFileNames[i].ToLower().EndsWith(".s8"))
                        {
                            s8cp_SubForm.OpenSimul8Project(tsFileNames[i]);
                            //S8SubForm.OpenSimul8Project(tsFileNames[i]);
                            //S8SubForm.Refresh();
                            break;
                        }
                    }
                }
            }
#endif
            /*Simul8*/
            RefreshTab(false);
            ActiveDesactiveControles(true);
            if (cht != null)
                cht.KillWindow();
            setPerimeter(sLastPerimeter);
            AcceptData();
            Cursor.Current = Cursors.Default;
            /*Simul8*/
            /*To update the Simul8 window on windows 7.*/
            
#if(SIMUL8_UTILISATION)
            if ((bSimul8) && (s8cp_SubForm != null))
                s8cp_SubForm.RefreshSimul8();
#endif
            /*End-->Simul8*/

            // >> Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
            //re-instantiate the dictionary for dashboard config
            scenariosStationsDashboardDictionary = new Dictionary<String, DashboardConfiguration>();
            //check if there are dashboard configuration files and load the existing data into the dictionary
            String projectPath = DonneesEnCours.getDossierEnregistrement();
            List<String> scenarioNames = DonneesEnCours.getScenarioNames();
            if (projectPath != null && scenarioNames != null && scenarioNames.Count > 0)
            {
                DashboardTools.loadDashboardConfigurationFromFileIntoDictionary(projectPath, scenarioNames, scenariosStationsDashboardDictionary);
            }
            // << Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
            //if (!liegeMode)
            //{
            OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres, treeView1.Nodes, DonneesEnCours, cmsReports);  // >> Task #13384 Report Tree-view
            OverallTools.TreeViewFunctions.refreshDocumentsNode(DonneesEnCours.documentTableNames, treeView1.Nodes, DonneesEnCours, cmsDocument);   // >> Task #16578 PAX2SIM - Documents - new node in main tree-view
            //}
            
            return true;
        }

        private bool SaveProject()
        {
            if (DonneesEnCours == null)
                return false;
                        
            // << Task #6386 Itinerary process
            bool modifyProcessFlow = false;
            modifyProcessFlowModeDictionary.TryGetValue(processFlowName, out modifyProcessFlow);
            if (itineraryWasModified && modifyProcessFlow)
            {
                saveToDiskPreviousState = saveToDisk;
                saveToDisk = true;
                saveAllChangesCaller();
            }
            // save all other process flows belonging to other tables: if the current one was modified we don't
            //include it here(because it was dealt with earlier(in SaveAllChangesCaller))
            if (modifyProcessFlow)
                ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                               processFlowName, DonneesEnCours, true);
            else
                ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                               processFlowName, DonneesEnCours, false);
            // >> Task #6386 Itinerary process

            // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters                
            if (processFlowParametersDictionary != null)
                updateItineraryParametersTables();
            // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters

            UpdateItineraryView();
            
            if (fbd_SelectDirectory.ShowDialog() == DialogResult.OK)
            {
                if (System.IO.Directory.Exists(fbd_SelectDirectory.SelectedPath + "/" + DonneesEnCours.getNomProjet()))
                {
                    MessageBox.Show("The selected Path already have a project directory \"" +
                        DonneesEnCours.getNomProjet() + "\". Please choose another directory, or change the Project name.",
                        "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                SIMCORE_TOOL.Prompt.SIM_Chargement cht = null;
                this.Enabled = false;
                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                bool save = false;
                String sError = "Err00209 : Unknow error while trying to save the project. Warning, the current project is still not saved."; ;
                try
                {
                    GestionDonneesHUB2SIM.EraseWarningsErrorsProject();
                    save = DonneesEnCours.saveProjet(fbd_SelectDirectory.SelectedPath, treeView1.Nodes, cht);
                }
                catch (Exception e)
                {
                    OverallTools.ExternFunctions.PrintLogFile("Except02031: " + this.GetType().ToString() + " throw an exception: " + e.Message);
                    save = false;
                    sError += "  " + e.Message;
                }

                // >> Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
                String projectDirectoryPath = DonneesEnCours.getDossierEnregistrement();
                if (projectDirectoryPath != null)
                {
                    DashboardTools.saveDashboardConfigDataIntoTextFile(scenariosStationsDashboardDictionary, projectDirectoryPath);
                }
                // << Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration

                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
                if (save)
                {
                    String NomProject = fbd_SelectDirectory.SelectedPath + "\\" + DonneesEnCours.getNomProjet() + "\\" + DonneesEnCours.getNomProjet() + "." + PAX2SIM.sExtension;
                    sSettings.AddHistoricProject(NomProject);
                    sSettings.UpdateHistoric(lancementEtape2ToolStripMenuItem, 7, new EventHandler(Change_Project_Click));
                    this.Text = OverallTools.AssemblyActions.AssemblyProduct + " - " + OverallTools.AssemblyActions.AssemblyVersion + " - " + DonneesEnCours.getNomProjet();  // >> PAX2SIM - assembly version - projectName - add assembly version // >> Bug #13337 Project name not displayed in Title bar
                    toolStripStatusLabel.Text = "Project : " + DonneesEnCours.getNomProjet();    // >> PAX2SIM - assembly version - projectName - add assembly version // >> Bug #13337 Project name not displayed in Title bar
                }
                else
                {
                    ArrayList Errors = GestionDonneesHUB2SIM.getWarningsErreursProject();
                    if (Errors.Count > 0)
                    {
                        MessageBox.Show(Errors[Errors.Count - 1].ToString(), "Errors", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else
                    {
                        MessageBox.Show(sError, "Errors", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                return save;
            }
            return false;
        }

        /// <summary>
        /// Function that check if the current project has been saved. It also ask the user
        /// if he wants to save the current project. 
        /// </summary>
        /// <returns>true : The project has been saved (or does not need to be saved) and has been closed.
        /// false : The project is not saved and the user does not want to close that project.</returns>
        private bool SaveChanges()
        {
            UpdateItineraryView();
            if (DonneesEnCours.getAEteEnregistreUneFois())
            {
                if (DonneesEnCours.getAEteEnregistre())
                {
                    closeProject();
                    return true;
                }
            }
            DialogResult result = MessageBox.Show("Do you want to save the current project ?", OverallTools.AssemblyActions.AssemblyTitle + " Message", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
            switch (result)
            {
                case DialogResult.No:
                    {
                        closeProject();
                        return true;
                    }
                case DialogResult.Yes:
                    {
                        // << Task #6386 Itinerary process
                        bool modifyProcessFlow = false;
                        modifyProcessFlowModeDictionary.TryGetValue(processFlowName, out modifyProcessFlow);
                        if (itineraryWasModified && modifyProcessFlow)
                        {
                            saveToDiskPreviousState = saveToDisk;
                            saveToDisk = true;
                            saveAllChangesCaller();
                        }
                        // save all other process flows belonging to other tables: if the current one was modified we don't
                        //include it here(because it was dealt with earlier(in SaveAllChangesCaller))
                        if (modifyProcessFlow)
                            ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                                           processFlowName, DonneesEnCours, true);
                        else
                            ProcessFlowServices.saveAllProcessFlowsFromProject(globalItineraryDataListDictionary,
                                                                           processFlowName, DonneesEnCours, false);
                        // >> Task #6386 Itinerary process

                        // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters                
                        if (processFlowParametersDictionary != null)
                            updateItineraryParametersTables();
                        // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters

                        saveToolStripMenuItem_Click(null, null);
                        if (DonneesEnCours.getAEteEnregistre())
                        {
                            closeProject();
                            return true;
                        }
                        return false;
                    }
                default:
                    {
                        return false;
                    }
            }
        }

        private void closeProject()
        {
            // << Task #6386 Itinerary process
            //we force the application to load the ProcessFlow objects from the ItineraryGroups.txt
            //after closing a project(if the user opens another)
            saveToDiskPreviousState = true;
            saveToDisk = true;
            // The Itinerary was saved. We should not ask the user to save it after that.
            // (when changing projects it would trigger on the OpenProject() function 
            //  the question to save the ProcessFlow if we don't set this variable appropriately)
            itineraryWasModified = false;
            // >> Task #6386 Itinerary process

            //Ici la suppression des filtres doit être effectuée également.
            if (this.treeView1.Nodes.Count > 3)
            {
                try
                {
                    this.treeView1.Nodes[0].Nodes.Clear();
                    this.treeView1.Nodes[2].Nodes.Clear();
                }
                catch (Exception e)
                {
                    OverallTools.ExternFunctions.PrintLogFile("Except02032: " + this.GetType().ToString() + " throw an exception: " + e.Message);
                }
            }
            this.treeView1.CollapseAll();
            ActiveDesactiveControles(false);
            dataGridView1.DataSource = null;

            if (CheckGraphicArea(false))
                Graphique.Charts.Clear();
            if(DonneesEnCours != null)
                DonneesEnCours.Dispose();
            DonneesEnCours = null;
            toolStripStatusLabel.Text = "";            
            this.Text = OverallTools.AssemblyActions.AssemblyProduct + " - " + OverallTools.AssemblyActions.AssemblyVersion;  // >> PAX2SIM - assembly version - projectName - add assembly version
            if (bTrialVersion)
            {
                this.Text += " - Trial version";
                if (iValidDaysTrialVersion > 0)
                    this.Text += " (" + iValidDaysTrialVersion.ToString() + " days remaining)";
                else
                    this.Text += " (Trial period expired)";
            }
            SelectNode(null);
            reinitialiserArbre();
            if (ra_ItinieraryPermanent != null)
            {
                ra_ItinieraryPermanent.Dispose();
                ra_ItinieraryPermanent = null;
            }
            if (ra_BHSItinieraryPermanent!= null)
            {
                ra_BHSItinieraryPermanent.Dispose();
                ra_BHSItinieraryPermanent = null;
            }
            HideVisu(false);
            bAfficheOutils = false;
            if(outilsGraphiques != null)
                outilsGraphiques.Close();
            outilsGraphiques = null;
#if(SIMUL8_UTILISATION)
            if (bSimul8)
            {
                if (s8cp_SubForm != null)
                {
                    s8cp_SubForm.CloseProject();
                    s8cp_SubForm.Dispose();
                }
                if (S8Application != null)
                    S8Application.Close();
                s8cp_SubForm = null;
            }
#endif
            CurrentNode = null;
            GC.Collect();
        }

        private void PAX2SIM_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!ValidateCellContent())
                return;
            if (DonneesEnCours != null)
            {
                if (!SaveChanges())
                {
                    e.Cancel = true;
                    return;
                }
            }

            #region Delete the automod model if it exists.
            String sRoot = Path.GetPathRoot(Application.StartupPath);
            
            if ((System.IO.Directory.Exists(sRoot + "Temp\\Model"))&&(!bDebug))
            {
                OverallTools.ExternFunctions.DeleteDirectory(sRoot + "Temp\\Model");
            }
            #endregion
            #region Application Data contains in the pax2sim directory.

            //Delete the temp directory that contains the temps paxtrace and bagtraces.
            OverallTools.ExternFunctions.DeleteTempDirectory();
            //OverallTools.ExternFunctions.DeleteDirectory(OverallTools.ExternFunctions.getTempDirectoryForPax2sim());

            #endregion

            if (outilsGraphiques != null)
                outilsGraphiques.Close();
            outilsGraphiques = null;
            Thread.Sleep(50);
            outilsGraphiques = null;
#if(SIMUL8_UTILISATION)
            if (S8Application != null)
                S8Application = null;
#endif
            sSettings.SaveSettings();
            notifyPRJ4C.Visible = false;
            notifyPRJ4C.Dispose();
            
            //Suppression de la zone graphique
            m_Header = null;
            m_legend = null;
            toolbar = null;

            //Ici morceau de code de débuggage pour intercepter le code si un jour le graphique a été désalloué lors
            //de l'exécution de P2S.
            if (Graphique == null)
                Graphique = null;

            Graphique = null;
        }
            #endregion

        #endregion

        #region ##############       Main Toolbar

            #region PerimeterListButtons

        private void tssb_Perimeter_Click(object sender, EventArgs e)
        {
            tssb_Perimeter.ShowDropDown();
        }
        private void tsmi_Click(object sender, EventArgs e)
        {
            if (sender.GetType() != typeof(ToolStripMenuItem))
                return;
            ToolStripMenuItem Item = (ToolStripMenuItem)sender;
            setPerimeter(Item.Text);
        }
            #endregion

            #region Open Button
        private void ToolBar1_OpenTool_click(object sender, EventArgs e)
        {
            if (!CheckKey())
            {
                this.closeProject();
                this.Close();
                return;
            }
            if (!CheckIsAbleToContinue())
                return;
            if (!ValidateCellContent())
                return;
            openToolStripMenuItem_Click(sender, e);
        }
            #endregion

            #region Airport Définition
        /// Bouton Airport
        private void AirportDef_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            this.treeView1.CollapseAll();
            this.treeView1.Nodes[0].Expand();
            foreach (TreeNode node in treeView1.Nodes[0].Nodes)
            {
                node.Expand();
                foreach (TreeNode fils in node.Nodes)
                {
                    if (fils.Text.Contains(GlobalNames.sFPD_A_Column_Parking))
                    {
                        fils.Collapse();
                        continue;
                    }
                    fils.Expand();
                }
            }
            SelectNode(treeView1.Nodes[0]);
        }
            #endregion

            #region Input Data
        /// Bouton remplissage des tables d'entrées
        private void InputData_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            this.treeView1.CollapseAll();
            this.treeView1.Nodes[1].Expand();
            SelectNode(treeView1.Nodes[1]);
            foreach (TreeNode node in treeView1.Nodes[1].Nodes)
            {
                node.Expand();
            }
        }
            #endregion

            #region Dynamic button.
        /// Bouton analyse static
        private void Analysis_Click(object sender, EventArgs e)
        {
            if (!ValidateCellContent())
                return;
            if (!CheckKey())
            {
                this.closeProject();
                this.Close();
                return;
            }
            if ((bReporter) || (bTopase))
            {
                ReporterFunction(false);
                return;
            }

            if (epPerimetre == EnumPerimetre.PKG)
            {
                ParkingAllocation(null);
                return;
            }
            if (epPerimetre == EnumPerimetre.PAX)   // PAX key flag disabled
            {
                if (((DonneesEnCours.getTable("Input", GlobalNames.FPDTableName).Rows.Count == 0) &&
                    (DonneesEnCours.getTable("Input", GlobalNames.FPATableName).Rows.Count == 0)) && (epPerimetre == EnumPerimetre.PAX))
                {
                    MessageBox.Show("The flight plans must be defined.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }
            if ((epPerimetre == EnumPerimetre.PAX) && (!AcceptData()))
            {
                //2011.02.14 ==> SGe
                //return;
            }
            if (ra_ItinieraryPermanent != null)
            {
                ra_ItinieraryPermanent.saveChanges();
            }
            if (ra_BHSItinieraryPermanent != null)
            {
                ra_BHSItinieraryPermanent.saveChanges();
            }
            // >> Bug #14377 Tables Data check improvement
            //Check is useless here as we don't know yet if we will use the base table or one of its filters.
            //if ((DonneesEnCours.getTable("Input", "ItineraryTable").Rows.Count == 0) && (epPerimetre == EnumPerimetre.PAX))
            //{
            //    MessageBox.Show("The paths between the airport's functions must be defined.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //    tabControl.SelectedIndex = 2;
            //    return;
            //}
            // << Bug #14377 Tables Data check improvement

            Prompt.SIM_Scenarios_Assistant Assistant = new SIMCORE_TOOL.Prompt.SIM_Scenarios_Assistant(DonneesEnCours, epPerimetre, treeView1.Nodes[0], lesErreurs);
            DialogResult drResult = Assistant.ShowDialog();
            if (drResult == DialogResult.Cancel)
            {
                //L'utilisateur a annulé son action.
                return;
            }
            else if ((drResult == DialogResult.OK) || (drResult == DialogResult.Ignore))
            {
                Classes.ParamScenario Parametres = Assistant.Analysis;
                if (Parametres == null)
                    return;
                Hashtable htBagsResults = null;
                OverallTools.PaxTraceAnalysis htPaxResults = null;

#if(SIMUL8_UTILISATION)
                if ((drResult == DialogResult.Ignore)&&(bSimul8 )    )
                {
                    //We have to lauch the simulation with Simul8.
                    //this.Enabled = false;

                    treeView1.Enabled = false;
                    menuSIMCORE.Enabled = false;
                    toolStrip1.Enabled = false;
                    RefreshTab(true);
                    s8cp_SubForm.EnableSimulation = true;
                    s8cp_SubForm.OpenSimul8Project(Parametres.ModelName);
                    s8cp_SubForm.StartDate = Parametres.DateDebut;
                    s8cp_SubForm.EndSimulation = (float)OverallTools.DataFunctions.MinuteDifference(Parametres.DateDebut, Parametres.DateFin);
                    s8cp_SubForm.Scenario = Parametres;
                    if (!Parametres.DisplayModel)
                    {
                        s8cp_SubForm.SetSpeed = 100;
                        s8cp_SubForm.Start();
                    }else
                    {
                        s8cp_SubForm.SetSpeed = 60;
                    }
                    return;
                }
                else
#endif
                {
                    DonneesEnCours.SetUseException(Parametres);
                    htBagsResults = Assistant.getBagsResults();
                    htPaxResults = Assistant.getPaxResults();
                    AnalyseStatistics(htBagsResults, Assistant.BHSUsedNames, htPaxResults, DonneesEnCours, Parametres, false);

                    InsertPRKResults(Parametres.Name, Assistant.getPKGResults());
                    DonneesEnCours.ResetUseException();

                    setUpScenarioInformationTable(Parametres);  // >> Task #13240 Pax2Sim - Dynamic simulation - scenario note update
                    saveResultFiltersTable(Parametres.Name, Parametres.analysisResultsFilters); // >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
                    saveSettingsTable(Parametres);
                    saveTracesTables(Parametres.Name, Parametres.bagTracePath);
                    saveScenarioInputDataTables(Parametres, Assistant); // >> Task #13361 FP AutoMod Data tables V3
                    addFlightPlanStatisticsForBHS(Parametres, Assistant.getBagsResults());   // >> Task #19467
                }
            }
            else if (drResult == DialogResult.Yes)
            {
                Classes.ParamScenario parametres = Assistant.Analysis;
                // << Task #8302 Pax2Sim - Scenario Parameters - Intermediate distribution levels
                //Search in the txt file for the distribution levels related to this scenario. If found set the DonneesEnCours.Levels.                
                
                String scenarioName = parametres.Name;
                String distributionLevelsFilePath = DonneesEnCours.getDossierEnregistrement() + "Output\\" + scenarioName + "\\"
                                            + Model.distributionLevelsTextFilePrefix + scenarioName + Model.distributionLevelsTextFileExtention;
                double[] distributionLevels = new double[3] { 0, 0, 0 };
                
                bool percentilesRetrievedFromFile = false;
                if (File.Exists(distributionLevelsFilePath))
                {
                    try
                    {
                        FileInfo distributionLevelsFileInfo = new FileInfo(distributionLevelsFilePath);
                        if (distributionLevelsFileInfo != null && distributionLevelsFileInfo.Exists)
                        {
                            System.IO.StreamReader reader = new StreamReader(distributionLevelsFileInfo.OpenRead());
                            String distributionLevelsInfoLine = "";
                            while ((distributionLevelsInfoLine = reader.ReadLine()) != null)
                            {
                                string[] distributionLevelList = distributionLevelsInfoLine.Split(';');
                                if (distributionLevelList.Length == 4)
                                {
                                    double value = 0;
                                    double.TryParse(distributionLevelList[1], out  value);
                                    distributionLevels[0] = value;
                                    double.TryParse(distributionLevelList[2], out  value);
                                    distributionLevels[1] = value;
                                    double.TryParse(distributionLevelList[3], out  value);
                                    distributionLevels[2] = value;

                                    percentilesRetrievedFromFile = true;
                                }
                            }
                            reader.Close();
                            reader.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        OverallTools.ExternFunctions.PrintLogFile("Error while reading the distribution level txt file.(PAX2SIM.Analysis_Click()) " 
                            + ex.Message);
                    }
                }
                if (parametres.percentilesLevels.Count == 0)
                {
                    if (percentilesRetrievedFromFile)
                    {
                        DonneesEnCours.Levels[0] = distributionLevels[0];
                        DonneesEnCours.Levels[1] = distributionLevels[1];
                        DonneesEnCours.Levels[2] = distributionLevels[2];

                        parametres.percentilesLevels.Add(distributionLevels[0]);
                        parametres.percentilesLevels.Add(distributionLevels[1]);
                        parametres.percentilesLevels.Add(distributionLevels[2]);
                    }
                    else
                    {
                        parametres.percentilesLevels.Add(DonneesEnCours.Levels[0]);
                        parametres.percentilesLevels.Add(DonneesEnCours.Levels[1]);
                        parametres.percentilesLevels.Add(DonneesEnCours.Levels[2]);
                    }
                }
                else if (parametres.percentilesLevels.Count == 3)
                {
                    DonneesEnCours.Levels[0] = parametres.percentilesLevels[0];
                    DonneesEnCours.Levels[1] = parametres.percentilesLevels[1];
                    DonneesEnCours.Levels[2] = parametres.percentilesLevels[2];
                }

                //save the Levels of distribution into dictionary
                //if (!DonneesEnCours.scenariosDistributionLevelsDictionary.ContainsKey(scenarioName))
                //    DonneesEnCours.scenariosDistributionLevelsDictionary.Add(scenarioName, DonneesEnCours.Levels);
                //else
                //{
                //    DonneesEnCours.scenariosDistributionLevelsDictionary.Remove(scenarioName);
                //    DonneesEnCours.scenariosDistributionLevelsDictionary.Add(scenarioName, DonneesEnCours.Levels);
                //}                
                // >> Task #8302 Pax2Sim - Scenario Parameters - Intermediate distribution levels

                DonneesEnCours.SetUseException(parametres);
                GestionScenarios(parametres);
                CalcStaticScenario(parametres.Name);
                DonneesEnCours.ResetUseException();
                // store the data in the scenarioFlightListDictionary for the static analysis Gantt
                SetUpDataForStaticAnalysisGantt(parametres);

                setUpScenarioInformationTable(parametres);  // >> Task #13240 Pax2Sim - Dynamic simulation - scenario note update
                saveResultFiltersTable(parametres.Name, parametres.analysisResultsFilters); // >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
                saveSettingsTable(parametres);
                saveTracesTables(parametres.Name, parametres.bagTracePath);
                saveScenarioInputDataTables(parametres, Assistant); // >> Task #13361 FP AutoMod Data tables V3
                addFlightPlanStatisticsForBHS(parametres, Assistant.getBagsResults());   // >> Task #19467
            }
            OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres,
                treeView1.Nodes, DonneesEnCours, cmsReports); // >> Task #13384 Report Tree-view C#51
            /*if (Assistant != null && Assistant.Analysis != null && !Assistant.Analysis.SaveTraceMode)   // >> Task #1954_exportOutputTables
            {
                TreeNode analysisNode = OverallTools.TreeViewFunctions.RechercherNomEnfants("Analysis", treeView1.Nodes[2]);
                TreeNode scenarioNode = getScenarioNodeFromAnalysisNode(analysisNode, Assistant.Analysis.Name);
                string projectDirectoryPath = DonneesEnCours.getDossierEnregistrement();
                string scenarioDirectory = projectDirectoryPath + "Output\\" + Assistant.Analysis.Name + "\\";
                exportTextFilesFromScenarioNodeToGivenPath(scenarioNode, scenarioDirectory);
            }*/
        }

        private void SetUpDataForStaticAnalysisGantt(ParamScenario parameters)
        {
            List<Task> flightsList = new List<Task>();
            String scenarioName = parameters.Name;
            String colorByAirlineCode = Model.COLOR_CRITERIA_AIRLINE_CODE;
            String colorByFlightCategory = Model.COLOR_CRITERIA_FLIGHT_CATEGORY;
            String colorByGroundHandlerCode = Model.COLOR_CRITERIA_GROUND_HANDLER_CODE;
            String flightListDictionaryKeyAirlineCode = "";
            String flightListDictionaryKeyFlightCategory = "";
            String flightListDictionaryKeyGroundHandler = "";

            DataTable dt = new DataTable();
            String fpaTableName = "";
            String fpdTableName = "";
            String octTableName = "";
            bool useExceptions = false;
            bool initialColorByAirlineCode = this.colorByAirlineCode;
            bool initialColorByFlightCategory = this.colorByFlightCategory;
            bool initialColorByGroundHandlerCode = this.colorByGroundHandlerCode;

            if (parameters.ArrivalPeak)
            {
                #region StaticAlloc_ArrivalParking_Table
                flightListDictionaryKeyAirlineCode = scenarioName + GlobalNames.StaticAlloc_ArrivalParking_TableName + colorByAirlineCode;
                flightListDictionaryKeyFlightCategory = scenarioName + GlobalNames.StaticAlloc_ArrivalParking_TableName + colorByFlightCategory;
                flightListDictionaryKeyGroundHandler = scenarioName + GlobalNames.StaticAlloc_ArrivalParking_TableName + colorByGroundHandlerCode;

                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyAirlineCode))
                {
                    setColorCriteriaMarkers(true, false, false);
                    flightsList = GanttServices.getFlightDataForArrivalParkingGantt(this, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyAirlineCode, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyFlightCategory))
                {
                    setColorCriteriaMarkers(false, true, false);
                    flightsList = GanttServices.getFlightDataForArrivalParkingGantt(this, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyFlightCategory, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyGroundHandler))
                {
                    setColorCriteriaMarkers(false, false, true);
                    flightsList = GanttServices.getFlightDataForArrivalParkingGantt(this, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyGroundHandler, flightsList);
                }
                #endregion

                #region Alloc_BaggageClaimTable
                flightListDictionaryKeyAirlineCode = scenarioName + GlobalNames.Alloc_BaggageClaimTableName + colorByAirlineCode;
                flightListDictionaryKeyFlightCategory = scenarioName + GlobalNames.Alloc_BaggageClaimTableName + colorByFlightCategory;
                flightListDictionaryKeyGroundHandler = scenarioName + GlobalNames.Alloc_BaggageClaimTableName + colorByGroundHandlerCode;

                if (parameters != null)
                {
                    fpaTableName = parameters.FPA;
                    octTableName = parameters.OCT_BC;
                    useExceptions = parameters.UseException(parameters.OCT_BC);
                }
                dt = DonneesEnCours.getTable("Input", fpaTableName);
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyAirlineCode))
                {
                    setColorCriteriaMarkers(true, false, false);
                    flightsList = GanttServices.getFlightDataForBaggageClaimGantt(dt, octTableName, true, this, useExceptions, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyAirlineCode, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyFlightCategory))
                {
                    setColorCriteriaMarkers(false, true, false);
                    flightsList = GanttServices.getFlightDataForBaggageClaimGantt(dt, octTableName, true, this, useExceptions, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyFlightCategory, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyGroundHandler))
                {
                    setColorCriteriaMarkers(false, false, true);
                    flightsList = GanttServices.getFlightDataForBaggageClaimGantt(dt, octTableName, true, this, useExceptions, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyGroundHandler, flightsList);
                }
                #endregion
            }

            if (parameters.DeparturePeak)
            {
                #region Alloc_CITableName
                flightListDictionaryKeyAirlineCode = scenarioName + GlobalNames.Alloc_CITableName + colorByAirlineCode;
                flightListDictionaryKeyFlightCategory = scenarioName + GlobalNames.Alloc_CITableName + colorByFlightCategory;
                flightListDictionaryKeyGroundHandler = scenarioName + GlobalNames.Alloc_CITableName + colorByGroundHandlerCode;

                if (parameters != null)
                {
                    fpdTableName = parameters.FPD;
                    octTableName = parameters.OCT_CI_Table;
                    useExceptions = parameters.UseException(parameters.OCT_CI_Table);
                }
                dt = DonneesEnCours.getTable("Input", fpdTableName);
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyAirlineCode))
                {
                    setColorCriteriaMarkers(true, false, false);
                    flightsList = GanttServices.getFlightDataForCheckInGantt(dt, octTableName, false, this, useExceptions, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyAirlineCode, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyFlightCategory))
                {
                    setColorCriteriaMarkers(false, true, false);
                    flightsList = GanttServices.getFlightDataForCheckInGantt(dt, octTableName, false, this, useExceptions, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyFlightCategory, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyGroundHandler))
                {
                    setColorCriteriaMarkers(false, false, true);
                    flightsList = GanttServices.getFlightDataForCheckInGantt(dt, octTableName, false, this, useExceptions, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyGroundHandler, flightsList);
                }
                #endregion

                #region Alloc_BoardGateTable
                flightListDictionaryKeyAirlineCode = scenarioName + GlobalNames.Alloc_BoardGateTableName + colorByAirlineCode;
                flightListDictionaryKeyFlightCategory = scenarioName + GlobalNames.Alloc_BoardGateTableName + colorByFlightCategory;
                flightListDictionaryKeyGroundHandler = scenarioName + GlobalNames.Alloc_BoardGateTableName + colorByGroundHandlerCode;

                if (parameters != null)
                {
                    fpdTableName = parameters.FPD;
                    octTableName = parameters.OCT_BG;
                    useExceptions = parameters.UseException(parameters.OCT_BG);
                }
                dt = DonneesEnCours.getTable("Input", fpdTableName);
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyAirlineCode))
                {
                    setColorCriteriaMarkers(true, false, false);
                    flightsList = GanttServices.getFlightDataForBoardGateGantt(dt, octTableName, false, this, useExceptions, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyAirlineCode, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyFlightCategory))
                {
                    setColorCriteriaMarkers(false, true, false);
                    flightsList = GanttServices.getFlightDataForBoardGateGantt(dt, octTableName, false, this, useExceptions, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyFlightCategory, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyGroundHandler))
                {
                    setColorCriteriaMarkers(false, false, true);
                    flightsList = GanttServices.getFlightDataForBoardGateGantt(dt, octTableName, false, this, useExceptions, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyGroundHandler, flightsList);
                }
                #endregion
            }

            if (parameters.ArrivalPeak && parameters.DeparturePeak)
            {
                #region StaticAlloc_DepartureParking_Table
                flightListDictionaryKeyAirlineCode = scenarioName + GlobalNames.StaticAlloc_DepartureParking_TableName + colorByAirlineCode;
                flightListDictionaryKeyFlightCategory = scenarioName + GlobalNames.StaticAlloc_DepartureParking_TableName + colorByFlightCategory;
                flightListDictionaryKeyGroundHandler = scenarioName + GlobalNames.StaticAlloc_DepartureParking_TableName + colorByGroundHandlerCode;

                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyAirlineCode))
                {
                    setColorCriteriaMarkers(true, false, false);
                    flightsList = GanttServices.getFlightDataForDepartureParkingGantt(this, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyAirlineCode, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyFlightCategory))
                {
                    setColorCriteriaMarkers(false, true, false);
                    flightsList = GanttServices.getFlightDataForDepartureParkingGantt(this, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyFlightCategory, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyGroundHandler))
                {
                    setColorCriteriaMarkers(false, false, true);
                    flightsList = GanttServices.getFlightDataForDepartureParkingGantt(this, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyGroundHandler, flightsList);
                }
                #endregion

                #region Alloc_ParkingTable
                flightListDictionaryKeyAirlineCode = scenarioName + GlobalNames.Alloc_ParkingTableName + colorByAirlineCode;
                flightListDictionaryKeyFlightCategory = scenarioName + GlobalNames.Alloc_ParkingTableName + colorByFlightCategory;
                flightListDictionaryKeyGroundHandler = scenarioName + GlobalNames.Alloc_ParkingTableName + colorByGroundHandlerCode;

                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyAirlineCode))
                {
                    setColorCriteriaMarkers(true, false, false);
                    flightsList = GanttServices.getFlightDataForParkingGantt(this, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyAirlineCode, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyFlightCategory))
                {
                    setColorCriteriaMarkers(false, true, false);
                    flightsList = GanttServices.getFlightDataForParkingGantt(this, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyFlightCategory, flightsList);
                }
                if (!scenarioFlightListDictionary.ContainsKey(flightListDictionaryKeyGroundHandler))
                {
                    setColorCriteriaMarkers(false, false, true);
                    flightsList = GanttServices.getFlightDataForParkingGantt(this, scenarioName);
                    scenarioFlightListDictionary.Add(flightListDictionaryKeyGroundHandler, flightsList);
                }
                #endregion
            }
            setColorCriteriaMarkers(initialColorByAirlineCode, initialColorByFlightCategory, initialColorByGroundHandlerCode);
        }

        private void setColorCriteriaMarkers(bool byAirlineCode, bool ByFlightCategory, bool byGroundHandlerCode)
        {
            this.colorByAirlineCode = byAirlineCode;
            this.colorByFlightCategory = ByFlightCategory;
            this.colorByGroundHandlerCode = byGroundHandlerCode;
        }

        private void CalcStaticScenario(String sName)
        {
            Classes.ParamScenario parametres = DonneesEnCours.GetScenario(sName);
            if (parametres == null)
                return;
            SIMCORE_TOOL.Prompt.SIM_Chargement cht = null;
            if (!bDebug)
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
                int i = 2;
                if (parametres.PaxPlan)
                    i++;
                if (parametres.ArrivalPeak )
                    i++;
                if (parametres.DeparturePeak)
                    i++;
                cht.setFileNumber(i);
            }
            DonneesEnCours.Maj_Scenario(parametres.Name, OverallTools.TreeViewFunctions.RechercherNomEnfants(parametres.Name, treeView1.Nodes[2]),
                                contextMenuInput, parametres, new InsertPRKResultsDelegate(InsertPRKResults), cht,ContextMenuFilter,cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);

            if (cht != null)
                cht.KillWindow();
            ArrayList alWarnings = GestionDonneesHUB2SIM.getWarningsProject();
            ArrayList alErrors = GestionDonneesHUB2SIM.getErreursProject();

            ArrayList ErrorList = new ArrayList(alErrors);
            ErrorList.AddRange(alWarnings);
            if (ErrorList.Count > 0)
            {
                Errors eErreurs = new Errors(ErrorList);
                eErreurs.Location = this.Location;
                eErreurs.Show();  //eErreurs.ShowDialog();// >> Task #10347 Pax2Sim - Errors window - modeless
            }
            GestionDonneesHUB2SIM.EraseWarningsErrorsProject();
            UpdateItineraryView();
        }

        // >> Task #13240 Pax2Sim - Dynamic simulation - scenario note update
        private void setUpScenarioInformationTable(ParamScenario scenarioParameters)
        {            
            TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenarioParameters.Name, treeView1.Nodes[2]);
            if (ScenarioPosition != null)
            {
                DataTable scenarioInformationTable = VinciTools.getScenarioInformationTable(scenarioParameters);
                MAJ_TableArbre(scenarioParameters.Name, scenarioInformationTable, ScenarioPosition, false, false);
            }            
        }
        // << Task #13240 Pax2Sim - Dynamic simulation - scenario note update

        // >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
        private void saveResultFiltersTable(string scenarioName, List<AnalysisResultFilter> resultFilters)
        {
            //return; // V6.225 without _Times

            TreeNode scenarioNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenarioName, treeView1.Nodes[2]);
            if (scenarioNode != null)
            {
                DataTable resultFiltersTable = getResultFiltersTable(resultFilters, DonneesEnCours.globalBasicAnalysisResultFilterList, 
                    DonneesEnCours.globalAdvancedAnalysisResultFilterList);
                MAJ_TableArbre(scenarioName, resultFiltersTable, scenarioNode, false, false);
            }
        }

        private void saveSettingsTable(ParamScenario scenarioParameters)
        {
            TreeNode scenarioNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenarioParameters.Name, treeView1.Nodes[2]);
            if (scenarioNode != null)
            {
                DataTable settingsTable = getSettingsTable(scenarioParameters);
                MAJ_TableArbre(scenarioParameters.Name, settingsTable, scenarioNode, false, false);
            }
        }
        // << Task #15088 Pax2Sim - BHS Analysis - Times and Indexes

        // >> Task #17654 PAX2SIM - BHS - Trace data view
        internal const string TRACE_FILES_DIRECTORY_NAME = "Traces";
        internal const string RAW_BAG_TRACE_TABLE_NAME = "Bag Trace preview";
        private void saveTracesTables(string scenarioName, string bagTracePath)
        {
            try
            {
                if (scenarioName == null
                    || !File.Exists(bagTracePath))
                {
                    return;
                }
                TreeNode tracesTreeNode = getScenarioNodeByScenarioNameAndNodeName(scenarioName, TRACE_FILES_DIRECTORY_NAME);
                if (tracesTreeNode == null)
                {
                    return;
                }
                if (File.Exists(bagTracePath))
                {
                    DataTable tracePreview = new DataTable(RAW_BAG_TRACE_TABLE_NAME);
                    OverallTools.FonctionUtiles.lectureUserData(tracePreview, bagTracePath);
                    MAJ_TableArbre(scenarioName, tracePreview, tracesTreeNode, false, true);//calculated from trace means we don't save the table data into a .txt file
                    
                    /*
                    DataTable tracePreview_2 = tracePreview.Copy();
                    tracePreview_2.TableName = RAW_BAG_TRACE_TABLE_NAME + "_2";
                    updateTracePreview(tracePreview_2);
                    MAJ_TableArbre(scenarioName, tracePreview_2, tracesTreeNode, false, false);*/
                }
            }
            catch (Exception e)
            {
                String errorMessage = "An error occured while generating the trace preview table. " + e.Message;
                OverallTools.ExternFunctions.PrintLogFile(errorMessage);
                errorList.Add(errorMessage);
            }
        }
        private void updateTracePreview(DataTable tracePreview)
        {
            if (tracePreview == null || tracePreview.Columns == null || tracePreview.Columns.Count == 0 || tracePreview.Rows == null || tracePreview.Rows.Count == 0)
            {
                return;
            }
            int simulationIstColumnIndex = tracePreview.Columns.Count;
            tracePreview.Columns.Add("Simulation IST(min)", typeof(Double));

            int bagRouteStartColumnIndex = -1;
            DataRow traceHeaders = tracePreview.Rows[0];
            for (int i = 0; i < tracePreview.Columns.Count; i++)
            {
                if (traceHeaders.ItemArray[i] != null && traceHeaders.ItemArray[i].ToString() == "STEPS TRACE...")
                {
                    bagRouteStartColumnIndex = i;
                    break;
                }
            }
            if (bagRouteStartColumnIndex < 0)
            {
                return;
            }
            for (int j = 1; j < tracePreview.Rows.Count; j++)
            {
                DataRow row = tracePreview.Rows[j];
                double minTime = double.MaxValue;
                double maxTime = double.MinValue;
                for (int i = bagRouteStartColumnIndex; i < tracePreview.Columns.Count; i++)
                {
                    double currentValue = 0;
                    if (row[i] == null || !double.TryParse(row[i].ToString(), out currentValue) || currentValue == -1)
                    {
                        continue;
                    }
                    if (currentValue < minTime)
                    {
                        minTime = currentValue;
                    }
                    if (currentValue > maxTime)
                    {
                        maxTime = currentValue;
                    }
                }
                row[simulationIstColumnIndex] = Math.Round(maxTime - minTime, 6);
            }
            tracePreview.Columns[simulationIstColumnIndex].SetOrdinal(bagRouteStartColumnIndex);
        }
        // << Task #17654 PAX2SIM - BHS - Trace data view

        // >> Task #19467
        public const string BHS_PROCESS_TIMES_STATISTICS_NODE_NAME = "Process Times Statistics";
        public const string BHS_PROCESS_TIMES_STATISTICS_DEPARTURE_FP_STATS_TABLE_NAME = "Departure FP Stats";
        private const string dateTimeFormat = "dd/MM/yyyy hh:mm";
        private void addFlightPlanStatisticsForBHS(ParamScenario parameters, Hashtable bagResults)
        {
            if (parameters == null || bagResults == null)            
                return;
            if (!parameters.BagPlan)
                return;
            if (parameters.BagPlanScenarioName == null || !DonneesEnCours.ScenarioExist(parameters.BagPlanScenarioName))
            {
                errorList.Add(DateTime.Now.ToString(dateTimeFormat) + ": " + parameters.Name + " - An error occured while trying to generate the \"" 
                    + BHS_PROCESS_TIMES_STATISTICS_DEPARTURE_FP_STATS_TABLE_NAME + "\" table for the scenario \"" + parameters.Name + "\". The parent scenario \""
                    + parameters.BagPlanScenarioName + "\" could not be loaded.");
                setErrors(errorList, false);
                return;
            }
            DataTable fpd = DonneesEnCours.getTable(parameters.BagPlanScenarioName, parameters.FPD);
            if (fpd == null)
            {
                errorList.Add(DateTime.Now.ToString(dateTimeFormat) + ": " + parameters.Name + " - An error occured while trying to generate the \""
                    + BHS_PROCESS_TIMES_STATISTICS_DEPARTURE_FP_STATS_TABLE_NAME + "\" table for the scenario \"" + parameters.Name + ". The \""
                    + parameters.FPD + "\" table from the parent scenario (\"" + parameters.BagPlanScenarioName + "\") could not be loaded.");
                setErrors(errorList, false);
                return;
            }
            DataTable fpdPax = DonneesEnCours.getTable(parameters.BagPlanScenarioName, GlobalNames.FPD_PAX_TABLE_NAME);
            if (fpdPax == null) {
                errorList.Add(DateTime.Now.ToString(dateTimeFormat) + ": " + parameters.Name + " - The FPD_Pax table (\""
                    + GlobalNames.FPD_PAX_TABLE_NAME + "\") could not be found in the \"" + parameters.BagPlanScenarioName + "\" scenario's results. The related columns from the \""
                    + BHS_PROCESS_TIMES_STATISTICS_DEPARTURE_FP_STATS_TABLE_NAME + "\" table will be updated with the defaul value (\"-1\").");
            }
            //Hashtable bagResults = analysis.getBagsResults();
            string departureISTName = AnalysisResultFilter.DEPARTING_TECHNICAL_FLOW_TYPE + "Times" + "_Overall" + "_IST";            
            DataTable ist = null;
            if (bagResults != null && bagResults.Contains(departureISTName))
            {
                ist = (DataTable)bagResults[departureISTName];
            }
            else
            {
                errorList.Add(DateTime.Now.ToString(dateTimeFormat) + ": " + parameters.Name + " - The IST global departing table (\"" 
                    + departureISTName + "\") could not be found in the \"" + parameters.Name + "\" scenario's results. The related columns from the \"" 
                    + BHS_PROCESS_TIMES_STATISTICS_DEPARTURE_FP_STATS_TABLE_NAME + "\" table will be updated with the defaul value (\"-1\").");
            }

            TreeNode bhsNode = getScenarioNodeByScenarioNameAndNodeName(parameters.Name, GlobalNames.BAG_HANDLING_SYSTEM_DIRECTORY_NAME);
            if (bhsNode == null)
            {
                errorList.Add(DateTime.Now.ToString(dateTimeFormat) + ": " + parameters.Name + " - An error occured while trying to generate the \"" 
                    + BHS_PROCESS_TIMES_STATISTICS_DEPARTURE_FP_STATS_TABLE_NAME + "\" table for the scenario \"" + parameters.Name + "\". Could not find the \"" 
                    + GlobalNames.BAG_HANDLING_SYSTEM_DIRECTORY_NAME + "\" directory in the \"" + parameters.Name + "\" scenario's results folder.");
                setErrors(errorList, false);
                return;
            }
            TreeNode statsNode = addChildNode(bhsNode, BHS_PROCESS_TIMES_STATISTICS_NODE_NAME);

            DataTable fpStats = fpd.Clone();
            foreach (DataRow fpdRow in fpd.Rows)
                fpStats.ImportRow(fpdRow);
            fpStats.TableName = BHS_PROCESS_TIMES_STATISTICS_DEPARTURE_FP_STATS_TABLE_NAME;
            addDataFromFPDPax(fpStats, fpdPax, parameters.BagPlanScenarioName);            
            addDataFromIST(fpStats, ist, parameters.percentilesLevels, parameters.Name);
            MAJ_TableArbre(parameters.Name, fpStats, statsNode, false, false);

            if (errorList.Count > 0)            
                setErrors(errorList, false);
        }

        private void addDataFromFPDPax(DataTable resultTable, DataTable fpdPax, string bagPlanScenarioName)
        {
            resultTable.Columns.Add(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_GENERATED_BAGS, typeof(Int32));
            resultTable.Columns.Add(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_ORIGINATING_BAGS, typeof(Int32));
            resultTable.Columns.Add(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_SELF_CI_BAGS, typeof(Int32));
            resultTable.Columns.Add(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_TRANSFERRED_BAGS, typeof(Int32));

            int resultTableColumnIndexGeneratedBags = resultTable.Columns.IndexOf(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_GENERATED_BAGS);
            int resultTableColumnIndexOriginatingBags = resultTable.Columns.IndexOf(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_ORIGINATING_BAGS);
            int resultTableColumnIndexSelfCiBags = resultTable.Columns.IndexOf(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_SELF_CI_BAGS);
            int resultTableColumnIndexTransferredBags = resultTable.Columns.IndexOf(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_TRANSFERRED_BAGS);

            if (fpdPax == null)
            {
                foreach (DataRow resultRow in resultTable.Rows)
                {
                    resultRow[resultTableColumnIndexGeneratedBags] = -1;
                    resultRow[resultTableColumnIndexOriginatingBags] = -1;
                    resultRow[resultTableColumnIndexSelfCiBags] = -1;
                    resultRow[resultTableColumnIndexTransferredBags] = -1;
                }
            }
            else
            {
                int resultTableColumnIndexId = resultTable.Columns.IndexOf(GlobalNames.sFPD_A_Column_ID);

                int fpdPaxColumnIndexFlightId = fpdPax.Columns.IndexOf(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_FLIGHT_ID);
                int fpdPaxColumnIndexGenerated = fpdPax.Columns.IndexOf(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_GENERATED_BAGS);
                int fpdPaxColumnIndexOriginating = fpdPax.Columns.IndexOf(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_ORIGINATING_BAGS);
                int fpdPaxColumnIndexSelfCI = fpdPax.Columns.IndexOf(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_SELF_CI_BAGS);
                int fpdPaxColumnIndexTransferred = fpdPax.Columns.IndexOf(OverallTools.StaticAnalysis.PaxPlanClass.FlightStatistics.FPD_PAX_COLUMN_NAME_TRANSFERRED_BAGS);
                if (resultTableColumnIndexId == -1 || fpdPaxColumnIndexFlightId == -1 || fpdPaxColumnIndexGenerated == -1 || fpdPaxColumnIndexOriginating == -1
                    || fpdPaxColumnIndexSelfCI == -1 || fpdPaxColumnIndexTransferred == -1)
                {
                    return;
                }
                foreach (DataRow resultRow in resultTable.Rows)
                {
                    int flightId = -1;
                    if (resultRow[resultTableColumnIndexId] == null || !Int32.TryParse(resultRow[resultTableColumnIndexId].ToString(), out flightId))
                        continue;
                    foreach (DataRow fpdPaxRow in fpdPax.Rows)
                    {
                        int fpdPaxFlightId = -1;
                        if (fpdPaxRow[fpdPaxColumnIndexFlightId] != null && Int32.TryParse(fpdPaxRow[fpdPaxColumnIndexFlightId].ToString(), out fpdPaxFlightId)
                            && flightId == fpdPaxFlightId)
                        {
                            if (fpdPaxRow[fpdPaxColumnIndexGenerated] != null)
                                resultRow[resultTableColumnIndexGeneratedBags] = fpdPaxRow[fpdPaxColumnIndexGenerated].ToString();
                            if (fpdPaxRow[fpdPaxColumnIndexOriginating] != null)
                                resultRow[resultTableColumnIndexOriginatingBags] = fpdPaxRow[fpdPaxColumnIndexOriginating].ToString();
                            if (fpdPaxRow[fpdPaxColumnIndexSelfCI] != null)
                                resultRow[resultTableColumnIndexSelfCiBags] = fpdPaxRow[fpdPaxColumnIndexSelfCI].ToString();
                            if (fpdPaxRow[fpdPaxColumnIndexTransferred] != null)
                                resultRow[resultTableColumnIndexTransferredBags] = fpdPaxRow[fpdPaxColumnIndexTransferred].ToString();
                            break;
                        }
                    }
                }
            }
        }

        private class BagIST
        {
            public int flightId { get; set; }
            public int bagId { get; set; }

            public int checkInQueue { get; set; }
            public int checkInDesk { get; set; }

            public int transferQueue { get; set; }
            public int transferDesk { get; set; }

            public int ebs { get; set; }

            public int makeUp { get; set; }

            public bool isStopped { get; set; }

            public string pbcType { get; set; }

            public double entranceQueueToExitMinutes { get; set; }

            public override string ToString()
            {
                string result = string.Empty;
                result += "Flight ID: " + flightId + " | ";
                result += "Bag ID: " + bagId + " | ";
                result += "CIQ: " + checkInQueue + " | ";
                result += "CI: " + checkInDesk + " | ";
                result += "TrQ: " + transferQueue + " | ";
                result += "Tr: " + transferDesk + " | ";
                result += "EBS: " + ebs + " | ";
                result += "Mup: " + makeUp + " | ";
                result += "Stopped: " + isStopped + " | ";
                result += "PBC: " + pbcType + " | ";
                result += "EntranceQ_Exit_Minutes: " + entranceQueueToExitMinutes;
                return result;
            }
        }

        public const string DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_CIQ = "Nb Bags at CI Queue";
        public const string DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_CI = "Nb Bags Processed at CI";
        public const string DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_TrQ = "Nb Bags at Tr Queue";
        public const string DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_Tr = "Nb Bags Processed at Tr";
        public const string DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_EBS = "Nb Bags Processed at EBS";
        public const string DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_Mup = "Nb Bags Processed at MU";

        public const string DEP_FP_STATS_COLUMN_NAME_NB_STOPPED_BAGS = "Nb Stopped Bags";
        public const string DEP_FP_STATS_COLUMN_NAME_PERC_STOPPED_BAGS = "% of Stopped";

        public const string DEP_FP_STATS_COLUMN_NAME_NB_LATE_BAGS = "Nb Late Bags";
        public const string DEP_FP_STATS_COLUMN_NAME_PERC_LATE_BAGS = "% of Late";

        public const string DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_MIN = "IST From Entry To Exit Min Value (min)";
        public const string DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_AVG = "IST From Entry To Exit Avg Value (min)";
        public const string DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_MAX = "IST From Entry To Exit Max Value (min)";

        public const string DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX = "IST From Entry To Exit ";
        public const string DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX = "% Percentile (min)";

        private void addDataFromIST(DataTable resultTable, DataTable ist, List<double> percentiles, string scenarioName)
        {
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_CIQ, typeof(Int32));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_CI, typeof(Int32));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_TrQ, typeof(Int32));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_Tr, typeof(Int32));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_EBS, typeof(Int32));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_Mup, typeof(Int32));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_NB_STOPPED_BAGS, typeof(Int32));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_PERC_STOPPED_BAGS, typeof(Double));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_NB_LATE_BAGS, typeof(Int32));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_PERC_LATE_BAGS, typeof(Double));

            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_MIN, typeof(Double));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_AVG, typeof(Double));
            resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_MAX, typeof(Double));

            if (percentiles.Count == 3)
            {
                resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX 
                    + percentiles[0] + DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX, typeof(Double));
                resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX
                    + percentiles[1] + DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX, typeof(Double));
                resultTable.Columns.Add(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX
                    + percentiles[2] + DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX, typeof(Double));
            }
            
            int resultTableColumnIndexId = resultTable.Columns.IndexOf(GlobalNames.sFPD_A_Column_ID);
            if (resultTableColumnIndexId == -1)
                return;

            if (ist == null)
            {
                insertIstDefaultData(resultTable, percentiles);
            }
            else
            {
                List<BagIST> bags = getBagsFromIST(ist);
                List<int> flightIdsFromResultTable = new List<int>();
                foreach (DataRow resultRow in resultTable.Rows)
                {
                    int flightId = -1;
                    if (resultRow[resultTableColumnIndexId] == null || !Int32.TryParse(resultRow[resultTableColumnIndexId].ToString(), out flightId))
                        continue;                    
                    List<BagIST> bagsByFlight = filterBagsByFlightId(bags, flightId);
                    calculateAndInsertIstData(resultRow, bagsByFlight, percentiles);
                    flightIdsFromResultTable.Add(flightId);
                }
                foreach (BagIST bag in bags)
                {
                    if (!flightIdsFromResultTable.Contains(bag.flightId))
                        errorList.Add("The Bag with the id = " + bag.bagId + ", having the Flight id = " + bag.flightId + ", does not have a corresponding Flight in the Flight Plan.");
                }
            }
        }

        private void insertIstDefaultData(DataTable resultTable, List<double> percentiles)
        {
            if (resultTable == null)
                return;
            int resultTableColumnIndexNbBagsAtCIQ = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_CIQ);
            int resultTableColumnIndexNbBagsAtCI = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_CI);
            int resultTableColumnIndexNbBagsAtTrQ = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_TrQ);
            int resultTableColumnIndexNbBagsAtTr = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_Tr);
            int resultTableColumnIndexNbBagsAtEbs = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_EBS);
            int resultTableColumnIndexNbBagsAtMup = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_Mup);
            int resultTableColumnIndexNbStoppedBags = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_STOPPED_BAGS);
            int resultTableColumnIndexPercStoppedBags = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_PERC_STOPPED_BAGS);
            int resultTableColumnIndexNbLateBags = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_LATE_BAGS);
            int resultTableColumnIndexPercLateBags = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_PERC_LATE_BAGS);

            int resultTableColumnIndexEntryToExitMin = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_MIN);
            int resultTableColumnIndexEntryToExitAvg = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_AVG);
            int resultTableColumnIndexEntryToExitMax = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_MAX);

            int resultTableColumnIndexEntryToExitPercLevel1 = -1;
            int resultTableColumnIndexEntryToExitPercLevel2 = -1;
            int resultTableColumnIndexEntryToExitPercLevel3 = -1;
            if (percentiles.Count == 3)
            {
                resultTableColumnIndexEntryToExitPercLevel1 = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX
                    + percentiles[0] + DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX);
                resultTableColumnIndexEntryToExitPercLevel2 = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX
                    + percentiles[1] + DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX);
                resultTableColumnIndexEntryToExitPercLevel3 = resultTable.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX
                    + percentiles[2] + DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX);
            }
            List<int> indexes = new List<int>(new int[] { resultTableColumnIndexNbBagsAtCIQ, resultTableColumnIndexNbBagsAtCI, resultTableColumnIndexNbBagsAtTrQ,
                resultTableColumnIndexNbBagsAtTr, resultTableColumnIndexNbBagsAtEbs, resultTableColumnIndexNbBagsAtMup, resultTableColumnIndexNbStoppedBags, 
                resultTableColumnIndexPercStoppedBags, resultTableColumnIndexNbLateBags,  resultTableColumnIndexPercLateBags, resultTableColumnIndexEntryToExitMin,
                resultTableColumnIndexEntryToExitAvg, resultTableColumnIndexEntryToExitMax, resultTableColumnIndexEntryToExitPercLevel1, resultTableColumnIndexEntryToExitPercLevel2,
                resultTableColumnIndexEntryToExitPercLevel3});
            if (!indexListIsValid(indexes))
                return;

            foreach (DataRow resultRow in resultTable.Rows)
            {
                resultRow[resultTableColumnIndexNbBagsAtCIQ] = -1;
                resultRow[resultTableColumnIndexNbBagsAtCI] = -1;
                resultRow[resultTableColumnIndexNbBagsAtTrQ] = -1;
                resultRow[resultTableColumnIndexNbBagsAtTr] = -1;
                resultRow[resultTableColumnIndexNbBagsAtEbs] = -1;
                resultRow[resultTableColumnIndexNbBagsAtMup] = -1;
                resultRow[resultTableColumnIndexNbStoppedBags] = -1;
                resultRow[resultTableColumnIndexPercStoppedBags] = -1;
                resultRow[resultTableColumnIndexNbLateBags] = -1;
                resultRow[resultTableColumnIndexPercLateBags] = -1;
                resultRow[resultTableColumnIndexEntryToExitMin] = -1;
                resultRow[resultTableColumnIndexEntryToExitAvg] = -1;
                resultRow[resultTableColumnIndexEntryToExitMax] = -1;
                resultRow[resultTableColumnIndexEntryToExitPercLevel1] = -1;
                resultRow[resultTableColumnIndexEntryToExitPercLevel2] = -1;
                resultRow[resultTableColumnIndexEntryToExitPercLevel3] = -1;
            }
        }
        
        private List<BagIST> getBagsFromIST(DataTable ist)
        {
            List<BagIST> bags = new List<BagIST>();

            int istColumnIndexFlightId = ist.Columns.IndexOf(GlobalNames.FLIGHT_ID_IST_TABLE_COLUMN_NAME);
            int istColumnIndexBagId = ist.Columns.IndexOf(GlobalNames.BAG_ID_IST_TABLE_COLUMN_NAME);
            int istColumnIndexCheckInQueue = ist.Columns.IndexOf(OverallTools.BagTraceAnalysis.CHECK_IN_QUEUE_INDEX_IST_COLUMN_NAME);
            int istColumnIndexCheckIn = ist.Columns.IndexOf(GlobalNames.CHECK_IN_IST_TABLE_COLUMN_NAME);
            int istColumnIndexTransferQueue = ist.Columns.IndexOf(GlobalNames.TRANSFER_INFEED_QUEUE_IST_TABLE_COLUMN_NAME);
            int istColumnIndexTransferDesk = ist.Columns.IndexOf(GlobalNames.TRANSFER_INFEED_DESK_IST_TABLE_COLUMN_NAME);
            int istColumnIndexEbs = ist.Columns.IndexOf(OverallTools.BagTraceAnalysis.EBS_INDEX_IST_COLUMN_NAME);
            int istColumnIndexMakeUp = ist.Columns.IndexOf(GlobalNames.MAKE_UP_IST_TABLE_COLUMN_NAME);
            int istColumnIndexStopped = ist.Columns.IndexOf(GlobalNames.STOPPED_IST_TABLE_COLUMN_NAME);
            int istColumnIndexPbcType = ist.Columns.IndexOf(GlobalNames.PBC_TYPE_IST_TABLE_COLUMN_NAME);
            int istColumnIndexEntranceToExitTime = ist.Columns.IndexOf(GlobalNames.TOTAL_TIME_FROM_QUEUE_TO_EXIT_COLUMN_NAME);

            List<int> indexes = new List<int>(new int[] { istColumnIndexFlightId, istColumnIndexBagId, istColumnIndexCheckInQueue, istColumnIndexCheckIn,
                istColumnIndexTransferQueue, istColumnIndexTransferDesk ,istColumnIndexEbs, istColumnIndexMakeUp, istColumnIndexStopped, istColumnIndexPbcType, 
                istColumnIndexEntranceToExitTime });

            if (!indexListIsValid(indexes))
                return bags;
            
            foreach (DataRow row in ist.Rows)
            {
                BagIST bag = new BagIST();
                bag.flightId = getIntValueFromCell(row, istColumnIndexFlightId);
                bag.bagId = getIntValueFromCell(row, istColumnIndexBagId);
                bag.checkInQueue = getIntValueFromCell(row, istColumnIndexCheckInQueue);
                bag.checkInDesk = getIntValueFromCell(row, istColumnIndexCheckIn);
                bag.transferQueue = getIntValueFromCell(row, istColumnIndexTransferQueue);
                bag.transferDesk = getIntValueFromCell(row, istColumnIndexTransferDesk);
                bag.ebs = getIntValueFromCell(row, istColumnIndexEbs);
                bag.makeUp = getIntValueFromCell(row, istColumnIndexMakeUp);
                bag.isStopped = getBooleanValueFromCell(row, istColumnIndexStopped);
                bag.pbcType = getStringValueFromCell(row, istColumnIndexPbcType);
                bag.entranceQueueToExitMinutes = getDoubleValueFromCell(row, istColumnIndexEntranceToExitTime);
                                
                bags.Add(bag);
            }
            return bags;
        }

        private List<BagIST> filterBagsByFlightId(List<BagIST> allBags, int flightId)
        {
            List<BagIST> filteredBags = new List<BagIST>();
            foreach (BagIST bag in allBags)
            {
                if (bag.flightId == flightId)
                    filteredBags.Add(bag);
            }
            return filteredBags;
        }

        private void calculateAndInsertIstData(DataRow resultRow, List<BagIST> bags, List<double> percentiles)
        {
            int resultTableColumnIndexNbBagsAtCIQ = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_CIQ);
            int resultTableColumnIndexNbBagsAtCI = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_CI);
            int resultTableColumnIndexNbBagsAtTrQ = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_TrQ);
            int resultTableColumnIndexNbBagsAtTr = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_Tr);
            int resultTableColumnIndexNbBagsAtEbs = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_EBS);
            int resultTableColumnIndexNbBagsAtMup = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_BAGS_AT_Mup);
            int resultTableColumnIndexNbStoppedBags = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_STOPPED_BAGS);
            int resultTableColumnIndexPercStoppedBags = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_PERC_STOPPED_BAGS);
            int resultTableColumnIndexNbLateBags = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_NB_LATE_BAGS);
            int resultTableColumnIndexPercLateBags = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_PERC_LATE_BAGS);

            int resultTableColumnIndexEntryToExitMin = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_MIN);
            int resultTableColumnIndexEntryToExitAvg = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_AVG);
            int resultTableColumnIndexEntryToExitMax = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_MAX);

            int resultTableColumnIndexEntryToExitPercLevel1 = -1;
            int resultTableColumnIndexEntryToExitPercLevel2 = -1;
            int resultTableColumnIndexEntryToExitPercLevel3 = -1;
            if (percentiles.Count == 3)
            {
                resultTableColumnIndexEntryToExitPercLevel1 = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX
                    + percentiles[0] + DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX);
                resultTableColumnIndexEntryToExitPercLevel2 = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX
                    + percentiles[1] + DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX);
                resultTableColumnIndexEntryToExitPercLevel3 = resultRow.Table.Columns.IndexOf(DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_PREFIX
                    + percentiles[2] + DEP_FP_STATS_COLUMN_NAME_FROM_ENTRY_TO_EXIT_PERCENTILE_SUFFIX);
            }
            List<int> indexes = new List<int>(new int[] { resultTableColumnIndexNbBagsAtCIQ, resultTableColumnIndexNbBagsAtCI, resultTableColumnIndexNbBagsAtTrQ,
                resultTableColumnIndexNbBagsAtTr, resultTableColumnIndexNbBagsAtEbs, resultTableColumnIndexNbBagsAtMup, resultTableColumnIndexNbStoppedBags, 
                resultTableColumnIndexPercStoppedBags, resultTableColumnIndexNbLateBags,  resultTableColumnIndexPercLateBags, resultTableColumnIndexEntryToExitMin,
                resultTableColumnIndexEntryToExitAvg, resultTableColumnIndexEntryToExitMax, resultTableColumnIndexEntryToExitPercLevel1, resultTableColumnIndexEntryToExitPercLevel2,
                resultTableColumnIndexEntryToExitPercLevel3});
            if (!indexListIsValid(indexes))
                return;
            int nbBagsAtCIQ = 0;
            int nbBagsAtCI = 0;
            int nbBagsAtTrQ = 0;
            int nbBagsAtTr = 0;
            int nbBagsAtEbs = 0;
            int nbBagsAtMup = 0;
            int nbBagsStopped = 0;
            int nbBagsLate = 0;

            double entryToExitMin = double.MaxValue;
            double entryToExitMax = double.MinValue;
            double entryToExitSum = 0;
            List<double> entryToExitTimes = new List<double>();
            foreach (BagIST bag in bags)
            {
                if (bag.checkInQueue > 0)
                    nbBagsAtCIQ++;
                if (bag.checkInDesk > 0)
                    nbBagsAtCI++;
                if (bag.transferQueue > 0)
                    nbBagsAtTrQ++;
                if (bag.transferDesk > 0)
                    nbBagsAtTr++;
                if (bag.ebs > 0)
                    nbBagsAtEbs++;
                if (bag.makeUp > 0)
                    nbBagsAtMup++;
                if (bag.isStopped)
                    nbBagsStopped++;
                if (bag.pbcType != null && bag.pbcType != string.Empty)
                    nbBagsLate++;
                if (bag.entranceQueueToExitMinutes < entryToExitMin)
                    entryToExitMin = bag.entranceQueueToExitMinutes;
                if (bag.entranceQueueToExitMinutes > entryToExitMax)
                    entryToExitMax = bag.entranceQueueToExitMinutes;
                entryToExitSum += bag.entranceQueueToExitMinutes;
                entryToExitTimes.Add(bag.entranceQueueToExitMinutes);
            }
            resultRow[resultTableColumnIndexNbBagsAtCIQ] = nbBagsAtCIQ;
            resultRow[resultTableColumnIndexNbBagsAtCI] = nbBagsAtCI;
            resultRow[resultTableColumnIndexNbBagsAtTrQ] = nbBagsAtTrQ;
            resultRow[resultTableColumnIndexNbBagsAtTr] = nbBagsAtTr;
            resultRow[resultTableColumnIndexNbBagsAtEbs] = nbBagsAtEbs;
            resultRow[resultTableColumnIndexNbBagsAtMup] = nbBagsAtMup;
            resultRow[resultTableColumnIndexNbStoppedBags] = nbBagsStopped;
            resultRow[resultTableColumnIndexNbLateBags] = nbBagsLate;

            if (entryToExitMin == double.MaxValue)
                resultRow[resultTableColumnIndexEntryToExitMin] = 0;
            else
                resultRow[resultTableColumnIndexEntryToExitMin] = entryToExitMin;
            if (entryToExitMax == double.MinValue)
                resultRow[resultTableColumnIndexEntryToExitMax] = 0;
            else
                resultRow[resultTableColumnIndexEntryToExitMax] = entryToExitMax;
            if (bags.Count == 0)
            {
                resultRow[resultTableColumnIndexPercStoppedBags] = 0;
                resultRow[resultTableColumnIndexPercLateBags] = 0;
                resultRow[resultTableColumnIndexEntryToExitAvg] = 0;
            }
            else
            {
                resultRow[resultTableColumnIndexPercStoppedBags] = Math.Round((double)nbBagsStopped / bags.Count, 2);
                resultRow[resultTableColumnIndexPercLateBags] = Math.Round((double)nbBagsLate / bags.Count, 2);
                resultRow[resultTableColumnIndexEntryToExitAvg] = Math.Round(entryToExitSum / bags.Count, 2);
            }
            entryToExitTimes.Sort();
            resultRow[resultTableColumnIndexEntryToExitPercLevel1] = Math.Round(OverallTools.ResultFunctions.getLevelValue(entryToExitTimes, percentiles[0]), 2);
            resultRow[resultTableColumnIndexEntryToExitPercLevel2] = Math.Round(OverallTools.ResultFunctions.getLevelValue(entryToExitTimes, percentiles[1]), 2);
            resultRow[resultTableColumnIndexEntryToExitPercLevel3] = Math.Round(OverallTools.ResultFunctions.getLevelValue(entryToExitTimes, percentiles[2]), 2);
        }

        private bool indexListIsValid(List<int> indexes)
        {
            foreach (int index in indexes)
            {
                if (index == -1)
                    return false;
            }
            return true;
        }

        private int getIntValueFromCell(DataRow row, int columnIndex)
        {            
            if (columnIndex < 0 || columnIndex >= row.ItemArray.Length || row[columnIndex] == null)
                return Int32.MinValue;
            int result = Int32.MinValue;
            if (!Int32.TryParse(row[columnIndex].ToString(), out result))
                return Int32.MinValue;
            return result;
        }

        private double getDoubleValueFromCell(DataRow row, int columnIndex)
        {
            if (columnIndex < 0 || columnIndex >= row.ItemArray.Length || row[columnIndex] == null)
                return Double.MinValue;
            double result = Double.MinValue;
            if (!Double.TryParse(row[columnIndex].ToString(), out result))
                return Double.MinValue;
            return result;
        }

        private bool getBooleanValueFromCell(DataRow row, int columnIndex)
        {
            if (columnIndex < 0 || columnIndex >= row.ItemArray.Length || row[columnIndex] == null)
                return false;
            bool result = false;
            if (!Boolean.TryParse(row[columnIndex].ToString(), out result))
                return false;
            return result;
        }

        private string getStringValueFromCell(DataRow row, int columnIndex)
        {
            if (columnIndex < 0 || columnIndex >= row.ItemArray.Length || row[columnIndex] == null)
                return string.Empty;
            return row[columnIndex].ToString();
        }
        
        // << Task #19467

        // >> Task #13361 FP AutoMod Data tables V3
        private void saveScenarioInputDataTables(ParamScenario scenarioParameters, SIM_Scenarios_Assistant analysis)
        {
            if (scenarioParameters == null)
                return;

            TreeNode scenarioInputDataTreeNode = getScenarioNodeByScenarioNameAndNodeName(scenarioParameters.Name, GlobalNames.SCENARIO_INPUT_DATA_DIRECTORY_NAME);
            if (scenarioInputDataTreeNode != null)
            {
                if (analysis != null)
                    addAutomodDataToScenarioInputData(scenarioInputDataTreeNode, analysis, scenarioParameters);
                else
                {
                    TreeNode automodDataTreeNode = getScenarioAutomodDataTreeNode(scenarioInputDataTreeNode);
                    if (automodDataTreeNode != null && automodDataTreeNode.Nodes != null)
                    {
                        while (automodDataTreeNode.Nodes.Count > 0)
                        {
                            DonneesEnCours.RemoveTable(scenarioParameters.Name, automodDataTreeNode.Nodes[0].Name); 
                            automodDataTreeNode.Nodes.RemoveAt(0);
                        }
                    }
                }
                
                TreeNode flightPlanNode = addChildNode(scenarioInputDataTreeNode, GlobalNames.SCENARIO_FLIGHT_PLANS_DIRECTORY_NAME);
                //addChildNode(flightPlanNode, GlobalNames.SCENARIO_EXCEPTION_TABLES_DIRECTORY_NAME);
                List<string> flightPlansNodeTableNames
                    = new List<string>(new string[] { scenarioParameters.ArrivalLoadFactors, scenarioParameters.DepartureLoadFactors,
                        scenarioParameters.AircraftLinksTable, scenarioParameters.FlightCategories, scenarioParameters.FPParametersTableName});
                addTablesToNode(flightPlanNode, flightPlansNodeTableNames, scenarioParameters, false, null);
                List<string> flightPlansNodeTableNamesFromBaseScenario = new List<string>(new string[] { scenarioParameters.FPA, scenarioParameters.FPD,
                scenarioParameters.AircraftType, scenarioParameters.Airline });
                addTablesToNode(flightPlanNode, flightPlansNodeTableNamesFromBaseScenario, scenarioParameters, true, flightPlansNodeTableNames);

                TreeNode passengerNode = addChildNode(scenarioInputDataTreeNode, GlobalNames.SCENARIO_PASSENGER_DATA_DIRECTORY_NAME);
                //addChildNode(passengerNode, GlobalNames.SCENARIO_EXCEPTION_TABLES_DIRECTORY_NAME);
                List<string> passengerNodeTableNames
                    = new List<string>(new string[] { scenarioParameters.ICT_Table, scenarioParameters.TransfFligthCategoryDistribution, 
                        scenarioParameters.TransfTerminalDistribution, scenarioParameters.CI_ShowUpTable,
                        scenarioParameters.NbBags, scenarioParameters.NbTrolley, scenarioParameters.NbVisitors,
                        scenarioParameters.InitialCarStock, scenarioParameters.ShortStayTable, scenarioParameters.LongStayTable});
                addTablesToNode(passengerNode, passengerNodeTableNames, scenarioParameters, false, null);

                TreeNode userAttributesNode = addChildNode(passengerNode, GlobalNames.SCENARIO_AIRPORT_USER_ATTRIBUTES_DIRECTORY_NAME);
                List<string> userAttributesNodeTableNames = new List<string>();
                if (scenarioParameters.userAttributesTablesDictionary != null
                    && scenarioParameters.userAttributesTablesDictionary.Count > 0)
                {                    
                    foreach (KeyValuePair<string, string> pair in scenarioParameters.userAttributesTablesDictionary)
                    {
                        userAttributesNodeTableNames.Add(pair.Value);
                    }
                }
                userAttributesNodeTableNames.AddRange(new List<string>(new string[] {scenarioParameters.FlightSubcategories,
                        scenarioParameters.ebsInputRateTableName, scenarioParameters.ebsOutputRateTableName, scenarioParameters.arrivalBaggageLoadingDelayTableName,
                        scenarioParameters.arrivalBaggageLoadingRateTableName, scenarioParameters.NumberOfPassengers, scenarioParameters.NumberOfBaggages}));
                addTablesToNode(userAttributesNode, userAttributesNodeTableNames, scenarioParameters, false, null);

                TreeNode allocationPlanningNode = addChildNode(scenarioInputDataTreeNode, GlobalNames.SCENARIO_ALLOCATION_PLANNING_DIRECTORY_NAME);
                //addChildNode(allocationPlanningNode, GlobalNames.SCENARIO_EXCEPTION_TABLES_DIRECTORY_NAME);
                List<string> allocationPlanningNodeTableNames
                    = new List<string>(new string[] { scenarioParameters.Opening_CITable, scenarioParameters.OCT_MakeUp,
                        scenarioParameters.Security, scenarioParameters.Passport, scenarioParameters.UserProcess, scenarioParameters.Transfer,
                        scenarioParameters.Saturation });
                addTablesToNode(allocationPlanningNode, allocationPlanningNodeTableNames, scenarioParameters, false, null);
                List<string> allocationPlanningNodeTableNamesFromBaseScenario = new List<string>(new string[] { scenarioParameters.OCT_BC, 
                    scenarioParameters.OCT_CI_Table, scenarioParameters.OCT_BagDropTableName, scenarioParameters.OCT_BG });
                addTablesToNode(allocationPlanningNode, allocationPlanningNodeTableNamesFromBaseScenario, scenarioParameters, true, allocationPlanningNodeTableNames);

                TreeNode airportProcessNode = addChildNode(scenarioInputDataTreeNode, GlobalNames.SCENARIO_AIRPORT_PROCESS_DIRECTORY_NAME);
                //addChildNode(airportProcessNode, GlobalNames.SCENARIO_EXCEPTION_TABLES_DIRECTORY_NAME);
                List<string> airportProcessNodeTableNames
                    = new List<string>(new string[] { scenarioParameters.ProcessTimes, scenarioParameters.ProcessCapacities, 
                        scenarioParameters.Itinerary, scenarioParameters.PaxIn, scenarioParameters.PaxOut, scenarioParameters.ProcessSchedule, scenarioParameters.Oneof});
                addTablesToNode(airportProcessNode, airportProcessNodeTableNames, scenarioParameters, false, null);

                TreeNode airportAreaNode = addChildNode(scenarioInputDataTreeNode, GlobalNames.SCENARIO_AIRPORT_AREA_CAPACITY_DIRECTORY_NAME);
                //addChildNode(airportAreaNode, GlobalNames.SCENARIO_EXCEPTION_TABLES_DIRECTORY_NAME);
                List<string> airportAreaNodeTableNames
                    = new List<string>(new string[] { scenarioParameters.CapaQueues, scenarioParameters.GroupQueues, scenarioParameters.AnimatedQueues });
                addTablesToNode(airportAreaNode, airportAreaNodeTableNames, scenarioParameters, false, null);
                                
                if (scenarioParameters.UserData != null && scenarioParameters.UserData.UserData != null
                    && scenarioParameters.UserData.UserData.Count > 0)
                {
                    TreeNode userDataTreeNode = addChildNode(scenarioInputDataTreeNode, GlobalNames.SCENARIO_AIRPORT_USER_DATA_DIRECTORY_NAME);
                    List<string> userDataNodeTableNames = new List<string>();
                    foreach (KeyValuePair<string, string> pair in scenarioParameters.UserData.UserData)
                    {
                        userDataNodeTableNames.Add(pair.Value);
                    }
                    addTablesToNode(userDataTreeNode, userDataNodeTableNames, scenarioParameters, false, null);                    
                }

                if (scenarioParameters.BHSSimulation)
                {
                    TreeNode bhsNode = addChildNode(scenarioInputDataTreeNode, GlobalNames.SCENARIO_BHS_DIRECTORY_NAME);
                    List<string> bhsNodeTableNames
                    = new List<string>(new string[] { GlobalNames.sBHS_Capa_Queues, GlobalNames.sBHS_Group_Queues, GlobalNames.sBHS_Itinerary, 
                        scenarioParameters.General, scenarioParameters.ArrivalInfeedGroups, scenarioParameters.CIGroups,
                        scenarioParameters.TransferInfeedGroups, scenarioParameters.CICollectors, scenarioParameters.CIRouting, scenarioParameters.HBS3Routing, 
                        scenarioParameters.TransferRouting, scenarioParameters.FlowSplit,
                        scenarioParameters.Process, scenarioParameters.ArrivalContainers, scenarioParameters.ArrivalContainers,
                        scenarioParameters.ArrivalMeanFlows, scenarioParameters.CheckInMeanFlows, scenarioParameters.TransferMeanFlows});
                    addTablesToNode(bhsNode, bhsNodeTableNames, scenarioParameters, false, null);
                }
            }
        }
        private TreeNode getScenarioNodeByScenarioNameAndNodeName(string scenarioName, string nodeName)
        {
            TreeNode scenarioInputNode = null;
            TreeNode scenarioNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenarioName, treeView1.Nodes[2]);
            if (scenarioNode != null)
            {
                scenarioInputNode
                    = OverallTools.TreeViewFunctions.RechercherNomEnfants(nodeName, scenarioNode);
                if (scenarioInputNode == null)
                {
                    scenarioInputNode = OverallTools.TreeViewFunctions
                        .createBranch(nodeName, nodeName,
                                        TreeViewTag.getDirectoryNode(nodeName), exportScenarioTablesContextMenuStrip);
                    scenarioNode.Nodes.Add(scenarioInputNode);
                }
            }
            return scenarioInputNode;
        }

        private TreeNode addChildNode(TreeNode parentNode, string childNodeName)
        {
            TreeNode childNode = addDirectoryToNodeByDirectoryName(parentNode, childNodeName);
            return childNode;
        }

        private TreeNode addChildNodeAtPosition(TreeNode parentNode, string childNodeName, int position)
        {
            TreeNode childNode = addDirectoryToNodeByDirectoryName(parentNode, childNodeName);
            return childNode;
        }

        private TreeNode addDirectoryToNodeByDirectoryName(TreeNode parentNode, string directoryName)
        {
            TreeNode directoryNode = null;
            if (parentNode != null && directoryName != null)
            {
                directoryNode
                    = OverallTools.TreeViewFunctions.RechercherNomEnfants(directoryName, parentNode);
                if (directoryNode == null)
                {
                    directoryNode = OverallTools.TreeViewFunctions
                        .createBranch(directoryName, directoryName,
                                        TreeViewTag.getDirectoryNode(directoryName), exportScenarioTablesContextMenuStrip);
                    parentNode.Nodes.Add(directoryNode);
                }
            }
            return directoryNode;
        }

        private TreeNode addDirectoryToNodeByDirectoryNameAndPosition(TreeNode parentNode, string directoryName, int position)
        {
            TreeNode directoryNode = null;
            if (parentNode != null && directoryName != null)
            {
                directoryNode
                    = OverallTools.TreeViewFunctions.RechercherNomEnfants(directoryName, parentNode);
                if (directoryNode == null)
                {
                    directoryNode = OverallTools.TreeViewFunctions
                        .createBranch(directoryName, directoryName,
                                        TreeViewTag.getDirectoryNode(directoryName), exportScenarioTablesContextMenuStrip);
                    parentNode.Nodes.Insert(position, directoryNode);
                }
            }
            return directoryNode;
        }
        
        private void addTablesToNode(TreeNode node, List<string> tableNames, ParamScenario scenarioParameters, bool useBaseScenarioAsDataSource,
            List<string> alreadyPresentTables)
        {
            string sourceDataSet = "Input"; // >> Bug #19471
            if (useBaseScenarioAsDataSource && scenarioParameters.BagPlanScenarioName != null && scenarioParameters.BagPlanScenarioName.Length > 0 
                && DonneesEnCours.ScenarioExist(scenarioParameters.BagPlanScenarioName))
            {
                sourceDataSet = scenarioParameters.BagPlanScenarioName;
            }
            if (node != null)
            {
                List<string> currentChildNodesNamesList = new List<string>();
                if (alreadyPresentTables != null)   // >> Bug #19471
                    currentChildNodesNamesList.AddRange(alreadyPresentTables);
                List<string> currentExceptionsNodesNamesList = new List<string>();
                foreach (string tableName in tableNames)
                {
                    if (tableName != null && tableName != "")
                    {
                        List<string> addedNodeNames = addTableToScenarioNodeByTableName(tableName, scenarioParameters.Name, node, sourceDataSet);
                        currentChildNodesNamesList.AddRange(addedNodeNames.ToArray());
                        if (scenarioParameters.UseException(tableName))
                        {
                            addedNodeNames = addExceptionForTableToScenarioNodeByTableName(tableName, scenarioParameters.Name, node);
                            currentExceptionsNodesNamesList.AddRange(addedNodeNames.ToArray());
                        }                        
                    }
                }
                clearOldChildTables(node, currentChildNodesNamesList, scenarioParameters.Name);
                TreeNode exceptionsNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.SCENARIO_EXCEPTION_TABLES_DIRECTORY_NAME, node);
                if (!useBaseScenarioAsDataSource && exceptionsNode != null)
                    clearOldChildTables(exceptionsNode, currentExceptionsNodesNamesList, scenarioParameters.Name);
            }
        }
        
        private void clearOldChildTables(TreeNode parentNode, List<string> currentChildNodesNamesList,
            string scenarioName)
        {
            if (parentNode != null && parentNode.Nodes != null)
            {
                List<TreeNode> childNodesToRemove = new List<TreeNode>();
                foreach (TreeNode childNode in parentNode.Nodes)
                {
                    if (!currentChildNodesNamesList.Contains(childNode.Name))
                    {
                        childNodesToRemove.Add(childNode);
                    }
                }
                foreach (TreeNode childNode in childNodesToRemove)
                {
                    if (childNode.Tag is TreeViewTag)
                    {
                        TreeViewTag tag = (TreeViewTag)childNode.Tag;
                        if (tag.isTableNode && parentNode.Nodes.Contains(childNode))
                        {
                            parentNode.Nodes.Remove(childNode);
                            DonneesEnCours.RemoveTable(scenarioName, childNode.Name);
                        }
                    }
                }
            }
        }

        private List<string> addTableToScenarioNodeByTableName(string tableName, string scenarioName,
            TreeNode scenarioTreeNode, string sourceDataSet)
        {
            List<string> nodeNamesAdded = new List<string>();
            if (tableName != null && scenarioName != null
                && scenarioTreeNode != null
                && DonneesEnCours.GetTable(sourceDataSet, tableName) != null)
            {
                NormalTable normalTable = (NormalTable)(DonneesEnCours.GetTable(sourceDataSet, tableName)).Copy();
                if (normalTable != null && normalTable.Table != null)
                {                    
                    DataTable saveTable = normalTable.Table.Copy();
                    MAJ_TableArbre(scenarioName, saveTable, scenarioTreeNode, false, false);
                    nodeNamesAdded.Add(saveTable.TableName);
                }
            }
            return nodeNamesAdded;
        }

        private List<string> addExceptionForTableToScenarioNodeByTableName(string tableName, string scenarioName,
            TreeNode scenarioTreeNode)
        {
            List<string> nodeNamesAdded = new List<string>();
            if (tableName != null && scenarioName != null
                && scenarioTreeNode != null
                && DonneesEnCours.GetTable("Input", tableName) != null)
            {
                NormalTable normalTable = (NormalTable)(DonneesEnCours.GetTable("Input", tableName)).Copy();
                ExceptionTable etTable = null;

                if (normalTable != null && normalTable.Table != null)
                {
                    if (normalTable is ExceptionTable)
                        etTable = (ExceptionTable)normalTable;
                    if (etTable != null)
                    {
                        if (etTable.ExceptionAirline != null)
                        {
                            List<string> addedNames = addExceptionTable(etTable.ExceptionAirline,
                                GlobalNames.SCENARIO_AIRLINE_EXCEPTION_TABLE_SUFIX, scenarioTreeNode, scenarioName);
                            if (addedNames.Count > 0)
                                nodeNamesAdded.AddRange(addedNames.ToArray());
                        }
                        if (etTable.ExceptionAirlineFB != null)
                        {
                            List<string> addedNames = addExceptionTable(etTable.ExceptionAirlineFB,
                                GlobalNames.SCENARIO_AIRLINE_FB_EXCEPTION_TABLE_SUFIX, scenarioTreeNode, scenarioName);
                            if (addedNames.Count > 0)
                                nodeNamesAdded.AddRange(addedNames.ToArray());
                        }
                        if (etTable.ExceptionFC != null)
                        {
                            List<string> addedNames = addExceptionTable(etTable.ExceptionFC,
                                GlobalNames.SCENARIO_FLIGHT_CATEG_EXCEPTION_TABLE_SUFIX, scenarioTreeNode, scenarioName);
                            if (addedNames.Count > 0)
                                nodeNamesAdded.AddRange(addedNames.ToArray());
                        }
                        if (etTable.ExceptionFCFB != null)
                        {
                            List<string> addedNames = addExceptionTable(etTable.ExceptionFCFB,
                                GlobalNames.SCENARIO_FLIGHT_CATEG_FB_EXCEPTION_TABLE_SUFIX, scenarioTreeNode, scenarioName);
                            if (addedNames.Count > 0)
                                nodeNamesAdded.AddRange(addedNames.ToArray());
                        }
                        if (etTable.ExceptionFlight != null)
                        {
                            List<string> addedNames = addExceptionTable(etTable.ExceptionFlight,
                                GlobalNames.SCENARIO_FLIGHT_EXCEPTION_TABLE_SUFIX, scenarioTreeNode, scenarioName);
                            if (addedNames.Count > 0)
                                nodeNamesAdded.AddRange(addedNames.ToArray());
                        }
                        if (etTable.ExceptionFlightFB!= null)
                        {
                            List<string> addedNames = addExceptionTable(etTable.ExceptionFlightFB,
                                GlobalNames.SCENARIO_FLIGHT_FB_EXCEPTION_TABLE_SUFIX, scenarioTreeNode, scenarioName);
                            if (addedNames.Count > 0)
                                nodeNamesAdded.AddRange(addedNames.ToArray());
                        }
                        if (etTable.ExceptionFB != null)
                        {
                            List<string> addedNames = addExceptionTable(etTable.ExceptionFB,
                                GlobalNames.SCENARIO_FB_EXCEPTION_TABLE_SUFIX, scenarioTreeNode, scenarioName);
                            if (addedNames.Count > 0)
                                nodeNamesAdded.AddRange(addedNames.ToArray());
                        }
                    }
                }
            }
            return nodeNamesAdded;
        }

        private List<string> addExceptionTable(NormalTable exceptionTable, string exceptionTableSuffix,
            TreeNode scenarioTreeNode, string scenarioName)
        {
            List<string> addedNames = new List<string>();
            if (exceptionTable != null)
            {
                TreeNode exceptionNode = addChildNodeAtPosition(scenarioTreeNode, GlobalNames.SCENARIO_EXCEPTION_TABLES_DIRECTORY_NAME, 0);
                addedNames.Add(exceptionNode.Name);
                DataTable saveTable = exceptionTable.Table.Copy();
                
                bool exceptionFound = true;
                switch (exceptionTableSuffix)
                {
                    case GlobalNames.SCENARIO_AIRLINE_EXCEPTION_TABLE_SUFIX:
                        {
                            saveTable.TableName = exceptionTable.Table.TableName + GlobalNames.SCENARIO_AIRLINE_EXCEPTION_TABLE_SUFIX;                            
                            break;
                        }
                    case GlobalNames.SCENARIO_AIRLINE_FB_EXCEPTION_TABLE_SUFIX:
                        {
                            saveTable.TableName = exceptionTable.Table.TableName + GlobalNames.SCENARIO_AIRLINE_FB_EXCEPTION_TABLE_SUFIX;
                            break;
                        }
                    case GlobalNames.SCENARIO_FLIGHT_CATEG_EXCEPTION_TABLE_SUFIX:
                        {
                            saveTable.TableName = exceptionTable.Table.TableName + GlobalNames.SCENARIO_FLIGHT_CATEG_EXCEPTION_TABLE_SUFIX;
                            break;
                        }
                    case GlobalNames.SCENARIO_FLIGHT_CATEG_FB_EXCEPTION_TABLE_SUFIX:
                        {
                            saveTable.TableName = exceptionTable.Table.TableName + GlobalNames.SCENARIO_FLIGHT_CATEG_FB_EXCEPTION_TABLE_SUFIX;
                            break;
                        }
                    case GlobalNames.SCENARIO_FLIGHT_EXCEPTION_TABLE_SUFIX:
                        {
                            saveTable.TableName = exceptionTable.Table.TableName + GlobalNames.SCENARIO_FLIGHT_EXCEPTION_TABLE_SUFIX;
                            break;
                        }
                    case GlobalNames.SCENARIO_FLIGHT_FB_EXCEPTION_TABLE_SUFIX:
                        {
                            saveTable.TableName = exceptionTable.Table.TableName + GlobalNames.SCENARIO_FLIGHT_FB_EXCEPTION_TABLE_SUFIX;
                            break;
                        }
                    case GlobalNames.SCENARIO_FB_EXCEPTION_TABLE_SUFIX:
                        {
                            saveTable.TableName = exceptionTable.Table.TableName + GlobalNames.SCENARIO_FB_EXCEPTION_TABLE_SUFIX;
                            break;
                        }
                    default:
                        {
                            exceptionFound = false;
                            break;
                        }
                }
                if (exceptionFound)
                {
                    MAJ_TableArbre(scenarioName, saveTable, exceptionNode, false, false);
                    addedNames.Add(saveTable.TableName);
                }
            }
            return addedNames;
        }

        private void addAutomodDataToScenarioInputData(TreeNode scenarioInputDataTreeNode, SIM_Scenarios_Assistant analysis,
             ParamScenario scenarioParmeters)
        {
            if (scenarioInputDataTreeNode == null 
                || analysis == null || scenarioParmeters == null)
            {
                return;
            }
            TreeNode automodDataTreeNode = getScenarioAutomodDataTreeNode(scenarioInputDataTreeNode);
            if (automodDataTreeNode != null)
            {
                if (analysis.automodTablesList != null)
                {
                    foreach (DataTable automodTable in analysis.automodTablesList)
                    {
                        addTableToScenarioNodeByDataTable(automodTable, scenarioParmeters.Name, automodDataTreeNode);
                    }
                }
                if (scenarioParmeters.BagPlan && scenarioParmeters.BagPlanScenarioName != null)
                {
                    DataTable bagPlan = DonneesEnCours.getTable(scenarioParmeters.BagPlanScenarioName, GlobalNames.BagPlanName);
                    addTableToScenarioNodeByDataTable(bagPlan, scenarioParmeters.Name, automodDataTreeNode);

                    DataTable fpd_pax = DonneesEnCours.getTable(scenarioParmeters.BagPlanScenarioName, "FPD_Pax");
                    if (fpd_pax != null)
                        addTableToScenarioNodeByDataTable(fpd_pax, scenarioParmeters.Name, automodDataTreeNode);
                    DataTable fpa_pax = DonneesEnCours.getTable(scenarioParmeters.BagPlanScenarioName, "FPA_Pax");
                    if (fpa_pax != null)
                        addTableToScenarioNodeByDataTable(fpa_pax, scenarioParmeters.Name, automodDataTreeNode);
                }
            }
        }
        
        private TreeNode getScenarioAutomodDataTreeNode(TreeNode scenarioInputDataTreeNode)
        {
            TreeNode automodDataTreeNode = null;            
            if (scenarioInputDataTreeNode != null)
            {
                automodDataTreeNode
                    = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.SCENARIO_INPUT_AUTOMOD_DATA_DIRECTORY_NAME, scenarioInputDataTreeNode);
                if (automodDataTreeNode == null)
                {
                    automodDataTreeNode = OverallTools.TreeViewFunctions
                        .createBranch(GlobalNames.SCENARIO_INPUT_AUTOMOD_DATA_DIRECTORY_NAME, GlobalNames.SCENARIO_INPUT_AUTOMOD_DATA_DIRECTORY_NAME,
                                        TreeViewTag.getDirectoryNode(GlobalNames.SCENARIO_INPUT_AUTOMOD_DATA_DIRECTORY_NAME), exportScenarioTablesContextMenuStrip);
                    scenarioInputDataTreeNode.Nodes.Add(automodDataTreeNode);
                }
            }
            return automodDataTreeNode;
        }

        private void addTableToScenarioNodeByDataTable(DataTable dataTable, string scenarioName,
            TreeNode scenarioTreeNode)
        {
            if (dataTable != null && scenarioName != null
                && scenarioTreeNode != null)
            {
                MAJ_TableArbre(scenarioName, dataTable, scenarioTreeNode, false, false);                
            }
        }

        private DataTable getResultFiltersTable(List<AnalysisResultFilter> resultFilters,
            List<AnalysisResultFilter> globalBasicFilters, List<AnalysisResultFilter> globalAdvancedFilters)
        {
            DataTable resultFiltersTable = new DataTable(GlobalNames.SCENARIO_RESULT_FILTERS_TABLE_NAME);
            if (resultFilters == null)
                return resultFiltersTable;

            int filterTypeColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("Filter Type", typeof(String));

            int filterNameColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("Filter Name", typeof(String));

            int fromStationTypeColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("From Station", typeof(String));
            int fromStationTimeTypeColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("From Station IN/OUT", typeof(String));

            int toStationTypeColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("To Station", typeof(String));
            int toStationTimeTypeColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("To Station IN/OUT", typeof(String));

            int fromSegregationColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("Segregate By From Station Desk Index", typeof(Boolean));
            int toSegregationColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("Segregate By To Station Desk Index", typeof(Boolean));
            int recirculationSegregationColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("Segregate By Recirculation", typeof(Boolean));

            int subtractEBSColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("Subtract EBS Storage Time", typeof(Boolean));

            int generateISTColumnIndex = resultFiltersTable.Columns.Count;
            resultFiltersTable.Columns.Add("Generate IST", typeof(Boolean));

            foreach (AnalysisResultFilter resultFilter in resultFilters)
            {
                DataRow row = resultFiltersTable.NewRow();
                if (resultFilter.isCustomFilter())
                    row[filterTypeColumnIndex] = "Custom";
                else if (resultFilter.hasSameConfigurationAsOneFromList(globalBasicFilters))
                    row[filterTypeColumnIndex] = "Basic";
                else if (resultFilter.hasSameConfigurationAsOneFromList(globalAdvancedFilters))
                    row[filterTypeColumnIndex] = "Advanced";                
                if (resultFilter.isCustomFilter())
                    row[filterNameColumnIndex] = resultFilter.filterName;
                else
                    row[filterNameColumnIndex] = resultFilter.fromStationCode + resultFilter.toStationCode;

                row[fromStationTypeColumnIndex] = resultFilter.fromStationCode;
                row[fromStationTimeTypeColumnIndex] = resultFilter.fromStationTimeType;
                row[toStationTypeColumnIndex] = resultFilter.toStationCode;
                row[toStationTimeTypeColumnIndex] = resultFilter.toStationTimeType;

                row[fromSegregationColumnIndex] = resultFilter.withFromSegregation;
                row[toSegregationColumnIndex] = resultFilter.withToSegregation;
                row[recirculationSegregationColumnIndex] = resultFilter.withRecirculation;

                row[subtractEBSColumnIndex] = resultFilter.excludeEBSStorageTime;
                row[generateISTColumnIndex] = resultFilter.generateIST;

                resultFiltersTable.Rows.Add(row);
            }
            resultFiltersTable.AcceptChanges();
            return resultFiltersTable;
        }

        private DataTable getSettingsTable(ParamScenario scenarioParameters)
        {
            DataTable settingsTable = new DataTable(GlobalNames.SCENARIO_SETTINGS_TABLE_NAME);
            if (scenarioParameters == null)
                return settingsTable;

            int parameterNameColumnIndex = settingsTable.Columns.Count;
            settingsTable.Columns.Add("Parameter", typeof(String));
            int parameterValueColumnIndex = settingsTable.Columns.Count;
            settingsTable.Columns.Add("Value", typeof(String));            

            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex,  "Scenario Name", scenarioParameters.Name);
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Start Date", scenarioParameters.DateDebut.ToString("dd/M/yyyy HH:mm"));
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "End Date", scenarioParameters.DateFin.ToString("dd/M/yyyy HH:mm"));

            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Sampling Step", scenarioParameters.SamplingStep.ToString());
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Analysis Range", scenarioParameters.AnalysisRange.ToString());

            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Calculate Departure Peaks", scenarioParameters.DeparturePeak.ToString());
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Calculate Arrival Peaks", scenarioParameters.ArrivalPeak.ToString());
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Generate PaxPlan for Static Analysis", scenarioParameters.generatePaxPlanForStaticAnalysis.ToString());
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Capacity Planning and Simulation", scenarioParameters.PaxPlan.ToString());
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Simmulate Baggage Handling System", scenarioParameters.BHSSimulation.ToString());

            if (scenarioParameters.percentilesLevels != null && scenarioParameters.percentilesLevels.Count == 3)
            {
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Percentiles",
                    "First: " + scenarioParameters.percentilesLevels[0] 
                    + "%, Second: " + scenarioParameters.percentilesLevels[1] 
                    + "%, Third: " + scenarioParameters.percentilesLevels[2] + "%");
            }
            
            if (scenarioParameters.BHSSimulation)
            {
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Use PaxPlan", scenarioParameters.UsePaxPlan.ToString());
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Use BagPlan", scenarioParameters.BagPlan.ToString());
                bool useMeanFlows = !scenarioParameters.UsePaxPlan && !scenarioParameters.BagPlan;
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Use Mean Flows", useMeanFlows.ToString());
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "BHS Terminal", scenarioParameters.Terminal);                
            }
            if ((scenarioParameters.BHSSimulation || scenarioParameters.isTraceAnalysisScenario) 
                && scenarioParameters.flowTypes != null)
            {
                string flowTypesInfo = "";
                if (scenarioParameters.flowTypes.Count == 0)
                    flowTypesInfo += "None";
                else
                {
                    for (int i = 0; i < scenarioParameters.flowTypes.Count; i++)
                    {
                        if (i < scenarioParameters.flowTypes.Count - 1)
                            flowTypesInfo += scenarioParameters.flowTypes[i] + ", ";
                        else
                            flowTypesInfo += scenarioParameters.flowTypes[i] + ".";
                    }
                }
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Flow Types:", flowTypesInfo);
            }

            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Use Simulation Engine seed", scenarioParameters.useUserProvidedSimulationEngineSeed.ToString());
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Simulation Engine Seed", scenarioParameters.simulationEngineSeed.ToString());
            
            if (scenarioParameters.PaxPlan)
            {
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Use defined seed", scenarioParameters.UseSeed.ToString());
                if (scenarioParameters.UseSeed)                
                    addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Seed", scenarioParameters.Seed.ToString());                
                
                string value = "";
                if (scenarioParameters.GenerateAll)
                    value = "Generate all at start up";
                else
                    value = "Ignore all at start up";
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Passengers out of range", value);
                if (scenarioParameters.GenerateFlightsAtEnd)
                    value = "Generate flights";
                else
                    value = "Ignore flights";
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Flights leaving after the Scenario's end time", value);
                if (scenarioParameters.TransferArrivalGeneration)
                    value = "Arrival Flight Plan";
                else
                    value = "Departure Flight Plan";
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Generate Transfer from ", value);
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Fill Transfer for all Flights", scenarioParameters.FillTransfer.ToString());

                if (!scenarioParameters.TransferArrivalGeneration)
                {
                    string info = "";
                    if (scenarioParameters.MissedDepartureTransferBasedOnCheckInShowUp)
                        info = "Check-In Show-Up";
                    else
                        info = "ICT Show-Up";
                    addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Missed departure transfer based on ", info);
                }
                if (scenarioParameters.TransferArrivalGeneration && scenarioParameters.FillTransfer)
                {
                    string fillDepartureInfo = "";
                    if (scenarioParameters.FillDepartureTransferBasedOnCheckInShowUp)
                        fillDepartureInfo = "Check-In Show-Up";
                    else
                        fillDepartureInfo = "ICT Show-Up";
                    addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Fill departure based on ", fillDepartureInfo);
                }
            }
            if (scenarioParameters.StationGlobalFillingType != null && scenarioParameters.StationGlobalFillingType != "")
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Process Queues usage", scenarioParameters.StationGlobalFillingType);

            if (scenarioParameters.ModelName != null && scenarioParameters.ModelName != "")
            {
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Customized Model name", scenarioParameters.ModelName);
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Display Model", scenarioParameters.DisplayModel.ToString());
            }
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Regenerate PaxPlan", scenarioParameters.RegeneratePaxplan.ToString());
            
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Generate Local IST", scenarioParameters.bhsGenerateLocalIST.ToString());
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Generate Group IST", scenarioParameters.bhsGenerateGroupIST.ToString());
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Generate MakeUp Segregation", scenarioParameters.bhsGenerateMUPSegregation.ToString());

            if (scenarioParameters.PaxPlan || scenarioParameters.BHSSimulation)
            {
                string additionalInfo = " (Do not clear preexisting UserData)";
                if (scenarioParameters.clearAutomodUserData)
                    additionalInfo = " (Clear preexisting UserData)";
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Export UserData for AutoMod",
                    scenarioParameters.ExportUserData.ToString() + additionalInfo);

                additionalInfo = " (Do not clear preexisting AutoMod main Data)";
                if (scenarioParameters.clearAutomodMainData)
                    additionalInfo = " (Clear preexisting AutoMod main Data)";
                addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Export main AutoMod Data",
                    scenarioParameters.exportAutomodMainData.ToString() + additionalInfo);
            }

            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Save Trace Mode", scenarioParameters.SaveTraceMode.ToString());
            addParameterInfoToSettingsTable(settingsTable, parameterNameColumnIndex, parameterValueColumnIndex, "Warm up", scenarioParameters.WarmUp.ToString());
                        
            settingsTable.AcceptChanges();
            return settingsTable;
        }
        private void addParameterInfoToSettingsTable(DataTable settingsTable, int parameterNameColumnIndex, int parameterValueColumnIndex,
            string parameterName, string parameterValue)
        {            
            DataRow row = settingsTable.NewRow();
            row[parameterNameColumnIndex] = parameterName;
            row[parameterValueColumnIndex] = parameterValue;
            settingsTable.Rows.Add(row);
        }
        // << Task #13361 FP AutoMod Data tables V3
            #endregion

        #region Dynamic

        #region 26/03/2012 - SGE - Mulhouse
        internal InsertPRKResultsDelegate InsertPRKResultsFunction
        {
            get
            {
                return new InsertPRKResultsDelegate(InsertPRKResults);
            }
        }
        internal delegate bool InsertPRKResultsDelegate(String sName, Hashtable htResults);
        private bool InsertPRKResults(String sName, Hashtable htResults)
        {
            TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(sName, treeView1.Nodes[2]);
            if (ScenarioPosition == null)
                return false;

            if (htResults == null)
            {
                TreeNode sTmp = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(OverallTools.BagTraceAnalysis.sPersonalParking, ScenarioPosition);
                if (sTmp != null)
                    sTmp.Remove();
                sTmp = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict("Car Park", ScenarioPosition);
                if (sTmp != null)
                    sTmp.Remove();
                return false;
            }
            TreeNode BHS = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(OverallTools.BagTraceAnalysis.sPersonalParking, ScenarioPosition);
            if (BHS == null)
            {
                //Sometimes the parking directory change it's name. we then delete the old one.
                BHS = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict("Car Park", ScenarioPosition);
                if (BHS != null)
                    BHS.Remove();
                BHS = null;
            }
            if (BHS == null)
            {
                //BHS = OverallTools.TreeViewFunctions.CreateDirectory(OverallTools.BagTraceAnalysis.sPersonalParking, "Car Park", null);
                BHS = OverallTools.TreeViewFunctions.createBranch(OverallTools.BagTraceAnalysis.sPersonalParking, "Car Park",
                                TreeViewTag.getDirectoryNode("Car Park"), null);
                ScenarioPosition.Nodes.Add(BHS);
            }
            BHS.Nodes.Clear();
            foreach (String skey in htResults.Keys)
            {
                String sTmp = skey.Split('_')[0];
                if (sTmp != OverallTools.BagTraceAnalysis.sPersonalParking)
                    continue;
                TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(sTmp, BHS);
                if (tmp == null)
                    continue;

                tmp = FindBHSNode(skey, tmp);
                if (OverallTools.TreeViewFunctions.RechercherNom(skey, tmp) == null)
                {
                    OverallTools.TreeViewFunctions.AddSortedNode(tmp,
                        OverallTools.TreeViewFunctions.createBranch(skey, skey,
                            TreeViewTag.getTableNode(sName, skey), contextMenuInput), false, true, true);
                }
                DataTable dtTmp = (DataTable)htResults[skey];
                DonneesEnCours.AddReplaceTable(sName, dtTmp, false);
                if (skey.EndsWith("_Statistics"))
                    DonneesEnCours.AddReplaceModeVisualisation(sName, skey, GestionDonneesHUB2SIM.StaticRapportVisualisationMode);
                if (skey.EndsWith("Utilization"))
                    if (dtTmp.Columns.Count > 3)
                        DonneesEnCours.AddReplaceModeVisualisation(sName, skey, GestionDonneesHUB2SIM.UtilizationBHSGroupTableVisualisationMode);   // Probleme avec stat occupation en mode BHS 18.07.2012
                    else
                        DonneesEnCours.AddReplaceModeVisualisation(sName, skey, GestionDonneesHUB2SIM.UtilizationTableVisualisationMode);

                if (skey.Contains("Remaining_Time") || skey.Contains("RemainingTime"))
                {
                    String sColumnName = "%_Nb Bags";
                    if (!((DataTable)htResults[skey]).Columns.Contains("%_Nb Bags"))
                        sColumnName = "%_Nb Cars";
                    DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getBHSRemainingDistribution((DataTable)htResults[skey], sColumnName));
                }
                else if ((skey.Contains("Occupation")) || (skey.EndsWith("Queue")) || (skey.EndsWith("Collector")) || (skey.EndsWith("IST")))
                {
                    DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getBHSOccupationGraphicFilter((DataTable)htResults[skey]));
                }
                else if ((skey.Contains("Dep")) || (skey.Contains("Distribution")) || (skey.Contains("Orig")) || (skey.Contains("Term")) || (skey.Contains("Transf")))
                {
                    DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getGraphicFilterRepartition((DataTable)htResults[skey]));
                }
            }
            DonneesEnCours.UpdateFilters(sName, ScenarioPosition, ContextMenuFilter, ContextMenuStrip);//, cmsExceptionTable);
            return true;
        }
        #endregion //26/03/2012 - SGE - Mulhouse
        private bool InsertBHSResults(String sName, Hashtable htResults, List<String> lsNames, bool bEraseGraphicFilters,
            bool generateMUPSegregation, List<AnalysisResultFilter> resultFilters, List<string> globalFlowTypes, SIM_Chargement cht)    // >> Task #14280 Bag Trace Loading time too long
        {
            if (htResults == null)
                return false;
            TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(sName, treeView1.Nodes[2]);
            if (ScenarioPosition == null)
                return false;
            TreeNode BHS = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(GestionDonneesHUB2SIM.sBHSAnalysis, ScenarioPosition);
            if (BHS == null)
                return false;

            // >> Task #13390 Targets for BHS Analysis output tables
            TreeNode oldTargetNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.TARGET_DIRECTORY_NAME, BHS);
            // << Task #13390 Targets for BHS Analysis output tables
            /*
            List<TreeNode> nodesToRemove = new List<TreeNode>();
            foreach (TreeNode node in BHS.Nodes)
            {
                if (node.Name != BHS_PROCESS_TIMES_STATISTICS_NODE_NAME)
                    nodesToRemove.Add(node);
            }
            foreach (TreeNode node in nodesToRemove)
                BHS.Nodes.Remove(node);
            */
            TreeNode oldProcessTimesStatisticsNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(BHS_PROCESS_TIMES_STATISTICS_NODE_NAME, BHS);
            BHS.Nodes.Clear();

            // << Task #7530 Analyze Bag Trace module - Recirculation statistics
            // Determine the max nb of recirculation and stores the information
            // into a hashTable(Statistic table is generated for queue and collector
            // => the nb of statistic tables / 2 gives the max nb of recirculation data sets)
            int maxNbOfRecirculationsDep = 0;
            int maxNbOfRecirculationsOrig = 0;
            int maxNbOfRecirculationsTransf = 0;
            int maxNbOfRecirculationsTerm = 0;
            //Hashtable htRecTables = new Hashtable();
            Hashtable htMaxNbRecirc = new Hashtable();

            ArrayList depRecStat = new ArrayList();
            ArrayList origRecStat = new ArrayList();
            ArrayList transfRecStat = new ArrayList();
            ArrayList termRecStat = new ArrayList();

            foreach (String key in htResults.Keys)
            {
                // >> Task #13659 IST MakeUp segregation
                if (OverallTools.BagTraceAnalysis.makeUpSGroupsDictionary != null)
                {
                    foreach (string makeUpSGroupsDictionaryKey in OverallTools.BagTraceAnalysis.makeUpSGroupsDictionary.Keys)
                    {
                        if (key.Contains(makeUpSGroupsDictionaryKey))
                            continue;
                    }
                }
                // << Task #13659 IST MakeUp segregation

                if (key.Contains("__Statistics") && key.Contains("Rec") && key.Contains("Dep")
                    && !key.Contains("ReaderTimeStamp") && !key.Contains("ReaderChute") && !key.Contains("ReaderExit") && !key.Contains("ChuteExit") && !key.Contains("ChuteMakeUp"))    // << Task #9582 Pax2Sim - BagTrace - ICS_Toploader and ICS_Unloader
                {
                    maxNbOfRecirculationsDep++;
                    depRecStat.Add(key);
                    //htRecTables.Add(key, key);
                }
                if (key.Contains("__Statistics") && key.Contains("Rec") && key.Contains("Orig")
                    && !key.Contains("ReaderTimeStamp") && !key.Contains("ReaderChute") && !key.Contains("ReaderExit") && !key.Contains("ChuteExit") && !key.Contains("ChuteMakeUp"))    // << Task #9582 Pax2Sim - BagTrace - ICS_Toploader and ICS_Unloader
                {
                    maxNbOfRecirculationsOrig++;
                    origRecStat.Add(key);
                    //htRecTables.Add(key, key);
                }
                if (key.Contains("__Statistics") && key.Contains("Rec") && key.Contains("Transf")
                    && !key.Contains("ReaderTimeStamp") && !key.Contains("ReaderChute") && !key.Contains("ReaderExit") && !key.Contains("ChuteExit") && !key.Contains("ChuteMakeUp"))    // << Task #9582 Pax2Sim - BagTrace - ICS_Toploader and ICS_Unloader
                {
                    maxNbOfRecirculationsTransf++;
                    transfRecStat.Add(key);
                    //htRecTables.Add(key, key);
                }
                if (key.Contains("__Statistics") && key.Contains("Rec") && key.Contains("Term")
                    && !key.Contains("ReaderTimeStamp") && !key.Contains("ReaderChute") && !key.Contains("ReaderExit") && !key.Contains("ChuteExit") && !key.Contains("ChuteMakeUp"))    // << Task #9582 Pax2Sim - BagTrace - ICS_Toploader and ICS_Unloader
                {
                    maxNbOfRecirculationsTerm++;
                    termRecStat.Add(key);
                    //htRecTables.Add(key, key);
                }
            }
            // << Task #8223 Pax2Sim - BHS mode - baggs IST statistic change            
            if (maxNbOfRecirculationsDep > 0)
                maxNbOfRecirculationsDep = maxNbOfRecirculationsDep / 4 - 1;
            if (maxNbOfRecirculationsOrig > 0)
                maxNbOfRecirculationsOrig = maxNbOfRecirculationsOrig / 4 - 1;
            if (maxNbOfRecirculationsDep > 0)
                maxNbOfRecirculationsTransf = maxNbOfRecirculationsTransf / 4 - 1;
            if (maxNbOfRecirculationsTerm > 0)
                maxNbOfRecirculationsTerm = maxNbOfRecirculationsTerm / 4 - 1;
            // >> Task #8223 Pax2Sim - BHS mode - baggs IST statistic change

            htMaxNbRecirc.Add(GlobalNames.maxNbOfRecirculationsDep, maxNbOfRecirculationsDep);
            htMaxNbRecirc.Add(GlobalNames.maxNbOfRecirculationsOrig, maxNbOfRecirculationsOrig);
            htMaxNbRecirc.Add(GlobalNames.maxNbOfRecirculationsTransf, maxNbOfRecirculationsTransf);
            htMaxNbRecirc.Add(GlobalNames.maxNbOfRecirculationsTerm, maxNbOfRecirculationsTerm);
            // >> Task #7530 Analyze Bag Trace module - Recirculation statistics

            // V6.225 without _Times
            //OverallTools.BagTraceAnalysis.GenerateDirectories_old(BHS, lsNames, exportScenarioTablesContextMenuStrip, htMaxNbRecirc, generateMUPSegregation);// >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
            // >> Task #15088 Pax2Sim - BHS Analysis - Times and Indexes
            OverallTools.BagTraceAnalysis.GenerateDirectories_new(BHS, lsNames, exportScenarioTablesContextMenuStrip, resultFilters, globalFlowTypes,
                htMaxNbRecirc, generateMUPSegregation);
            // << Task #15088 Pax2Sim - BHS Analysis - Times and Indexes

            //OverallTools.ExternFunctions.PrintLogFile("Analyzing baggage results: InsertBHSResults: Results iteration start");
            OverallTools.ExternFunctions.PrintLogFile("Analyzing baggage results: InsertBHSResults: Nb of Results tables: " + htResults.Count);
            
            int progressBarFileNb = 1;
            if (cht != null)    // >> Task #14280 Bag Trace Loading time too long
            {
                cht.Reset(0);
                cht.setFileNumber(htResults.Count / 1000);
                //cht.ChargementFichier("Inserting BHS Results...");
                cht.ChargementFichier("Scenario \"" + sName + "\": Inserting BHS Results...");  // >> Task #16728 PAX2SIM Improvements (Recurring) C#13
            }
            foreach (String skey in htResults.Keys)
            {
                if (cht != null)  // >> Task #14280 Bag Trace Loading time too long
                {
                    if (progressBarFileNb % 1000 == 0)
                    {
                        //cht.ChargementFichier("Inserting BHS Results: " + progressBarFileNb + "  tables out of " + htResults.Count + "...");
                        cht.ChargementFichier("Scenario \"" + sName + "\": Inserting BHS Results: " + progressBarFileNb + "  tables out of " + htResults.Count + "...");  // >> Task #16728 PAX2SIM Improvements (Recurring) C#13
                    }
                    progressBarFileNb++;
                }
                String sTmp = skey.Split('_')[0];
                TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(sTmp, BHS);
                if (sTmp == "Global")
                {
                    if (OverallTools.TreeViewFunctions.RechercherNom(skey, BHS) == null)
                    {
                        OverallTools.TreeViewFunctions.AddSortedNode(BHS,
                            OverallTools.TreeViewFunctions.createBranch(skey, skey,
                                TreeViewTag.getTableNode(sName, skey), contextMenuInput), false, true, true);
                    }
                    DonneesEnCours.AddReplaceTable(sName, (DataTable)htResults[skey],true);
                    if ((DonneesEnCours.getGraphicFilter(sName, skey) == null) || (bEraseGraphicFilters))
                    {                        
                        DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getBHSOccupationGraphicFilter((DataTable)htResults[skey]));
                    }
                    continue;
                }
                if (tmp == null)
                    continue;

                /*SGE 01/02/2012 : Suppression de cette partie afin de permettre une meilleure répartition des statistiques 
                 * de remaining dans l'arbre généré par l'analyse.
                 * if (skey.EndsWith("RemainingTime"))
                    tmp = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(sTmp, tmp);*/
                if (sTmp != OverallTools.BagTraceAnalysis.OriginatingTransferSorterName)//"Sorter") // >> #13391 IST Tables standardization - sorter occupation
                {
                    if (OverallTools.BagTraceAnalysis.BHS_OBJECTS_ON_3_INDEXES_LIST.Contains(tmp.Name))  // >> Task #13422 Keywords improvement
                    {
                        tmp = FindUserBHSNode(skey, tmp);
                    }
                    else
                    {
                        tmp = FindBHSNode(skey, tmp);
                    }
                }
                if (OverallTools.TreeViewFunctions.RechercherNom(skey, tmp) == null)//DonneesEnCours.tableEstPresente(sName, skey))
                {
                    OverallTools.TreeViewFunctions.AddSortedNode(tmp,
                        OverallTools.TreeViewFunctions.createBranch(skey, skey,
                            TreeViewTag.getTableNode(sName, skey), contextMenuInput), false, true, true);
                }
                if (generateMUPSegregation) // >> Task #13659 IST MakeUp segregation
                {
                    if (skey.StartsWith("MU_"))
                    {
                        string makeUpGroupNodeName = "";
                        int makeUpStationIndex = -1;
                        String[] splitedTableName = skey.Split('_');
                        if (splitedTableName.Length > 1
                            && Int32.TryParse(splitedTableName[1], out makeUpStationIndex))
                        {
                            foreach (KeyValuePair<string, List<int>> pair in OverallTools.BagTraceAnalysis.makeUpSGroupsDictionary)
                            {
                                if (pair.Value.Contains(makeUpStationIndex))
                                {
                                    string makeupGroupDescription = "";
                                    if (OverallTools.BagTraceAnalysis.makeUpGroupWithDescriptionDictionary.ContainsKey(pair.Key))
                                        makeupGroupDescription = OverallTools.BagTraceAnalysis.makeUpGroupWithDescriptionDictionary[pair.Key];
                                    makeUpGroupNodeName = pair.Key + "(" + makeupGroupDescription + ")";
                                    break;
                                }
                            }
                            TreeNode departingNode = OverallTools.TreeViewFunctions.RechercherNom("Departing", BHS);
                            if (departingNode != null)
                            {
                                TreeNode makeUpGroupNode = OverallTools.TreeViewFunctions.RechercherNom(makeUpGroupNodeName, departingNode);
                                if (makeUpGroupNode != null)
                                {
                                    TreeNode makeUpNode = FindBHSNode(skey, makeUpGroupNode);
                                    if (OverallTools.TreeViewFunctions.RechercherNom(skey, makeUpNode) == null)
                                    {
                                        OverallTools.TreeViewFunctions.AddSortedNode(makeUpNode,
                                            OverallTools.TreeViewFunctions.createBranch(skey, skey,
                                                TreeViewTag.getTableNode(sName, skey), contextMenuInput), false, true, true);
                                    }
                                }
                            }
                        }
                    }
                }

                DataTable dtTmp = (DataTable)htResults[skey];
                DonneesEnCours.AddReplaceTable(sName, dtTmp, true);
                if(skey.EndsWith("_Statistics"))
                    DonneesEnCours.AddReplaceModeVisualisation(sName, skey, GestionDonneesHUB2SIM.StaticRapportVisualisationMode);
                if (skey.EndsWith("Utilization"))
                    if (dtTmp.Columns.Count > 3)
                        DonneesEnCours.AddReplaceModeVisualisation(sName, skey, GestionDonneesHUB2SIM.UtilizationBHSGroupTableVisualisationMode);   // Probleme avec stat occupation en mode BHS 18.07.2012
                    else
                        DonneesEnCours.AddReplaceModeVisualisation(sName, skey, GestionDonneesHUB2SIM.UtilizationTableVisualisationMode);

                // >> Task #10985 Pax2Sim - BHS dynamic analysis - adapt statistics tables for the Dashboard
                if (skey.EndsWith(GlobalNames.BHS_STATS_TABLE_SUFFIX)
                    || skey.EndsWith(GlobalNames.BHS_SUMMARY_TABLE_NAME_SUFFIX))    // >> Task #17222 PAX2SIM - FromTo Times statistics - global summaries
                {
                    DonneesEnCours.AddReplaceModeVisualisation(sName, skey, GestionDonneesHUB2SIM.StaticRapportVisualisationMode);
                }
                // << Task #10985 Pax2Sim - BHS dynamic analysis - adapt statistics tables for the Dashboard
                                
                if ((DonneesEnCours.getGraphicFilter(sName,skey) != null) && (!bEraseGraphicFilters))
                    continue;

                if (skey.Contains("Remaining_Time") || skey.Contains("RemainingTime")) 
                {
                    String sColumnName = "%_Nb Bags";
                    if(!((DataTable)htResults[skey]).Columns.Contains("%_Nb Bags"))
                        sColumnName = "%_Nb Cars";
                    DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getBHSRemainingDistribution((DataTable)htResults[skey], sColumnName));
                }
                else if (skey.Contains("Occupation") || skey.EndsWith("Queue") || skey.EndsWith("Collector") || skey.EndsWith("IST") || skey.EndsWith("IST_FromTo")
                    || skey.Contains("Utilization"))    // >> Task #18306 PAX2SIM - BHS - Sorter occupation
                {
                    DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getBHSOccupationGraphicFilter((DataTable)htResults[skey]));
                }
                else if ((skey.Contains("Dep")) || (skey.Contains("Distribution")) || (skey.Contains("Orig")) || (skey.Contains("Term")) || (skey.Contains("Transf"))
                    || skey.Contains("Dwell Area")) // >> Task #18306 PAX2SIM - BHS - Sorter occupation
                {
                    DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getGraphicFilterRepartition((DataTable)htResults[skey]));
                }
            }
            //OverallTools.ExternFunctions.PrintLogFile("Analyzing baggage results: InsertBHSResults: Results iteration end");
            DonneesEnCours.UpdateFilters(sName, ScenarioPosition, ContextMenuFilter, ContextMenuStrip);//, cmsExceptionTable);
                        
            // >> Task #13390 Targets for BHS Analysis output tables
            TreeNode tnTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.TARGET_DIRECTORY_NAME, BHS);
            if (tnTarget != null)
            {
                //retrieve old targets from the previous scenario (this happens when re-running a scenario)
                if (oldTargetNode != null)
                {
                    TreeNode[] oldTreeNodeArray = new TreeNode[oldTargetNode.Nodes.Count];
                    oldTargetNode.Nodes.CopyTo(oldTreeNodeArray, 0);
                    tnTarget.Nodes.AddRange(oldTreeNodeArray);
                }

                List<DataTable> targetTables = TargetTools.getAllTargetTablesByTargetDirectory(tnTarget, sName, DonneesEnCours);
                if (targetTables != null && targetTables.Count > 0)
                {
                    foreach (DataTable targetTable in targetTables)
                    {
                        TargetTools.updateBHSTargetTable(targetTable, sName, DonneesEnCours);
                    }
                    TargetOverview.refreshTargetOverviewTable(tnTarget, DonneesEnCours);
                }
                tnTarget.ContextMenuStrip = exportScenarioTablesContextMenuStrip;
            }
            // << Bug #13276 Pax2Sim - Dynamic Analysis - Targets updated at recalculation
            if (oldProcessTimesStatisticsNode != null)
                BHS.Nodes.Add(oldProcessTimesStatisticsNode);
            // >> Task #14533 Pax2Sim - Export Scenario tables from result tree
            //add here the exportScenarioTablesContextMenu to Baggage Handling System dir
            BHS.ContextMenuStrip = exportScenarioTablesContextMenuStrip;
            
            return true;
        }
        private TreeNode FindBHSNode(String sKey, TreeNode Racine)
        {
            String[] tsObject = sKey.Split('_');
            if (tsObject.Length == 1)
                return Racine;
            int iIndex;
            if (!Int32.TryParse(tsObject[1], out iIndex))
                return Racine;
            if (iIndex == 0)
                return Racine;
            String sDirectoryName = tsObject[0] + "_" + tsObject[1];
            if (tsObject.Length >= 3)
            {
                int iIndex2;
                if (Int32.TryParse(tsObject[2], out iIndex2))
                {
                    sDirectoryName += "_" + tsObject[2];

                }
            }
            TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(sDirectoryName, Racine);
            if (tmp == null)
            {
                TreeNode RacineTmp = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict("Details", Racine);
                if (RacineTmp == null)
                {
                    RacineTmp = OverallTools.TreeViewFunctions.CreateDirectory("Details", exportScenarioTablesContextMenuStrip);
                    OverallTools.TreeViewFunctions.AddSortedNode(Racine, RacineTmp, false, true, false);
                }
                tmp = OverallTools.TreeViewFunctions.CreateDirectory(sDirectoryName, exportScenarioTablesContextMenuStrip);
                OverallTools.TreeViewFunctions.AddSortedNode(RacineTmp, tmp);
            }
            return tmp;
        }
        // >> Task #13422 Keywords improvement
        private TreeNode FindUserBHSNode_old(String sKey, TreeNode Racine)
        {
            String[] tsObject = sKey.Split('_');
            if (tsObject.Length == 1)
            {
                return Racine;
            }
            int terminalIndex = 0;
            int groupIndex = 0;
            int stationIndex = 0;
            if (tsObject.Length < 4
                || !Int32.TryParse(tsObject[1], out terminalIndex) || terminalIndex == 0
                || !Int32.TryParse(tsObject[2], out groupIndex)
                || !Int32.TryParse(tsObject[3], out stationIndex))
            {
                return Racine;
            }
            String sDirectoryName = tsObject[0] + "_" + terminalIndex + "_" + groupIndex + "_" + stationIndex;
            TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(sDirectoryName, Racine);
            if (tmp == null)
            {
                if (groupIndex > 0 && stationIndex > 0)
                {
                    TreeNode terminalsDetailsNode = addTreeNodeByNameToRoot(GlobalNames.BHS_USER_TERMINALS_SUB_DIRECTORY_NAME, Racine);
                    TreeNode groupsDetailsNode = addTreeNodeByNameToRoot(GlobalNames.BHS_USER_GROUPS_SUB_DIRECTORY_NAME, terminalsDetailsNode);
                    TreeNode stationsDetailsNode = addTreeNodeByNameToRoot(GlobalNames.BHS_USER_STATIONS_SUB_DIRECTORY_NAME, groupsDetailsNode);
                    tmp = OverallTools.TreeViewFunctions.CreateDirectory(sDirectoryName, exportScenarioTablesContextMenuStrip);
                    OverallTools.TreeViewFunctions.AddSortedNodeBeforeLast(stationsDetailsNode, tmp);
                }
                else
                {
                    if (groupIndex == 0)
                    {
                        TreeNode terminalsDetailsNode = addTreeNodeByNameToRoot(GlobalNames.BHS_USER_TERMINALS_SUB_DIRECTORY_NAME, Racine);
                        tmp = OverallTools.TreeViewFunctions.CreateDirectory(sDirectoryName, exportScenarioTablesContextMenuStrip);
                        OverallTools.TreeViewFunctions.AddSortedNodeBeforeLast(terminalsDetailsNode, tmp);
                    }
                    else if (stationIndex == 0)
                    {
                        TreeNode terminalsDetailsNode = addTreeNodeByNameToRoot(GlobalNames.BHS_USER_TERMINALS_SUB_DIRECTORY_NAME, Racine);
                        TreeNode groupsDetailsNode = addTreeNodeByNameToRoot(GlobalNames.BHS_USER_GROUPS_SUB_DIRECTORY_NAME, terminalsDetailsNode);
                        tmp = OverallTools.TreeViewFunctions.CreateDirectory(sDirectoryName, exportScenarioTablesContextMenuStrip);
                        OverallTools.TreeViewFunctions.AddSortedNodeBeforeLast(groupsDetailsNode, tmp);
                    }
                }
            }
            return tmp;
        }

        private TreeNode FindUserBHSNode(String sKey, TreeNode Racine)  // >> Task #10316 Pax2Sim - BHS - Presortation keyword C#2
        {
            String[] tsObject = sKey.Split('_');
            if (tsObject.Length == 1)
            {
                return Racine;
            }
            int terminalIndex = 0;
            int groupIndex = 0;
            int stationIndex = 0;
            if (tsObject.Length < 4
                || !Int32.TryParse(tsObject[1], out terminalIndex) || terminalIndex == 0
                || !Int32.TryParse(tsObject[2], out groupIndex)
                || !Int32.TryParse(tsObject[3], out stationIndex))
            {
                return Racine;
            }
            String sDirectoryName = tsObject[0] + "_" + terminalIndex + "_" + groupIndex + "_" + stationIndex;            
            TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(sDirectoryName, Racine);
            if (tmp == null)
            {
                tmp = OverallTools.TreeViewFunctions.CreateDirectory(sDirectoryName, exportScenarioTablesContextMenuStrip);
                if (groupIndex == 0)
                {
                    OverallTools.TreeViewFunctions.AddSortedNode(Racine, tmp, false, true, false);//AddSortedNodeBeforeLast(Racine, tmp);
                }
                else if (stationIndex == 0)
                {         
                    string terminalDirectoryName = tsObject[0] + "_" + terminalIndex + "_0_0";
                    TreeNode terminalNode = OverallTools.TreeViewFunctions.RechercherNom(terminalDirectoryName, Racine);
                    if (terminalNode == null)
                    {
                        terminalNode = OverallTools.TreeViewFunctions.CreateDirectory(terminalDirectoryName, exportScenarioTablesContextMenuStrip);
                        OverallTools.TreeViewFunctions.AddSortedNode(Racine, terminalNode, false, true, false);
                    }
                    OverallTools.TreeViewFunctions.AddSortedNode(terminalNode, tmp, false, true, false);
                }
                else
                {
                    String groupDirectoryName = tsObject[0] + "_" + terminalIndex + "_" + groupIndex + "_0";
                    TreeNode groupNode = OverallTools.TreeViewFunctions.RechercherNom(groupDirectoryName, Racine);
                    if (groupNode == null)
                    {
                        groupNode = OverallTools.TreeViewFunctions.CreateDirectory(groupDirectoryName, exportScenarioTablesContextMenuStrip);
                        string terminalDirectoryName = tsObject[0] + "_" + terminalIndex + "_0_0";
                        TreeNode terminalNode = OverallTools.TreeViewFunctions.RechercherNom(terminalDirectoryName, Racine);
                        if (terminalNode == null)
                        {
                            terminalNode = OverallTools.TreeViewFunctions.CreateDirectory(terminalDirectoryName, exportScenarioTablesContextMenuStrip);
                            OverallTools.TreeViewFunctions.AddSortedNode(Racine, terminalNode, false, true, false);
                        }
                        OverallTools.TreeViewFunctions.AddSortedNode(terminalNode, groupNode, false, true, false);
                    }
                    OverallTools.TreeViewFunctions.AddSortedNode(groupNode, tmp, false, true, false);
                }
            }
            return tmp;
        }

        private TreeNode addTreeNodeByNameToRoot(string nodeName, TreeNode root)
        {
            TreeNode node = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(nodeName, root);
            if (node == null)
            {
                node = OverallTools.TreeViewFunctions.CreateDirectory(nodeName, exportScenarioTablesContextMenuStrip);
                OverallTools.TreeViewFunctions.AddSortedNode(root, node, false, true, false);
            }
            return node;
        }
        // << Task #13422 Keywords improvement

        private bool InsertPAXResults(String sScenarioName,
                                      OverallTools.PaxTraceAnalysis ptaAnalysis,
                                      bool bEraseGraphicFilters,
                                      bool bLoadingFromTrace,
                                      List<double> scenarioPercentiles) // >> Task #9936 Pax2Sim - project properties saved specifically for each scenario + Times stats Spec
        {
            if ((ptaAnalysis == null) ||
                (ptaAnalysis.OccupationTables.Values.Count == 0))
            {
                return false;
            }
            TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(sScenarioName, treeView1.Nodes[2]);
            if (ScenarioPosition == null)
            {
                MessageBox.Show("There was a problem during the execution of the application", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
            TreeNode Dynamic = DonneesEnCours.getDynamicNode(sScenarioName, ScenarioPosition);
            if (Dynamic == null)
            {
                MessageBox.Show("There was a problem during the execution of the application", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return false;
            }
            Dynamic.ContextMenuStrip = exportScenarioTablesContextMenuStrip;    // >> Task #14533 Pax2Sim - Export Scenario tables from result tree

            double[] percentiles = new double[3];
            if (scenarioPercentiles == null || scenarioPercentiles.Count == 0)
            {
                percentiles = DonneesEnCours.Levels;
            }
            else if (scenarioPercentiles.Count == 3)
            {
                percentiles[0] = scenarioPercentiles[0];
                percentiles[1] = scenarioPercentiles[1];
                percentiles[2] = scenarioPercentiles[2];
            }

            Hashtable htOccupation = ptaAnalysis.OccupationTables;
            Hashtable htTime = ptaAnalysis.TimeTables;
            Hashtable htUtilization = ptaAnalysis.UtilizationTables;
            Hashtable htDeskPlanInformationTables = new Hashtable();// ptaAnalysis.deskPlanInformationTables;    // >> Task #13243 Pax2Sim - Dynamic simulation - Desk Plan Information
            Hashtable Remaining = ptaAnalysis.RemainingTime;
            Hashtable htCounters = ptaAnalysis.CounterResults;
            Hashtable DeskInfo = ptaAnalysis.DeskInformations3;

            DataTable PaxTravelStats = ptaAnalysis.PaxTravelStats;

            DataTable PaxDistribution = ptaAnalysis.PaxDistribution;
            DataTable PaxDistributionMissed = ptaAnalysis.PaxDistributionMissed;
            DataTable PaxDistributionStopped = ptaAnalysis.PaxDistributionStopped;
            DataTable PaxDistributionLost = ptaAnalysis.PaxDistributionLost;
            DataTable PaxDistributionTerminating = ptaAnalysis.PaxDistributionArrival;
            DataTable PaxDistributionDeparture = ptaAnalysis.PaxDistributionDeparture;
            DataTable PaxDistributionTransfer = ptaAnalysis.PaxDistributionTransfer;
            // << Task #8618 Pax2Sim - Dynamic Analysis - Pax - histograns and timeline tables for Dwell Area
            DataTable PaxDistributionOriginatingAndTransfer = ptaAnalysis.PaxDistributionOriginatingAndTransfer;
            #region timeline tables
            DataTable PaxDistributionTimelineGlobal = ptaAnalysis.PaxDistributionTimelineTotal;
            DataTable PaxDistributionTimelineLost = ptaAnalysis.PaxDistributionTimelineLost;
            DataTable PaxDistributionTimelineMissed = ptaAnalysis.PaxDistributionTimelineMissed;
            DataTable PaxDistributionTimelineStopped = ptaAnalysis.PaxDistributionTimelineStopped;
            DataTable PaxDistributionTimelineTerminating = ptaAnalysis.PaxDistributionTimelineTerminating;
            DataTable PaxDistributionTimelineDeparture = ptaAnalysis.PaxDistributionTimelineOriginatingAndTransfer;
            DataTable PaxDistributionTimelineTransfer = ptaAnalysis.PaxDistributionTimelineTransfer;
            DataTable PaxDistributionTimelineOriginating = ptaAnalysis.PaxDistributionTimelineOriginating;
            #endregion

            #region summaries for PaxDistribution
            DataTable paxDistributionGlobalSummary = ptaAnalysis.paxDistributionGlobalSummary;
            DataTable paxDistributionMissedSummary = ptaAnalysis.paxDistributionMissedSummary;
            DataTable paxDistributionStoppedSummary = ptaAnalysis.paxDistributionStoppedSummary;
            DataTable paxDistributionLostSummary = ptaAnalysis.paxDistributionLostSummary;

            DataTable paxDistributionOriginatingSummary = ptaAnalysis.paxDistributionOriginatingSummary;
            DataTable paxDistributionOriginatingAndTransferSummary = ptaAnalysis.paxDistributionOriginatingAndTransferSummary;
            DataTable paxDistributionTransferSummary = ptaAnalysis.paxDistributionTransferSummary;
            DataTable paxDistributionTerminatingSummary = ptaAnalysis.paxDistributionTerminatingSummary;
            #endregion
            // >> Task #8618 Pax2Sim - Dynamic Analysis - Pax - histograns and timeline tables for Dwell Area

            DataTable dtPaxIST = ptaAnalysis.PaxGeneralIST;

            // >> Task #13391 IST tables standardization comment#47
            Hashtable dwellTimesDirectoryTables = new Hashtable();
            dwellTimesDirectoryTables.Add(PaxDistribution.TableName, PaxDistribution);
            dwellTimesDirectoryTables.Add(PaxDistributionMissed.TableName, PaxDistributionMissed);
            dwellTimesDirectoryTables.Add(PaxDistributionStopped.TableName, PaxDistributionStopped);
            dwellTimesDirectoryTables.Add(PaxDistributionLost.TableName, PaxDistributionLost);
            dwellTimesDirectoryTables.Add(PaxDistributionTerminating.TableName, PaxDistributionTerminating);
            dwellTimesDirectoryTables.Add(PaxDistributionDeparture.TableName, PaxDistributionDeparture);
            dwellTimesDirectoryTables.Add(PaxDistributionTransfer.TableName, PaxDistributionTransfer);
            dwellTimesDirectoryTables.Add(PaxDistributionOriginatingAndTransfer.TableName, PaxDistributionOriginatingAndTransfer);

            dwellTimesDirectoryTables.Add(PaxDistributionTimelineGlobal.TableName, PaxDistributionTimelineGlobal);
            dwellTimesDirectoryTables.Add(PaxDistributionTimelineLost.TableName, PaxDistributionTimelineLost);
            dwellTimesDirectoryTables.Add(PaxDistributionTimelineMissed.TableName, PaxDistributionTimelineMissed);
            dwellTimesDirectoryTables.Add(PaxDistributionTimelineStopped.TableName, PaxDistributionTimelineStopped);
            dwellTimesDirectoryTables.Add(PaxDistributionTimelineTerminating.TableName, PaxDistributionTimelineTerminating);
            dwellTimesDirectoryTables.Add(PaxDistributionTimelineDeparture.TableName, PaxDistributionTimelineDeparture);
            dwellTimesDirectoryTables.Add(PaxDistributionTimelineTransfer.TableName, PaxDistributionTimelineTransfer);
            dwellTimesDirectoryTables.Add(PaxDistributionTimelineOriginating.TableName, PaxDistributionTimelineOriginating);

            dwellTimesDirectoryTables.Add(dtPaxIST.TableName, dtPaxIST);
            // << Task #13391 IST tables standardization comment#47

            Dictionary<string, DataTable> IST = ptaAnalysis.IST;

            DataTable dtBagList = ptaAnalysis.BagList;
            DataTable dtFPDTable = ptaAnalysis.FPDTable;
            // << Task #8589 Pax2Sim - Waiting Time Per Period of Time for PAX
            Hashtable htDwellTimeTables = ptaAnalysis.dwellTimeTables;
            // >> Task #8589 Pax2Sim - Waiting Time Per Period of Time for PAX

            if ((Dynamic.Nodes.Count > 0) && (!bLoadingFromTrace))
            {
                RemoveAllTable(Dynamic.Nodes[0], dwellTimesDirectoryTables, htOccupation, htTime, 
                    htUtilization, Remaining, htCounters, IST, PaxTravelStats, PaxDistribution, htDeskPlanInformationTables);
            }
            TreeNode TreeRacine = OverallTools.TreeViewFunctions.RechercherNomEnfants("Airport Reports", Dynamic);
            if (TreeRacine == null)
            {
                TreeRacine = OverallTools.TreeViewFunctions.createBranch("Airport Reports", "Airport Reports", TreeViewTag.getResultNode(sScenarioName, "Airport Reports"), contextMenuInput);
                //S'il n'existe pas, on le créé et on l'ajoute à l'arbre.
                OverallTools.TreeViewFunctions.AddSortedNode(Dynamic, TreeRacine);
            }

            if (DeskInfo.ContainsKey("Airport Reports"))
            {
                // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1 - replace the old summary table on the result node
                //DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo["Airport Reports"]).ToTable(DonneesEnCours.Levels), true); // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                //DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, "Airport Reports", DataManagement.DataManagerScenario.ArboNode.getVisualisationMode("Airport Reports", "ResultNode"));

                DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo["Airport Reports"]).toSummaryTable(percentiles, GlobalNames.AIRPORT_RESOURCE_TYPE_CODE), true); // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, "Airport Reports", DataManagement.DataManagerScenario.ArboNode.getVisualisationMode("Airport Reports", "ResultNode"));
                /*
                //added only for testing purposes - compare the results with the old summary which is still visible
                // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                DataTable airportSummaryTable = ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo["Airport Reports"])
                    .toSummaryTable(DonneesEnCours.Levels, GlobalNames.AIRPORT_RESOURCE_TYPE_CODE);

                MAJ_TableArbre(sScenarioName, airportSummaryTable , TreeRacine, bEraseGraphicFilters, true);

                DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, airportSummaryTable.TableName,
                    DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(airportSummaryTable.TableName, "TableNode"));
                // << Task #10484 Pax2Sim - Pax analysis - Summary with distribution levels percent
                 */ 
            }

            if (dtBagList != null)
                MAJ_TableArbre(sScenarioName, dtBagList, Dynamic, bEraseGraphicFilters, false);

            if (dtFPDTable != null)
                MAJ_TableArbre(sScenarioName, dtFPDTable, Dynamic, bEraseGraphicFilters, false);


            // >> Task #10156 Pax2Sim - Statistic dev - Target
            String sTarget = GlobalNames.TARGET_DIRECTORY_NAME;
            TreeNode tnTarget = OverallTools.TreeViewFunctions.RechercherNomEnfants(sTarget, TreeRacine);
            if (tnTarget == null)
            {
                tnTarget = OverallTools.TreeViewFunctions.createBranch(sTarget, sTarget, TreeViewTag.getDirectoryNode(sTarget), null);                
                TreeRacine.Nodes.Add(tnTarget);
            }
            // << Task #10156 Pax2Sim - Statistic dev - Target
                        
            String sDwellTimes = "Dwell Times";
            TreeNode tnDwellTimes = OverallTools.TreeViewFunctions.RechercherNomEnfants(sDwellTimes, TreeRacine);
            if (tnDwellTimes == null)
            {
                tnDwellTimes = OverallTools.TreeViewFunctions.createBranch(sDwellTimes, sDwellTimes, TreeViewTag.getDirectoryNode(sDwellTimes), null);
                TreeRacine.Nodes.Add(tnDwellTimes);
            }

            TreeNode tnReclaimSync = null;
            if (ptaAnalysis.AllocationReclaim != null || ptaAnalysis.AllocationResults != null)  // >> Task #8958 Reclaim Synchronisation mode Gantt
            {
                tnReclaimSync = OverallTools.TreeViewFunctions.RechercherNomEnfants(GlobalNames.reclaimSyncDirectoryName, TreeRacine);
                if (tnReclaimSync == null)
                {
                    tnReclaimSync = OverallTools.TreeViewFunctions
                        .createBranch(GlobalNames.reclaimSyncDirectoryName, GlobalNames.reclaimSyncDirectoryName,
                                        TreeViewTag.getDirectoryNode(GlobalNames.reclaimSyncDirectoryName), null);
                    TreeRacine.Nodes.Add(tnReclaimSync);
                }
            }

            MAJ_TableArbre(sScenarioName, PaxTravelStats, TreeRacine, bEraseGraphicFilters, true);

            // << Task #8618 Pax2Sim - Dynamic Analysis - Pax - histograns and timeline tables for Dwell Area
            //tnDwellTimes.Nodes.Clear();   // >> Bug #13274 Dwell Times recalculation issue

            String distributionGlobalName = "Pax Time Distribution Global";
            TreeNode tnDistributionGlobal = OverallTools.TreeViewFunctions.RechercherNomEnfants(distributionGlobalName, tnDwellTimes);
            if (tnDistributionGlobal == null)
            {
                tnDistributionGlobal = OverallTools.TreeViewFunctions.createBranch(distributionGlobalName, distributionGlobalName, TreeViewTag.getDirectoryNode(distributionGlobalName), null);
                tnDwellTimes.Nodes.Add(tnDistributionGlobal);
            }
            MAJ_TableArbre(sScenarioName, PaxDistribution, tnDistributionGlobal, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionTimelineGlobal, tnDistributionGlobal, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, paxDistributionGlobalSummary, tnDistributionGlobal, bEraseGraphicFilters, true);
            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, paxDistributionGlobalSummary.TableName,
                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(paxDistributionGlobalSummary.TableName, "ResultNode"));


            String distributionMissedName = "Pax Time Distribution Missed";
            TreeNode tnDistributionMissed = OverallTools.TreeViewFunctions.RechercherNomEnfants(distributionMissedName, tnDwellTimes);
            if (tnDistributionMissed == null)
            {
                tnDistributionMissed = OverallTools.TreeViewFunctions.createBranch(distributionMissedName, distributionMissedName, TreeViewTag.getDirectoryNode(distributionMissedName), null);
                tnDwellTimes.Nodes.Add(tnDistributionMissed);
            }
            MAJ_TableArbre(sScenarioName, PaxDistributionMissed, tnDistributionMissed, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionTimelineMissed, tnDistributionMissed, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, paxDistributionMissedSummary, tnDistributionMissed, bEraseGraphicFilters, true);
            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, paxDistributionMissedSummary.TableName,
                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(paxDistributionMissedSummary.TableName, "ResultNode"));

            String distributionStoppedName = "Pax Time Distribution Stopped";
            TreeNode tnDistributionStopped = OverallTools.TreeViewFunctions.RechercherNomEnfants(distributionStoppedName, tnDwellTimes);
            if (tnDistributionStopped == null)
            {
                tnDistributionStopped = OverallTools.TreeViewFunctions.createBranch(distributionStoppedName, distributionStoppedName, TreeViewTag.getDirectoryNode(distributionStoppedName), null);
                tnDwellTimes.Nodes.Add(tnDistributionStopped);
            }
            MAJ_TableArbre(sScenarioName, PaxDistributionStopped, tnDistributionStopped, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionTimelineStopped, tnDistributionStopped, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, paxDistributionStoppedSummary, tnDistributionStopped, bEraseGraphicFilters, true);
            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, paxDistributionStoppedSummary.TableName,
                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(paxDistributionStoppedSummary.TableName, "ResultNode"));

            String distributionLostName = "Pax Time Distribution Lost";
            TreeNode tnDistributionLost = OverallTools.TreeViewFunctions.RechercherNomEnfants(distributionLostName, tnDwellTimes);
            if (tnDistributionLost == null)
            {
                tnDistributionLost = OverallTools.TreeViewFunctions.createBranch(distributionLostName, distributionLostName, TreeViewTag.getDirectoryNode(distributionLostName), null);
                tnDwellTimes.Nodes.Add(tnDistributionLost);
            }
            MAJ_TableArbre(sScenarioName, PaxDistributionLost, tnDistributionLost, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionTimelineLost, tnDistributionLost, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, paxDistributionLostSummary, tnDistributionLost, bEraseGraphicFilters, true);
            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, paxDistributionLostSummary.TableName,
                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(paxDistributionLostSummary.TableName, "ResultNode"));

            String distributionTerminatingName = "Pax Time Distribution Terminating";
            TreeNode tnDistributionTerminating = OverallTools.TreeViewFunctions.RechercherNomEnfants(distributionTerminatingName, tnDwellTimes);
            if (tnDistributionTerminating == null)
            {
                tnDistributionTerminating = OverallTools.TreeViewFunctions.createBranch(distributionTerminatingName, distributionTerminatingName, TreeViewTag.getDirectoryNode(distributionTerminatingName), null);
                tnDwellTimes.Nodes.Add(tnDistributionTerminating);
            }
            MAJ_TableArbre(sScenarioName, PaxDistributionTerminating, tnDistributionTerminating, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionTimelineTerminating, tnDistributionTerminating, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, paxDistributionTerminatingSummary, tnDistributionTerminating, bEraseGraphicFilters, true);
            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, paxDistributionTerminatingSummary.TableName,
                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(paxDistributionTerminatingSummary.TableName, "ResultNode"));

            String distributionOriginatingName = "Pax Time Distribution Originating";
            TreeNode tnDistributionOriginating = OverallTools.TreeViewFunctions.RechercherNomEnfants(distributionOriginatingName, tnDwellTimes);
            if (tnDistributionOriginating == null)
            {
                tnDistributionOriginating = OverallTools.TreeViewFunctions.createBranch(distributionOriginatingName, distributionOriginatingName, TreeViewTag.getDirectoryNode(distributionOriginatingName), null);
                tnDwellTimes.Nodes.Add(tnDistributionOriginating);
            }
            MAJ_TableArbre(sScenarioName, PaxDistributionDeparture, tnDistributionOriginating, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionTimelineOriginating, tnDistributionOriginating, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, paxDistributionOriginatingSummary, tnDistributionOriginating, bEraseGraphicFilters, true);
            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, paxDistributionOriginatingSummary.TableName,
                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(paxDistributionOriginatingSummary.TableName, "ResultNode"));

            String distributionTransferName = "Pax Time Distribution Transfer";
            TreeNode tnDistributionTransfer = OverallTools.TreeViewFunctions.RechercherNomEnfants(distributionTransferName, tnDwellTimes);
            if (tnDistributionTransfer == null)
            {
                tnDistributionTransfer = OverallTools.TreeViewFunctions.createBranch(distributionTransferName, distributionTransferName, TreeViewTag.getDirectoryNode(distributionTransferName), null);
                tnDwellTimes.Nodes.Add(tnDistributionTransfer);
            }
            MAJ_TableArbre(sScenarioName, PaxDistributionTransfer, tnDistributionTransfer, bEraseGraphicFilters, true);            
            MAJ_TableArbre(sScenarioName, PaxDistributionTimelineTransfer, tnDistributionTransfer, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, paxDistributionTransferSummary, tnDistributionTransfer, bEraseGraphicFilters, true);
            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, paxDistributionTransferSummary.TableName,
                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(paxDistributionTransferSummary.TableName, "ResultNode"));

            String distributionOriginatingAndTransferName = "Pax Time Distribution Departing";
            TreeNode tnDistributionOriginatingAndTransfer = OverallTools.TreeViewFunctions.RechercherNomEnfants(distributionOriginatingAndTransferName, tnDwellTimes);
            if (tnDistributionOriginatingAndTransfer == null)
            {
                tnDistributionOriginatingAndTransfer = OverallTools.TreeViewFunctions.createBranch(distributionOriginatingAndTransferName, distributionOriginatingAndTransferName, TreeViewTag.getDirectoryNode(distributionOriginatingAndTransferName), null);
                tnDwellTimes.Nodes.Add(tnDistributionOriginatingAndTransfer);
            }
            MAJ_TableArbre(sScenarioName, PaxDistributionOriginatingAndTransfer, tnDistributionOriginatingAndTransfer, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionTimelineDeparture, tnDistributionOriginatingAndTransfer, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, paxDistributionOriginatingAndTransferSummary, tnDistributionOriginatingAndTransfer, bEraseGraphicFilters, true);
            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, paxDistributionOriginatingAndTransferSummary.TableName,
                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(paxDistributionOriginatingAndTransferSummary.TableName, "ResultNode"));

            /*            
            MAJ_TableArbre(sScenarioName, PaxDistribution, tnDwellTimes, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionMissed, tnDwellTimes, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionStopped, tnDwellTimes, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionLost, tnDwellTimes, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionTerminating, tnDwellTimes, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionDeparture, tnDwellTimes, bEraseGraphicFilters, true);
            MAJ_TableArbre(sScenarioName, PaxDistributionTransfer, tnDwellTimes, bEraseGraphicFilters, true);
             */
            // >> Task #8618 Pax2Sim - Dynamic Analysis - Pax - histograns and timeline tables for Dwell Area

            MAJ_TableArbre(sScenarioName, dtPaxIST, tnDwellTimes, bEraseGraphicFilters, true);
            if (bJNK)
            {
                SortedList slResult = ptaAnalysis.JNK_BHSUtilisation;
                InsertResults(sScenarioName, slResult, tnDwellTimes, bEraseGraphicFilters, false);
            }
            DataTable dtFPDStats = ptaAnalysis.dtDepartureFlightStatistics;
            if (dtFPDStats != null)
            {
                MAJ_TableArbre(sScenarioName, dtFPDStats, TreeRacine, bEraseGraphicFilters, true);
                if (ptaAnalysis.vmDepartureFlightStatistics != null)
                {
                    DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, dtFPDStats.TableName, ptaAnalysis.vmDepartureFlightStatistics);
                }
            }
            
            // >> Departure_Statistics, Arrival_Statistics segregate by Airline, Flight category            
            // >> Task #13206 Pax2Sim - Dynamic Analysis - Arrival Flight Statistics            
            /*if (ptaAnalysis.arrivalStats != null)
            {
                MAJ_TableArbre(sScenarioName, ptaAnalysis.arrivalStats, TreeRacine, bEraseGraphicFilters, true);
            }
            if (ptaAnalysis.departureStats != null)
            {
                MAJ_TableArbre(sScenarioName, ptaAnalysis.departureStats, TreeRacine, bEraseGraphicFilters, true);
            }*/
            // << Task #13206 Pax2Sim - Dynamic Analysis - Arrival Flight Statistics
            TreeNode priorDepartureStatsNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(VinciTools.DEPARTURE_STATS_TABLE_NAME, TreeRacine);
            if (priorDepartureStatsNode != null)
            {
                TreeRacine.Nodes.Remove(priorDepartureStatsNode);
            }
            if (ptaAnalysis.departureStats != null)
            {
                string departureStatsNodeName = "Departure Statistics Process Times";
                TreeNode departureStatsNode = addTablesToScenarioNode(departureStatsNodeName, TreeRacine,
                    sScenarioName, new List<DataTable> { ptaAnalysis.departureStats }, bEraseGraphicFilters);
                /*if (ptaAnalysis.departureStatsByAirline.Count > 0)
                {
                    string departureStatsByAirlineNodeName = "Segregation by Airline";
                    addTablesToScenarioNode(departureStatsByAirlineNodeName, departureStatsNode, sScenarioName, ptaAnalysis.departureStatsByAirline, bEraseGraphicFilters);
                }
                if (ptaAnalysis.departureStatsByFlightCategories.Count > 0)
                {
                    string departureStatsByFlightCategoriesNodeName = "Segregation by Flight Categories";
                    addTablesToScenarioNode(departureStatsByFlightCategoriesNodeName, departureStatsNode, sScenarioName, ptaAnalysis.departureStatsByFlightCategories, bEraseGraphicFilters);
                }*/
                if (ptaAnalysis.departureStatsSegregated.Count > 0)
                {
                    addTablesToScenarioNode(departureStatsNodeName, TreeRacine, sScenarioName, ptaAnalysis.departureStatsSegregated, bEraseGraphicFilters);
                }
                TreeNode priorNode = OverallTools.TreeViewFunctions.RechercherNomEnfants("Segregation by Airline", departureStatsNode);
                if (priorNode != null)
                {
                    departureStatsNode.Nodes.Remove(priorNode);
                }
                priorNode = OverallTools.TreeViewFunctions.RechercherNomEnfants("Segregation by Flight Categories", departureStatsNode);
                if (priorNode != null)
                {
                    departureStatsNode.Nodes.Remove(priorNode);
                }
            }
            TreeNode priorArrivalStatsNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(VinciTools.ARRIVAL_STATS_TABLE_NAME, TreeRacine);
            if (priorArrivalStatsNode != null)
            {
                TreeRacine.Nodes.Remove(priorArrivalStatsNode);
            }
            if (ptaAnalysis.arrivalStats != null)
            {
                string arrivalStatsNodeName = "Arrival Statistics Process Times";
                TreeNode arrivalStatsNode = addTablesToScenarioNode(arrivalStatsNodeName, TreeRacine, 
                    sScenarioName, new List<DataTable> { ptaAnalysis.arrivalStats }, bEraseGraphicFilters);
                /*if (ptaAnalysis.arrivalStatsByAirline.Count > 0)
                {
                    string arrivalStatsByAirlineNodeName = "Segregation by Airline";
                    addTablesToScenarioNode(arrivalStatsByAirlineNodeName, arrivalStatsNode, sScenarioName, ptaAnalysis.arrivalStatsByAirline, bEraseGraphicFilters);
                }
                if (ptaAnalysis.arrivalStatsByFlightCategories.Count > 0)
                {
                    string arrivalStatsByFlightCategoriesNodeName = "Segregation by Flight Categories";
                    addTablesToScenarioNode(arrivalStatsByFlightCategoriesNodeName, arrivalStatsNode, sScenarioName, ptaAnalysis.arrivalStatsByFlightCategories, bEraseGraphicFilters);
                }*/
                if (ptaAnalysis.arrivalStatsSegregated.Count > 0)
                {
                    addTablesToScenarioNode(arrivalStatsNodeName, TreeRacine, sScenarioName, ptaAnalysis.arrivalStatsSegregated, bEraseGraphicFilters);
                }
                TreeNode priorNode = OverallTools.TreeViewFunctions.RechercherNomEnfants("Segregation by Airline", arrivalStatsNode);
                if (priorNode != null)
                {
                    arrivalStatsNode.Nodes.Remove(priorNode);
                }
                priorNode = OverallTools.TreeViewFunctions.RechercherNomEnfants("Segregation by Flight Categories", arrivalStatsNode);
                if (priorNode != null)
                {
                    arrivalStatsNode.Nodes.Remove(priorNode);
                }
            }
            // << Departure_Statistics, Arrival_Statistics segregate by Airline, Flight category

            //if (ptaAnalysis.AllocationResults != null)    // >> Task #8958 Reclaim Synchronisation mode Gantt
            //    MAJ_TableArbre(sScenarioName, ptaAnalysis.AllocationResults, TreeRacine, bEraseGraphicFilters, false);
            //if (ptaAnalysis.AllocationMin != null)
            //{
            //    MAJ_TableArbre(sScenarioName, ptaAnalysis.AllocationMin, TreeRacine, bEraseGraphicFilters, false);
            //    DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, ptaAnalysis.AllocationMin.TableName, ptaAnalysis.AllocationVisualisation);            
            if (tnReclaimSync != null)
            {
                if (ptaAnalysis.AllocationReclaim != null)
                {
                    for (int i = 0; i < ptaAnalysis.AllocationReclaim.Length; i++)
                    {
                        MAJ_TableArbre(sScenarioName, ptaAnalysis.AllocationReclaim[i], tnReclaimSync, bEraseGraphicFilters, false);
                        DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, ptaAnalysis.AllocationReclaim[i].TableName, ptaAnalysis.AllocationReclaimVisualisation[i]);
                    }
                }
                if (ptaAnalysis.AllocationResults != null)
                    MAJ_TableArbre(sScenarioName, ptaAnalysis.AllocationResults, tnReclaimSync, bEraseGraphicFilters, false);
            }
            //}
            
            TreeNode Racine = MAJ_TableArbre(sScenarioName, (DataTable)htOccupation["Airport_Occupation"], TreeRacine, bEraseGraphicFilters, true);

            foreach (TreeNode tnTerminal in treeView1.Nodes[0].Nodes)
            {

                if (((TreeViewTag)tnTerminal.Tag).AirportObjectType != sTerminalName)
                    continue;
                TreeViewTag tvtTerminal = ((TreeViewTag)tnTerminal.Tag);
                //On définit le nom des terminaux qui seront affichés dans le treeview.
                String sTerminal = "T" + tvtTerminal.Index.ToString();
                String sTmpOccupation = sTerminal + "_Occupation";

                //On recherche dans le dossier.
                TreeNode tn3Terminal = OverallTools.TreeViewFunctions.RechercherNomEnfants(sTerminal, TreeRacine);
                if (tn3Terminal == null)
                {//S'il n'existe pas, on le créé et on l'ajoute à l'arbre.
                    tn3Terminal = OverallTools.TreeViewFunctions.createBranch(sTerminal, sTerminal, TreeViewTag.getResultNode(sScenarioName, sTerminal), contextMenuInput);
                    TreeRacine.Nodes.Add(tn3Terminal);
                }
                // << Task #7570 new Desk and extra information for Pax -Phase I B
                if (tvtTerminal != null && tvtTerminal.Name != null && tvtTerminal.Name.Length > 0)
                {
                    if (tn3Terminal.Text.Contains("(") && tn3Terminal.Text.Contains(")"))
                    {
                        tn3Terminal.Text = tn3Terminal.Text.Substring(0, tn3Terminal.Text.IndexOf("(")).Trim();
                        tn3Terminal.Text = tn3Terminal.Text + " ( " + tvtTerminal.Name + " ) ";
                    }
                    else
                    {
                        tn3Terminal.Text = tn3Terminal.Text + " ( " + tvtTerminal.Name + " ) ";
                    }
                }
                // >> Task #7570 new Desk and extra information for Pax -Phase I B

                TreeNode tnCapacity = OverallTools.TreeViewFunctions.RechercherNomEnfants("Capacity", tn3Terminal);
                if (tnCapacity == null)
                {
                    tnCapacity = OverallTools.TreeViewFunctions.createBranch("Capacity", "Capacity", TreeViewTag.getDirectoryNode("Capacity"), null);
                    tn3Terminal.Nodes.Add(tnCapacity);
                }
                foreach (String key in htCounters.Keys)
                {
                    if (key.StartsWith(sTerminal))
                    {
                        MAJ_TableArbre(sScenarioName, (DataTable)htCounters[key], tnCapacity, bEraseGraphicFilters, false);
                    }
                }
                MAJ_TableArbre(sScenarioName, (DataTable)htOccupation[sTmpOccupation], tn3Terminal, bEraseGraphicFilters, true);

                if (DeskInfo.ContainsKey(sTerminal))
                {
                    //DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sTerminal]).ToTable(DonneesEnCours.Levels), true); // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                    //DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, sTerminal, DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(sTerminal, "ResultNode"));

                    DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sTerminal]).toSummaryTable(percentiles, GlobalNames.TERMINAL_RESOURCE_TYPE_CODE), true); // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                    DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, sTerminal, DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(sTerminal, "ResultNode"));

/*
                    //added only for testing purposes - compare the results with the old summary which is still visible
                    // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                    DataTable terminalSummaryTable = ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sTerminal])
                        .toSummaryTable(DonneesEnCours.Levels, GlobalNames.TERMINAL_RESOURCE_TYPE_CODE);

                    MAJ_TableArbre(sScenarioName, terminalSummaryTable, tn3Terminal, bEraseGraphicFilters, true);

                    DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, terminalSummaryTable.TableName,
                        DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(terminalSummaryTable.TableName, "TableNode"));
                    // << Task #10484 Pax2Sim - Pax analysis - Summary with distribution levels percent
 */ 
                }
                foreach (TreeNode tnLevel in tnTerminal.Nodes)
                {

                    if (((TreeViewTag)tnLevel.Tag).AirportObjectType != sLevelName)
                        continue;

                    String sLevel = sTerminal + "L" + ((TreeViewTag)tnLevel.Tag).Index.ToString();
                    sTmpOccupation = sLevel + "_Occupation";

                    TreeNode tn3Level = OverallTools.TreeViewFunctions.RechercherNomEnfants(sLevel, tn3Terminal);                   
                    if (tn3Level == null)
                    {
                        //S'il n'existe pas, on le créé et on l'ajouter à l'arbre.
                        tn3Level = OverallTools.TreeViewFunctions.createBranch(sLevel, sLevel, TreeViewTag.getResultNode(sScenarioName, sLevel), contextMenuInput);                        
                        tn3Terminal.Nodes.Add(tn3Level);
                    }
                    // << Task #7570 new Desk and extra information for Pax -Phase I B                    
                    TreeViewTag aoLevel = (TreeViewTag)tnLevel.Tag;
                    if (aoLevel != null && aoLevel.Name != null && aoLevel.Name.Length > 0)
                    {
                        if (tn3Level.Text.Contains("(") && tn3Level.Text.Contains(")"))
                        {
                            tn3Level.Text = tn3Level.Text.Substring(0, tn3Level.Text.IndexOf("(")).Trim();
                            tn3Level.Text = tn3Level.Text + " ( " + aoLevel.Name + " ) ";
                        }
                        else
                        {
                            tn3Level.Text = tn3Level.Text + " ( " + aoLevel.Name + " ) ";
                        }
                    }
                    // >> Task #7570 new Desk and extra information for Pax -Phase I B

                    MAJ_TableArbre(sScenarioName, (DataTable)htOccupation[sTmpOccupation], tn3Level, bEraseGraphicFilters, true);

                    if (DeskInfo.ContainsKey(sLevel))
                    {
                        //DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sLevel]).ToTable(DonneesEnCours.Levels), true);    // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                        //DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, sLevel, DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(sLevel, "ResultNode"));

                        DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sLevel]).toSummaryTable(percentiles, GlobalNames.LEVEL_RESOURCE_TYPE_CODE), true);    // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                        DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, sLevel, DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(sLevel, "ResultNode"));
/*
                        //added only for testing purposes - compare the results with the old summary which is still visible
                        // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                        DataTable levelSummaryTable = ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sLevel])
                            .toSummaryTable(DonneesEnCours.Levels, GlobalNames.LEVEL_RESOURCE_TYPE_CODE);

                        MAJ_TableArbre(sScenarioName, levelSummaryTable, tn3Level, bEraseGraphicFilters, true);

                        DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, levelSummaryTable.TableName,
                            DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(levelSummaryTable.TableName, "TableNode"));
                        // << Task #10484 Pax2Sim - Pax analysis - Summary with distribution levels percent
 */ 
                    }

                    foreach (TreeNode tnGroups in tnLevel.Nodes)
                    {
                        TreeViewTag aoGroup = (TreeViewTag)tnGroups.Tag;
                        String sGroup = sLevel + "_" + aoGroup.AirportObjectType + " " + aoGroup.Index;
                        sTmpOccupation = sGroup + "_Occupation";

                        TreeNode tn3Group = OverallTools.TreeViewFunctions.RechercherNomEnfants(sGroup, tn3Level);
                        if (tn3Group == null)
                        {
                            //S'il n'existe pas, on le créé et on l'ajouter à l'arbre.
                            tn3Group = OverallTools.TreeViewFunctions.createBranch(sGroup, sGroup, TreeViewTag.getResultNode(sScenarioName, sGroup), contextMenuInput);
                            tn3Level.Nodes.Add(tn3Group);
                        }
                        // << Task #7570 new Desk and extra information for Pax -Phase I B
                        if (aoGroup != null && aoGroup.Name != null && aoGroup.Name.Length > 0)
                        {
                            if (tn3Group.Text.Contains("(") && tn3Group.Text.Contains(")"))
                            {
                                tn3Group.Text = tn3Group.Text.Substring(0, tn3Group.Text.IndexOf("(")).Trim();
                                tn3Group.Text = tn3Group.Text + " ( " + aoGroup.Name + " ) ";
                            }
                            else
                            {
                                tn3Group.Text = tn3Group.Text + " ( " + aoGroup.Name + " ) ";
                            }
                        }
                        // >> Task #7570 new Desk and extra information for Pax -Phase I B 

                        if (htOccupation.ContainsKey(sTmpOccupation))
                            MAJ_TableArbre(sScenarioName, (DataTable)htOccupation[sTmpOccupation], tn3Group, bEraseGraphicFilters, true);
                        //MAJ_TableArbre(Simulation.ScenarioName, (DataTable)htRepartition[sGroup + "_Repartition"], tn3Group);

                        // << Task #8589 Pax2Sim - Waiting Time Per Period of Time for PAX
                        string dwellTimeTableName = sGroup + GlobalNames.DWELL_TIME_TABLE_NAME_SUFIX;
                        if (htDwellTimeTables.Contains(dwellTimeTableName))
                        {
                            MAJ_TableArbre(sScenarioName, (DataTable)htDwellTimeTables[dwellTimeTableName], tn3Group, bEraseGraphicFilters, true);
                        }
                        // >> Task #8589 Pax2Sim - Waiting Time Per Period of Time for PAX

                        if (htTime.ContainsKey(sGroup + "_Time"))
                            MAJ_TableArbre(sScenarioName, (DataTable)htTime[sGroup + "_Time"], tn3Group, bEraseGraphicFilters, true);

                        if (htUtilization.ContainsKey(sGroup + "_Utilization"))
                            MAJ_TableArbre(sScenarioName, (DataTable)htUtilization[sGroup + "_Utilization"], tn3Group, bEraseGraphicFilters, true);
                        
                        // >> Task #13243 Pax2Sim - Dynamic simulation - Desk Plan Information
                        if (htDeskPlanInformationTables.ContainsKey(sGroup + VinciTools.DESK_PLAN_INFORMATION_TABLE_NAME_SUFFIX))
                            MAJ_TableArbre(sScenarioName, (DataTable)htDeskPlanInformationTables[sGroup + VinciTools.DESK_PLAN_INFORMATION_TABLE_NAME_SUFFIX], tn3Group, bEraseGraphicFilters, true);
                        // << Task #13243 Pax2Sim - Dynamic simulation - Desk Plan Information
                        
                        if (Remaining.ContainsKey(sGroup + "_Remaining"))
                            MAJ_TableArbre(sScenarioName, (DataTable)Remaining[sGroup + "_Remaining"], tn3Group, bEraseGraphicFilters, true);

                        if (IST.ContainsKey(sGroup + "_IST"))
                            MAJ_TableArbre(sScenarioName, IST[sGroup + "_IST"], tn3Group, bEraseGraphicFilters, true);
                        
                        if (DeskInfo.ContainsKey(sGroup))
                        {
                            //DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sGroup]).ToTable(DonneesEnCours.Levels), true);    // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                            //DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, sGroup, DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(sGroup, "ResultNode"));

                            DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sGroup]).toSummaryTable(percentiles, GlobalNames.GROUP_RESOURCE_TYPE_CODE), true);    // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, sGroup, DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(sGroup, "ResultNode"));

/*
                            //added only for testing purposes - compare the results with the old summary which is still visible
                            // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                            DataTable groupSummaryTable = ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sGroup])
                                .toSummaryTable(DonneesEnCours.Levels, GlobalNames.GROUP_RESOURCE_TYPE_CODE);

                            MAJ_TableArbre(sScenarioName, groupSummaryTable, tn3Group, bEraseGraphicFilters, true);

                            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, groupSummaryTable.TableName,
                                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(groupSummaryTable.TableName, "TableNode"));
                            // << Task #10484 Pax2Sim - Pax analysis - Summary with distribution levels percent
 */ 
                        }

                        TreeNode tnDesks = OverallTools.TreeViewFunctions.RechercherNomEnfants("Details", tn3Group);
                        if (tnDesks == null)
                        {
                            tnDesks = OverallTools.TreeViewFunctions.CreateDirectory("Details");
                            tn3Group.Nodes.Add(tnDesks);
                        }

                        foreach (TreeNode tnDesk in tnGroups.Nodes)
                        {
                            TreeViewTag aoDesk = (TreeViewTag)tnDesk.Tag;
                            String sDesk = sLevel + "_" + aoDesk.AirportObjectType + " " + aoDesk.Index;
                            sTmpOccupation = sDesk + "_Occupation";


                            TreeNode tn3Desk = OverallTools.TreeViewFunctions.RechercherNomEnfants(sDesk, tnDesks);
                            if (tn3Desk == null)
                            {
                                //S'il n'existe pas, on le créé et on l'ajoute à l'arbre.
                                tn3Desk = OverallTools.TreeViewFunctions.createBranch(sDesk, sDesk, TreeViewTag.getResultNode(sScenarioName, sDesk), contextMenuInput);
                                tnDesks.Nodes.Add(tn3Desk);
                            }
                            // << Task #7570 new Desk and extra information for Pax -Phase I B
                            if (aoDesk != null && aoDesk.Name != null && aoDesk.Name.Length > 0)
                            {
                                if (tn3Desk.Text.Contains("(") && tn3Desk.Text.Contains(")"))
                                {
                                    tn3Desk.Text = tn3Desk.Text.Substring(0, tn3Desk.Text.IndexOf("(")).Trim();
                                    tn3Desk.Text = tn3Desk.Text + " ( " + aoDesk.Name + " )";
                                }
                                else
                                {
                                    tn3Desk.Text = tn3Desk.Text + " ( " + aoDesk.Name + " )";
                                }
                            }
                            // >> Task #7570 new Desk and extra information for Pax -Phase I B
                            
                            if (!htOccupation.ContainsKey(sTmpOccupation))
                                continue;
                            if (htOccupation[sTmpOccupation] == null)
                                continue;
                            if (htOccupation.Contains(sTmpOccupation))
                                MAJ_TableArbre(sScenarioName, (DataTable)htOccupation[sTmpOccupation], tn3Desk, bEraseGraphicFilters, true);

                            sTmpOccupation = sDesk + "_Time";
                            if (htTime.Contains(sTmpOccupation))
                                MAJ_TableArbre(sScenarioName, (DataTable)htTime[sTmpOccupation], tn3Desk, bEraseGraphicFilters, true);

                            sTmpOccupation = sDesk + "_IST";
                            if (IST.ContainsKey(sTmpOccupation))
                                MAJ_TableArbre(sScenarioName, IST[sTmpOccupation], tn3Desk, bEraseGraphicFilters, true);

                            sTmpOccupation = sDesk + "_Utilization";
                            if (htUtilization.Contains(sTmpOccupation))
                                MAJ_TableArbre(sScenarioName, (DataTable)htUtilization[sTmpOccupation], tn3Desk, bEraseGraphicFilters, true);

                            // >> Task #13243 Pax2Sim - Dynamic simulation - Desk Plan Information
                            sTmpOccupation = sDesk + VinciTools.DESK_PLAN_INFORMATION_TABLE_NAME_SUFFIX;
                            if (htDeskPlanInformationTables.Contains(sTmpOccupation))
                                MAJ_TableArbre(sScenarioName, (DataTable)htDeskPlanInformationTables[sTmpOccupation], tn3Desk, bEraseGraphicFilters, true);
                            // << Task #13243 Pax2Sim - Dynamic simulation - Desk Plan Information

                            sTmpOccupation = sDesk + "_Remaining";
                            if (Remaining.Contains(sTmpOccupation))
                                MAJ_TableArbre(sScenarioName, (DataTable)Remaining[sTmpOccupation], tn3Desk, bEraseGraphicFilters, true);
                            // << Task #8589 Pax2Sim - Waiting Time Per Period of Time for PAX
                            dwellTimeTableName = sDesk + GlobalNames.DWELL_TIME_TABLE_NAME_SUFIX;
                            if (htDwellTimeTables.Contains(dwellTimeTableName))
                            {
                                MAJ_TableArbre(sScenarioName, (DataTable)htDwellTimeTables[dwellTimeTableName], tn3Desk, bEraseGraphicFilters, true);
                            }
                            // >> Task #8589 Pax2Sim - Waiting Time Per Period of Time for PAX
                            /*
                            DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sDesk]).ToTable(DonneesEnCours.Levels), true); // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, sDesk, DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(sDesk, "ResultNode"));
                            //DonneesEnCours.setStatistic(Simulation.ScenarioName,sDesk,(OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sDesk]);
                            */

                            DonneesEnCours.AddReplaceTable(sScenarioName, ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sDesk]).toSummaryTable(percentiles, GlobalNames.DESK_RESOURCE_TYPE_CODE), true); // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, sDesk, DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(sDesk, "ResultNode"));

/*
                            //added only for testing purposes - compare the results with the old summary which is still visible
                            // >> Task #10440 Pax2Sim - Pax analysis - missing KPIs part 1
                            DataTable deskSummaryTable = ((OverallTools.PaxTraceAnalysis.DeskReport)DeskInfo[sDesk])
                                .toSummaryTable(DonneesEnCours.Levels, GlobalNames.DESK_RESOURCE_TYPE_CODE);

                            MAJ_TableArbre(sScenarioName, deskSummaryTable, tn3Desk, bEraseGraphicFilters, true);

                            DonneesEnCours.AddReplaceModeVisualisation(sScenarioName, deskSummaryTable.TableName,
                                DataManagement.DataManagerScenario.ArboNode.getVisualisationMode(deskSummaryTable.TableName, "TableNode"));
                            // << Task #10484 Pax2Sim - Pax analysis - Summary with distribution levels percent
 */ 
                        }
                    }
                }
            }
            // >> Bug #13276 Pax2Sim - Dynamic Analysis - Targets updated at recalculation
            if (tnTarget != null)
            {
                List<DataTable> targetTables = TargetTools.getAllTargetTablesByTargetDirectory(tnTarget, sScenarioName, DonneesEnCours);
                if (targetTables != null && targetTables.Count > 0)
                {
                    foreach (DataTable targetTable in targetTables)
                    {
                        TargetTools.updateTargetTable(targetTable, sScenarioName, DonneesEnCours);
                    }
                    TargetOverview.refreshTargetOverviewTable(tnTarget, DonneesEnCours);
                }
            }
            // << Bug #13276 Pax2Sim - Dynamic Analysis - Targets updated at recalculation
            return true;
        }

        // >> Departure_Statistics, Arrival_Statistics segregate by Airline, Flight category
        private TreeNode addTablesToScenarioNode(string nodeName, TreeNode parentNode, string scenarioName, List<DataTable> tables,
            bool bEraseGraphicFilters)
        {
            if (nodeName == null || parentNode == null || tables == null)
            {
                return null;
            }

            TreeNode node = OverallTools.TreeViewFunctions.RechercherNomEnfants(nodeName, parentNode);
            if (node == null)
            {
                node = OverallTools.TreeViewFunctions.createBranch(nodeName, nodeName, TreeViewTag.getDirectoryNode(nodeName), null);
                parentNode.Nodes.Add(node);
            }
            foreach (DataTable table in tables)
            {
                MAJ_TableArbre(scenarioName, table, node, bEraseGraphicFilters, true);
            }
            return node;
        }
        // << Departure_Statistics, Arrival_Statistics segregate by Airline, Flight category

        private bool InsertResults(String sSenarioName, SortedList slResult,TreeNode tnRoot, bool bEraseGraphicsFilters, bool CalculatedFromTrace)
        {
            foreach (String sName in slResult.Keys)
            {
                if (slResult[sName] == null)
                {
                }
                else if (slResult[sName].GetType() == typeof(DataTable))
                {
                    MAJ_TableArbre(sSenarioName, (DataTable)slResult[sName], tnRoot, bEraseGraphicsFilters, CalculatedFromTrace);
                }
                else if (slResult[sName].GetType() == typeof(SortedList))
                {
                    TreeNode tnCapacity = OverallTools.TreeViewFunctions.RechercherNomEnfants(sName, tnRoot);
                    if (tnCapacity == null)
                    {
                        tnCapacity = OverallTools.TreeViewFunctions.createBranch(sName, sName, TreeViewTag.getDirectoryNode(sName), null);
                        tnRoot.Nodes.Add(tnCapacity);
                    }
                    if (!InsertResults(sSenarioName, (SortedList)slResult[sName], tnCapacity, bEraseGraphicsFilters, CalculatedFromTrace))
                        return false;
                }
            }
            return true;
        }
        private TreeNode MAJ_TableArbre(String ScenarioName, DataTable Table, TreeNode Racine, bool bEraseGraphicFilters, bool CalculatedFromTrace)
        {
            if (Table == null)
                return null;
            TreeNode result = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(Table.TableName, Racine);
            if (result == null)
            {
                //Si elle n'existe pas, on l'ajoute à la table.
                result = DonneesEnCours.AddReplaceScenarioResultsTableTree(ScenarioName, Racine, Table.TableName, contextMenuInput, Table, CalculatedFromTrace);

                if (Table.TableName.IndexOf("Utilization") != -1)
                {
                    if (Table.TableName.IndexOf("Group") != -1)
                    {
                        DonneesEnCours.AddReplaceModeVisualisation(ScenarioName, Table.TableName, GestionDonneesHUB2SIM.UtilizationGroupTableVisualisationMode);
                    }
                    else
                    {
                        DonneesEnCours.AddReplaceModeVisualisation(ScenarioName, Table.TableName, GestionDonneesHUB2SIM.UtilizationTableVisualisationMode);
                    }
                }
            }
            else
            {
                //Sinon on met à jour la table et tous les enfants de cette table.
                DonneesEnCours.ReplaceTable(ScenarioName, Table, CalculatedFromTrace);
                DonneesEnCours.aEteModifiee(ScenarioName, Table.TableName);
            }

            if ((DonneesEnCours.getGraphicFilter(ScenarioName, Table.TableName) == null) || bEraseGraphicFilters)
            {
                if (!Table.TableName.EndsWith(GlobalNames.VIEW_STATS_TABLE_SUFFIX)) // >> Task #10254 Pax2Sim - View statistics option
                {
                    if ((Table.TableName.IndexOf("Time") != -1) || (Table.TableName.IndexOf("Remaining") != -1) ||
                    (Table.TableName.IndexOf("Distribution") != -1) || (Table.TableName.IndexOf("Distrib") != -1) ||
                    (Table.TableName.IndexOf("Dwell Area") != -1) ||    // << Task #8618 Pax2Sim - Dynamic Analysis - Pax - histograns and timeline tables for Dwell Area
                    (bJNK && ((Table.TableName.IndexOf("Global") != -1) || (Table.TableName.IndexOf("Originating") != -1) ||
                    (Table.TableName.IndexOf("Transferring") != -1) || (Table.TableName.IndexOf("Terminating") != -1))))
                    {
                        DonneesEnCours.AddReplaceGraphicFilter(ScenarioName, GraphicFilter.getGraphicFilterRepartition(Table));
                    }
                    else if ((Table.TableName.IndexOf("Occupation") != -1) || (Table.TableName.IndexOf("Utilization") != -1))
                    {
                        DonneesEnCours.AddReplaceGraphicFilter(ScenarioName, GraphicFilter.getGraphicFilter(Table));
                    }
                    else if (Table.TableName.EndsWith("IST"))
                    {
                        DonneesEnCours.AddReplaceGraphicFilter(ScenarioName, GraphicFilter.getGraphicFilter(Table));
                    }
                }
            }

            return result;
        }


        /// <summary>
        /// Détruit récursivement toutes les tables contenues dans le treenode sélectionné, si le nom n'apparait
        /// pas dans les hashtable de résultat.
        /// </summary>
        /// <param name="Racine"></param>
        private bool RemoveAllTable(TreeNode Racine,
                                    Hashtable dwellTimesDirectoryResults,
                                    Hashtable Results,
                                    Hashtable Results2,
                                    Hashtable Results3,
                                    Hashtable Results4,
                                    Hashtable Results5,
                                    Dictionary<string, DataTable> IST,
                                    DataTable dtCorridorOccupation,
                                    DataTable dtAirportOccupation,
                                    Hashtable deskPlanInformationResults)   // >> Task #13243 Pax2Sim - Dynamic simulation - Desk Plan Information
        {
            int i = 0;
            while (i < Racine.Nodes.Count)
            {
                if (!RemoveAllTable(Racine.Nodes[i], dwellTimesDirectoryResults, Results, Results2, Results3, Results4, Results5, IST, dtCorridorOccupation, dtAirportOccupation, deskPlanInformationResults))
                    i++;
            }
            if (Racine.Tag != null)
            {
                TreeViewTag tvtTag = (TreeViewTag)Racine.Tag;
                if (tvtTag.isDirectoryNode)
                    return false;
                if (tvtTag.isResultNode)
                {
                    DonneesEnCours.RemoveTable(tvtTag.ScenarioName, Racine.Name);
                    //DonneesEnCours.setStatistic(tvtTag.ScenarioName, Racine.Name, null);
                }
                else if (tvtTag.isTableNode)
                {
                    if (((dwellTimesDirectoryResults.ContainsKey(Racine.Name) && (dwellTimesDirectoryResults[Racine.Name] != null))) ||
                        ((Results.ContainsKey(Racine.Name) && (Results[Racine.Name] != null))) ||
                        ((Results2.ContainsKey(Racine.Name) && (Results2[Racine.Name] != null))) ||
                        ((Results3.ContainsKey(Racine.Name) && (Results3[Racine.Name] != null))) ||
                        ((Results4.ContainsKey(Racine.Name) && (Results4[Racine.Name] != null))) ||
                        ((Results5.ContainsKey(Racine.Name) && (Results5[Racine.Name] != null))) ||
                        ((deskPlanInformationResults.ContainsKey(Racine.Name) && (deskPlanInformationResults[Racine.Name] != null))) ||
                        ((IST.ContainsKey(Racine.Name) && (IST[Racine.Name] != null))) ||
                        (dtCorridorOccupation.TableName == Racine.Name) || (dtAirportOccupation.TableName == Racine.Name))
                    {
                        return false;
                    }
                    if (DonneesEnCours.GetScenario(tvtTag.ScenarioName) != null)
                    {
                        if (DonneesEnCours.getFilter(tvtTag.ScenarioName, Racine.Name) == null)
                        {
                            DonneesEnCours.RemoveTable(tvtTag.ScenarioName, Racine.Name);
                            Racine.Remove();
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        #region Functions for the reporter mode.
        private void ReporterFunction(bool bSelectedScenario)
        {
            TreeViewTag tvt = null;
            if (bSelectedScenario)
                tvt = CheckCurrentNode();
            String sScenario = null;
            if (tvt != null)
                sScenario = tvt.Name;
            Prompt.TraceAnalyser taTrace = new SIMCORE_TOOL.Prompt.TraceAnalyser(DonneesEnCours, sScenario);
            if (taTrace.ShowDialog() != DialogResult.OK)
                return;
           
            SIMCORE_TOOL.Classes.ParamScenario ps = taTrace.getAnalysis();
            GestionScenarios(ps);

            insertReporterResult(ps, taTrace.getAnalysisClass());
          
           
        }
        private void insertReporterResult(SIMCORE_TOOL.Classes.ParamScenario psScenario,
            SIMCORE_TOOL.Prompt.TraceAnalyser.TraceAnalysis taTrace)
        {
            TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(psScenario.Name, treeView1.Nodes[2]);
            if (ScenarioPosition == null)
                return;
            ScenarioPosition.Nodes.Clear();
            taTrace.GenerateDirectories(ScenarioPosition, null);
            if (taTrace.Results != null)
                InsertTraceResults(psScenario.Name, ScenarioPosition, taTrace.Results, true);
        }
        private bool InsertTraceResults(String sName, TreeNode ScenarioNode, Hashtable htResults)
        {
            return InsertTraceResults(sName, ScenarioNode, htResults, false);
        }
        private bool InsertTraceResults(String sName, TreeNode ScenarioNode,Hashtable htResults, bool bSimReporter)
        {
            if (htResults == null)
                return false;
            
            foreach (String skey in htResults.Keys)
            {
                String sTmp = skey.Split('_')[0];
                TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(sTmp, ScenarioNode);
                if (sTmp == "Global")
                {
                    if (OverallTools.TreeViewFunctions.RechercherNom(skey, ScenarioNode) == null)
                    {
                        OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                            OverallTools.TreeViewFunctions.createBranch(skey, skey,
                                TreeViewTag.getTableNode(sName, skey), contextMenuInput), false, true, true);
                    }
                    DonneesEnCours.AddReplaceTable(sName, (DataTable)htResults[skey], true);
                    if ((DonneesEnCours.getGraphicFilter(sName, skey) == null)/* || (bEraseGraphicFilters)*/)
                        DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getBHSOccupationGraphicFilter((DataTable)htResults[skey]));
                    continue;
                }
                if (tmp == null)
                {
                    if (bSimReporter)
                    {
                        if (OverallTools.TreeViewFunctions.RechercherNom(skey, ScenarioNode) == null)
                        {
                            OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                                  OverallTools.TreeViewFunctions.createBranch(skey, skey,
                                      TreeViewTag.getTableNode(sName, skey), contextMenuInput), false, true, true);
                        }
                        DonneesEnCours.AddReplaceTable(sName, (DataTable)htResults[skey], true);
                    }
                    continue;
                }

                if (skey.EndsWith("RemainingTime"))
                    tmp = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(sTmp, tmp);
                if (sTmp != OverallTools.BagTraceAnalysis.OriginatingTransferSorterName)//"Sorter") // >> #13391 IST Tables standardization - sorter occupation
                {
                    tmp = FindBHSNode(skey, tmp);
                }
                if (OverallTools.TreeViewFunctions.RechercherNom(skey, tmp) == null)//DonneesEnCours.tableEstPresente(sName, skey))
                {
                    OverallTools.TreeViewFunctions.AddSortedNode(tmp,
                        OverallTools.TreeViewFunctions.createBranch(skey, skey,
                            TreeViewTag.getTableNode(sName, skey), contextMenuInput), false, true, true);
                }
                DonneesEnCours.AddReplaceTable(sName, (DataTable)htResults[skey], true);
                if (skey.EndsWith("_Statistics"))
                    DonneesEnCours.AddReplaceModeVisualisation(sName, skey, GestionDonneesHUB2SIM.StaticRapportVisualisationMode);

                if ((DonneesEnCours.getGraphicFilter(sName, skey) != null)/* && (!bEraseGraphicFilters)*/)
                    continue;

                if (skey.Contains("Remaining_Time") || skey.Contains("RemainingTime"))
                {
                    DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getBHSRemainingDistribution((DataTable)htResults[skey], /*"Distrib. (%)"*/"%_Nb Bags"));
                }
                else if ((skey.Contains("Occupation")) || (skey.EndsWith("Queue")) || (skey.EndsWith("Collector")))
                {
                    DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getBHSOccupationGraphicFilter((DataTable)htResults[skey]));
                }
                else if ((skey.Contains("Dep")) || (skey.Contains("Distribution")) || (skey.Contains("Orig")) || (skey.Contains("Term")) || (skey.Contains("Transf")))
                {
                    DonneesEnCours.AddReplaceGraphicFilter(sName, GraphicFilter.getGraphicFilterRepartition((DataTable)htResults[skey]));
                }
            }
            return true;
        }
        #endregion

        #region Function for the Parking scenarios
        private void ParkingAllocation(String sName)
        {
            if ((bRuntime) && (sName == ""))
                return;
            if((sName!= null) && (sName != "") && (DonneesEnCours.GetDataManager(sName)!=null))
            {
                DataManagement.DataManager dmManager = DonneesEnCours.GetDataManager(sName);
                if(!typeof(DataManagement.DataManagerParking).IsInstanceOfType(dmManager))
                {
                    MessageBox.Show("This scenario is not a valid scenario for Parking analysis. Please create a new scenario or select a valid scenario.","Warning",MessageBoxButtons.OK,MessageBoxIcon.Exclamation);
                    return;
                }
            }

            Parking.ParkingScenario psScenario = new Parking.ParkingScenario(DonneesEnCours, sName);
            if (psScenario.ShowDialog() != System.Windows.Forms.DialogResult.OK)
                return;
            DataTable dtGeneral =null;
            DataTable dtOccupationTime=null;
            DataTable dtModaleRepartition=null;
            DataTable dtDistributRT=null;
            //if((sName!= null) && (sName != "") )
            {
                dtGeneral = DonneesEnCours.getTable(psScenario.ScenarioName, GlobalNames.sParkingGeneralName);
                dtOccupationTime = DonneesEnCours.getTable(psScenario.ScenarioName, GlobalNames.sParkingOccupationTimeName);
                dtModaleRepartition = DonneesEnCours.getTable(psScenario.ScenarioName, GlobalNames.sParkingModaleDistribName);
                dtDistributRT = DonneesEnCours.getTable(psScenario.ScenarioName, GlobalNames.sParkingDitributionTimeName);
            }
            if(psScenario.UseDistributionTable)
                dtDistributRT = DonneesEnCours.getTable("Input", psScenario.DistributionTable);
            if (psScenario.UseGeneralTable)
                dtGeneral = DonneesEnCours.getTable("Input", psScenario.GeneralTable);
            if (psScenario.UseOccupationTable)
                dtOccupationTime = DonneesEnCours.getTable("Input", psScenario.OccupationTable);
            if (psScenario.UseModadDistributionTable)
                dtModaleRepartition = DonneesEnCours.getTable("Input", psScenario.ModadDistributionTable);

            dtGeneral = dtGeneral.Copy();
            dtOccupationTime = dtOccupationTime.Copy();
            dtModaleRepartition = dtModaleRepartition.Copy();
            dtDistributRT = dtDistributRT.Copy();


            /**/
            Parking.ParkingAnalysis park = new Parking.ParkingAnalysis(dtGeneral,
                dtOccupationTime,
                dtModaleRepartition,
                dtDistributRT);
            park.ShowDialog();
            park.Save();
            if (MessageBox.Show("Do you want to save the modifications in the InputTable used for the calcs?", "Save", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.Yes)
            {
                DonneesEnCours.UpdateTable("Input", psScenario.DistributionTable, dtDistributRT);
                DonneesEnCours.UpdateTable("Input", psScenario.GeneralTable, dtGeneral);
                DonneesEnCours.UpdateTable("Input", psScenario.OccupationTable, dtOccupationTime);
                DonneesEnCours.UpdateTable("Input", psScenario.ModadDistributionTable, dtModaleRepartition);
            }
            if (DonneesEnCours.GetDataManager(psScenario.ScenarioName) == null)
            {
                DonneesEnCours.AddScenario(psScenario.ScenarioName, psScenario.ScenarioName,
                    dtGeneral,
                    dtDistributRT,
                    dtModaleRepartition,
                    dtOccupationTime);
            }
            else
            {
                DonneesEnCours.UpdateTable(sName, GlobalNames.sParkingDitributionTimeName, dtDistributRT);
                DonneesEnCours.UpdateTable(sName, GlobalNames.sParkingGeneralName, dtGeneral);
                DonneesEnCours.UpdateTable(sName, GlobalNames.sParkingOccupationTimeName, dtOccupationTime);
                DonneesEnCours.UpdateTable(sName, GlobalNames.sParkingModaleDistribName, dtModaleRepartition);
            }
            GestionScenarios(psScenario.ScenarioName);
            TreeNode ScenarioNode = CurrentNode;

            TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.sParkingGeneralName, ScenarioNode);
            if (tmp == null)
            {
                OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                           OverallTools.TreeViewFunctions.createBranch(GlobalNames.sParkingGeneralName, GlobalNames.sParkingGeneralName,
                               TreeViewTag.getTableNode(psScenario.ScenarioName, GlobalNames.sParkingGeneralName), contextMenuInput), false, true, true);

            }
            tmp = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.sParkingOccupationTimeName, ScenarioNode);
            if (tmp == null)
            {
                OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                           OverallTools.TreeViewFunctions.createBranch(GlobalNames.sParkingOccupationTimeName, GlobalNames.sParkingOccupationTimeName,
                               TreeViewTag.getTableNode(psScenario.ScenarioName, GlobalNames.sParkingOccupationTimeName), contextMenuInput), false, true, true);

            }
            tmp = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.sParkingModaleDistribName, ScenarioNode);
            if (tmp == null)
            {
                OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                           OverallTools.TreeViewFunctions.createBranch(GlobalNames.sParkingModaleDistribName, GlobalNames.sParkingModaleDistribName,
                               TreeViewTag.getTableNode(psScenario.ScenarioName, GlobalNames.sParkingModaleDistribName), contextMenuInput), false, true, true);

            }
            tmp = OverallTools.TreeViewFunctions.RechercherNom(GlobalNames.sParkingDitributionTimeName, ScenarioNode);
            if (tmp == null)
            {
                OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                           OverallTools.TreeViewFunctions.createBranch(GlobalNames.sParkingDitributionTimeName, GlobalNames.sParkingDitributionTimeName,
                               TreeViewTag.getTableNode(psScenario.ScenarioName, GlobalNames.sParkingDitributionTimeName), contextMenuInput), false, true, true);

            }
        }
        #endregion

        // >> Task #13955 Pax2Sim -BHS trace loading issue
        internal static bool loadingScenarioToShowObject = false;
        internal static bool generateLocalISTForBHS = false;
        internal static bool generateGroupISTForBHS = false;    // >> Task #14280 Bag Trace Loading time too long
        internal static bool generateMUPSegregationForBHS = false;    // >> Task #14280 Bag Trace Loading time too long
        internal static bool copyOutputTables = false;  // >> Bug #15291 Pax2Sim - BHS Analysis - _Times statistics From Entry to Exit
        internal static List<AnalysisResultFilter> tempResultFilters = new List<AnalysisResultFilter>();    // >> Bug #15291 Pax2Sim - BHS Analysis - _Times statistics From Entry to Exit
        internal static bool useTempResultFilters = false;    // >> Bug #15291 Pax2Sim - BHS Analysis - _Times statistics From Entry to Exit

        // << Task #13955 Pax2Sim -BHS trace loading issue
        internal void AnalyseResults(SIMCORE_TOOL.Classes.ParamScenario psParams,
            GestionDonneesHUB2SIM ghdData, 
            String sPaxTraceLocation, 
            String sBagTraceLocation)
        {            
            if (psParams == null)
                return;
            SIMCORE_TOOL.Prompt.SIM_Chargement cht = null;
            if (!bDebug)
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                cht.setChenillard = true;
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
                cht.setFileNumber(100);
            }
            Hashtable htBagsRes = null;
            List<String> Names = null;
            if (psParams.BHSSimulation)
            {
                // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Analyzing baggage results");
                // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps

                // >> Task #9936 Pax2Sim - project properties saved specifically for each scenario + Times stats Spec
                double percentile1 = -1;
                double percentile2 = -1;
                double percentile3 = -1;
                if (psParams.percentilesLevels == null || psParams.percentilesLevels.Count == 0)
                {
                    percentile1 = ghdData.Levels[0];
                    percentile2 = ghdData.Levels[1];
                    percentile3 = ghdData.Levels[2];
                }
                else if (psParams.percentilesLevels.Count == 3)
                {
                    percentile1 = psParams.percentilesLevels[0];
                    percentile2 = psParams.percentilesLevels[1];
                    percentile3 = psParams.percentilesLevels[2];
                }
                // << Task #9936 Pax2Sim - project properties saved specifically for each scenario + Times stats Spec

                OverallTools.BagTraceAnalysis btaBagAnalysis = new OverallTools.BagTraceAnalysis(psParams.Name, sBagTraceLocation, psParams.WarmUp * 60, percentile1, percentile2, percentile3, psParams);
                Double dEndingTime = OverallTools.DataFunctions.MinuteDifference(psParams.DateDebut, psParams.DateFin);
                if (!btaBagAnalysis.OpenBagTrace(dEndingTime, psParams.SaveTraceMode, cht))
                {
                    if (cht != null)
                        cht.KillWindow();
                    MessageBox.Show("Unable to process the baggage trace.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                    OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Unable to process the baggage trace.");
                    // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps                    
                    return;
                }
                // >> Task #13955 Pax2Sim -BHS trace loading issue
                if (PAX2SIM.loadingScenarioToShowObject)
                {
                    psParams.bhsGenerateLocalIST = PAX2SIM.generateLocalISTForBHS;
                    psParams.bhsGenerateGroupIST = PAX2SIM.generateGroupISTForBHS;  // >> Task #14280 Bag Trace Loading time too long
                    psParams.bhsGenerateMUPSegregation = PAX2SIM.generateMUPSegregationForBHS;  // >> Task #14280 Bag Trace Loading time too long
                    psParams.SaveTraceMode = !PAX2SIM.copyOutputTables;
                }
                // << Task #13955 Pax2Sim -BHS trace loading issue
                XmlNode airportStructure = DonneesEnCours.getRacine();  // >> Task #13659 IST MakeUp segregation
                htBagsRes = btaBagAnalysis.GenerateResults(psParams.DateDebut, psParams.DateFin, psParams.SamplingStep,
                    1, 31, cht, psParams.AnalysisRange, psParams.bhsGenerateLocalIST, psParams.bhsGenerateGroupIST,
                    psParams.bhsGenerateMUPSegregation, airportStructure, psParams.analysisResultsFilters,
                    psParams.analysisResultsFiltersSplittedByFlow, psParams.flowTypes, psParams.percentilesLevels);  // << Task #8775 Pax2Sim - Occupation stat - Throughput calculation // >> Task #13955 Pax2Sim -BHS trace loading issue    // >> Task #14280 Bag Trace Loading time too long
                Names = btaBagAnalysis.Names;

                // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Baggage results analysis finished");
                // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                saveTracesTables(psParams.Name, sBagTraceLocation);
                addFlightPlanStatisticsForBHS(psParams, htBagsRes);   // >> Task #19467
                if (btaBagAnalysis.alErrorList.Count > 0)   // >> Bug #14134 BHS Trace not analyzed without warning
                {
                    errorList = new ArrayList(btaBagAnalysis.alErrorList);
                    if (lesErreurs == null)
                    {
                        lesErreurs = new Errors(btaBagAnalysis.alErrorList);
                        lesErreurs.Location = this.Location;
                    }
                    else
                    {
                        lesErreurs.setErrors(btaBagAnalysis.alErrorList);
                    }
                    lesErreurs.Show();                    
                }
                btaBagAnalysis = null;  // << Task #9249 Pax2Sim - Simulation - Optimise memory usage
            }

            OverallTools.PaxTraceAnalysis htPaxResults = null;
            if (psParams.PaxSimulation)
            {
                if (cht != null)
                {
                    //cht.ChargementFichier("Recalculating all results tables...");
                    cht.ChargementFichier("Scenario \"" + psParams.Name + "\": Recalculating all results tables...");  // >> Task #16728 PAX2SIM Improvements (Recurring) C#13
                }
                // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Analyzing passenger results");
                // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps

                htPaxResults = OverallTools.PaxTraceAnalysis.AnalysePaxTrace(psParams.Name,
                    sPaxTraceLocation, null, DonneesEnCours, psParams.SamplingStep, psParams.WarmUp * 60,
                    psParams.SaveTraceMode, false);

                if (htPaxResults == null)
                {
                    //<< Task A2XQ-T31- Wrapped the code inside the if block to avoid error pop up message.
                    if (cht != null)
                    {
                        cht.KillWindow();
                        if (bDebug)
                        {
                            MessageBox.Show("Unable to process the passenger trace.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                        OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Unable to process the passenger trace.");
                        // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                    }

                    //if (cht != null)
                    //{
                    //    cht.KillWindow();
                    //    // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                    //    //OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Unable to process the passenger trace.");
                    //    // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                    //}
                    //if (cht == null && !bDebug)
                    //{
                    //    MessageBox.Show("Unable to process the passenger trace.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    //    // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                    //    OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Unable to process the passenger trace.");
                    //    // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                    //}

                    return;
                }
                htPaxResults.GenerateAllTable(treeView1.Nodes[0], DonneesEnCours, psParams.Name, psParams.SamplingStep, psParams.percentilesLevels);  // >> Task #10484 Pax2Sim - Pax analysis - Summary with distribution levels percent

                // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
                OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Passenger results analysis finished");
                // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
            }

            if (cht != null)
                cht.KillWindow();

            // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
            OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Analyse Statistics");
            // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps

            AnalyseStatistics(htBagsRes,Names, htPaxResults,DonneesEnCours, psParams, true);

            // << Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps
            OverallTools.ExternFunctions.PrintLogFile(psParams.Name + " : " + "Statistics analysis finished");
            // >> Task #9251 Pax2Sim - Simulation - print in the Log the simulation steps

            OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres, 
                treeView1.Nodes, DonneesEnCours, cmsReports); // >> Task #13384 Report Tree-view
            
            // << Task #9249 Pax2Sim - Simulation - Optimise memory usage            
            htBagsRes = null;
            htPaxResults = null;
            psParams = null;
             
            System.GC.Collect();
            System.GC.WaitForPendingFinalizers();
            // >> Task #9249 Pax2Sim - Simulation - Optimise memory usage
        }

        private void AnalyseStatistics(Hashtable htBagsResults,
                                List<String> lsNames,
                                OverallTools.PaxTraceAnalysis htPaxResults,
                                GestionDonneesHUB2SIM ghdData,
                                SIMCORE_TOOL.Classes.ParamScenario psParams,
                                bool bLoading)
        {
            TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(psParams.Name, treeView1.Nodes[2]);
            bool bErase = false;
            if ((ScenarioPosition != null) /*&& (!bLoading)*/)
                bErase = MessageBox.Show("Do you want to replace the old graphic definition with the new definition for Scenario \"" + psParams.Name + "\"?", "Information", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1) == DialogResult.Yes;
            if (!bLoading)
                GestionScenarios(psParams);

            SIMCORE_TOOL.Prompt.SIM_Chargement cht = null;
            if (!bDebug)
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                cht.setChenillard = true;
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
                cht.setFileNumber(100);
                cht.ChargementFichier("Regenerating Tree-View...");
            }

            ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(psParams.Name, treeView1.Nodes[2]);
            if (ScenarioPosition == null)
                return;
            //if ((psParams.SaveTraceMode) && (!bLoading))
            if (!bLoading)
            {
                DataManagement.DataManagerPaxBHS gdData = (DataManagement.DataManagerPaxBHS)ghdData.GetDataManager(psParams.Name);
                if (gdData != null)
                {
                    String sPath = OverallTools.ExternFunctions.getTempDirectoryForPax2sim();
                    if (htBagsResults != null)
                        gdData.BagTraceLocation = sPath + psParams.Name + "_BagTrace.tmp";

                    if (htPaxResults != null)
                        gdData.PaxTraceLocation = sPath + psParams.Name + "_PaxTrace.tmp";
                }
            }
            InsertBHSResults(psParams.Name, htBagsResults, lsNames, bErase, psParams.bhsGenerateMUPSegregation,
                psParams.analysisResultsFiltersSplittedByFlow, psParams.flowTypes, null);    // >> Task #14280 Bag Trace Loading time too long
            InsertPAXResults(psParams.Name, htPaxResults, bErase,bLoading, psParams.percentilesLevels);
            if (!bLoading)
            {
                DonneesEnCours.UpdateScenarioTree(psParams.Name,ScenarioPosition);
                UpdateItineraryView();
            }
            if (cht != null)
                cht.KillWindow();
        }

            #endregion

            #region ---- Start simulation
        private void tsbStartSimulation_Click(object sender, EventArgs e)
        {
        }
            #endregion
        
            #region BHS
        private void tsb_BHS_Click(object sender, EventArgs e)
        {
            /*Test du nouvel utilitaire pour l'intégration des capa de group et de station*/
            /*SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node CI1, CI2, CIG, T1,T2, GCI;
            SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node BG1, BG2, BGG, BGI, mGlobal;
            CI1 = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("T1L2_Check In 1", null);
            CI2 = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("T1L2_Check In 2", null);

            CIG = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("T1L2_Check In Group 1", new List<SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node>());
            CIG._sFils.Add(CI1);
            CIG._sFils.Add(CI2);

            BG1 = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("T1L2_Boarding Gate 1", null);
            BG2 = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("T1L2_Boarding Gate 2", null);

            BGG = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("T1L2_Boarding Gate Group 1", new List<SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node>());
            BGG._sFils.Add(BG1);
            BGG._sFils.Add(BG2);


            
            T1 = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("Terminal 1", new List<SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node>());
            T2 = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("Terminal 1", new List<SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node>());
            T1._sFils.Add(BGG);
            T2._sFils.Add(CIG);

            GCI = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("Check In", new List<SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node>());
            BGI = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("Boarding Gate", new List<SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node>());

            GCI._sFils.Add(T2);
            BGI._sFils.Add(T1);
            mGlobal = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("Global", new List<SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node>());
            mGlobal._sFils.Add(GCI);
            mGlobal._sFils.Add(BGI);*/
            /*List<SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node> lNode = new List<SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node>();
            lNode.Add(new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("Check In",null));
            lNode.Add(new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("Baggage claim", null));
            lNode.Add(new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("Boarding gate", null));

            SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node n = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm.Node("Racine", lNode);*/
            //Assistant.SubForms.Capacity_SubForm csb_Tmp = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm(mGlobal, null, null,true);

            /*Test pour le module d'aide, pour l'afficher et le masquer.*/
            //splitContainer2.Panel2Collapsed = true;



            /*
            //NRectangleF name = ((NPanel)this.Graphique.Panels[1]).Bounds ;
            for (int i = 0; i < this.Graphique.Charts[0].Series.Count; i++)
            {
                ((NBarSeries)this.Graphique.Charts[0].Series[i]).BarWidth = new NLength((this.Graphique.Charts[0].ContentSize.Width / 6.0f) * 0.9f);
                //this.Graphique.Charts[0].Measure(
                ((NBarSeries)this.Graphique.Charts[0].Series[i]).GapPercent = 0;
            }
            //((NBarSeries)this.Graphique.Charts[0].Series[0]).BarWidth = new NLength(10);
            this.Graphique.Refresh();
return;
            ///Version pour le bhs.
            openFileDialog1.FileName = "";
            openFileDialog1.Filter = "Model (*.exe)|*.exe";
            if (openFileDialog1.ShowDialog() != DialogResult.OK)
            {
                return;
            }
            String ModelPath = System.IO.Path.GetDirectoryName(openFileDialog1.FileName);
            String ModelName= System.IO.Path.GetFileName(openFileDialog1.FileName);
            DonneesEnCours.ExportBHSData(ModelPath + "\\Data");

            
            String Model = System.IO.Path.GetFileNameWithoutExtension(ModelName);
            this.Enabled = false;
            Thread th = new Thread(new ThreadStart(StartSimulation));
            Path = ModelPath + "\\" + Model + ".exe";
            th.Start();
            return;*/
        }
            #endregion

            #region  l'AirSide
        private void tsb_Runway_Click(object sender, EventArgs e)
        {
            /*if (fbd_SelectDirectory.ShowDialog() == DialogResult.OK)
            {
                SIMCORE_TOOL.Prompt.SIM_Chargement cht = null;
                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                OverallTools.ExternFunctions.CopyDirectory(fbd_SelectDirectory.SelectedPath, fbd_SelectDirectory.SelectedPath + ".bak", cht);
                MessageBox.Show("Finish");
                if (!bDebug)
                    cht.KillWindow();
            }*/
        }

            #endregion

            #region Reports
        /// Bouton Resultats

        List<String> getFiles(String sdirectory)
        {
            List<String> lsResult = new List<string>();
            lsResult.AddRange(System.IO.Directory.GetFiles(sdirectory));
            List<String> lsDir = new List<string>(System.IO.Directory.GetDirectories(sdirectory));
            foreach (String sTmp in lsDir)
            {
                lsResult.AddRange(getFiles(sTmp));
            }
            return lsResult;
        }

        private void Results_Click(object sender, EventArgs e)
        {
            openReportGenerator("");
        }
        // >> Task #13384 Report Tree-view
        private void openReportGenerator(string reportName)
        {
            /* List<String> lsTmp= getFiles(@"D:\PROJETS\2009.07.06.ADPi_Comptage\ComptagePassager\ComptagePassager");
            string sResult = "";
            foreach (String sTmp in lsTmp)
            {
                sResult += sTmp + "\n";
            }
            Clipboard.SetText(sResult);
            return;*/
            /* Interface.Help hp = new Interface.Help(this);
             hp.URL = @"D:\PROJETS\2011.06.07_Heathrow\distr-2011-06-07\bin-debug\gantt4flex_simcore_prototype.html";
             return;*/
#if(SIMUL8_UTILISATION)
            /*s8cp_SubForm.SetModelReadyToSimulate(DonneesEnCours.getScenario("Scenario_1"));
            return;*/
#endif
            if (!ValidateCellContent())
                return;
            if (!CheckKey())
            {
                this.closeProject();
                this.Close();
                return;
            }
            if (!DonneesEnCours.getAEteEnregistreUneFois())
            {
                MessageBox.Show("You must save your project before export data", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            //Prompt.ReportGenerator Generator = new SIMCORE_TOOL.Prompt.ReportGenerator(treeView1.Nodes, imageList1);
            Prompt.ReportGenerator Generator = new SIMCORE_TOOL.Prompt.ReportGenerator(treeView1.Nodes, imageList1, DonneesEnCours, cmsReports, reportName);
            if (Generator.ShowDialog() == DialogResult.OK)
            {
                
                generateReport(Generator.parameters, Generator.TreeView, 
                    Generator.parameters.GeneratePDF, Generator.parameters.GenerateHTML, null);
            }
        }

        private void generateReport(ReportParameters reportParameters, TreeNodeCollection allReports,
            bool generatePdfFormat, bool generateHtmlFormat, string globalReportGroup)
        {
            // set the loading window
            Prompt.SIM_Chargement cht = null;
            bool hasResult = false;
            if (!bDebug)
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
            }

            // retrieve parameters            
            //String ReportDirectory = DonneesEnCours.getDossierEnregistrement() + "Output\\" + ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME +"\\" + reportParameters.Name + "\\";
            // >> Task #17969 PAX2SIM - Reports improvements  
            List<string> parentDirectories = new List<string>();
            string parentReportDirectory = "";
            if (globalReportGroup != null)
            {
                parentReportDirectory = DonneesEnCours.getDossierEnregistrement() + "Output\\" + ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME + "\\"
                           + ReportGenerator.GROUPED_REPORTS_DIRECTORY_NAME + "\\" + globalReportGroup + "\\" + reportParameters.Name + "\\";
                parentDirectories.Add(parentReportDirectory);
            }
            else
            {
                parentReportDirectory = DonneesEnCours.getDossierEnregistrement() + "Output\\" + ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME + "\\"
                        + ReportGenerator.SINGLE_REPORTS_DIRECTORY_NAME + "\\" + reportParameters.Name + "\\";
                parentDirectories.Add(parentReportDirectory);
                /*
                if (reportParameters.reportGroupsList.Count == 0)
                {
                    parentReportDirectory = DonneesEnCours.getDossierEnregistrement() + "Output\\" + ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME + "\\"
                        + ReportGenerator.SINGLE_REPORTS_DIRECTORY_NAME + "\\" + reportParameters.Name + "\\";
                    parentDirectories.Add(parentReportDirectory);
                }
                else
                {
                    foreach (string reportGroupName in reportParameters.reportGroupsList)
                    {
                        parentReportDirectory = DonneesEnCours.getDossierEnregistrement() + "Output\\" + ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME + "\\"
                            + ReportGenerator.GROUPED_REPORTS_DIRECTORY_NAME + "\\" + reportGroupName + "\\" + reportParameters.Name + "\\";
                        parentDirectories.Add(parentReportDirectory);
                    }
                }*/
            }
            //parentReportDirectory = ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME + "\\"
            //        + ReportGenerator.SINGLE_REPORTS_DIRECTORY_NAME + "\\" + reportParameters.Name + "\\";
            //string ReportDirectory = DonneesEnCours.getDossierEnregistrement() + "Output\\" + parentReportDirectory;
            // << Task #17969 PAX2SIM - Reports improvements

            foreach (string ReportDirectory in parentDirectories)
            {
                // generate html report if needed
                if (generateHtmlFormat)//(reportParameters.GenerateHTML)
                {
                    string htmlDirectory = ReportDirectory + "HTML\\";  // >> Task #17969 PAX2SIM - Reports improvements
                    hasResult = DonneesEnCours.generateReport(allReports, htmlDirectory, treeView1.Nodes[0], cht, reportParameters);
                }
                // generate pdf report if needed
                if (generatePdfFormat)//(reportParameters.GeneratePDF)
                {
                    string pdfDirectory = ReportDirectory + "PDF\\";    // >> Task #17969 PAX2SIM - Reports improvements
                    hasResult = DonneesEnCours.generatePDFReport(allReports, pdfDirectory, treeView1.Nodes[0], cht, reportParameters) || hasResult;
                }
                if (reportParameters.exportSourceTextFiles) // >> Task #17969 PAX2SIM - Reports improvements
                {
                    string textExportDirectory = ReportDirectory + "Source Text Files\\";
                    if (OverallTools.ExternFunctions.CheckCreateDirectory(textExportDirectory))
                    {
                        TreeNode pax2simReportsNode = OverallTools.TreeViewFunctions.getTreeNodeByNameFromCollection(treeView1.Nodes, GlobalNames.REPORTS_MAIN_NODE_NAME);
                        TreeNode reportTreeNode = OverallTools.TreeViewFunctions.getTreeNodeByNameFromCollection(pax2simReportsNode.Nodes, reportParameters.Name);
                        exportAsTextFilesFromReport(reportTreeNode, textExportDirectory, cht);
                        hasResult = true;
                    }
                }
                if (reportParameters.exportXmlConfiguration)    // >> Task #17969 PAX2SIM - Reports improvements
                {
                    string xmlConfigurationDirectory = ReportDirectory + "XML Configuration\\";
                    if (OverallTools.ExternFunctions.CheckCreateDirectory(xmlConfigurationDirectory))
                    {
                        hasResult = exportXMLReportConfiguration(reportParameters.Name, xmlConfigurationDirectory + reportParameters.Name + ".xml");
                    }
                }                
            }
            // stop the loading window
            if (cht != null)
                cht.KillWindow();

            // open folder if there is a generated report
            if (hasResult)
            {
                if (globalReportGroup == null)
                {
                    Process.Start(DonneesEnCours.getDossierEnregistrement() + "Output\\" + ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME + "\\"
                                    + ReportGenerator.SINGLE_REPORTS_DIRECTORY_NAME + "\\");
                }
                else
                {
                    Process.Start(DonneesEnCours.getDossierEnregistrement() + "Output\\" + ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME + "\\"
                                    + ReportGenerator.GROUPED_REPORTS_DIRECTORY_NAME + "\\");
                }
            }

            // open folder if there is a generated report
            //if (hasResult)
            //    Process.Start(ReportDirectory + "\\");
        }

        internal static int reportPreviewSequence = 0;
        // << Task #13384 Report Tree-view

            #endregion
        #endregion

        #region ##############       Protection
        private static bool CheckExecDate()
        {
            FileInfo fiTmp = new FileInfo(Application.ExecutablePath);
            DateTime dtTmp = fiTmp.LastWriteTime;
            if ((DateTime.Now > dtTmp.Date) && (DateTime.Now < dtTmp.Date.AddDays(2)))
                return true;
            return false;
        }
        private bool CheckIsAbleToContinue()
        {
            if (bTrialVersion && (iValidDaysTrialVersion == 0))
            {
                if (MessageBox.Show("You trial version has expired or is not activated yet.\n\rPlease contact us at support@pax2sim.com to obtain a valid trial key. \n\r\n\rDo you wish to enter your trial key now?", "Error", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                {
                    this.openFileDialog1.CheckFileExists = true;
                    this.openFileDialog1.FileName = "*.lic";
                    this.openFileDialog1.Filter = OverallTools.AssemblyActions.AssemblyTitle + " licence file (*.lic)|*.lic";
                    this.openFileDialog1.Title = "Select a valid licence file:";
                    if (this.openFileDialog1.ShowDialog() == DialogResult.OK)
                    {
                        iValidDaysTrialVersion = CheckTrialVersion(this.openFileDialog1.FileName);
                        if (iValidDaysTrialVersion < 0)
                        {
                            iValidDaysTrialVersion = 0;
                            MessageBox.Show("Invalid licence file. Please contact support@pax2sim.com to obtain a valid " + OverallTools.AssemblyActions.AssemblyTitle + " file.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return false;
                        }
                        else if (iValidDaysTrialVersion == 0)
                        {
                            MessageBox.Show("Date conflict detected. Please contact support@pax2sim.com to obtain a valid " + OverallTools.AssemblyActions.AssemblyTitle + " file.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return false;
                        }
                        else
                        {
                            MessageBox.Show("Your trial license was successfully activated, you have " + iValidDaysTrialVersion.ToString() + " days to evaluate " + OverallTools.AssemblyActions.AssemblyTitle + ".", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return true;
                        }
                    }
                }
                return false;
            }
            return true;
        }
        private static int CheckTrialVersion(String sPath)
        {
            if (!bTrialVersion)
                return 0;
            int i ;
            DateTime dtNow = DateTime.Now;
            //on récupère la date de l'exécutable.
            FileInfo fiTmp = new FileInfo(Application.ExecutablePath);
            DateTime dtExec = fiTmp.LastWriteTime;
            //La date courante est inférieure à la date de l'application.
            //Ceci implique donc que l'application est soit mal installée,
            //soit que l'utilisateur à jouer avec ses dates. 
            //(dans ce dernier cas, il faudrait pouvoir le vérifier)
            if (dtNow < dtExec)
                return 0;
            DateTime dtTmp;
            if (File.Exists("C:\\pagefile.sys"))
            {
                fiTmp = new FileInfo("C:\\pagefile.sys");
                dtTmp = fiTmp.LastWriteTime;
                //La date courante est inférieure à la date du fichier pagefile.sys.
                //Ceci implique donc que l'application est soit mal installée,
                //soit que l'utilisateur à jouer avec ses dates. 
                //(dans ce dernier cas, il faudrait pouvoir le vérifier)
                if (dtNow < dtTmp)
                    return 0;
            }
            //Comme on update la date de dernier accès à la DLL FonctionsCritiques.dll

            String sFonctionCritiquePath = Path.GetDirectoryName(Application.ExecutablePath);
            sFonctionCritiquePath += "\\FonctionsCritiques.dll";
            fiTmp = new FileInfo(sFonctionCritiquePath);
            dtTmp = fiTmp.LastAccessTime;
            if (dtNow < dtTmp)
                return 0;
            //On réécrit la date du dernier accès à ce fichier à la date du jour précédent.
            File.SetLastAccessTime(sFonctionCritiquePath, dtNow.AddDays(-0.5d));

            String sTrialPath = Path.GetDirectoryName(Application.ExecutablePath);
            sTrialPath += "\\Trial.lic";
            String sWindowsLicenceKey = Application.UserAppDataPath;
            try
            {
                //on essaie d'atteindre la clef MMDCM
                RegistryKey rk = Registry.LocalMachine;
                RegistryKey rkauthentification = rk.OpenSubKey("Software\\Microsoft\\MMDCM", true);
                DateTime dtMMDCM = dtNow.AddDays(-1); 
                dtMMDCM = dtNow;
                if (rkauthentification == null)
                {
                    String sKey = (dtNow.Ticks / 24).ToString();//OverallTools.FonctionUtiles.CrypteString(dtNow.ToShortDateString(), "Il était une fois le petit chaperon rouge.");
                    rkauthentification = rk.CreateSubKey("Software\\Microsoft\\MMDCM");
                    rkauthentification.SetValue("MMDCM", sKey);
                }
                else
                {
                    String sKey = (dtNow.Ticks / 24).ToString();
                    String[] tsSubkey = rkauthentification.GetValueNames();
                    ArrayList alList = new ArrayList();
                    alList.AddRange(tsSubkey);
                    if (!alList.Contains("MMDCM"))
                        rkauthentification.SetValue("MMDCM", sKey);
                    else
                    {
                        String sValue = rkauthentification.GetValue("MMDCM").ToString();
                        long lg;
                        if (!long.TryParse(sValue, out lg))
                            return 0;
                        dtMMDCM = new DateTime(lg * 24);
                    }
                }
                /*Récupération de la licence windows.*/
                RegistryKey rWindowsLicenceKey = rk.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", false);
                if (rWindowsLicenceKey != null)
                {
                    String[] tsSubkey = rWindowsLicenceKey.GetValueNames();
                    ArrayList alList = new ArrayList();
                    alList.AddRange(tsSubkey);
                    if (alList.Contains("DigitalProductId"))
                    {
                        Byte[] tbKey = (Byte[])rWindowsLicenceKey.GetValue("DigitalProductId");
                        sWindowsLicenceKey = "";
                        for ( i = 0; i < tbKey.Length; i++)
                        {
                            if(tbKey[i] ==0)
                                sWindowsLicenceKey+='ù';
                            else
                            sWindowsLicenceKey += (char)((int)tbKey[i]);
                        }
                    }
                    rWindowsLicenceKey.Close();
                }
                /*
 if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"), 0, KEY_ALL_ACCESS, &hKey)!=ERROR_SUCCESS)
    return ERREUR_REGISTRY;

 // Recupération des 163 permiers byte
 if (RegQueryValueEx(hKey, TEXT("DigitalProductId"), NULL, NULL, (unsigned char*)MyProductId, &dwSize)!=ERROR_SUCCESS)
    return ERREUR_REGISTRY;

 RegCloseKey(hKey);

 //PrintDebug("Licence PC : ",true,false);
 for (i=0;i<164;i++){*/
                if ((sPath != null) && (sPath.Length > 0) && (File.Exists(sPath)))
                {
                    if (dtNow < dtMMDCM)
                        return 0;
                    if (dtExec > dtMMDCM)
                        return 0;
                    StreamReader srFileLicence = new StreamReader(sPath);
                    char[] tcLastValidDateForEnter = new char[64];
                    char[] tcNumberDays = new char[64];
                    srFileLicence.ReadBlock(tcLastValidDateForEnter, 0, 64);
                    srFileLicence.ReadBlock(tcNumberDays, 0, 2);
                    srFileLicence.ReadBlock(tcNumberDays, 0, 64);
                    String sLastValidDateForEnter = new string(tcLastValidDateForEnter);
                    String sNumberDays= new string(tcNumberDays);
                    srFileLicence.Close();
                    for (i= 0; i <= 7; i++)
                    {
                        String sDate = (DateTime.Now.AddDays(i)).ToShortDateString();
                        String sCryptedDate = OverallTools.FonctionUtiles.CrypteString(sDate, "Il était une fois le petit chaperon rouge.");
                        if (sCryptedDate == sLastValidDateForEnter)
                        {
                            //Nous avons trouvé la date dans les dates valides pour entrer les codes.
                            //Nous devons désormais déterminer la fin de la validité de ces clefs.
                            break;
                        }
                    }
                    if (i > 7)
                    {
                        return -1;
                    }
                    for (i = 1; i <61; i++)
                    {
                        String sCryptedTime = OverallTools.FonctionUtiles.CrypteString(i.ToString(), "Il était une fois le petit chaperon rouge.");
                        if (sNumberDays == sCryptedTime)
                        {
                            StreamWriter swFile = new StreamWriter(sTrialPath);
                            DateTime dtEndValid = dtNow.AddDays(i);
                            swFile.WriteLine(OverallTools.FonctionUtiles.CrypteString(dtEndValid.ToShortDateString() + sWindowsLicenceKey, "Il était une fois le petit chaperon rouge."));
                            String sKey = (dtEndValid.Ticks / 24).ToString();//OverallTools.FonctionUtiles.CrypteString(dtNow.ToShortDateString(), "Il était une fois le petit chaperon rouge.");
                            rkauthentification.SetValue("MMDCM", sKey);
                            swFile.Close();
                            return i;
                        }
                    }
                    return -1;
                }
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Except02057: PAX2SIM.CheckTrialVersion(String sPath) throw an exception while checking you license: " + e.Message);
                return 0;
            }
            if (!File.Exists(sTrialPath))
                return 0;
            StreamReader srFile = new StreamReader(sTrialPath);
            char[] tcDate = new char[64];
            srFile.ReadBlock(tcDate, 0, 64);
            srFile.Close();
            // tcDate représente la date de fin, on va donc tester les prochains 
            //jours pour voir si la version est toujours valide.
            String sValidDate = new String(tcDate);
            for ( i = 0; i <= 60; i++)
            {
                String sDate = (DateTime.Now.AddDays(i)).ToShortDateString() + sWindowsLicenceKey;
                String sCryptedDate = OverallTools.FonctionUtiles.CrypteString(sDate, "Il était une fois le petit chaperon rouge.");
                if (sValidDate == sCryptedDate)
                    return i;
            }
            return 0;
        }
        internal static bool CheckDongle()
        {
            if (bTrialVersion)
            {
                iValidDaysTrialVersion = CheckTrialVersion(null);
                return true;
            }
            /*
            if (!bProtected)
                return CheckExecDate();*/
            try
            {
                return CheckKey();/*
                int iResult = b(8);
                return (iResult == 1);*/
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Except02058: PAX2SIM throw an exception when trying to access the hardware key: " + e.Message);
                MessageBox.Show("A problem appear when trying to access the hardware key : " + e.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }
        internal static bool CheckKey()
        {
            if (bSDE)
                return true;
            if (bTrialVersion)
            {
                return true;
            }
            try
            {
                //MessageBox.Show("AVant appel de la fonction t()");
#if(UNIKEY_PROTECTION)
                Byte[] bResult;
                int iT = OverallTools.Unikey.TestDongle(0, out bResult);
                //OverallTools.ExternFunctions.PrintLogFile("int iT = OverallTools.Unikey.TestDongle(0, out bResult); " + iT);
#else

                int iT = t(); //1; // key problem
                //OverallTools.ExternFunctions.PrintLogFile("int iT = t(); " + iT);
                if (bDebug) // >> Unikey bypass
                {
                    iT = 1;
                }

#endif
                if (iT == 1)
                {
                    return true;
                }
                else
                {
                    //MessageBox.Show("La fonction t() n'a pas renvoyé une bonne valeur.");
                    String sErrorMessage = ErrorMessage;
                    if (iT == 0)
                    {
                        //MessageBox.Show("Appel de la fonction b(190).");
                        //Ancienne version de la protection n'a que 2 valeurs.

#if(UNIKEY_PROTECTION)
                        OverallTools.Unikey.TestDongle(1, out bResult);
#else
                        b(190);
#endif

                    }
                    else
                    {
                       // MessageBox.Show("Appel de la fonction b(185).");

#if(UNIKEY_PROTECTION)
                        iT = OverallTools.Unikey.TestDongle(1, out bResult);
#else
                        iT = b(185);
                        //OverallTools.ExternFunctions.PrintLogFile("int iT = b(185); " + iT);
#endif
                        
                        if (iT == 1)
                        {
                            return true;
                        }
                        switch (iT)
                        {
                            case -1://#define HARDWAREKEY_NOT_FOUND -1
                            case -2://#define HARDWAREKEY_UNVALID_LOGON -2
                                sErrorMessage = "Err" + (-iT).ToString() + " " + ErrorMessage;
                                break;
                            case -3://#define HARDWAREKEY_EXPIRED -3
                                sErrorMessage = "Err" + (-iT).ToString() + " Release Expired please contact your reseller!";
                                break;
                            case -4://#define HARDWAREKEY_MD5_FAILED_WRITE -4
                            case -5://#define HARDWAREKEY_MD5_FAILED_READ -5
                            case -6://#define HARDWAREKEY_ENCRYPT_FAILED_WRITE -6
                            case -7://#define HARDWAREKEY_ENCRYPT_FAILED_READ -7
                            case -8://#define HARDWAREKEY_WRITE_MEMORY_FAILED -8
                            case -9://#define HARDWAREKEY_READ_MEMORY_FAILED -9
                            case -11://#define HARDWAREKEY_CALCULATE -11
                            case -12://#define HARDWAREKEY_RANDOM_FUNCTION -12
                            case -14://#define HARDWAREKEY_RANDOM_FUNCTION -14
                                {
                                    //if (PAX2SIM.singaporeMode)
                                    //    return true;
                                    sErrorMessage = "Err" + (-iT).ToString() + " Unable to process the key. Please contact your reseller!";
                                    break;
                                }
                            case -10://#define HARDWAREKEY_NOT_ORIGINAL_HARDWARE -10
                            case -13://#define HARDWAREKEY_NOT_ORIGINAL -13
                            case -15://#define HARDWAREKEY_DYNAMIC -15
                            case -16://#define HARDWAREKEY_UNABLE_READ_INFORMATIONS -16
                            case -17://#define HARDWAREKEY_INVALID_LICENCE -17
                            case -18://#define HARDWAREKEY_INVALID_LICENCE_CANTREADREGISTRY -18
                            default:
                                //Si en mode runtime, alors la licence est multiposte (si la clef est connectée).
                                if (bRuntime)
                                    return true;
                                sErrorMessage = "Err" + (-iT).ToString() + " The hardware key is not valid for your computer. Please contact your reseller!";
                                break;

                        }
                        //Ici traité tous les cas pour la nouvelle protection.
                    }
                    MessageBox.Show(sErrorMessage, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    

#if(UNIKEY_PROTECTION)
                    if (OverallTools.Unikey.TestDongle(1, out bResult) == 1)
#else
                    if (t() == 1)
#endif
                    {
                        //InitializeKeyInformation();
                        return true;
                    }
                    return false;
                }
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Err00016: (" + ErrorMessage + ") PAX2SIM throw an exception: " + e.Message);
                String sErrorMessage = "Err00016 " + ErrorMessage + "\r\n" + e.Message;
                MessageBox.Show(sErrorMessage, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }
        #endregion

        #region ##############       Allocation

        private void allocateMakeUpToolStripMenuItem_Click(object sender, EventArgs e)
        {

            if (((ToolStripMenuItem)sender).Name == "allocateMakeUpToolStripMenuItem")
            {
                DataTable[] dtResults = null;
                VisualisationMode[] vmMode = null;
                String sTableName = null;
                Prompt.SIM_Allocation_MakeUp samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation_MakeUp(DonneesEnCours);
                if (samForm.ShowDialog() != DialogResult.OK)
                    return;
                dtResults = samForm.Results;
                vmMode = samForm.VisualisationModeResults;
                sTableName = samForm.TablesNames;
                TreeNode tnResult = OverallTools.TreeViewFunctions.RechercherNom("OCT_MakeUp", treeView1.Nodes[1]);
                if (tnResult == null)
                    return;
                tnResult = tnResult.Parent;

                for (int i = 0; i < dtResults.Length; i++)
                {
                    if (!tnResult.Nodes.ContainsKey(dtResults[i].TableName))
                    {
                        TreeViewTag tvtTag = TreeViewTag.getTableNode("Input", dtResults[i].TableName);
                        TreeNode tnResultTmp = OverallTools.TreeViewFunctions.createBranch(dtResults[i].TableName, dtResults[i].TableName, tvtTag, contextMenuInput);
                        OverallTools.TreeViewFunctions.AddSortedNode(tnResult, tnResultTmp);
                        //DonneesEnCours.getGestionDonnees("Input").AddAllocateTable(dtResults[i].TableName, GestionDonneesHUB2SIM.sBHS_MakeUpObject);
                    }
                    DonneesEnCours.AddReplaceTable("Input", dtResults[i]);
                    if (vmMode != null)
                        DonneesEnCours.AddReplaceModeVisualisation("Input", dtResults[i].TableName, vmMode[i]);
                }
            }
            else if (((ToolStripMenuItem)sender).Name == "allocateBGateToolStripMenuItem")
            {
                DataTable[] dtResults = null;
                VisualisationMode[] vmMode = null;
                String sTableName = null;
                Prompt.SIM_Allocation_BGate samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation_BGate(DonneesEnCours);
                if (samForm.ShowDialog() != DialogResult.OK)
                    return;
                dtResults = samForm.Results;
                vmMode = samForm.VisualisationModeResults;
                sTableName = samForm.TablesNames;
                TreeNode tnResult = OverallTools.TreeViewFunctions.RechercherNom("OCT_MakeUp", treeView1.Nodes[1]);
                if (tnResult == null)
                    return;
                tnResult = tnResult.Parent;

                for (int i = 0; i < dtResults.Length; i++)
                {
                    if (!tnResult.Nodes.ContainsKey(dtResults[i].TableName))
                    {
                        TreeViewTag tvtTag = TreeViewTag.getTableNode("Input", dtResults[i].TableName);
                        TreeNode tnResultTmp = OverallTools.TreeViewFunctions.createBranch(dtResults[i].TableName, dtResults[i].TableName, tvtTag, contextMenuInput);
                        OverallTools.TreeViewFunctions.AddSortedNode(tnResult, tnResultTmp);
                        //DonneesEnCours.getGestionDonnees("Input").AddAllocateTable(dtResults[i].TableName, GestionDonneesHUB2SIM.sBHS_MakeUpObject);
                    }
                    DonneesEnCours.AddReplaceTable("Input", dtResults[i]);
                    if (vmMode != null)
                        DonneesEnCours.AddReplaceModeVisualisation("Input", dtResults[i].TableName, vmMode[i]);
                }
            }
            else if (((ToolStripMenuItem)sender).Name == "allocateTransferInfeedToolStripMenuItem")
            {
                DataTable[] dtResults = null;
                VisualisationMode[] vmMode = null;
                String sTableName = null;

                Prompt.SIM_Allocation_TransferInfeed samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation_TransferInfeed(DonneesEnCours);
                if (samForm.ShowDialog() != DialogResult.OK)
                    return;
                dtResults = samForm.Results;
                vmMode = samForm.VisualisationModeResults;
                sTableName = samForm.TablesNames;


                TreeNode tnResult = OverallTools.TreeViewFunctions.RechercherNom("Allocations_Plannings", treeView1.Nodes[1]);
                if (tnResult == null)
                    return;
                TreeNode tnReclaim = OverallTools.TreeViewFunctions.RechercherNom("Transfer Infeed Allocation", tnResult);
                if (tnReclaim == null)
                {
                    tnReclaim = OverallTools.TreeViewFunctions.createBranch("Transfer Infeed Allocation", "Transfer Infeed Allocation", TreeViewTag.getDirectoryNode("Transfer Infeed Allocation"), null);
                    tnResult.Nodes.Add(tnReclaim);
                }
                tnResult = tnReclaim;

                for (int i = 0; i < dtResults.Length; i++)
                {
                    if (!tnResult.Nodes.ContainsKey(dtResults[i].TableName))
                    {
                        TreeViewTag tvtTag = TreeViewTag.getTableNode("Input", dtResults[i].TableName);
                        TreeNode tnResultTmp = OverallTools.TreeViewFunctions.createBranch(dtResults[i].TableName, dtResults[i].TableName, tvtTag, contextMenuInput);
                        OverallTools.TreeViewFunctions.AddSortedNode(tnResult, tnResultTmp);
                        //DonneesEnCours.getGestionDonnees("Input").AddAllocateTable(dtResults[i].TableName, "Transfer Infeed");
                    }
                    DonneesEnCours.AddReplaceTable("Input", dtResults[i]);
                    if (vmMode != null)
                        DonneesEnCours.AddReplaceModeVisualisation("Input", dtResults[i].TableName, vmMode[i]);
                }
            }
            else if (((ToolStripMenuItem)sender).Name == "allocateReclaimToolStripMenuItem")
            {
                Prompt.SIM_Allocation_Reclaim samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation_Reclaim(DonneesEnCours);
                if (samForm.ShowDialog() != DialogResult.OK)
                    return;
                DataTable[] dtResults = samForm.Results;
                VisualisationMode[] vmMode = samForm.VisualisationModeResults;
                if ((dtResults == null))
                    return;
                TreeNode tnResult = OverallTools.TreeViewFunctions.RechercherNom("Allocations_Plannings", treeView1.Nodes[1]);
                if (tnResult == null)
                    return;
                TreeNode tnReclaim = OverallTools.TreeViewFunctions.RechercherNom("Reclaim Allocation", tnResult);
                if (tnReclaim == null)
                {
                    tnReclaim = OverallTools.TreeViewFunctions.createBranch("Reclaim Allocation", "Reclaim Allocation", TreeViewTag.getDirectoryNode("Reclaim Allocation"), null);
                    tnResult.Nodes.Add(tnReclaim);
                }
                tnResult = tnReclaim;
                for (int i = 0; i < dtResults.Length; i++)
                {
                    if (!tnResult.Nodes.ContainsKey(dtResults[i].TableName))
                    {
                        TreeViewTag tvtTag = TreeViewTag.getTableNode("Input", dtResults[i].TableName);
                        TreeNode tnResultTmp = OverallTools.TreeViewFunctions.createBranch(dtResults[i].TableName, dtResults[i].TableName, tvtTag, contextMenuInput);
                        OverallTools.TreeViewFunctions.AddSortedNode(tnResult, tnResultTmp);
                        //DonneesEnCours.getGestionDonnees("Input").AddAllocateTable(dtResults[i].TableName, GlobalNames.sFPA_Column_ReclaimObject);
                    }
                    DonneesEnCours.AddReplaceTable("Input", dtResults[i]);
                    if (vmMode != null)
                        DonneesEnCours.AddReplaceModeVisualisation("Input", dtResults[i].TableName, vmMode[i]);
                }
            }
            else if (((ToolStripMenuItem)sender).Name == "allocateReclaimToolStripMenuItem")
            {
                Prompt.SIM_Allocation_Reclaim samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation_Reclaim(DonneesEnCours);
                if (samForm.ShowDialog() != DialogResult.OK)
                    return;
                DataTable[] dtResults = samForm.Results;
                VisualisationMode[] vmMode = samForm.VisualisationModeResults;
                if ((dtResults == null))
                    return;
                TreeNode tnResult = OverallTools.TreeViewFunctions.RechercherNom("Allocations_Plannings", treeView1.Nodes[1]);
                if (tnResult == null)
                    return;
                TreeNode tnReclaim = OverallTools.TreeViewFunctions.RechercherNom("Reclaim Allocation", tnResult);
                if (tnReclaim == null)
                {
                    tnReclaim = OverallTools.TreeViewFunctions.createBranch("Reclaim Allocation", "Reclaim Allocation", TreeViewTag.getDirectoryNode("Reclaim Allocation"), null);
                    tnResult.Nodes.Add(tnReclaim);
                }
                tnResult = tnReclaim;
                for (int i = 0; i < dtResults.Length; i++)
                {
                    if (!tnResult.Nodes.ContainsKey(dtResults[i].TableName))
                    {
                        TreeViewTag tvtTag = TreeViewTag.getTableNode("Input", dtResults[i].TableName);
                        TreeNode tnResultTmp = OverallTools.TreeViewFunctions.createBranch(dtResults[i].TableName, dtResults[i].TableName, tvtTag, contextMenuInput);
                        OverallTools.TreeViewFunctions.AddSortedNode(tnResult, tnResultTmp);
                        //DonneesEnCours.getGestionDonnees("Input").AddAllocateTable(dtResults[i].TableName, GlobalNames.sFPA_Column_ReclaimObject);
                    }
                    DonneesEnCours.AddReplaceTable("Input", dtResults[i]);
                    if (vmMode != null)
                        DonneesEnCours.AddReplaceModeVisualisation("Input", dtResults[i].TableName, vmMode[i]);
                }
            }
            else if (((ToolStripMenuItem)sender).Name == "allocateToolStripMenuItem")
            {

               
            }
        }

        private void deleteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;
            if (!tvtTag.isDirectoryNode)
                return;

            while (CurrentNode.Nodes.Count > 0)
            {
                DonneesEnCours.RemoveTable("Input", CurrentNode.Nodes[0].Name);
                CurrentNode.Nodes[0].Remove();
            }
            DonneesEnCours.RemoveTable("Input", CurrentNode.Name);
            CurrentNode.Remove();
            treeView1.Refresh();
        }

        private void allocateToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (((ToolStripMenuItem)sender).Name == "allocateMakeUpToolStripMenuItem")
            {
                DataTable[] dtResults = null;
                VisualisationMode[] vmMode = null;
                String sTableName = null;
                Prompt.SIM_Allocation_MakeUp samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation_MakeUp(DonneesEnCours);
                if (samForm.ShowDialog() != DialogResult.OK)
                    return;
                dtResults = samForm.Results;
                vmMode = samForm.VisualisationModeResults;
                sTableName = samForm.TablesNames;
                TreeNode tnResult = OverallTools.TreeViewFunctions.RechercherNom("OCT_MakeUp", treeView1.Nodes[1]);
                if (tnResult == null)
                    return;
                tnResult = tnResult.Parent;

                for (int i = 0; i < dtResults.Length; i++)
                {
                    if (!tnResult.Nodes.ContainsKey(dtResults[i].TableName))
                    {
                        TreeViewTag tvtTag = TreeViewTag.getTableNode("Input", dtResults[i].TableName);
                        TreeNode tnResultTmp = OverallTools.TreeViewFunctions.createBranch(dtResults[i].TableName, dtResults[i].TableName, tvtTag, contextMenuInput);
                        OverallTools.TreeViewFunctions.AddSortedNode(tnResult, tnResultTmp);
                        //DonneesEnCours.getGestionDonnees("Input").AddAllocateTable(dtResults[i].TableName, GestionDonneesHUB2SIM.sBHS_MakeUpObject);
                    }
                    DonneesEnCours.AddReplaceTable("Input", dtResults[i]);
                    if (vmMode != null)
                        DonneesEnCours.AddReplaceModeVisualisation("Input", dtResults[i].TableName, vmMode[i]);
                }
            }
            else if (((ToolStripMenuItem)sender).Name == "allocateBGateToolStripMenuItem")
            {
                DataTable[] dtResults = null;
                VisualisationMode[] vmMode = null;
                String sTableName = null;
                Prompt.SIM_Allocation_BGate samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation_BGate(DonneesEnCours);
                if (samForm.ShowDialog() != DialogResult.OK)
                    return;
                dtResults = samForm.Results;
                vmMode = samForm.VisualisationModeResults;
                sTableName = samForm.TablesNames;
                TreeNode tnResult = OverallTools.TreeViewFunctions.RechercherNom("OCT_MakeUp", treeView1.Nodes[1]);
                if (tnResult == null)
                    return;
                tnResult = tnResult.Parent;

                for (int i = 0; i < dtResults.Length; i++)
                {
                    if (!tnResult.Nodes.ContainsKey(dtResults[i].TableName))
                    {
                        TreeViewTag tvtTag = TreeViewTag.getTableNode("Input", dtResults[i].TableName);
                        TreeNode tnResultTmp = OverallTools.TreeViewFunctions.createBranch(dtResults[i].TableName, dtResults[i].TableName, tvtTag, contextMenuInput);
                        OverallTools.TreeViewFunctions.AddSortedNode(tnResult, tnResultTmp);
                        //DonneesEnCours.getGestionDonnees("Input").AddAllocateTable(dtResults[i].TableName, GestionDonneesHUB2SIM.sBHS_MakeUpObject);
                    }
                    DonneesEnCours.AddReplaceTable("Input", dtResults[i]);
                    if (vmMode != null)
                        DonneesEnCours.AddReplaceModeVisualisation("Input", dtResults[i].TableName, vmMode[i]);
                }
            }
            else if (((ToolStripMenuItem)sender).Name == "allocateTransferInfeedToolStripMenuItem")
            {
                DataTable[] dtResults = null;
                VisualisationMode[] vmMode = null;
                String sTableName = null;

                Prompt.SIM_Allocation_TransferInfeed samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation_TransferInfeed(DonneesEnCours);
                if (samForm.ShowDialog() != DialogResult.OK)
                    return;
                dtResults = samForm.Results;
                vmMode = samForm.VisualisationModeResults;
                sTableName = samForm.TablesNames;


                TreeNode tnResult = OverallTools.TreeViewFunctions.RechercherNom("Allocations_Plannings", treeView1.Nodes[1]);
                if (tnResult == null)
                    return;
                TreeNode tnReclaim = OverallTools.TreeViewFunctions.RechercherNom("Transfer Infeed Allocation", tnResult);
                if (tnReclaim == null)
                {
                    tnReclaim = OverallTools.TreeViewFunctions.createBranch("Transfer Infeed Allocation", "Transfer Infeed Allocation", TreeViewTag.getDirectoryNode("Transfer Infeed Allocation"), null);
                    tnResult.Nodes.Add(tnReclaim);
                }
                tnResult = tnReclaim;

                for (int i = 0; i < dtResults.Length; i++)
                {
                    if (!tnResult.Nodes.ContainsKey(dtResults[i].TableName))
                    {
                        TreeViewTag tvtTag = TreeViewTag.getTableNode("Input", dtResults[i].TableName);
                        TreeNode tnResultTmp = OverallTools.TreeViewFunctions.createBranch(dtResults[i].TableName, dtResults[i].TableName, tvtTag, contextMenuInput);
                        OverallTools.TreeViewFunctions.AddSortedNode(tnResult, tnResultTmp);
                        //DonneesEnCours.getGestionDonnees("Input").AddAllocateTable(dtResults[i].TableName, "Transfer Infeed");
                    }
                    DonneesEnCours.AddReplaceTable("Input", dtResults[i]);
                    if (vmMode != null)
                        DonneesEnCours.AddReplaceModeVisualisation("Input", dtResults[i].TableName, vmMode[i]);
                }
            }
            else if (((ToolStripMenuItem)sender).Name == "allocateReclaimToolStripMenuItem")
            {
                Prompt.SIM_Allocation_Reclaim samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation_Reclaim(DonneesEnCours);
                if (samForm.ShowDialog() != DialogResult.OK)
                    return;
                DataTable[] dtResults = samForm.Results;
                VisualisationMode[] vmMode = samForm.VisualisationModeResults;
                if ((dtResults == null))
                    return;
                TreeNode tnResult = OverallTools.TreeViewFunctions.RechercherNom("Allocations_Plannings", treeView1.Nodes[1]);
                if (tnResult == null)
                    return;
                TreeNode tnReclaim = OverallTools.TreeViewFunctions.RechercherNom("Reclaim Allocation", tnResult);
                if (tnReclaim == null)
                {
                    tnReclaim = OverallTools.TreeViewFunctions.createBranch("Reclaim Allocation", "Reclaim Allocation", TreeViewTag.getDirectoryNode("Reclaim Allocation"), null);
                    tnResult.Nodes.Add(tnReclaim);
                }
                tnResult = tnReclaim;
                for (int i = 0; i < dtResults.Length; i++)
                {
                    if (!tnResult.Nodes.ContainsKey(dtResults[i].TableName))
                    {
                        TreeViewTag tvtTag = TreeViewTag.getTableNode("Input", dtResults[i].TableName);
                        TreeNode tnResultTmp = OverallTools.TreeViewFunctions.createBranch(dtResults[i].TableName, dtResults[i].TableName, tvtTag, contextMenuInput);
                        OverallTools.TreeViewFunctions.AddSortedNode(tnResult, tnResultTmp);
                        //DonneesEnCours.getGestionDonnees("Input").AddAllocateTable(dtResults[i].TableName, GlobalNames.sFPA_Column_ReclaimObject);
                    }
                    DonneesEnCours.AddReplaceTable("Input", dtResults[i]);
                    if (vmMode != null)
                        DonneesEnCours.AddReplaceModeVisualisation("Input", dtResults[i].TableName, vmMode[i]);
                }
            }
        }

        private void Allocate_Click(object sender, EventArgs e)
        {
            // >> Bug #13367 Liege allocation
            if (liegeMode)
            {
                generateLiegeAllocation(null);
            }
            else if (dubaiMode) // >> Task #14727 Dubai allocation
            {
                generateDubaiAllocation(null);
            }
            else if (generalAllocationMode) // >> Task #12790 Allocation app
            {
                GeneralAllocationParameters allocationData = getGeneralAllocationParameters();
                launchGeneralAllocation(allocationData);
            }
            else
            {
                if ((bReporter) || (bTopase))
                {
                    ReporterFunction(false);
                    return;
                }
                Allocate(null);
            }
            // << Bug #13367 Liege allocation
        }

        // >> Task #12790 Allocation app
        private GeneralAllocationParameters getGeneralAllocationParameters()
        {
            //test rule            
            List<FlightGroupingRuleCondition> conditions = new List<FlightGroupingRuleCondition>();
            FlightGroupingRuleCondition condition1 = new FlightGroupingRuleCondition(GeneralAllocationConstants.P2S_ATTRIBUTES.AIRLINE,
                GeneralAllocationConstants.OPERATORS.CONTAINS, new List<string>() { "AAL" });
            conditions.Add(condition1);
            FlightGroupingRuleCondition condition2 = new FlightGroupingRuleCondition(GeneralAllocationConstants.P2S_ATTRIBUTES.AIRLINE,
                GeneralAllocationConstants.OPERATORS.EQUAL_TO, new List<string>() { "AAL", "AIC" });
            conditions.Add(condition2);
            FlightGroupingRuleCondition condition3 = new FlightGroupingRuleCondition(GeneralAllocationConstants.P2S_ATTRIBUTES.FLIGHT_CATEGORY,
                GeneralAllocationConstants.OPERATORS.EQUAL_TO, new List<string>() { "Oneworld_INT_LH_E", "Star Alliance_INT_SH_C" });
            conditions.Add(condition3);
            FlightGroupingRule testRule = new FlightGroupingRule("Test rule", "3 conditions rule", conditions);
            //test rule
            Dictionary<GeneralAllocationConstants.P2S_ATTRIBUTES, List<string>> flightPlanData =
                getFlightPlanData(DonneesEnCours.getTable("Input", GlobalNames.FPATableName), DonneesEnCours.getTable("Input", GlobalNames.FPDTableName));
            FlightGroupingRulesAssistant flightGroupingRulesAssistant = new FlightGroupingRulesAssistant(flightPlanData, testRule);
            if (flightGroupingRulesAssistant.ShowDialog() == DialogResult.OK)
            {
                bool x = flightGroupingRulesAssistant.resultedFlightGroupingRule != null;
            }
            return null;
        }

        public static Dictionary<GeneralAllocationConstants.P2S_ATTRIBUTES, List<string>> getFlightPlanData(DataTable arrivalFlightPlan, DataTable departureFlightPlan)
        {
            Dictionary<GeneralAllocationConstants.P2S_ATTRIBUTES, List<string>> flightPlanData = new Dictionary<GeneralAllocationConstants.P2S_ATTRIBUTES, List<string>>();
            #region FPA column indexes
            int fpaColumnIndexFlightId = -1;
            int fpaColumnIndexAirline = -1;
            int fpaColumnIndexFlightNb = -1;
            int fpaColumnIndexAirport = -1;
            int fpaColumnIndexFlightCategory = -1;
            int fpaColumnIndexAircraftType = -1;
            int fpaColumnIndexUser1 = -1;
            int fpaColumnIndexUser2 = -1;
            int fpaColumnIndexUser3 = -1;
            int fpaColumnIndexUser4 = -1;
            int fpaColumnIndexUser5 = -1;
            if (arrivalFlightPlan != null)
            {
                fpaColumnIndexFlightId = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_ID);
                fpaColumnIndexAirline = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_AirlineCode);
                fpaColumnIndexFlightNb = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightN);
                fpaColumnIndexAirport = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_AirportCode);
                fpaColumnIndexFlightCategory = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightCategory);
                fpaColumnIndexAircraftType = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_AircraftType);
                fpaColumnIndexUser1 = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User1);
                fpaColumnIndexUser2 = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User2);
                fpaColumnIndexUser3 = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User3);
                fpaColumnIndexUser4 = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User4);
                fpaColumnIndexUser5 = arrivalFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User5);
                if (fpaColumnIndexFlightId == -1 || fpaColumnIndexAirline == -1 || fpaColumnIndexFlightNb == -1 || fpaColumnIndexAirport == -1
                    || fpaColumnIndexFlightCategory == -1 || fpaColumnIndexAircraftType == -1 || fpaColumnIndexUser1 == -1 || fpaColumnIndexUser2 == -1
                    || fpaColumnIndexUser2 == -1 || fpaColumnIndexUser3 == -1 || fpaColumnIndexUser4 == -1 || fpaColumnIndexUser5 == -1)
                {
                    return flightPlanData;
                }
            }
            #endregion

            #region FPD column indexes
            int fpdColumnIndexFlightId = -1;
            int fpdColumnIndexAirline = -1;
            int fpdColumnIndexFlightNb = -1;
            int fpdColumnIndexAirport = -1;
            int fpdColumnIndexFlightCategory = -1;
            int fpdColumnIndexAircraftType = -1;
            int fpdColumnIndexUser1 = -1;
            int fpdColumnIndexUser2 = -1;
            int fpdColumnIndexUser3 = -1;
            int fpdColumnIndexUser4 = -1;
            int fpdColumnIndexUser5 = -1;
            if (departureFlightPlan != null)
            {
                fpdColumnIndexFlightId = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_ID);
                fpdColumnIndexAirline = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_AirlineCode);
                fpdColumnIndexFlightNb = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightN);
                fpdColumnIndexAirport = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_AirportCode);
                fpdColumnIndexFlightCategory = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightCategory);
                fpdColumnIndexAircraftType = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_AircraftType);
                fpdColumnIndexUser1 = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User1);
                fpdColumnIndexUser2 = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User2);
                fpdColumnIndexUser3 = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User3);
                fpdColumnIndexUser4 = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User4);
                fpdColumnIndexUser5 = departureFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User5);
                if (fpdColumnIndexFlightId == -1 || fpdColumnIndexAirline == -1 || fpdColumnIndexFlightNb == -1 || fpdColumnIndexAirport == -1
                    || fpdColumnIndexFlightCategory == -1 || fpdColumnIndexAircraftType == -1 || fpdColumnIndexUser1 == -1 || fpdColumnIndexUser2 == -1
                    || fpdColumnIndexUser2 == -1 || fpdColumnIndexUser3 == -1 || fpdColumnIndexUser4 == -1 || fpdColumnIndexUser5 == -1)
                {
                    return flightPlanData;
                }
            }
            #endregion

            if (arrivalFlightPlan != null)
            {
                foreach (DataRow row in arrivalFlightPlan.Rows)
                {
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexFlightId, GeneralAllocationConstants.P2S_ATTRIBUTES.FLIGHT_ID);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexAirline, GeneralAllocationConstants.P2S_ATTRIBUTES.AIRLINE);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexFlightNb, GeneralAllocationConstants.P2S_ATTRIBUTES.FLIGHT_NUMBER);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexAirport, GeneralAllocationConstants.P2S_ATTRIBUTES.AIRPORT);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexFlightCategory, GeneralAllocationConstants.P2S_ATTRIBUTES.FLIGHT_CATEGORY);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexAircraftType, GeneralAllocationConstants.P2S_ATTRIBUTES.AIRCRAFT_TYPE);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexUser1, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_1);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexUser2, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_2);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexUser3, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_3);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexUser4, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_4);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpaColumnIndexUser5, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_5);                    
                }
                if (flightPlanData.ContainsKey(GeneralAllocationConstants.P2S_ATTRIBUTES.ARR_OR_DEP))
                {
                    flightPlanData[GeneralAllocationConstants.P2S_ATTRIBUTES.ARR_OR_DEP].Add(FlightAttribute.ARR_OR_DEP_FLIGHT_TAG.A.ToString());
                }
                else
                {
                    flightPlanData.Add(GeneralAllocationConstants.P2S_ATTRIBUTES.ARR_OR_DEP, new List<string> { FlightAttribute.ARR_OR_DEP_FLIGHT_TAG.A.ToString() });
                }
            }
            if (departureFlightPlan != null)
            {
                foreach (DataRow row in departureFlightPlan.Rows)
                {
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexFlightId, GeneralAllocationConstants.P2S_ATTRIBUTES.FLIGHT_ID);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexAirline, GeneralAllocationConstants.P2S_ATTRIBUTES.AIRLINE);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexFlightNb, GeneralAllocationConstants.P2S_ATTRIBUTES.FLIGHT_NUMBER);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexAirport, GeneralAllocationConstants.P2S_ATTRIBUTES.AIRPORT);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexFlightCategory, GeneralAllocationConstants.P2S_ATTRIBUTES.FLIGHT_CATEGORY);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexAircraftType, GeneralAllocationConstants.P2S_ATTRIBUTES.AIRCRAFT_TYPE);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexUser1, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_1);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexUser2, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_2);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexUser3, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_3);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexUser4, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_4);
                    addFlightPlanDataIfNotPresent(flightPlanData, row, fpdColumnIndexUser5, GeneralAllocationConstants.P2S_ATTRIBUTES.USER_5);
                }
                if (flightPlanData.ContainsKey(GeneralAllocationConstants.P2S_ATTRIBUTES.ARR_OR_DEP))
                {
                    flightPlanData[GeneralAllocationConstants.P2S_ATTRIBUTES.ARR_OR_DEP].Add(FlightAttribute.ARR_OR_DEP_FLIGHT_TAG.D.ToString());
                }
                else
                {
                    flightPlanData.Add(GeneralAllocationConstants.P2S_ATTRIBUTES.ARR_OR_DEP, new List<string> { FlightAttribute.ARR_OR_DEP_FLIGHT_TAG.D.ToString() });
                }
            }
            return flightPlanData;
        }

        private static void addFlightPlanDataIfNotPresent(Dictionary<GeneralAllocationConstants.P2S_ATTRIBUTES, List<string>> flightPlanData,
            DataRow flightPlanRow, int flightPlanColumnIndex, GeneralAllocationConstants.P2S_ATTRIBUTES p2sAttribute)
        {
            List<string> values = null;
            if (flightPlanRow[flightPlanColumnIndex] != null)
            {
                if (flightPlanData.ContainsKey(p2sAttribute))
                {
                    values = flightPlanData[p2sAttribute];
                    if (!values.Contains(flightPlanRow[flightPlanColumnIndex].ToString()))
                    {
                        values.Add(flightPlanRow[flightPlanColumnIndex].ToString());
                    }
                }
                else
                {
                    values = new List<string>();
                    values.Add(flightPlanRow[flightPlanColumnIndex].ToString());
                    flightPlanData.Add(p2sAttribute, values);
                }
            }            
        }

        private void launchGeneralAllocation(GeneralAllocationParameters allocationData)
        {

        }
        // << Task #12790 Allocation app

        private void Allocate(String sScenarioName)
        {
            Prompt.SIM_Allocation samForm = new SIMCORE_TOOL.Prompt.SIM_Allocation(DonneesEnCours, DonneesEnCours.GetAllocation(sScenarioName));
            if (samForm.ShowDialog() != DialogResult.OK)
                return;
            bool bUpdate = false;
            List<String> lsTmp = DonneesEnCours.getScenarioAllocation();
            List<String> lsUsedNames = DonneesEnCours.getScenarioNames();
            bUpdate = (lsTmp != null) && (lsTmp.Contains(samForm.TablesNames));
            if (lsUsedNames.Contains(samForm.TablesNames) && (!bUpdate))
            {
                //Problem
                return;
            }

            if (!bUpdate)
            {
                DonneesEnCours.AddScenario(samForm.TablesNames, samForm.getGatAllocation());
                for (int i = 0; i < samForm.Results.Length; i++)
                {
                    DonneesEnCours.AddTable(samForm.TablesNames, samForm.Results[i]);
                }
                if (samForm.getGatAllocation().TableErrors != null)
                    DonneesEnCours.AddTable(samForm.TablesNames, samForm.getGatAllocation().TableErrors);

                if (samForm.getGatAllocation().Statistiques != null)
                    DonneesEnCours.AddTable(samForm.TablesNames, samForm.getGatAllocation().Statistiques);
            }
            else
            {
                DonneesEnCours.UpdateAllocationScenario(samForm.TablesNames, samForm.getGatAllocation());
            }

            GestionScenarios(samForm.TablesNames);
            TreeNode ScenarioNode = CurrentNode;
            List<String> NodeToDelete = new List<string>();
            foreach (TreeNode tnTmp in CurrentNode.Nodes)
            {
                NodeToDelete.Add(tnTmp.Name);
            }


            for (int i = 0; i < samForm.Results.Length; i++)
            {
                String sTableName = samForm.Results[i].TableName;
                if (NodeToDelete.Contains(sTableName))
                    NodeToDelete.Remove(sTableName);
                DonneesEnCours.AddReplaceTable(samForm.TablesNames, /*samForm.Results[i].TableName,*/ samForm.Results[i]);
                DonneesEnCours.SetAllocatedTable(samForm.TablesNames, sTableName);
                DonneesEnCours.AddReplaceModeVisualisation(samForm.TablesNames, sTableName, samForm.VisualisationModeResults[i]);
                TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(sTableName, ScenarioNode);
                if (tmp == null)
                {
                    OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                               OverallTools.TreeViewFunctions.createBranch(sTableName, sTableName,
                                   TreeViewTag.getTableNode(samForm.TablesNames, sTableName), contextMenuInput), false, true, true);
                }
            }
            if (samForm.getGatAllocation().TableErrors != null)
            {
                if (NodeToDelete.Contains(samForm.getGatAllocation().TableErrors.TableName))
                    NodeToDelete.Remove(samForm.getGatAllocation().TableErrors.TableName);
                DonneesEnCours.AddReplaceTable(samForm.TablesNames, samForm.getGatAllocation().TableErrors);
                DonneesEnCours.SetAllocatedTable(samForm.TablesNames, samForm.getGatAllocation().TableErrors.TableName);
                TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(samForm.getGatAllocation().TableErrors.TableName, ScenarioNode);
                if (tmp == null)
                {
                    OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                               OverallTools.TreeViewFunctions.createBranch(samForm.getGatAllocation().TableErrors.TableName, samForm.getGatAllocation().TableErrors.TableName,
                                   TreeViewTag.getTableNode(samForm.TablesNames, samForm.getGatAllocation().TableErrors.TableName), contextMenuInput), false, true, true);
                }
            }
            if (samForm.getGatAllocation().Statistiques != null)
            {
                if (NodeToDelete.Contains(samForm.getGatAllocation().Statistiques.TableName))
                    NodeToDelete.Remove(samForm.getGatAllocation().Statistiques.TableName);
                DonneesEnCours.AddReplaceTable(samForm.TablesNames, samForm.getGatAllocation().Statistiques);
                DonneesEnCours.SetAllocatedTable(samForm.TablesNames, samForm.getGatAllocation().Statistiques.TableName);
                TreeNode tmp = OverallTools.TreeViewFunctions.RechercherNom(samForm.getGatAllocation().Statistiques.TableName, ScenarioNode);
                if (tmp == null)
                {
                    OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                               OverallTools.TreeViewFunctions.createBranch(samForm.getGatAllocation().Statistiques.TableName, samForm.getGatAllocation().Statistiques.TableName,
                                   TreeViewTag.getTableNode(samForm.TablesNames, samForm.getGatAllocation().Statistiques.TableName), contextMenuInput), false, true, true);
                }
            }

            // Scenario Allocation FlightPlan Information table for gantt
            VisualisationMode myMode = new VisualisationMode(true, false, true, null, null, false, false,
                Color.White, Color.Blue, Color.Black, Color.White, VisualisationMode.SelectionModeEnum.Cell, VisualisationMode.EditModeEnum.Cell,
                new int[] { 0 }, null, null, null, null);

            if (samForm.getGatAllocation().FlightPlanInformation != null)
            {
                if (NodeToDelete.Contains(samForm.getGatAllocation().FlightPlanInformation.TableName))
                    NodeToDelete.Remove(samForm.getGatAllocation().FlightPlanInformation.TableName);
                DonneesEnCours.AddReplaceTable(samForm.TablesNames, samForm.getGatAllocation().FlightPlanInformation);
                DonneesEnCours.SetAllocatedTable(samForm.TablesNames, samForm.getGatAllocation().FlightPlanInformation.TableName);
                DonneesEnCours.AddReplaceModeVisualisation(samForm.TablesNames, samForm.getGatAllocation().FlightPlanInformation.TableName, myMode);
                TreeNode tmp2 = OverallTools.TreeViewFunctions.RechercherNom(samForm.getGatAllocation().FlightPlanInformation.TableName, ScenarioNode);
                if (tmp2 == null)
                {
                    OverallTools.TreeViewFunctions.AddSortedNode(ScenarioNode,
                               OverallTools.TreeViewFunctions.createBranch(samForm.getGatAllocation().FlightPlanInformation.TableName, samForm.getGatAllocation().FlightPlanInformation.TableName,
                                   TreeViewTag.getTableNode(samForm.TablesNames, samForm.getGatAllocation().FlightPlanInformation.TableName), contextMenuInput), false, true, true);
                }
            }

            if (NodeToDelete.Count != 0)
            {
                foreach (String sTmp in NodeToDelete)
                {
                    TreeNode tnTmp = OverallTools.TreeViewFunctions.RechercherNom(sTmp, ScenarioNode);
                    if (tnTmp == null)
                        continue;
                    DonneesEnCours.RemoveTable(samForm.TablesNames, sTmp);
                    ScenarioNode.Nodes.Remove(tnTmp);
                }
            }
            DonneesEnCours.UpdateScenarioTree(samForm.TablesNames, CurrentNode);
            if ((samForm.getGatAllocation() != null) && (samForm.getGatAllocation().AllocateFlightPlan) && (samForm.getGatAllocation().dtFPTable != null))
            {
                DonneesEnCours.aEteModifiee("Input", samForm.getGatAllocation().dtFPTable.TableName);
            }
            CurrentNode.Expand();
        }
        #endregion

        #region Gestion de l'icone de notification avec toutes ses options.
        private void tsmi_Pax2SimBtn_Click(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized)
                this.WindowState = FormWindowState.Normal;
            //this.BringToFront();
            this.Focus();
        }
        private void tsmi_ErrorList_Click(object sender, EventArgs e)
        {
            lesErreurs.Show();
            lesErreurs.Focus();
        }
        private void notifyPRJ4C_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.Focus();
            }
        }
        #endregion
        
        #region ##############       Sodexi developments
        /*23/03/2012 : 
        SGE : Modifications linked to the fact that originally the sodexi project wasn't able to update the tables
        of an existing scenario. The modifications will be marked with :
        //SGE-23/03/2012-Sodexi-Begin
        //SGE-23/03/2012-Sodexi-End
         * Sodexi 05.06.2012: FPD+item/weight/volume columns
         * Sodexi Task#7129 Bagplan Update
        */
        private void estimateAirportOccupationToolStripMenuItem_Click(object sender, EventArgs e)
        {


            BagFlow bf = new BagFlow(DonneesEnCours, false);
            if (bf.ShowDialog() != System.Windows.Forms.DialogResult.OK)
                return;

            this.Enabled = false;
            Prompt.SIM_Chargement cht = null;
            ///Morceau de code qui permet de séparer le chargement de la visualisation.
            if (!bDebug)
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
            }
            #region Génération des plans de vols
            /*DataTable dtArrival = null;
                DataTable dtDeparture = null;
                DataTable dtMix = null;*/

            if (cht != null)
            {
                cht.setFileNumber(5);
                cht.ChargementFichier("Convert input tables");
            }
            DataTable dtPosteFret = null;
            try
            {
                /*dtArrival = DonneesEnCours.GetFormatedUserDataTable(bf.ArrivalFlightPlanName).Table;
                dtDeparture = DonneesEnCours.GetFormatedUserDataTable(bf.DepartureFlightPlanName).Table;
                dtMix = DonneesEnCours.GetFormatedUserDataTable(bf.MixName).Table;
                */
                dtPosteFret = DonneesEnCours.GetFormatedUserDataTable(bf.FretPosteName).Table;
            }
            catch
            {
                //dtArrival = null;
            }
            if (/*(dtArrival == null) || (dtDeparture == null) || (dtMix == null) ||*/ (dtPosteFret == null))
            {
                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();

                MessageBox.Show("An error occurs while converting the UserData table to tables for the conversion", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            /*ConversionPlanDeVols cpdvTmp = null;
            try
            {
                cpdvTmp = new ConversionPlanDeVols(dtArrival, dtDeparture, dtMix);
                cpdvTmp.ConvertFlightPlan();
            }
            catch
            {
                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
                MessageBox.Show("An error occurs while converting the flight plan format to PAX2SIM flight Plan format", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            if (cpdvTmp.FPATable != null)
                DonneesEnCours.UpdateTable("Input", GlobalNames.FPATableName, cpdvTmp.FPATable);
            if (cpdvTmp.FPDTable != null)
                DonneesEnCours.UpdateTable("Input", GlobalNames.FPDTableName, cpdvTmp.FPDTable);

            if (cpdvTmp.MakeUpException != null)
                DonneesEnCours.AddReplaceExceptionTable("Input", GlobalNames.OCT_MakeUpTableName, cpdvTmp.MakeUpException, GlobalNames.Flight);
            if (cpdvTmp.AircraftException != null)
                DonneesEnCours.AddReplaceExceptionTable("Input", GlobalNames.FP_AircraftTypesTableName, cpdvTmp.AircraftException, GlobalNames.Flight);

            DonneesEnCours.aEteModifiee("Input", GlobalNames.FPATableName);
            DonneesEnCours.aEteModifiee("Input", GlobalNames.FPDTableName);

            ReinitInputTable();*/                        
            #endregion

            // << Sodexi Task#7129 Bagplan Update
            #region LocalAirports table
            DataTable dtLocalAirports = null;
            dtLocalAirports = DonneesEnCours.GetFormatedUserDataTable(bf.LocalAirportsName).Table;
            if (dtLocalAirports == null)
            {
                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
                MessageBox.Show("An error occurs while converting the UserData table Local Airports", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            #endregion
            // >> Sodexi Task#7129 Bagplan Update
            #region Génération nouveau scénario.

            if (cht != null)
            {
                cht.ChargementFichier("Creating Scenario");
            }
            ParamScenario psScenario = ConversionPlanDeVols.GenerationScenario(bf.ScenarioName,
                bf.StartDate, bf.EndDate, bf.SamplingStep, bf.AnalysisRange, bf.UserDataParameters);
            GestionScenarios(psScenario);


            #endregion

            #region Test Generation BagPlan
            GenerateBagPlanFromSodexi gbpfsTmp = null;
            try
            {
                if (cht != null)
                {
                    cht.ChargementFichier("Generation of BagPlan");
                }
                // Sodexi Task#7129 Bagplan Update
                gbpfsTmp = new GenerateBagPlanFromSodexi(DonneesEnCours.getTable("Input", GlobalNames.FPDTableName),
                    DonneesEnCours.getTable("Input", GlobalNames.FPATableName),
                    dtPosteFret,
                    dtLocalAirports,
                    bf.StartDate,
                    bf.EndDate,
                    bf.MinTimeBetweenFlights,
                    bf.ADSize, bf.ADWeight, bf.ADVolume,
                    bf.ContainerSize, bf.ContainerWeight, bf.ContainerVolume);
                gbpfsTmp.GenerateBagPlan();
            }
            catch
            {
                MessageBox.Show("An error appears while trying to generate the BagPlan", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                gbpfsTmp = null;
            }
            #endregion

            #region Tests analyse bagplan
            AnalyseBagPlanClass sSodexi = null;
            try
            {
                if (gbpfsTmp != null)
                {

                    if (cht != null)
                    {
                        cht.ChargementFichier("Analysing BagPlan");
                    }
                    sSodexi = new AnalyseBagPlanClass(bf.StartDate,
                        bf.EndDate,
                        FonctionsType.getInt(bf.SamplingStep),
                        bf.MeanDwellTime,
                        bf.LongStorageParameter
                        /*bf.MinTimeBetweenFlights*/,
                        bf.ADSize,
                        gbpfsTmp.BagPlan,
                        DonneesEnCours.getTable("Input", GlobalNames.FPATableName),
                        DonneesEnCours.getTable("Input", GlobalNames.FPDTableName),
                        DonneesEnCours.GetTable("Input", GlobalNames.OCT_MakeUpTableName));

                    sSodexi.AnalyseBagPlan();
                }
            }
            catch
            {
                MessageBox.Show("An error appears while trying to analyse the BagPlan", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                sSodexi = null;
            }
            #endregion

            #region Mise à jour des tables dans le nouveau scénario
            if (gbpfsTmp != null)
            {

                if (gbpfsTmp.BagPlan != null)
                    //SGE-23/03/2012-Sodexi-Begin
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, gbpfsTmp.BagPlan);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, GlobalNames.BagPlanName);
                //SGE-23/03/2012-Sodexi-End

                // << Sodexi Task#7129 Bagplan Update
                if (gbpfsTmp.BagPlan2 != null)
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, gbpfsTmp.BagPlan2);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, GlobalNames.BagPlan2Name);
                // >> Sodexi Task#7129 Bagplan Update

                if (gbpfsTmp.BagPlanInformation != null)
                    //SGE-23/03/2012-Sodexi-Begin
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, gbpfsTmp.BagPlanInformation);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, "BagPlan Information");
                //SGE-23/03/2012-Sodexi-End

                if (gbpfsTmp.BagPlanConversionErrors != null)
                    //SGE-23/03/2012-Sodexi-Begin
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, gbpfsTmp.BagPlanConversionErrors);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, "BagPlan Errors");
                //SGE-23/03/2012-Sodexi-End

                if (gbpfsTmp.IgnoredLines != null)
                    //SGE-23/03/2012-Sodexi-Begin
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, gbpfsTmp.IgnoredLines);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, "Ignored Lines");
                //SGE-23/03/2012-Sodexi-End

                if (gbpfsTmp.DepartureStatistiques != null)
                    //SGE-23/03/2012-Sodexi-Begin
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, gbpfsTmp.DepartureStatistiques);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, "Depature Statistics");
                //SGE-23/03/2012-Sodexi-End
                //Sodexi 05.06.2012 Begin
                if (gbpfsTmp.FPDStatisticsExtended != null)
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, gbpfsTmp.FPDStatisticsExtended);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, GlobalNames.FPDStatisticsExtendedName);
                //Sodexi 05.06.2012 End

            }

            if (sSodexi != null)
            {
                if (sSodexi.StatistiquesIn != null)
                    //SGE-23/03/2012-Sodexi-Begin
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, sSodexi.StatistiquesIn);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, "StatistiquesIn");
                //SGE-23/03/2012-Sodexi-End


                if (sSodexi.FPABags != null)
                    //SGE-23/03/2012-Sodexi-Begin
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, sSodexi.FPABags);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, "FPA_Bags");
                //SGE-23/03/2012-Sodexi-End


                if (sSodexi.FPDBags != null)
                    //SGE-23/03/2012-Sodexi-Begin
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, sSodexi.FPDBags);
                else
                    DonneesEnCours.RemoveTable(bf.ScenarioName, "FPD_Bags");
                //SGE-23/03/2012-Sodexi-End


                if (sSodexi.StatistiquesOut != null)
                {
                    //SGE-23/03/2012-Sodexi-Begin
                    DonneesEnCours.AddReplaceTable(bf.ScenarioName, sSodexi.StatistiquesOut);
                    //SGE-23/03/2012-Sodexi-End

                    VisualisationMode vmMode = DonneesEnCours.getModeVisualisation(bf.ScenarioName, sSodexi.StatistiquesOut.TableName);

                    if (vmMode == null)
                        vmMode = VisualisationMode.LockMode.Clone();
                    vmMode.ConditionnalFormatClass = new VisualisationMode.ConditionnalFormat[] { sSodexi.FormatStatistiqueOut };
                    DonneesEnCours.AddReplaceModeVisualisation(bf.ScenarioName, sSodexi.StatistiquesOut.TableName, vmMode);
                }
                //SGE-23/03/2012-Sodexi-Begin
                else
                {
                    DonneesEnCours.RemoveTable(bf.ScenarioName, "StatistiquesOut");
                }
                //SGE-23/03/2012-Sodexi-End
            }
            TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(bf.ScenarioName, treeView1.Nodes[2]);
            if (ScenarioPosition == null)
            {
                MessageBox.Show("There was a problem during the execution of the application", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            DonneesEnCours.Maj_Scenario(bf.ScenarioName, ScenarioPosition, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
            if (sSodexi != null)
            {

                if (cht != null)
                {
                    cht.ChargementFichier("Apply filters");
                }
                UpdateFilters(ScenarioPosition, sSodexi.Filters);
            }
            DonneesEnCours.UpdateScenarioTree(bf.Name, ScenarioPosition);

            this.Enabled = true;
            if (cht != null)
                cht.KillWindow();
            if (sSodexi != null)
                setErrors(new ArrayList(sSodexi.Errors.ToArray()), true);
            #endregion

            ReinitInputTable();


        }

        private void generateFlightPlansToolStripMenuItem_Click(object sender, EventArgs e)
        {
            BagFlow bf = new BagFlow(DonneesEnCours, true);
            if (bf.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                this.Enabled = false;
                Prompt.SIM_Chargement cht = null;
                ///Morceau de code qui permet de séparer le chargement de la visualisation.
                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                #region Génération des plans de vols
                DataTable dtArrival = null;
                DataTable dtDeparture = null;
                DataTable dtMix = null;

                if (cht != null)
                {
                    cht.setChenillard = true;
                    //cht.ChargementFichier("Convert input tables");
                }
                try
                {
                    dtArrival = DonneesEnCours.GetFormatedUserDataTable(bf.ArrivalFlightPlanName).Table;
                    dtDeparture = DonneesEnCours.GetFormatedUserDataTable(bf.DepartureFlightPlanName).Table;
                    dtMix = DonneesEnCours.GetFormatedUserDataTable(bf.MixName).Table;

                }
                catch
                {
                    dtArrival = null;
                }
                if ((dtArrival == null) || (dtDeparture == null) || (dtMix == null))
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();

                    MessageBox.Show("An error occurs while converting the UserData table to tables for the conversion", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

                ConversionPlanDeVols cpdvTmp = null;
                try
                {
                    cpdvTmp = new ConversionPlanDeVols(dtArrival, 
                        dtDeparture, 
                        dtMix,
                        bf.IndexMupImportStart,bf.IndexMupImportEnd,
                        bf.IndexMupPosteStart,bf.IndexMupPosteEnd,
                        bf.IndexMupPosteCHRStart,bf.IndexMupPosteCHREnd,
                        bf.IndexMupPosteCYMStart,bf.IndexMupPosteCYMEnd,
                        bf.IndexMupADAreaStart,bf.IndexMupADAreaEnd
                        );
                    cpdvTmp.ConvertFlightPlan();
                }
                catch
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    MessageBox.Show("An error occurs while converting the flight plan format to PAX2SIM flight Plan format", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
                if (cpdvTmp.FPATable != null)
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FPATableName, cpdvTmp.FPATable);
                if (cpdvTmp.FPDTable != null)
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FPDTableName, cpdvTmp.FPDTable);

                if (cpdvTmp.MakeUpException != null)
                    DonneesEnCours.AddReplaceExceptionTable("Input", GlobalNames.OCT_MakeUpTableName, cpdvTmp.MakeUpException, GlobalNames.Flight);
                if (cpdvTmp.AircraftException != null)
                    DonneesEnCours.AddReplaceExceptionTable("Input", GlobalNames.FP_AircraftTypesTableName, cpdvTmp.AircraftException, GlobalNames.Flight);

                DonneesEnCours.aEteModifiee("Input", GlobalNames.FPATableName);
                DonneesEnCours.aEteModifiee("Input", GlobalNames.FPDTableName);

                ReinitInputTable();
                
                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
                #endregion
            }
        }
        
        #endregion

        // >> Task #12393 Pax2Sim - File conversion for Athens
        #region Athens International Airport file conversion

        private void generateFlightPlansAIAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ArrayList aiaMessages = new ArrayList();
            List<AthensTools.ImportDataInformation> aiaImportInformationList = new List<AthensTools.ImportDataInformation>();

            FlightPlanImportAssistantForAIA importAssistant = new FlightPlanImportAssistantForAIA(DonneesEnCours);
            if (importAssistant.DialogResult != DialogResult.Abort && importAssistant.ShowDialog() == DialogResult.OK)
            {
                this.Enabled = false;
                Prompt.SIM_Chargement cht = null;
                
                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                
                DataTable flightPlanTable = null;                
                //DataTable checkInAllocationTable = null;
                DataTable makeUpAllocationTable = null;
                //DataTable reclaimAllocationTable = null;
                DataTable localAirportsTable = null;
                DataTable airlineDatabaseTable = null;
                
                if (cht != null)
                {
                    cht.setChenillard = true;                    
                }
                try
                {
                    flightPlanTable = importAssistant.flightPlanTable; //DonneesEnCours.GetFormatedUserDataTableForFlightPlan(importAssistant.flightPlanFileName).Table;
                    //checkInAllocationTable = DonneesEnCours.GetFormatedUserDataTable(importAssistant.checkInAllocationFileName).Table;
                    makeUpAllocationTable = importAssistant.makeUpAllocation.Table; //DonneesEnCours.GetFormatedUserDataTable(importAssistant.makeUpALlocationFileName).Table;
                    //reclaimAllocationTable = DonneesEnCours.GetFormatedUserDataTable(importAssistant.reclaimAllocationFileName).Table;
                    localAirportsTable = importAssistant.localAirports.Table;   //DonneesEnCours.GetFormatedUserDataTable(importAssistant.localAirportsFileName).Table;
                    airlineDatabaseTable = importAssistant.airlinesDatabaseTable;
                }
                catch
                {
                    flightPlanTable = null;
                    //checkInAllocationTable = null;
                    makeUpAllocationTable = null;
                    //reclaimAllocationTable = null;
                    localAirportsTable = null;
                    airlineDatabaseTable = null;
                }
                if (flightPlanTable == null || localAirportsTable == null || makeUpAllocationTable == null || airlineDatabaseTable == null)
                    //|| checkInAllocationTable == null || makeUpAllocationTable == null || reclaimAllocationTable == null)
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();

                    MessageBox.Show("Error while loading from the User Data the table needed for conversion.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

                AthensTools.ImportDataInformation info = new AthensTools.ImportDataInformation();
                info.fileName = flightPlanTable.Namespace;                 
                aiaImportInformationList.Add(info);

                // convert local airports
                ArrayList localAirportErrors = new ArrayList();
                List<AthensTools.ImportDataInformation> localAirportInformation = new List<AthensTools.ImportDataInformation>();
                AthensTools.setUpLocalAirportCodesFromImportedTable(localAirportsTable, importAssistant.localAirportsFileName,
                    out localAirportErrors, out localAirportInformation);
                
                if (localAirportErrors.Count > 0)
                {
                    aiaMessages.AddRange(localAirportErrors);
                    setErrors(aiaMessages, false);

                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    MessageBox.Show("Error(s) occured while converting the flight plan format to PAX2SIM flight Plan format. The process could not be completed.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else if (localAirportInformation.Count > 0)
                {
                    aiaImportInformationList.AddRange(localAirportInformation);
                }

                //extract airline IATA and ICAO codes list from the Airline_Database.csv file
                ArrayList airlineDatabaseErrors = new ArrayList();
                List<AthensTools.ImportDataInformation> airlineDatabaseInformation = new List<AthensTools.ImportDataInformation>();
                Dictionary<String, String> airlineIATAKeyICAOValueDictionary = new Dictionary<string,string>();
                Dictionary<String, String> airlineICAOKeyIATAValueDictionary = new Dictionary<string, string>();
                
                AthensTools.setUpAirlineCodesFromAirlineDatabaseTable(airlineDatabaseTable,
                    out airlineIATAKeyICAOValueDictionary, out airlineICAOKeyIATAValueDictionary, out airlineDatabaseErrors, out airlineDatabaseInformation);

                //convert flight plan
                AthensTools.FlightPlanConversion flightPlanConversion 
                    = new AthensTools.FlightPlanConversion(flightPlanTable, importAssistant.flightPlanFileName, AthensTools.localAirportIATACodes,
                                                            airlineIATAKeyICAOValueDictionary, airlineICAOKeyIATAValueDictionary, importAssistant.startDate, importAssistant.endDate);
                flightPlanConversion.convert();

                if (flightPlanConversion.errorList.Count > 0)
                {
                    aiaMessages.AddRange(flightPlanConversion.errorList); 
                    setErrors(aiaMessages, false);
                    
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    MessageBox.Show("Error(s) occured while converting the flight plan format to PAX2SIM flight Plan format. The process could not be completed.", 
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else if (flightPlanConversion.infoList.Count > 0)
                {                    
                    aiaImportInformationList.AddRange(flightPlanConversion.infoList);
                }

                //allocation (reclaim for arrival / checkIn, mup for departure)
                /*
                AthensTools.DeskAllocation.ReclaimAllocation reclaimAllocation
                    = new AthensTools.DeskAllocation.ReclaimAllocation(reclaimAllocationTable, flightPlanConversion.arrivalFlightsDictionary);
                flightPlanConversion.arrivalFlightsDictionary = reclaimAllocation.convertAndUpdateAllocation();

                if (reclaimAllocation.infoList.Count > 0)
                {
                    aiaMessages.AddRange(reclaimAllocation.infoList);
                }

                AthensTools.DeskAllocation.CheckInAllocation checkInAllocation
                    = new AthensTools.DeskAllocation.CheckInAllocation(checkInAllocationTable, flightPlanConversion.departureFlightsDictionary);
                flightPlanConversion.departureFlightsDictionary = checkInAllocation.convertAndUpdateAllocation();

                if (checkInAllocation.infoList.Count > 0)
                {
                    aiaMessages.AddRange(checkInAllocation.infoList);
                }
                */
                AthensTools.DeskAllocation.MakeUpAllocation makeUpAllocation = new AthensTools.DeskAllocation.MakeUpAllocation(makeUpAllocationTable, 
                    airlineIATAKeyICAOValueDictionary, airlineICAOKeyIATAValueDictionary,
                    flightPlanConversion.departureFlightsDictionary, importAssistant.makeUpALlocationFileName);
                flightPlanConversion.departureFlightsDictionary = makeUpAllocation.convertAndUpdateAllocation();

                if (makeUpAllocation.infoList.Count > 0)
                {
                    aiaImportInformationList.AddRange(makeUpAllocation.infoList);
                }

                //update the FLight Plans
                DataTable currentFPA = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                DataTable currentFPD = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);

                AthensTools.FlightPlanUpdate flightPlanUpdate
                    = new AthensTools.FlightPlanUpdate(flightPlanConversion.arrivalFlightsDictionary, 
                        flightPlanConversion.departureFlightsDictionary, currentFPA, currentFPD);
                
                DataTable arrivalFlightPlanWithImportedData = null;
                DataTable departureFlightPlanWithImportedData = null;

                if (currentFPA != null && currentFPD != null)
                {
                    arrivalFlightPlanWithImportedData
                        = flightPlanUpdate.generateArrivalFlightPlanWithImportedData();

                    if (arrivalFlightPlanWithImportedData != null)
                    {
                        DonneesEnCours.UpdateTable("Input", GlobalNames.FPATableName, arrivalFlightPlanWithImportedData);
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.FPATableName);
                    }
                                        
                    departureFlightPlanWithImportedData
                        = flightPlanUpdate.generateDepartureFlightPlanWithImportedData();
                    if (departureFlightPlanWithImportedData != null)
                    {
                        DonneesEnCours.UpdateTable("Input", GlobalNames.FPDTableName, departureFlightPlanWithImportedData);
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.FPDTableName);
                    }
                }
                else
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    MessageBox.Show("The current Flight Plans could not be loaded. The process could not be completed.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                //use the lists with airline codes, flight categories and aircraft types from flightPlanConversion to update the Input Airline codes,... tables
                DataTable currentFlightCategoryTable = DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName);
                DataTable updatedFlightCategoryTable 
                    = AthensTools.createFlightCategoryTableWithImportedData(currentFlightCategoryTable, flightPlanConversion.importedFlightCategories);
                if (updatedFlightCategoryTable != null)
                {
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FP_FlightCategoriesTableName, updatedFlightCategoryTable);
                    DonneesEnCours.aEteModifiee("Input", GlobalNames.FP_FlightCategoriesTableName);
                }
                //updates the tables that depend on flight categories (ex. load factors)
                DonneesEnCours.Update_FlightCategorie();

                DataTable currentAirlineCodesTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AirlineCodesTableName);
                DataTable updatedAirlineCodesTable
                    = AthensTools.createAirlineCodesTableWithImportedData(currentAirlineCodesTable, flightPlanConversion.importedAirlineCodes);
                if (updatedAirlineCodesTable != null)
                {
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FP_AirlineCodesTableName, updatedAirlineCodesTable);
                    DonneesEnCours.aEteModifiee("Input", GlobalNames.FP_AirlineCodesTableName);
                }
                /*
                DataTable currentAircraftTypesTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AircraftTypesTableName);
                List<AthensTools.ImportDataInformation> newAircraftTypesInfo 
                    = AthensTools.getInformationAboutNewAircraftTypes(currentAircraftTypesTable, flightPlanConversion.importedAircraftTypes);
                if (newAircraftTypesInfo.Count > 0)
                {
                    aiaImportInformationList.AddRange(newAircraftTypesInfo);
                }
                
                DataTable currentAircraftTypesTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AircraftTypesTableName);
                DataTable updatedAircraftTypesTable
                    = AthensTools.createAircraftTypesTableWithImportedData(currentAircraftTypesTable, flightPlanConversion.importedAircraftTypes);
                if (updatedAircraftTypesTable != null)
                {
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FP_AircraftTypesTableName, updatedAircraftTypesTable);
                    DonneesEnCours.aEteModifiee("Input", GlobalNames.FP_AircraftTypesTableName);                    
                }
                */
                DataTable informationTable = AthensTools.createInformationTable(aiaImportInformationList);

                //save the imported FPD, FPA and information table also in the Analysis/Scenario directory
                DateTime now = DateTime.Now;                
                String scenarioName = "Import Date " + "D" + now.Day + "_M" + now.Month + "_Y" + now.Year 
                    + "_H" + now.Hour + "_M" + now.Minute + "_S" + now.Second;
                //scenarioName = scenarioName.Replace("/", "_");
                //scenarioName = scenarioName.Replace(":", "_");

                ParamScenario scenario = ConversionPlanDeVols.GenerationScenario(scenarioName,
                importAssistant.startDate, importAssistant.endDate, 5, 5, new Dictionary<string, string>());
                GestionScenarios(scenario);

                //add the tables
                if (informationTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, informationTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AthensTools.INFORMATION_TABLE_NAME);

                if (arrivalFlightPlanWithImportedData != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, arrivalFlightPlanWithImportedData);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AthensTools.FlightPlanUpdate.IMPORTED_FPA_TABLE_NAME);

                if (departureFlightPlanWithImportedData != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, departureFlightPlanWithImportedData);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AthensTools.FlightPlanUpdate.IMPORTED_FPD_TABLE_NAME);

                //update the scenario
                TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenario.Name, treeView1.Nodes[2]);
                if (ScenarioPosition == null)
                {
                    MessageBox.Show("The import data could not be saved into the scenario.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    return;
                }
                DonneesEnCours.Maj_Scenario(scenario.Name, ScenarioPosition, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
                DonneesEnCours.UpdateScenarioTree(scenario.Name, ScenarioPosition);

                ReinitInputTable();
                
                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();

                ////test
                /*
                Dictionary<String, String> dictUP = new Dictionary<string, string>(); dictUP.Add(currentAircraftTypesTable.TableName, currentAircraftTypesTable.TableName);
                
                ParamScenario psScenario = ConversionPlanDeVols.GenerationScenario(""+new DateTime(),
                importAssistant.startDate, importAssistant.endDate, 5, 5, dictUP);
                GestionScenarios(psScenario);
                if (currentAircraftTypesTable != null)
                    DonneesEnCours.AddReplaceTable(psScenario.Name, currentAircraftTypesTable);
                else
                    DonneesEnCours.RemoveTable(psScenario.Name, GlobalNames.FP_AircraftTypesTableName);

                TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(psScenario.Name, treeView1.Nodes[2]);
                if (ScenarioPosition == null)
                {
                    MessageBox.Show("There was a problem during the execution of the application", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

                DonneesEnCours.Maj_Scenario(psScenario.Name, ScenarioPosition, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable);
                DonneesEnCours.UpdateScenarioTree(psScenario.Name, ScenarioPosition);
                
                ReinitInputTable();                
                */
                /*
                for (int i = 0; i < 700; i++)
                {
                    String err = "Extremly looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong Test error nb." + i;
                    aiaMessages.Add(err);
                }*/
                ////end test
                if (aiaMessages.Count > 0)
                {
                    setErrors(aiaMessages, false);
                }
            }
        }
        #endregion
        // << Task #12393 Pax2Sim - File conversion for Athens

        // >> Task #14982 CDG - TBS4
        private void importCdgDepartureFlightPlansToolStripMenuItem_Click(object sender, EventArgs e)
        {
            FPDImportForCDGAssistant importAssistant = new FPDImportForCDGAssistant(DonneesEnCours);
            if (importAssistant.DialogResult != DialogResult.Abort && importAssistant.ShowDialog() == DialogResult.OK)
            {
                this.Enabled = false;
                Prompt.SIM_Chargement cht = null;

                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                if (cht != null)
                    cht.setChenillard = true;

                DataTable s3InterfaceTable = null;
                DataTable s4ScenarioTable = null;
                DataTable fpd = null;
                try
                {
                    s3InterfaceTable = DonneesEnCours.GetFormatedUserDataTable(importAssistant.s3InterfaceFileName).Table;
                    s4ScenarioTable = DonneesEnCours.GetFormatedUserDataTable(importAssistant.s4ScenarioFileName).Table;
                    fpd = DonneesEnCours.GetFormatedUserDataTable(importAssistant.fpFileName).Table;
                }
                catch
                {
                    s3InterfaceTable = null;
                    s4ScenarioTable = null;
                }
                if (s3InterfaceTable == null || s4ScenarioTable == null)
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();

                    MessageBox.Show("Error while loading from the User Data the table needed for conversion.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

                Dictionary<string, List<BaggageTriage>> s3InterfaceDictionary = Converter.getBaggageTriageDictionary(s3InterfaceTable);
                Dictionary<string, List<BaggageTriage>> s4ScenarioDictionary = Converter.getBaggageTriageDictionary(s4ScenarioTable);
                List<CDGFlight> flights = Converter.getFlights(fpd);

                DataTable currentFPD = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);
                DataTable departureFlightPlanWithImportedData
                        = Converter.generateDepartureFlightPlanWithImportedData(currentFPD, flights, s3InterfaceDictionary, s4ScenarioDictionary);

                if (departureFlightPlanWithImportedData != null)
                {
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FPDTableName, departureFlightPlanWithImportedData);
                    DonneesEnCours.aEteModifiee("Input", GlobalNames.FPDTableName);
                }
                DataTable mupOCT = DonneesEnCours.getTable("Input", GlobalNames.OCT_MakeUpTableName).Copy();
                List<DataColumn> columns = new List<DataColumn>();
                for (int i = 0; i < mupOCT.Columns.Count; i++)
                {
                    if (i > 0)
                        columns.Add(mupOCT.Columns[i]);
                }
                foreach (DataColumn col in columns)
                    mupOCT.Columns.Remove(col);

                DataTable mupOctExc = Converter.getOCT(flights, s3InterfaceDictionary, s4ScenarioDictionary, mupOCT);
                mupOctExc.TableName = MUP_OCT_EXC_TABLE_NAME;

                DateTime now = DateTime.Now;
                String scenarioName = "Import Date " + "D" + now.Day + "_M" + now.Month + "_Y" + now.Year
                    + "_H" + now.Hour + "_M" + now.Minute + "_S" + now.Second;
                ParamScenario scenario = ConversionPlanDeVols.GenerationScenario(scenarioName,
                DateTime.Now, DateTime.Now,
                5, 5, new Dictionary<string, string>());
                GestionScenarios(scenario);

                if (mupOctExc != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, mupOctExc);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, MUP_OCT_EXC_TABLE_NAME);

                //update the scenario
                TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenario.Name, treeView1.Nodes[2]);
                if (ScenarioPosition == null)
                {
                    MessageBox.Show("The generation data could not be saved into the scenario.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    return;
                }
                DonneesEnCours.Maj_Scenario(scenario.Name, ScenarioPosition, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
                DonneesEnCours.UpdateScenarioTree(scenario.Name, ScenarioPosition);

                TreeNode generatingResultsNode = getGeneratingResultsNode(ScenarioPosition, "Generating Results");
                clearRootAndAddSourceNodeChilds(ScenarioPosition, generatingResultsNode);

                ReinitInputTable();

                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
            }
        }
        internal const string MUP_OCT_EXC_TABLE_NAME = "MakeUpExceptions";
        // << Task #14982 CDG - TBS4

        // >> Task #12668 Pax2Sim - Dubai ADPi - Flight Plan Conversion // >> Task #14727 Dubai allocation
        private void importDubaiFlightPlansToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ArrayList dubaiMessages = new ArrayList();

            FlightPlanImportAssistantForDubai importAssistant = new FlightPlanImportAssistantForDubai(DonneesEnCours);
            if (importAssistant.DialogResult != DialogResult.Abort && importAssistant.ShowDialog() == DialogResult.OK)
            {
                this.Enabled = false;
                Prompt.SIM_Chargement cht = null;

                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                if (cht != null)
                    cht.setChenillard = true;

                DataTable flightPlanTable = null;
                try
                {
                    flightPlanTable = DonneesEnCours.GetFormatedUserDataTable(importAssistant.flightPlanFileName).Table;
                }
                catch
                {
                    flightPlanTable = null;
                }
                if (flightPlanTable == null)
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();

                    MessageBox.Show("Error while loading from the User Data the table needed for conversion.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

                //convert flight plan
                DubaiTools.FlightPlanConversion flightPlanConversion
                    = new DubaiTools.FlightPlanConversion(flightPlanTable);
                flightPlanConversion.convert();

                if (flightPlanConversion.errorList.Count > 0)
                {
                    dubaiMessages.AddRange(flightPlanConversion.errorList);
                    setErrors(dubaiMessages, false);

                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    MessageBox.Show("Error(s) occured while converting the flight plan format to PAX2SIM flight Plan format. The process could not be completed.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else if (flightPlanConversion.infoList.Count > 0)
                {
                    dubaiMessages.AddRange(flightPlanConversion.infoList);
                }
                flightPlanConversion.computeFlightDownTime();

                //update the FLight Plans
                DataTable currentFPA = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                DataTable currentFPD = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);

                DubaiTools.FlightPlanUpdate flightPlanUpdate
                    = new DubaiTools.FlightPlanUpdate(flightPlanConversion.arrivalFlightsDictionary,
                        flightPlanConversion.departureFlightsDictionary, currentFPA, currentFPD);

                DataTable arrivalFlightPlanWithImportedData;
                DataTable departureFlightPlanWithImportedData;

                if (currentFPA != null && currentFPD != null)
                {
                    arrivalFlightPlanWithImportedData
                        = flightPlanUpdate.generateArrivalFlightPlanWithImportedData();

                    if (arrivalFlightPlanWithImportedData != null)
                    {
                        DonneesEnCours.UpdateTable("Input", GlobalNames.FPATableName, arrivalFlightPlanWithImportedData);
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.FPATableName);
                    }

                    departureFlightPlanWithImportedData
                        = flightPlanUpdate.generateDepartureFlightPlanWithImportedData();

                    if (departureFlightPlanWithImportedData != null)
                    {
                        DonneesEnCours.UpdateTable("Input", GlobalNames.FPDTableName, departureFlightPlanWithImportedData);
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.FPDTableName);
                    }
                }
                else
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    MessageBox.Show("The current Flight Plans could not be loaded. The process could not be completed.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                //use the lists with airline codes, flight categories and aircraft types from flightPlanConversion to update the Input Airline codes,... tables
                //flightPlanConversion.importedAirlineCodes
                DataTable currentFlightCategoryTable = DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName);
                DataTable updatedFlightCategoryTable
                    = DubaiTools.createFlightCategoryTableWithImportedData(currentFlightCategoryTable, flightPlanConversion.importedFlightCategories);
                if (updatedFlightCategoryTable != null)
                {
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FP_FlightCategoriesTableName, updatedFlightCategoryTable);
                    DonneesEnCours.aEteModifiee("Input", GlobalNames.FP_FlightCategoriesTableName);
                }
                //updates the tables that depend on flight categories (ex. load factors)
                DonneesEnCours.Update_FlightCategorie();

                // >> Task #12741 Pax2Sim - Dubai - flight exceptions 
                #region backup Dubai code (there is a better solution - modify the allocation algorithm)
                /*
                if (departureFlightPlanWithImportedData != null)
                {
                    List<String> downTimeFlightCategories
                        = createFlightCategoriesBasedOnUniqueFlightDownTimesAndUpdateFlightPlan(departureFlightPlanWithImportedData);

                    DataTable downTimeFlightCategoryTable
                        = DubaiTools.createFlightCategoryTableWithImportedData(updatedFlightCategoryTable, downTimeFlightCategories);
                                                            
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FPDTableName, departureFlightPlanWithImportedData);
                    DonneesEnCours.aEteModifiee("Input", GlobalNames.FPDTableName);                    

                    if (downTimeFlightCategoryTable != null)
                    {
                        DonneesEnCours.UpdateTable("Input", GlobalNames.FP_FlightCategoriesTableName, downTimeFlightCategoryTable);
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.FP_FlightCategoriesTableName);
                    }
                    //updates the tables that depend on flight categories (ex. load factors)
                    DonneesEnCours.Update_FlightCategorie();

                    //update the Parking OCT table
                    DataTable parkingOCTTable = DonneesEnCours.getTable("Input", GlobalNames.OCT_ParkingTableName);
                    if (parkingOCTTable != null)
                    {
                        foreach (DataColumn col in parkingOCTTable.Columns)
                        {
                            if (col.ColumnName != GlobalNames.sColumnSelectACategory
                                && col.ColumnName.Contains(DOWN_TIME_FLIGHT_CATEGORY_PREFIX) && col.ColumnName.Length > 4)
                            {
                                String downTimeString = col.ColumnName.Substring(DOWN_TIME_FLIGHT_CATEGORY_PREFIX.Length);
                                double downTimeMinutes = -1;
                                if (Double.TryParse(downTimeString, out downTimeMinutes)
                                    && downTimeMinutes >= 0)
                                {
                                    parkingOCTTable.Rows[0][col] = downTimeMinutes;
                                    parkingOCTTable.Rows[1][col] = 0;
                                }
                            }
                        }
                    }                    
                }
                 */
                #endregion
                // << Task #12741 Pax2Sim - Dubai - flight exceptions

                ReinitInputTable();

                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
                
                if (dubaiMessages.Count > 0)
                {
                    setErrors(dubaiMessages, false);
                }
            }
        }

        private void generateFlightPlanInformationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ArrayList fpiMessages = new ArrayList();

            FlightPlanInformationForDubaiAssistant fpiAssistant = new FlightPlanInformationForDubaiAssistant(DonneesEnCours);
            if (fpiAssistant.DialogResult != DialogResult.Abort && fpiAssistant.ShowDialog() == DialogResult.OK)
            {
                this.Enabled = false;
                Prompt.SIM_Chargement cht = null;

                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }

                DataTable filteredFlightPlanTable = null;
                DataTable partialAllocationTable = null;
                DataTable cplexAllocationTable = null;

                if (cht != null)
                {
                    cht.setChenillard = true;
                }
                try
                {
                    filteredFlightPlanTable = DonneesEnCours.GetFormatedUserDataTable(fpiAssistant.filteredFlightPlanFileName).Table;
                    partialAllocationTable = DonneesEnCours.GetFormatedUserDataTable(fpiAssistant.partialAllocationFileName).Table;
                    cplexAllocationTable = DonneesEnCours.GetFormatedUserDataTable(fpiAssistant.cplexAllocationFileName).Table;
                }
                catch
                {
                    filteredFlightPlanTable = null;
                    partialAllocationTable = null;
                    cplexAllocationTable = null;
                }
                if (filteredFlightPlanTable == null
                    || partialAllocationTable == null
                    || cplexAllocationTable == null)
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();

                    MessageBox.Show("Error while loading from the User Data the table needed for generating the Flight Plan Information table.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
                                                
                //save the Analysis/Scenario directory
                DateTime now = DateTime.Now;
                String scenarioName = "Flight Plan Information creation date " + "D" + now.Day + "_M" + now.Month + "_Y" + now.Year
                    + "_H" + now.Hour + "_M" + now.Minute + "_S" + now.Second;
                DateTime minFlightPlanDate = DateTime.MinValue;
                DateTime maxFlightPlanDate = DateTime.MinValue;
                DateTime fromDate = DateTime.MinValue;
                DateTime toDate = DateTime.MinValue;

                getMinMaxDateFromFlightPlan(filteredFlightPlanTable, out minFlightPlanDate, out maxFlightPlanDate);
                //fromDate = minFlightPlanDate.AddDays(-1);
                //text gantt table
                DateTime scenarioStartDate = minFlightPlanDate.AddDays(-1).Date;
                DateTime scenarioEndDate = maxFlightPlanDate.AddDays(1).Date; 
                
                DubaiTools.FlightPlanInformation fpiGenerator
                    = new DubaiTools.FlightPlanInformation(filteredFlightPlanTable, cplexAllocationTable, partialAllocationTable, fpiMessages, scenarioStartDate);
                DataTable flightPlanInformationTable = fpiGenerator.generateFlightPlanInformationTable();
                
                DubaiTools.FlightPlanTextAllocation flightPlanTextAllocation
                    = new DubaiTools.FlightPlanTextAllocation(flightPlanInformationTable, scenarioStartDate, scenarioEndDate, 5, fpiMessages);
                DataTable flightPlanTextAllocationTable = flightPlanTextAllocation.generateTextAllocationTable();

                ParamScenario scenario = ConversionPlanDeVols.GenerationScenario(scenarioName,
                fromDate, maxFlightPlanDate,
                5, 5, new Dictionary<string, string>());
                GestionScenarios(scenario);

                //add the tables
                if (filteredFlightPlanTable != null)
                {
                    filteredFlightPlanTable.TableName = FILTERED_FPD_TABLE_NAME;
                    DonneesEnCours.AddReplaceTable(scenario.Name, filteredFlightPlanTable);
                }
                else 
                    DonneesEnCours.RemoveTable(scenario.Name, FILTERED_FPD_TABLE_NAME);

                if (cplexAllocationTable != null)
                {
                    cplexAllocationTable.TableName = CPLEX_TABLE_NAME;
                    DonneesEnCours.AddReplaceTable(scenario.Name, cplexAllocationTable);
                }
                else
                    DonneesEnCours.RemoveTable(scenario.Name, CPLEX_TABLE_NAME);

                if (flightPlanInformationTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, flightPlanInformationTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, GlobalNames.FPI_TableName);

                if (flightPlanTextAllocationTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, flightPlanTextAllocationTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, DubaiTools.FlightPlanTextAllocation.FLIGHTPLAN_TEXT_ALLOCATION_TABLENAME);

                //update the scenario
                TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenario.Name, treeView1.Nodes[2]);
                if (ScenarioPosition == null)
                {
                    MessageBox.Show("The generation data could not be saved into the scenario.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
                DonneesEnCours.Maj_Scenario(scenario.Name, ScenarioPosition, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
                DonneesEnCours.UpdateScenarioTree(scenario.Name, ScenarioPosition);
                
                ReinitInputTable();

                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();

                if (fpiMessages.Count > 0)
                {
                    setErrors(fpiMessages, false);
                }
            }
        }
        
        private bool getMinMaxDateFromFlightPlan(DataTable flightPlan,
            out DateTime minDate, out DateTime maxDate)
        {
            if (flightPlan == null)
            {
                minDate = DateTime.MinValue;
                maxDate = DateTime.MinValue;
                return false;
            }
            minDate = OverallTools.DataFunctions.valeurMinimaleDansColonne(flightPlan, 1, 2);
            maxDate = OverallTools.DataFunctions.valeurMaximaleDansColonne(flightPlan, 1, 2);

            if (maxDate == DateTime.MinValue
                || minDate == DateTime.MinValue)
            {
                return false;
            }
            return true;
        }
        // << Task #12668 Pax2Sim - Dubai ADPi - Flight Plan Conversion

        // >> Task #12741 Pax2Sim - Dubai - flight exceptions
        #region backup Dubai code (there is a better solution - modify the allocation algorithm)
        internal const String DOWN_TIME_FLIGHT_CATEGORY_PREFIX = "DT_";
        private List<String> createFlightCategoriesBasedOnUniqueFlightDownTimesAndUpdateFlightPlan(DataTable flightPlan)
        {
            List<String> downTimeUniqueFlightCategories = new List<String>();
            if (flightPlan == null)
            {
                return downTimeUniqueFlightCategories;
            }

            int downTimeColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User2);
            int flightCategoryColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightCategory);
            int flightCategoryBackUpColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User5);

            if (downTimeColumnIndex != -1 && flightCategoryColumnIndex != -1
                && flightCategoryBackUpColumnIndex != -1)
            {
                foreach (DataRow row in flightPlan.Rows)
                {
                    if (row[downTimeColumnIndex] != null)
                    {
                        double downTimeValue = -1;
                        if (Double.TryParse(row[downTimeColumnIndex].ToString(), out downTimeValue)
                            && downTimeValue >= 0)
                        {
                            String downTimeFlightCategory = DOWN_TIME_FLIGHT_CATEGORY_PREFIX + downTimeValue;
                            if (!downTimeUniqueFlightCategories.Contains(downTimeFlightCategory))
                            {
                                downTimeUniqueFlightCategories.Add(downTimeFlightCategory);
                            }

                            row[flightCategoryBackUpColumnIndex] = row[flightCategoryColumnIndex];
                            row[flightCategoryColumnIndex] = downTimeFlightCategory;
                        }
                    }
                }
            }
            return downTimeUniqueFlightCategories;
        }
        #endregion
        // << Task #12741 Pax2Sim - Dubai - flight exceptions

        // >> Task #14727 Dubai allocation
        public void generateDubaiAllocation(AllocationAssistant pAllocationAssistant)
        {
            AllocationAssistant allocationAssistant = null;
            if (pAllocationAssistant != null)   // >> Task #14727 Dubai allocation C#20
            {
                allocationAssistant = pAllocationAssistant;
            }
            else
            {
                allocationAssistant = new AllocationAssistant(DonneesEnCours);
            }

            if (allocationAssistant.DialogResult != DialogResult.Abort
                && allocationAssistant.ShowDialog() == DialogResult.OK)
            {
                #region pre-allocation environment setup
                this.Enabled = false;
                Prompt.SIM_Chargement cht = null;
                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                if (cht != null)
                {
                    cht.setChenillard = true;
                }
                #endregion

                string allocationType = allocationAssistant.allocationType;
                string mainSortType = allocationAssistant.mainSortType;
                string secondarySortType = allocationAssistant.secondarySortType;
                DateTime scenarioStartDate = allocationAssistant.fromDate;
                DateTime scenarioEndDate = allocationAssistant.toDate;
                TimeInterval scenarioInterval = new TimeInterval(scenarioStartDate, scenarioEndDate);
                int terminalNb = allocationAssistant.terminalNb;
                int downTimeMaxAcceptedValue = allocationAssistant.downTimeMaxAcceptedValue;
                int downTimeAfterSTA = allocationAssistant.downTimeAfterSTA;
                int downTimeBeforeSTD = allocationAssistant.downTimeBeforeSTD;

                List<DubaiTools.FlightPlanInformation.AllocatedFlight> removedFlightsPartsList = new List<DubaiTools.FlightPlanInformation.AllocatedFlight>();
                DataTable filteredFlightPlan = getFilteredFlightPlanByDateAndTerminal(allocationAssistant.fpdTable, 
                    scenarioStartDate, scenarioEndDate, terminalNb, downTimeMaxAcceptedValue, downTimeAfterSTA, downTimeBeforeSTD, out removedFlightsPartsList);
                
                Prompt.Allocation.General.Allocation allocation 
                    = new Prompt.Allocation.General.Allocation(scenarioInterval, allocationType, mainSortType, secondarySortType,
                    allocationAssistant.timeStepInMinutes, allocationAssistant.analysisRangeInMinutes,
                    allocationAssistant.delayBetweenConsecutiveFlightsInMinutes, allocationAssistant.useFPasBasis);

                List<Prompt.Allocation.General.Flight> filteredFlightsList = allocation.getFlightsFromFilteredFlightPlan(filteredFlightPlan);
                filteredFlightsList = allocation.sortFlights(filteredFlightsList, mainSortType, secondarySortType);
                Dictionary<string, List<Prompt.Allocation.General.Resource>> availableResources = allocation.getAvailableResources(scenarioInterval);
                List<TerminalAllocationCode> terminalAllocationCodeRules = allocation.getTerminalAllocationCodeRules();
                allocation.allocateFlights(filteredFlightsList, availableResources, terminalAllocationCodeRules);

                DataTable parametersTable = DubaiOutput.generateAllocationParametersTable(allocationAssistant);
                DataTable flightPlanTable = DubaiOutput.generateFlightPlanTable(filteredFlightsList);
                DataTable parkingStandsTable = DubaiOutput.generateParkingStandsTable(allocation.initialAvailableResources, terminalNb);
                DataTable allocationResultsTable = DubaiOutput.generateAllocationResultsTable(allocation.initialAvailableResources);
                DataTable unallocatedFlightsTable = DubaiOutput.generateUnallocatedFlightsTable(allocation.unallocatedFlights);
                DataTable flightPlanInformationTable = DubaiOutput.generateFlightPlanInformationTable(allocation.allocatedFlights);

                String scenarioName = allocationAssistant.scenarioName;
                ParamScenario scenario = ConversionPlanDeVols.GenerationScenario(scenarioName, scenarioStartDate, scenarioEndDate,
                                                                                    5, 5, new Dictionary<string, string>());
                GestionScenarios(scenario);
                scenario.isLiegeAllocation = true;

                if (parametersTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, parametersTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, PAX2SIM.ALLOCATION_PARAMETERS_TABLE_NAME);
                if (flightPlanTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, flightPlanTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, DubaiOutput.FLIGHT_PLAN_TABLE_NAME);
                if (parkingStandsTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, parkingStandsTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, DubaiOutput.PARKING_STAND_TABLE_NAME);
                if (allocationResultsTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, allocationResultsTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, DubaiOutput.ALLOCATION_RESULT_TABLE_NAME);
                if (unallocatedFlightsTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, unallocatedFlightsTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, DubaiOutput.UNALLOCATED_FLIGHTS_TABLE_NAME);
                if (flightPlanInformationTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, flightPlanInformationTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, GlobalNames.FPI_TableName);

                //update the scenario
                TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenario.Name, treeView1.Nodes[2]);
                if (ScenarioPosition == null)
                {
                    MessageBox.Show("The generation data could not be saved into the scenario.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    return;
                }
                DonneesEnCours.Maj_Scenario(scenario.Name, ScenarioPosition, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
                DonneesEnCours.UpdateScenarioTree(scenario.Name, ScenarioPosition);

                TreeNode generatingResultsNode = getGeneratingResultsNode(ScenarioPosition, "Generating Results");
                clearRootAndAddSourceNodeChilds(ScenarioPosition, generatingResultsNode);
                

                ReinitInputTable();

                #region post-allocation environment setup
                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
                #endregion
            }
        }
        // << Task #14727 Dubai allocation

        // >> Task #12843 Pax2Sim - Dubai - allocate using Cplex
        internal const string FILTERED_FPD_TABLE_NAME = "Filtered Departure Flight Plan";
        private void generateFilesForAllocationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            DataTable departureFP = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);

            GenerateFilesForAllocationAssistant generateFilesForAllocationAssistant
                = new GenerateFilesForAllocationAssistant(departureFP);

            if (departureFP != null
                && generateFilesForAllocationAssistant.DialogResult != DialogResult.Abort
                && generateFilesForAllocationAssistant.ShowDialog() == DialogResult.OK)
            {
                this.Enabled = false;
                Prompt.SIM_Chargement cht = null;

                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                if (cht != null)
                {
                    cht.setChenillard = true;
                }

                //save the Analysis/Scenario directory
                DateTime now = DateTime.Now;
                String scenarioName = "Generation Date " + "D" + now.Day + "_M" + now.Month + "_Y" + now.Year
                    + "_H" + now.Hour + "_M" + now.Minute + "_S" + now.Second;

                ParamScenario scenario = ConversionPlanDeVols.GenerationScenario(scenarioName,
                generateFilesForAllocationAssistant.fromDate, generateFilesForAllocationAssistant.toDate, 
                5, 5, new Dictionary<string, string>());
                GestionScenarios(scenario);
                                
                List<DubaiTools.FlightPlanInformation.AllocatedFlight> flightRemovedPartsList = new List<DubaiTools.FlightPlanInformation.AllocatedFlight>();

                DataTable filteredFlightPlanWithSplitFlights
                    = getFilteredFlightPlanByDateAndTerminal(departureFP, generateFilesForAllocationAssistant.fromDate,
                                                                generateFilesForAllocationAssistant.toDate, generateFilesForAllocationAssistant.terminalNb,
                                                                out flightRemovedPartsList);

                //create the cplex solution table with the BIN2 flight parts
                DataTable cplexPartialSolutionTable = createCPLEXSolutionTableWithRejectedPartsFromFlightWithLargeDownTime(flightRemovedPartsList);

                int dateColumnIndex = filteredFlightPlanWithSplitFlights.Columns.IndexOf(GlobalNames.sFPD_A_Column_DATE);
                if (dateColumnIndex != -1)
                {
                    //add the tables
                    if (filteredFlightPlanWithSplitFlights != null)
                        DonneesEnCours.AddReplaceTable(scenario.Name, filteredFlightPlanWithSplitFlights);
                    else
                        DonneesEnCours.RemoveTable(scenario.Name, FILTERED_FPD_TABLE_NAME);

                    DataTable parkingStandTable = null;
                    if (generateFilesForAllocationAssistant.terminalNb == 1
                        || generateFilesForAllocationAssistant.terminalNb == 3)
                    {
                        parkingStandTable = getParkingStandTableForT1AndT3();
                    }
                    else if (generateFilesForAllocationAssistant.terminalNb == 2)
                    {
                        parkingStandTable = getParkingStandTableForT2();
                    }
                    if (parkingStandTable != null)
                        DonneesEnCours.AddReplaceTable(scenario.Name, parkingStandTable);
                    else
                        DonneesEnCours.RemoveTable(scenario.Name, PARKING_STAND_TABLE_NAME);

                    if (filteredFlightPlanWithSplitFlights != null && parkingStandTable != null)
                        //&& flightParkingStandCostTable != null && flightParkingStandAlternativesTable != null)
                    {
                        DateTime fakeStart = generateFilesForAllocationAssistant.fromDate.AddDays(-1);
                        DataTable cplexTable = getDatTableForCplex(filteredFlightPlanWithSplitFlights, parkingStandTable,
                            fakeStart);
                            //flightParkingStandCostTable, flightParkingStandAlternativesTable);

                        if (cplexTable != null)
                        {
                            DonneesEnCours.AddReplaceTable(scenario.Name, cplexTable);

                            string outputPath = getOutputPath();
                            OverallTools.FonctionUtiles.EcritureFichier(cplexTable,
                                outputPath + scenario.Name + "_" + CPLEX_TABLE_NAME + ".txt", "\t", false);
                        }
                        else
                        {
                            DonneesEnCours.RemoveTable(scenario.Name, CPLEX_TABLE_NAME);
                        }                        
                    }
                    if (cplexPartialSolutionTable != null)
                        DonneesEnCours.AddReplaceTable(scenario.Name, cplexPartialSolutionTable);
                    else
                        DonneesEnCours.RemoveTable(scenario.Name, CPLEX_PARTIAL_SOLUTION_TABLE_NAME);
                    
                }

                //cplex call
                
                //update the scenario
                TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenario.Name, treeView1.Nodes[2]);
                if (ScenarioPosition == null)
                {
                    MessageBox.Show("The generation data could not be saved into the scenario.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
                DonneesEnCours.Maj_Scenario(scenario.Name, ScenarioPosition, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
                DonneesEnCours.UpdateScenarioTree(scenario.Name, ScenarioPosition);

                ReinitInputTable();

                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
            }
        }

        internal const string PARKING_STAND_TABLE_NAME = "Parking Stands";
        const string parkingStandIdColumnName = "Parking Stand Id";//parking Id based on the index in the Parking Distribution file
        const string parkingStandNameColumnName = "Parking Stand Name";
        const string parkingStandTypeColumnName = "Parking Stand Type";
        const string parkingStandDistributionCodeColumnName = "Aircraft Type Allocation Code";
        private DataTable getParkingStandTableForT1AndT3()
        {
            DataTable parkingStandTable = new DataTable(PARKING_STAND_TABLE_NAME);

            int idColumnIndex = parkingStandTable.Columns.Count;
            parkingStandTable.Columns.Add(parkingStandIdColumnName, typeof(Int32));
            
            int nameColumnIndex = parkingStandTable.Columns.Count;
            parkingStandTable.Columns.Add(parkingStandNameColumnName, typeof(String));

            int typeColumnIndex = parkingStandTable.Columns.Count;
            parkingStandTable.Columns.Add(parkingStandTypeColumnName, typeof(String));
                        
            int codeColumnIndex = parkingStandTable.Columns.Count;
            parkingStandTable.Columns.Add(parkingStandDistributionCodeColumnName, typeof(String));
            
            int rowId = 1;
            int i = 0;
            string pax2simTableRowCodePrefix = "";
           
            DataRow row = null;

            #region BIN
            //T3_BIN_B
            for (i = 1; i <= 130; i++)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "BIN_B" + i;
                row[typeColumnIndex] = "BIN";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_BIN_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            #endregion

            #region Remote
            //T1_Charlie Remote
            for (i = 27; i >= 24; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CHARLIE_C" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_F_1_REM_CODE;
                row[typeColumnIndex] = "CHARLIE REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_1_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 43; i >= 28; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CHARLIE_C" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_E_1_REM_CODE;
                row[typeColumnIndex] = "CHARLIE REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_1_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 4; i >= 1; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CHARLIE_C" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_E_1_REM_CODE;
                row[typeColumnIndex] = "CHARLIE REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_1_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 22; i >= 1; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "GOLF_G" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_E_3_REM_CODE;
                row[typeColumnIndex] = "GOLF REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_3_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 23; i >= 18; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CHARLIE_C" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_1_REM_CODE;
                row[typeColumnIndex] = "CHARLIE REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_1_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            #endregion

            #region F type Stands
            //T1_CHARLIE_C
            for (i = 55; i >= 51; i--)
            {
                if (i == 52)
                {
                    continue;
                }
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CHARLIE_C" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_F_1_CODE;
                row[typeColumnIndex] = "CHARLIE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_1_CODE;

                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CC_F
            for (i = 13; i >= 1; i--)
            {
                if (i == 11)
                    continue;
                if (i == 2 || i == 3 || i >= 6)
                {
                    pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                    row = parkingStandTable.NewRow();
                    row[idColumnIndex] = rowId;
                    row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CC_F" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;
                    row[typeColumnIndex] = "CC";
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;

                    parkingStandTable.Rows.Add(row);
                    rowId++;
                }
            }
            //T3_CC_B
            for (i = 12; i >= 8; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CC_B" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;
                row[typeColumnIndex] = "CC";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;

                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CB_F
            for (i = 27; i >= 18; i--)
            {
                if ((i >= 18 && i <= 22) || i >= 26)
                {
                    pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                    row = parkingStandTable.NewRow();
                    row[idColumnIndex] = rowId;
                    row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CB_F" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;
                    row[typeColumnIndex] = "CB";
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;

                    parkingStandTable.Rows.Add(row);
                    rowId++;
                }
            }
            //T3_CB_B
            for (i = 27; i >= 18; i--)
            {
                if (i == 18 || i == 21 || i >= 26)
                {
                    pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                    row = parkingStandTable.NewRow();
                    row[idColumnIndex] = rowId;

                    string code = pax2simTableRowCodePrefix + "_" + "CB_B" + i;
                    if (i >= 26)
                        code += "R";
                    code = code + "_" + DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;

                    row[nameColumnIndex] = code;
                    row[typeColumnIndex] = "CB";

                    if (i == 18 || i == 21 || i >= 26)
                        row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;

                    parkingStandTable.Rows.Add(row);
                    rowId++;
                }
            }
            //T3_CA_D
            for (i = 9; i >= 1; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CA_D" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;
                row[typeColumnIndex] = "CA";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CA_A
            for (i = 10; i >= 2; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CA_A" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;
                row[typeColumnIndex] = "CA";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_3_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            #endregion

            #region E type Stands
            //T1_CHARLIE_C
            for (i = 64; i >= 49; i--)
            {
                if (i == 55 || i == 54 || i == 53 || i == 51)
                {
                    continue;
                }

                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CHARLIE_C" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_E_1_CODE;
                row[typeColumnIndex] = "CHARLIE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_1_CODE;

                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CC_F
            for (i = 14; i >= 1; i--)
            {
                if (i == 1 || i == 4
                    || i == 5 || i == 14)
                {
                    pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                    row = parkingStandTable.NewRow();
                    row[idColumnIndex] = rowId;
                    row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CC_F" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;
                    row[typeColumnIndex] = "CC";
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;

                    parkingStandTable.Rows.Add(row);
                    rowId++;
                }
            }
            //T3_CC_B
            for (i = 6; i >= 1; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CC_B" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;
                row[typeColumnIndex] = "CC";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;

                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CB_F
            for (i = 25; i >= 16; i--)
            {
                if (i >= 18 && i <= 22)
                    continue;
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CB_F" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;
                row[typeColumnIndex] = "CB";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;

            }
            //T3_CB_B
            for (i = 25; i >= 14; i--)
            {
                if (i == 18 || i == 21)
                    continue;
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CB_B" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;
                row[typeColumnIndex] = "CB";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;

                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CA_D    
            pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

            row = parkingStandTable.NewRow();
            row[idColumnIndex] = rowId;
            row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CA_D" + 10 + "_" + DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;
            row[typeColumnIndex] = "CA";
            row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;
            parkingStandTable.Rows.Add(row);
            rowId++;
            //T3_CA_A  
            pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

            row = parkingStandTable.NewRow();
            row[idColumnIndex] = rowId;
            row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CA_A" + 1 + "_" + DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;
            row[typeColumnIndex] = "CA";
            row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_3_CODE;
            parkingStandTable.Rows.Add(row);
            rowId++;
            #endregion

            #region C type Stands
            //T1_CHARLIE_C
            for (i = 55; i >= 48; i--)
            {
                if (i >= 49 && i <= 50)
                    continue;
                if (i == 48)
                {
                    pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                    row = parkingStandTable.NewRow();
                    row[idColumnIndex] = rowId;
                    row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CHARLIE_C" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_C_1_CODE;
                    row[typeColumnIndex] = "CHARLIE";
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_1_CODE;
                    parkingStandTable.Rows.Add(row);
                    rowId++;
                }
                if (i == 51 || (i >= 53 && i <= 55))
                {
                    pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                    row = parkingStandTable.NewRow();
                    row[idColumnIndex] = rowId;
                    row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CHARLIE_C" + i + "R" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_1_CODE;
                    row[typeColumnIndex] = "CHARLIE";
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_1_CODE;
                    parkingStandTable.Rows.Add(row);
                    rowId++;

                    pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);
                    row = parkingStandTable.NewRow();
                    row[idColumnIndex] = rowId;
                    row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "CHARLIE_C" + i + "L" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_1_CODE;
                    row[typeColumnIndex] = "CHARLIE";
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_1_CODE;
                    parkingStandTable.Rows.Add(row);
                    rowId++;
                }                
            }
            #endregion                       

            #region old code
            /*
            //T3_CB_B
            for (i = 14; i <= 27; i++)
            {
                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;

                string code = "T3_CB_B" + i;
                if (i >= 26)
                    code += "R";
                row[nameColumnIndex] = code;

                row[typeColumnIndex] = "CB";

                if ((i >= 14 && i <= 17) || i == 19 || i == 20 || (i >= 22 && i <= 25))
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_CODE;
                else
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_CODE;

                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CB_F
            for (i = 16; i <= 27; i++)
            {
                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;                
                row[nameColumnIndex] = "T3_CB_F" + i;
                row[typeColumnIndex] = "CB";

                if (i == 16 || i == 17 || (i >= 23 && i <= 25))
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_CODE;
                else
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_CODE;

                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CC_B
            for (i = 1; i <= 12; i++)
            {
                if (i == 7)
                    continue;

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = "T3_CC_B" + i;
                row[typeColumnIndex] = "CC";

                if (i >= 1 && i <= 6)
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_CODE;
                else
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_CODE;

                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CC_F
            for (i = 1; i <= 14; i++)
            {
                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = "T3_CC_F" + i;
                row[typeColumnIndex] = "CC";

                if (i == 1 || i == 4 || i == 5 || i == 14)
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_CODE;
                else
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_CODE;

                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_CHARLIE_C
            for (i = 1; i <= 64; i++)
            {
                if ((i >= 5 && i <= 17)
                    || (i >= 44 && i <= 47))                    
                {
                    continue;
                }

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;

                string code = "T3_CHARLIE_C" + i;
                if (i == 30)
                    code += "R";
                row[nameColumnIndex] = code;
                row[typeColumnIndex] = "CHARLIE";

                if ((i >= 24 && i <= 27) || i == 51 || (i >= 53 && i <= 55))
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_CODE;
                else if (i >= 18 && i <= 23)
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_CODE;
                else
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_CODE;
                
                parkingStandTable.Rows.Add(row);
                rowId++;

                if (i == 51 || (i >= 53 && i <= 55))
                {
                    row = parkingStandTable.NewRow();
                    row[idColumnIndex] = rowId;                    
                    row[nameColumnIndex] = "T3_CHARLIE_C" + i + "R";
                    row[typeColumnIndex] = "CHARLIE";
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_CODE;
                    parkingStandTable.Rows.Add(row);
                    rowId++;

                    row = parkingStandTable.NewRow();
                    row[idColumnIndex] = rowId;
                    row[nameColumnIndex] = "T3_CHARLIE_C" + i + "L";
                    row[typeColumnIndex] = "CHARLIE";
                    row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_CODE;
                    parkingStandTable.Rows.Add(row);
                    rowId++;
                }                
            }
            //T3_GOLF_G
            for (i = 1; i <= 22; i++)
            {
                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = "T3_GOLF_G" + i;
                row[typeColumnIndex] = "GOLF";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            //T3_BIN_B
            for (i = 1; i <= 15; i++)
            {
                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = "T3_BIN_B" + i;
                row[typeColumnIndex] = "BIN";
                row[codeColumnIndex] = "";
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            */
            #endregion
            
            parkingStandTable.AcceptChanges();
            return parkingStandTable;
            
        }

        private DataTable getParkingStandTableForT2()
        {
            DataTable parkingStandTable = new DataTable(PARKING_STAND_TABLE_NAME);

            int idColumnIndex = parkingStandTable.Columns.Count;
            parkingStandTable.Columns.Add(parkingStandIdColumnName, typeof(Int32));

            int nameColumnIndex = parkingStandTable.Columns.Count;
            parkingStandTable.Columns.Add(parkingStandNameColumnName, typeof(String));

            int typeColumnIndex = parkingStandTable.Columns.Count;
            parkingStandTable.Columns.Add(parkingStandTypeColumnName, typeof(String));

            int codeColumnIndex = parkingStandTable.Columns.Count;
            parkingStandTable.Columns.Add(parkingStandDistributionCodeColumnName, typeof(String));

            int rowId = 1;
            int i = 0;
            string pax2simTableRowCodePrefix = "";

            DataRow row = null;

            #region BIN
            //T3_BIN_B
            for (i = 1; i <= 30; i++)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "BIN_B" + i;
                row[typeColumnIndex] = "BIN";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_BIN_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            #endregion

            #region Remote
            //Echo Remote  

            pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

            row = parkingStandTable.NewRow();
            row[idColumnIndex] = rowId;
            row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + 28 + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_F_2_REM_CODE;
            row[typeColumnIndex] = "ECHO REMOTE";
            row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_F_2_REM_CODE;
            parkingStandTable.Rows.Add(row);
            rowId++;
            
            for (i = 46; i >= 24; i--)
            {
                if ((i <= 43 && i >= 33)
                    || (i <= 30 && i >= 27))
                {
                    continue;
                }

                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_E_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 11; i >= 1; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_Q" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 46; i >= 44; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_R" + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;

                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_L" + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 43; i >= 36; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 34; i >= 33; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 32; i >= 31; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_R" + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;

                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_L" + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 30; i >= 29; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 26; i >= 24; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_R" + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;

                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_L" + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            for (i = 23; i >= 22; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_REMOTE" + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                row[typeColumnIndex] = "ECHO REMOTE";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            #endregion

            #region E type Stands
            //T2_ECHO_E
            for (i = 21; i >= 1; i--)
            {
                if (i <= 18 && i >= 4)
                {
                    continue;
                }

                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);

                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_E_2_CODE;
                row[typeColumnIndex] = "ECHO";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_E_2_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            #endregion

            #region C type Stands
            //T2_ECHO_E           
            for (i = 18; i >= 4; i--)
            {
                pax2simTableRowCodePrefix = getRowCodePrefixByRowId(rowId);
                
                row = parkingStandTable.NewRow();
                row[idColumnIndex] = rowId;
                row[nameColumnIndex] = pax2simTableRowCodePrefix + "_" + "ECHO_E" + i + "_" + DubaiTools.FlightPlanConversion.ZONE_C_2_CODE;
                row[typeColumnIndex] = "ECHO";
                row[codeColumnIndex] = DubaiTools.FlightPlanConversion.ZONE_C_2_CODE;
                parkingStandTable.Rows.Add(row);
                rowId++;
            }
            #endregion

            parkingStandTable.AcceptChanges();
            return parkingStandTable;

        }
        private string getRowCodePrefixByRowId(int rowId)
        {
            string pax2simTableRowCodePrefix = rowId.ToString();
            if (pax2simTableRowCodePrefix.Length == 1)
                pax2simTableRowCodePrefix = "S00" + pax2simTableRowCodePrefix;
            else if (pax2simTableRowCodePrefix.Length == 2)
                pax2simTableRowCodePrefix = "S0" + pax2simTableRowCodePrefix;
            else
                pax2simTableRowCodePrefix = "S" + pax2simTableRowCodePrefix;
            return pax2simTableRowCodePrefix;
        }
        #region comment
        /*
        internal const string FLIGHT_STAND_COST_TABLE_NAME = "Flight Parking Stand Cost";
        const string flightIdColumnName = "Flight Id";
        const string flightDateColumnName = "Flight Date";
        const string flightNumberColumnName = "Flight Number";
        const string flightAllocTypeColumnName = "Flight Allocation Type";
        const string parkingStandAllocationTypeColumnName = "Parking Stand Allocation Type";
        const string costColumnName = "Cost";
        private DataTable getFlightParkingStandCostTable(DataTable departureFP, DataTable parkingStandTable)
        {
            DataTable costTable = new DataTable(FLIGHT_STAND_COST_TABLE_NAME);

            if (departureFP == null || parkingStandTable == null)
                return costTable;

            int flightId_FP_ColumnIndex = departureFP.Columns.IndexOf(GlobalNames.sFPD_A_Column_ID);
            int flightSTD_FP_ColumnIndex = departureFP.Columns.IndexOf(GlobalNames.sFPD_Column_STD);
            int flightDate_FP_ColumnIndex = departureFP.Columns.IndexOf(GlobalNames.sFPD_A_Column_DATE);
            int flightNb_FP_ColumnIndex = departureFP.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightN);
            int flightAllocationType_FP_ColumnIndex = departureFP.Columns.IndexOf(GlobalNames.sFPD_A_Column_User5);

            if (flightId_FP_ColumnIndex == -1 || flightSTD_FP_ColumnIndex == -1 || flightDate_FP_ColumnIndex == -1
                || flightNb_FP_ColumnIndex == -1 || flightAllocationType_FP_ColumnIndex == -1)
            {
                return costTable;
            }

            int standId_PS_ColumnIndex = parkingStandTable.Columns.IndexOf(parkingStandIdColumnName);
            int standName_PS_ColumnIndex = parkingStandTable.Columns.IndexOf(parkingStandNameColumnName);
            int standType_PS_ColumnIndex = parkingStandTable.Columns.IndexOf(parkingStandTypeColumnName);
            int standAllocType_PS_ColumnIndex = parkingStandTable.Columns.IndexOf(parkingStandDistributionCodeColumnName);

            if (standId_PS_ColumnIndex == -1 || standName_PS_ColumnIndex == -1
                || standType_PS_ColumnIndex  == -1 || standAllocType_PS_ColumnIndex == -1)
            {
                return costTable;
            }

            int flightIdColumnIndex = costTable.Columns.Count;
            costTable.Columns.Add(flightIdColumnName, typeof(Int32));

            int flightDateColumnIndex = costTable.Columns.Count;
            costTable.Columns.Add(flightDateColumnName, typeof(DateTime));

            int flightNumberColumnIndex = costTable.Columns.Count;
            costTable.Columns.Add(flightNumberColumnName, typeof(String));

            int flightAllocTypeColumnIndex = costTable.Columns.Count;
            costTable.Columns.Add(flightAllocTypeColumnName, typeof(String));

            int parkingStandIdColumnIndex = costTable.Columns.Count;
            costTable.Columns.Add(parkingStandIdColumnName, typeof(Int32));            

            int parkingStandNameColumnIndex = costTable.Columns.Count;
            costTable.Columns.Add(parkingStandNameColumnName, typeof(String));
            
            int standAllocTypeColumnIndex = costTable.Columns.Count;
            costTable.Columns.Add(parkingStandAllocationTypeColumnName, typeof(String));

            int costColumnIndex = costTable.Columns.Count;
            costTable.Columns.Add(costColumnName, typeof(Double));

            int x = 1;
            foreach (DataRow fpRow in departureFP.Rows)
            {
                int flightId = -1;
                if (fpRow[flightId_FP_ColumnIndex] != null
                    && Int32.TryParse(fpRow[flightId_FP_ColumnIndex].ToString(), out flightId))
                {
                    TimeSpan flightSTD = FonctionsType.getTime(fpRow[flightSTD_FP_ColumnIndex]);
                    DateTime flightDate = FonctionsType.getDate(fpRow[flightDate_FP_ColumnIndex]);
                    DateTime flightCompleteDate = flightDate.AddMinutes(flightSTD.TotalMinutes);

                    String flightNb = fpRow[flightNb_FP_ColumnIndex].ToString();//String flightNb = x.ToString(); x++;//String flightNb = fpRow[flightNb_FP_ColumnIndex].ToString();
                    String flightAllocationType = fpRow[flightAllocationType_FP_ColumnIndex].ToString();

                    foreach (DataRow parkStandRow in parkingStandTable.Rows)
                    {
                        int standId = -1;
                        if (Int32.TryParse(parkStandRow[standId_PS_ColumnIndex].ToString(), out standId))
                        {
                            String standName = parkStandRow[standName_PS_ColumnIndex].ToString();
                            String standType = parkStandRow[standType_PS_ColumnIndex].ToString();
                            String standAllocType = parkStandRow[standAllocType_PS_ColumnIndex].ToString();

                            DataRow costRow = costTable.NewRow();
                            costRow[flightIdColumnIndex] = flightId;
                            costRow[flightDateColumnIndex] = flightCompleteDate;
                            costRow[flightNumberColumnIndex] = flightNb;
                            costRow[flightAllocTypeColumnIndex] = flightAllocationType;
                            costRow[parkingStandIdColumnIndex] = standId;
                            costRow[parkingStandNameColumnIndex] = standName;
                            costRow[standAllocTypeColumnIndex] = standAllocType;
                            
                            double cost = getParkingStandCostByFlightAllocTypeAndStandAllocType(flightAllocationType, standId, standType, standAllocType);
                            if (cost >= NOT_ALLOWED_COST)
                                continue;
                            costRow[costColumnIndex] = cost;

                            costTable.Rows.Add(costRow);
                        }
                    }
                }
            }
            costTable.AcceptChanges();

            return costTable;
        }
        const double NOT_ALLOWED_COST = 100000;
        const double BIN_COST = 10000;
        private double getParkingStandCostByFlightAllocTypeAndStandAllocType(String flightAllocType, 
            int standIndex, String standType, String standAllocType)
        {
            double cost = -1;
            if (flightAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
            {
                if (standType.Equals("CA") || standType.Equals("CB") || standType.Equals("CC"))
                {
                    if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
                    {
                        cost = standIndex + 1000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE)
                            || standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
                    {
                        cost = standIndex + NOT_ALLOWED_COST;
                    }
                }
                else if (standType.Equals("GOLF"))
                {
                    if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
                    {
                        cost = standIndex + 2000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE)
                            || standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
                    {
                        cost = standIndex + NOT_ALLOWED_COST;
                    }
                }
                else if (standType.Equals("CHARLIE"))
                {
                    if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
                    {
                        cost = standIndex + 3000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE)
                            || standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
                    {
                        cost = standIndex + NOT_ALLOWED_COST;
                    }
                }                
                else if (standType.Equals("BIN"))
                {
                    cost = standIndex + BIN_COST;
                }
            }
            else if (flightAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE))
            {
                if (standType.Equals("CA") || standType.Equals("CB") || standType.Equals("CC"))
                {
                    if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
                    {
                        cost = standIndex + 2000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE))
                    {
                        cost = standIndex + 1000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
                    {
                        cost = standIndex + NOT_ALLOWED_COST;
                    }
                }
                else if (standType.Equals("GOLF"))
                {
                    if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
                    {
                        cost = standIndex + 4000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE))
                    {
                        cost = standIndex + 3000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
                    {
                        cost = standIndex + NOT_ALLOWED_COST;
                    }
                }
                else if (standType.Equals("CHARLIE"))
                {
                    if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
                    {
                        cost = standIndex + 6000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE))
                    {
                        cost = standIndex + 5000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
                    {
                        cost = standIndex + NOT_ALLOWED_COST;
                    }
                }                
                else if (standType.Equals("BIN"))
                {
                    cost = standIndex + BIN_COST;
                }
            }
            else if (flightAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
            {
                if (standType.Equals("CA") || standType.Equals("CB") || standType.Equals("CC"))
                {
                    if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
                    {
                        cost = standIndex + 3000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE))
                    {
                        cost = standIndex + 2000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
                    {
                        cost = standIndex + 1000;
                    }
                }
                else if (standType.Equals("GOLF"))
                {
                    if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
                    {
                        cost = standIndex + 6000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE))
                    {
                        cost = standIndex + 5000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
                    {
                        cost = standIndex + 4000;
                    }
                }
                else if (standType.Equals("CHARLIE"))
                {
                    if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_F_CODE))
                    {
                        cost = standIndex + 9000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_E_CODE))
                    {
                        cost = standIndex + 8000;
                    }
                    else if (standAllocType.Equals(DubaiTools.FlightPlanConversion.ZONE_C_CODE))
                    {
                        cost = standIndex + 7000;
                    }
                }                
                else if (standType.Equals("BIN"))
                {
                    cost = standIndex + BIN_COST;
                }
            }
            return cost;
        }
        */
        #endregion

        private DataTable getFilteredFlightPlanByDateAndTerminal(DataTable flightPlan,
                    DateTime fromDate, DateTime toDate, int terminalNb,
                    out List<DubaiTools.FlightPlanInformation.AllocatedFlight> flightRemovedPartsList)
        {
            return getFilteredFlightPlanByDateAndTerminal(flightPlan, fromDate, toDate, terminalNb, 420, 120, 120, out flightRemovedPartsList);
        }

        private DataTable getFilteredFlightPlanByDateAndTerminal(DataTable flightPlan,
            DateTime fromDate, DateTime toDate, int terminalNb, int downTimeMaxAcceptedValue,
            int downTimeAfterSTA, int downTimeBeforeSTD,
            out List<DubaiTools.FlightPlanInformation.AllocatedFlight> flightRemovedPartsList)
        {
            flightRemovedPartsList = new List<DubaiTools.FlightPlanInformation.AllocatedFlight>();            

            if (flightPlan == null)
            {                               
                return null;
            }

            DataTable filteredFlightPlanWithOriginalFlightIds = flightPlan.Copy();
            filteredFlightPlanWithOriginalFlightIds.TableName = FILTERED_FPD_TABLE_NAME;

            int flightDateColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_DATE);
            int flightTimeColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_Column_STD);
            int parkingTerminalColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_TerminalParking);
            int downTimeColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User2);

            if (flightDateColumnIndex == -1 || flightTimeColumnIndex == -1
                || parkingTerminalColumnIndex == -1 && downTimeColumnIndex != -1)
            {
                return flightPlan;
            }

            List<int> rowsToDelete = new List<int>();

            for (int i = 0; i < flightPlan.Rows.Count; i++)
            {
                DataRow row = flightPlan.Rows[i];                

                DateTime flightDate = DateTime.MinValue;
                if (row[flightDateColumnIndex] != null)
                    flightDate = FonctionsType.getDate(row[flightDateColumnIndex]);
                if (flightDate != DateTime.MinValue)
                {
                    TimeSpan flightTime = TimeSpan.MinValue;
                    if (row[flightTimeColumnIndex] != null)
                        flightTime = FonctionsType.getTime(row[flightTimeColumnIndex]);
                    if (flightTime != TimeSpan.MinValue)
                    {
                        DateTime completeFlightDate = flightDate.Add(flightTime);
                        if (completeFlightDate < fromDate || completeFlightDate > toDate)
                        {
                            rowsToDelete.Add(i);
                        }
                    }
                }

                int parkingTerminal = -1;
                if (terminalNb > 0
                    && row[parkingTerminalColumnIndex] != null)
                {
                    if (Int32.TryParse(row[parkingTerminalColumnIndex].ToString(), out parkingTerminal))
                    {
                        if (terminalNb == 13)
                        {
                            if (parkingTerminal != 1 && parkingTerminal != 3)
                            {
                                rowsToDelete.Add(i);
                            }                        
                        }
                        else if (parkingTerminal != terminalNb)
                        {
                            rowsToDelete.Add(i);
                        }
                    }
                }

                int downTime = -1;
                if (row[downTimeColumnIndex] != null)
                {
                    if (Int32.TryParse(row[downTimeColumnIndex].ToString(), out downTime))
                    {                        
                        if (downTime < 0)
                        {
                            rowsToDelete.Add(i);
                        }
                    }
                }
            }

            for (int j = filteredFlightPlanWithOriginalFlightIds.Rows.Count - 1; j >= 0; j--)
            {
                if (rowsToDelete.Contains(j))
                    filteredFlightPlanWithOriginalFlightIds.Rows.RemoveAt(j);
            }
            
            //split the flights with a down time greater than the max down time parameter
            flightRemovedPartsList = new List<DubaiTools.FlightPlanInformation.AllocatedFlight>();
            //DataTable enhancedFlightPlan = splitFlightsWithLargeDownTime(420, 120, 120, filteredFlightPlanWithOriginalFlightIds, fromDate, out flightRemovedPartsList);
            DataTable enhancedFlightPlan = splitFlightsWithLargeDownTime(downTimeMaxAcceptedValue, 
                downTimeAfterSTA, downTimeBeforeSTD, filteredFlightPlanWithOriginalFlightIds, fromDate, out flightRemovedPartsList);

            enhancedFlightPlan = sortFlightPlanByAllocationTypeDateAndSTD(enhancedFlightPlan);                        
            return enhancedFlightPlan;
        }

        private DataTable sortFlightPlanByAllocationTypeDateAndSTD(DataTable filteredFlightPlan)
        {
            DataColumn allocationType = new DataColumn("AllocType", typeof(string));
            filteredFlightPlan.Columns.Add(allocationType);

            foreach (DataRow row in filteredFlightPlan.Rows)
            {
                if (row[GlobalNames.sFPD_A_Column_User5] != null
                    && row[GlobalNames.sFPD_A_Column_User5].ToString().Length > 0)
                {
                    string specificAllocType = row[GlobalNames.sFPD_A_Column_User5].ToString();
                    string generalAllocType = specificAllocType.Substring(0, 1);
                    row["AllocType"] = generalAllocType;
                }
            }
            filteredFlightPlan.AcceptChanges();
            DataView dv = new DataView(filteredFlightPlan);
            dv.Sort = "AllocType DESC, DATE, STD ASC";
            filteredFlightPlan = dv.ToTable();

            return filteredFlightPlan;
        }

        internal const int FLIGHT_MAX_SAFE_ID_10TH = 10000; // must be higher than the number of flights; from this limit will create the flight ids for flightPart1 and flightPart3
        internal const int FLIGHT_MAX_SAFE_ID_100TH = 100000;
        private DataTable splitFlightsWithLargeDownTime(double downTimeMaxAcceptedValue,
            double downTimeAfterSTAInMinutes, double downTimeBeforeSTDInMinutes, DataTable flightPlan, DateTime fromDate,
            out List<DubaiTools.FlightPlanInformation.AllocatedFlight> flightRemovedPartsList)
        {
            DataTable enhancedFlightPlan = flightPlan.Clone();            
            flightRemovedPartsList = new List<DubaiTools.FlightPlanInformation.AllocatedFlight>();

            DateTime startDate = fromDate.AddDays(-1).Date;

            int downTimeColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User2);
            int idColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_ID);
            int flightNbColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightN);
            int dateColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_DATE);
            int stdColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_Column_STD);
            int flightAllocTypeColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User5);
            int parkingTerminalnbColumnIndex = flightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_TerminalParking);

            if (downTimeColumnIndex != -1 && idColumnIndex != -1 && flightNbColumnIndex != -1
                && dateColumnIndex != -1 && stdColumnIndex != -1 && flightAllocTypeColumnIndex != -1
                && parkingTerminalnbColumnIndex != -1)
            {
                int flightIdPart = (int)OverallTools.DataFunctions.getMaxValue(flightPlan, 0) + 1;
                if (flightIdPart > FLIGHT_MAX_SAFE_ID_10TH)
                    flightIdPart = FLIGHT_MAX_SAFE_ID_100TH;
                else
                    flightIdPart = FLIGHT_MAX_SAFE_ID_10TH;

                enhancedFlightPlan.PrimaryKey = null;
                enhancedFlightPlan.Columns[idColumnIndex].Unique = false; // allow same id for split flights

                foreach (DataRow flightRow in flightPlan.Rows)
                {
                    int downTime = -1;
                    int flightId = -1;
                    string flightNb = "";
                    DateTime flightDate = DateTime.MinValue;
                    TimeSpan std = TimeSpan.MinValue;
                                        
                    if (flightRow[downTimeColumnIndex] != null && flightRow[idColumnIndex] != null && flightRow[flightNbColumnIndex] != null
                        && flightRow[dateColumnIndex] != null && flightRow[stdColumnIndex] != null && flightRow[flightAllocTypeColumnIndex] != null
                        && flightRow[parkingTerminalnbColumnIndex] != null)
                    {
                        if (Int32.TryParse(flightRow[downTimeColumnIndex].ToString(), out downTime)
                            && Int32.TryParse(flightRow[idColumnIndex].ToString(), out flightId)
                            && DateTime.TryParse(flightRow[dateColumnIndex].ToString(), out flightDate)
                            && TimeSpan.TryParse(flightRow[stdColumnIndex].ToString(), out std))
                        {
                            if (downTime > downTimeMaxAcceptedValue)
                            {
                                flightNb = flightRow[flightNbColumnIndex].ToString();
                                DateTime flightCompleteDate = flightDate.AddMinutes(std.TotalMinutes);

                                //add the Part1(STA) from the flight
                                int flightIdArrPart = flightId;//flightIdPart++;
                                string flightNbArrivalPart = flightNb + "_Part1(STA)";
                                DateTime flightDateArrivalPart = flightCompleteDate.AddMinutes(-downTime + downTimeAfterSTAInMinutes);
                                DataRow part1Row = enhancedFlightPlan.NewRow();
                                part1Row.ItemArray = flightRow.ItemArray.Clone() as object[];

                                part1Row[idColumnIndex] = flightIdArrPart;
                                part1Row[flightNbColumnIndex] = flightNbArrivalPart;
                                part1Row[dateColumnIndex] = flightDateArrivalPart.Date;
                                part1Row[stdColumnIndex] = flightDateArrivalPart.TimeOfDay;
                                part1Row[downTimeColumnIndex] = downTimeAfterSTAInMinutes;

                                enhancedFlightPlan.Rows.Add(part1Row);

                                //add the Part3(STD) from the flight
                                int flightIdDepPart = flightId;//flightIdPart++;
                                string flightNbDeparturePart = flightNb + "_Part3(STD)";
                                DateTime flightDateDeparturePart = flightCompleteDate;
                                DataRow part3Row = enhancedFlightPlan.NewRow();
                                part3Row.ItemArray = flightRow.ItemArray.Clone() as object[];

                                part3Row[idColumnIndex] = flightIdDepPart;
                                part3Row[flightNbColumnIndex] = flightNbDeparturePart;
                                part3Row[dateColumnIndex] = flightDateDeparturePart.Date;
                                part3Row[stdColumnIndex] = flightDateDeparturePart.TimeOfDay;
                                part3Row[downTimeColumnIndex] = downTimeBeforeSTDInMinutes;

                                enhancedFlightPlan.Rows.Add(part3Row);

                                // add the Part2 from the flight to a dictionary from which we will create the BIN2 flights
                                string flightAllocationType = flightRow[flightAllocTypeColumnIndex].ToString();
                                double removedPartAllocationDuration = downTime - downTimeAfterSTAInMinutes - downTimeBeforeSTDInMinutes;
                                int parkingTerminalNb = -1;
                                Int32.TryParse(flightRow[parkingTerminalnbColumnIndex].ToString(), out parkingTerminalNb);
                                List<string> allocTypes = getPossibleDeskAllocationTypesByFlightAllocationType(flightAllocationType);
                                string possibleDeskAlloc = "{";
                                for (int k = 0; k < allocTypes.Count; k++)
                                {
                                    string deskAllocationType = allocTypes[k];
                                    possibleDeskAlloc += "\"" + deskAllocationType + "\"";
                                    if (k < allocTypes.Count - 1)
                                    {
                                        possibleDeskAlloc += ", ";
                                    }
                                }
                                possibleDeskAlloc += "}";

                                DubaiTools.FlightPlanInformation.AllocatedFlight rejectedFlightPart = new DubaiTools.FlightPlanInformation.AllocatedFlight();
                                rejectedFlightPart.id = flightId; //flightIdPart++; //flightId;
                                rejectedFlightPart.flightNumber = flightNb + "_Part2(BIN2)";
                                rejectedFlightPart.flightCompleteDate = flightCompleteDate.AddMinutes(-downTimeBeforeSTDInMinutes).ToString();
                                rejectedFlightPart.flightAllocationType = flightAllocationType;
                                rejectedFlightPart.flightAllocationTypesPriorityList = possibleDeskAlloc;
                                rejectedFlightPart.occupationDurationInMinutes = (int)removedPartAllocationDuration;
                                rejectedFlightPart.occupationStartMinute = (int)flightCompleteDate.AddMinutes(-removedPartAllocationDuration - downTimeBeforeSTDInMinutes)
                                                                                                    .Subtract(startDate).TotalMinutes;
                                rejectedFlightPart.occupationEndMinute = (int)flightCompleteDate.AddMinutes(-downTimeBeforeSTDInMinutes).Subtract(startDate).TotalMinutes;
                                rejectedFlightPart.resourceName = "S999_BIN2";
                                rejectedFlightPart.terminalNb = parkingTerminalNb;

                                flightRemovedPartsList.Add(rejectedFlightPart);
                            }
                            else
                            {
                                DataRow normalRow = enhancedFlightPlan.NewRow();
                                normalRow.ItemArray = flightRow.ItemArray.Clone() as object[];

                                enhancedFlightPlan.Rows.Add(normalRow);
                            }
                        }
                    }
                }
            }
            enhancedFlightPlan.AcceptChanges();
            return enhancedFlightPlan;
        }

        internal const string CPLEX_PARTIAL_SOLUTION_TABLE_NAME = "Partial Allocation(Part2 From Flights)";
        private DataTable createCPLEXSolutionTableWithRejectedPartsFromFlightWithLargeDownTime(List<DubaiTools.FlightPlanInformation.AllocatedFlight> flightRemovedPartsList)
        {
            DataTable cplexPartialSolutionTable = new DataTable(CPLEX_PARTIAL_SOLUTION_TABLE_NAME);

            #region Cplex Allocation Indexes
            int idColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.FLIGHT_ID_CPLEX_COLUMN_NAME, typeof(int));

            int flightNbColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.FLIGHT_NB_CPLEX_COLUMN_NAME, typeof(string));

            int dateColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.FLIGHT_DATE_CPLEX_COLUMN_NAME, typeof(string));

            int terminalNbCodeColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.FLIGHT_TERMINAL_NB_CPLEX_COLUMN_NAME, typeof(int));

            int allocTypeColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.FLIGHT_ALLOC_TYPE_CPLEX_COLUMN_NAME, typeof(string));

            int allocTypeListColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.FLIGHT_ALLOC_TYPE_LIST_CPLEX_COLUMN_NAME, typeof(string));

            int deskNameColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.DESK_CPLEX_COLUMN_NAME, typeof(string));

            int occStartColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.OCC_START_CPLEX_COLUMN_NAME, typeof(string));

            int occEndColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.OCC_END_CPLEX_COLUMN_NAME, typeof(string));

            int occDurationColumnIndex = cplexPartialSolutionTable.Columns.Count;
            cplexPartialSolutionTable.Columns.Add(DubaiTools.FlightPlanInformation.OCC_DURATION_CPLEX_COLUMN_NAME, typeof(string));
            #endregion

            foreach (DubaiTools.FlightPlanInformation.AllocatedFlight flightRemovedPart in flightRemovedPartsList)
            {
                DataRow row = cplexPartialSolutionTable.NewRow();

                row[idColumnIndex] = flightRemovedPart.id;
                row[flightNbColumnIndex] = flightRemovedPart.flightNumber;
                row[dateColumnIndex] = flightRemovedPart.flightCompleteDate;
                row[terminalNbCodeColumnIndex] = flightRemovedPart.terminalNb;
                row[allocTypeColumnIndex] = flightRemovedPart.flightAllocationType;
                row[allocTypeListColumnIndex] = flightRemovedPart.flightAllocationTypesPriorityList;
                row[deskNameColumnIndex] = flightRemovedPart.resourceName;
                row[occStartColumnIndex] = flightRemovedPart.occupationStartMinute;
                row[occEndColumnIndex] = flightRemovedPart.occupationEndMinute;
                row[occDurationColumnIndex] = flightRemovedPart.occupationDurationInMinutes;

                cplexPartialSolutionTable.Rows.Add(row);
            }
            cplexPartialSolutionTable.AcceptChanges();
            return cplexPartialSolutionTable;
        }
                
        #region comment
        /*
        internal const string FLIGHT_PARKING_STAND_ALTERNATIVES_TABLE_NAME = "Flight Parking Stand Alternatives";
        const string occupationStartColumnName = "Occupation start (min)";
        const string occupationEndColumnName = "Occupation end (min)";
        const string occupationDurationColumnName = "Occupation Duration (min)";

        private DataTable getFlightParkingStandAlternativesTable(DataTable filteredDepartureFlightPlan,
            DataTable flightParkingStandCostTable, DateTime fromDate)
        {
            DataTable flightParkingStandAlternativeTable = null;
            if (filteredDepartureFlightPlan == null || flightParkingStandCostTable == null)
            {
                return flightParkingStandAlternativeTable;
            }
            flightParkingStandAlternativeTable = flightParkingStandCostTable.Copy();
            flightParkingStandAlternativeTable.TableName = FLIGHT_PARKING_STAND_ALTERNATIVES_TABLE_NAME;
            
            if (flightParkingStandCostTable.Columns.IndexOf(costColumnName) != -1)
            {
                flightParkingStandAlternativeTable.Columns.Remove(costColumnName);

                int occupationStartColumnIndex = flightParkingStandAlternativeTable.Columns.Count;
                flightParkingStandAlternativeTable.Columns.Add(occupationStartColumnName, typeof(Int32));

                int occupationEndColumnIndex = flightParkingStandAlternativeTable.Columns.Count;
                flightParkingStandAlternativeTable.Columns.Add(occupationEndColumnName, typeof(Int32));

                int occupationDurationColumnIndex = flightParkingStandAlternativeTable.Columns.Count;
                flightParkingStandAlternativeTable.Columns.Add(occupationDurationColumnName, typeof(Int32));

                int alternativesFlightIdColumnIndex = flightParkingStandAlternativeTable.Columns.IndexOf(flightIdColumnName);
                int alternativesFlightCompleteDateColumnIndex = flightParkingStandAlternativeTable.Columns.IndexOf(flightDateColumnName);

                Dictionary<int, int> downTimesDictionary 
                    = getFlightDownTimeDictionary(filteredDepartureFlightPlan);

                foreach (DataRow alternativesRow in flightParkingStandAlternativeTable.Rows)
                {
                    int flightId = -1;
                    if (alternativesRow[alternativesFlightIdColumnIndex] != null)
                        Int32.TryParse(alternativesRow[alternativesFlightIdColumnIndex].ToString(), out flightId);

                    DateTime flightCompleteDate = DateTime.MinValue;
                    if (alternativesRow[alternativesFlightCompleteDateColumnIndex] != null)
                        flightCompleteDate = FonctionsType.getDate(alternativesRow[alternativesFlightCompleteDateColumnIndex]);

                    if (flightId != -1 && flightCompleteDate != DateTime.MinValue
                        && downTimesDictionary.ContainsKey(flightId))
                    {
                        int downTime = downTimesDictionary[flightId];
                        DateTime parkingOpeningTime = flightCompleteDate.AddMinutes(-downTime);
                        double occupationStartMinute 
                            = parkingOpeningTime.Subtract(fromDate).TotalMinutes;
                        double occupationEndMinute = occupationStartMinute + downTime;

                        alternativesRow[occupationStartColumnIndex] = occupationStartMinute;
                        alternativesRow[occupationEndColumnIndex] = occupationEndMinute;
                        alternativesRow[occupationDurationColumnIndex] = downTime;
                    }
                }
            }
            flightParkingStandAlternativeTable.AcceptChanges();
            return flightParkingStandAlternativeTable;
        }
        */
        #endregion
        private Dictionary<int, int> getFlightDownTimeDictionary(DataTable filteredFPD)
        {
            Dictionary<int, int> flightDownTimeDictionary = new Dictionary<int, int>();

            int flightIdColumnIndex = filteredFPD.Columns.IndexOf(GlobalNames.sFPD_A_Column_ID);
            int downTimeColumnIndex = filteredFPD.Columns.IndexOf(GlobalNames.sFPD_A_Column_User2); // made as option in Generate...assistant - select opening time column name

            if (flightIdColumnIndex != -1 && downTimeColumnIndex != -1)
            {
                foreach (DataRow row in filteredFPD.Rows)
                {
                    int flightId = -1;
                    if (row[flightIdColumnIndex] != null)
                        Int32.TryParse(row[flightIdColumnIndex].ToString(), out flightId);
                    int downTime = -1;
                    if (row[downTimeColumnIndex] != null)
                        Int32.TryParse(row[downTimeColumnIndex].ToString(), out downTime);

                    if (flightId != -1 && downTime != -1
                        && !flightDownTimeDictionary.ContainsKey(flightId))
                    {
                        flightDownTimeDictionary.Add(flightId, downTime);
                    }
                }
            }
            return flightDownTimeDictionary;
        }

        private String getOutputPath()
        {
            String outputPath = "";
            String projectPath = DonneesEnCours.getNomDuChemin();
            if (projectPath != null && projectPath != "")
            {
                outputPath = projectPath + "\\Output\\";
            }
            return outputPath;
        }

        internal const string CPLEX_TABLE_NAME = "CPLEX";
        internal const string CPLEX_INFO_COLUMN_NAME = "Information";
        internal const int DEAD_TIME_IN_MINUTES = 60;
        private DataTable getDatTableForCplex(DataTable filteredFlightPlan, DataTable parkingStandTable, DateTime fromDate) 
        {
            DataTable cplexTable = new DataTable(CPLEX_TABLE_NAME);

            if (filteredFlightPlan == null || parkingStandTable == null)               
            {
                return cplexTable;
            }

            int infoColumnIndex = cplexTable.Columns.Count;
            cplexTable.Columns.Add(CPLEX_INFO_COLUMN_NAME, typeof(String));

            String cplexInfo = "";

            #region Flights
            int flightIdColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_ID);
            int flightNbColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightN);
            int flightSTDColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_Column_STD);
            int flightDateColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_DATE);
            int flightParkingTerminalNbColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_TerminalParking);
            int flightAllocTypeColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User5);
            int downTimeColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_User2);            

            if (flightIdColumnIndex != -1 && flightNbColumnIndex != -1
                && flightSTDColumnIndex != -1 && flightDateColumnIndex != -1
                && flightParkingTerminalNbColumnIndex != -1
                && flightAllocTypeColumnIndex != -1 && downTimeColumnIndex != -1)
            {
                DataRow cplexFlightsFirstRow = cplexTable.NewRow();
                cplexFlightsFirstRow[CPLEX_INFO_COLUMN_NAME] = "Flights = {";
                cplexTable.Rows.Add(cplexFlightsFirstRow);

                for (int i = 0; i < filteredFlightPlan.Rows.Count; i++)
                {
                    DataRow fpdRow = filteredFlightPlan.Rows[i];

                    int flightId = -1;
                    DateTime flightDate = DateTime.MinValue;
                    DateTime completeFlightDate = DateTime.MinValue;
                    string flightNb = "";
                    int parkingTerminalnb = -1;
                    string flightAllocType = "";
                    int downTime = -1;
                    double occupationStartMinute = -1;
                    double occupationEndMinute = -1;
                    double occupationDuration = -1;

                    if (fpdRow[flightIdColumnIndex] != null)
                    {
                        Int32.TryParse(fpdRow[flightIdColumnIndex].ToString(), out flightId);
                    }

                    if (fpdRow[flightDateColumnIndex] != null)
                        flightDate = FonctionsType.getDate(fpdRow[flightDateColumnIndex]);
                    if (flightDate != DateTime.MinValue)
                    {
                        TimeSpan flightTime = TimeSpan.MinValue;
                        if (fpdRow[flightSTDColumnIndex] != null)
                            flightTime = FonctionsType.getTime(fpdRow[flightSTDColumnIndex]);
                        if (flightTime != TimeSpan.MinValue)
                        {
                            completeFlightDate = flightDate.Add(flightTime);
                        }
                    }

                    if (fpdRow[flightNbColumnIndex] != null)
                    {
                        flightNb = fpdRow[flightNbColumnIndex].ToString();
                    }

                    if (fpdRow[flightParkingTerminalNbColumnIndex] != null)
                    {
                        Int32.TryParse(fpdRow[flightParkingTerminalNbColumnIndex].ToString(), out parkingTerminalnb);
                    }

                    if (fpdRow[flightAllocTypeColumnIndex] != null)
                    {
                        flightAllocType = fpdRow[flightAllocTypeColumnIndex].ToString();
                    }
                    List<string> possibleDeskAllocTypes
                        = getPossibleDeskAllocationTypesByFlightAllocationType(flightAllocType);
                    string possibleDeskAlloc = "{";
                    for (int k = 0; k < possibleDeskAllocTypes.Count; k++)
                    {
                        string deskAllocationType = possibleDeskAllocTypes[k];
                        possibleDeskAlloc += "\"" + deskAllocationType + "\"";
                        if (k < possibleDeskAllocTypes.Count - 1)
                        {
                            possibleDeskAlloc += ", ";
                        }
                    }
                    possibleDeskAlloc += "}";

                    if (fpdRow[downTimeColumnIndex] != null)
                    {
                        if (Int32.TryParse(fpdRow[downTimeColumnIndex].ToString(), out downTime)
                            && completeFlightDate != DateTime.MinValue)
                        {
                            DateTime parkingOpeningTime = completeFlightDate.AddMinutes(-downTime);
                            occupationStartMinute
                                = parkingOpeningTime.Subtract(fromDate).TotalMinutes;
                            if (occupationStartMinute < 0)
                                occupationStartMinute = 0;
                            occupationEndMinute = occupationStartMinute + downTime + DEAD_TIME_IN_MINUTES;
                            occupationDuration = occupationEndMinute - occupationStartMinute;
                        }
                    }

                    if (flightId != -1 && completeFlightDate != DateTime.MinValue
                        && flightNb != "" && possibleDeskAlloc != ""
                        && occupationDuration != -1 && occupationStartMinute != -1 && occupationEndMinute != -1)
                    {
                        cplexInfo = "<" 
                            + flightId + ", "
                            + "\"" + flightNb + "\"" + ", "
                            + "\"" + completeFlightDate + "\"" + ", "
                            + "\"" + flightNb + "_" + completeFlightDate + "\"" + ", "
                            + parkingTerminalnb + ", "
                            + "\"" + flightAllocType + "\"" + ", "
                            + possibleDeskAlloc + ", "
                            + occupationStartMinute + ", "
                            + occupationEndMinute + ", "
                            + occupationDuration
                            + ">";
                        if (i < filteredFlightPlan.Rows.Count - 1)
                        {
                            cplexInfo += ", ";
                        }
                        DataRow cplexRow = cplexTable.NewRow();
                        cplexRow[CPLEX_INFO_COLUMN_NAME] = cplexInfo;
                        cplexTable.Rows.Add(cplexRow);
                    }
                }

                DataRow cplexFlightsLastRow = cplexTable.NewRow();
                cplexFlightsLastRow[CPLEX_INFO_COLUMN_NAME] = "};";
                cplexTable.Rows.Add(cplexFlightsLastRow);
            }
            #endregion
            

            #region Parking Stands
            int standIdColumnIndex = parkingStandTable.Columns.IndexOf(parkingStandIdColumnName);
            int standNameColumnIndex = parkingStandTable.Columns.IndexOf(parkingStandNameColumnName);
            int standAllocTypeColumnIndex = parkingStandTable.Columns.IndexOf(parkingStandDistributionCodeColumnName);

            if (standIdColumnIndex != -1 && standNameColumnIndex != -1 && standAllocTypeColumnIndex != -1)
            {
                DataRow cplexStandFirstRow = cplexTable.NewRow();
                cplexStandFirstRow[CPLEX_INFO_COLUMN_NAME] = "Desks = {";
                cplexTable.Rows.Add(cplexStandFirstRow);

                for (int i = 0; i < parkingStandTable.Rows.Count; i++)
                {
                    DataRow standRow = parkingStandTable.Rows[i];
                    int standId = -1;
                    string standName = "";
                    string allocType = "";

                    if (standRow[standIdColumnIndex] != null)
                        Int32.TryParse(standRow[standIdColumnIndex].ToString(), out standId);
                    if (standRow[standNameColumnIndex] != null)
                        standName = standRow[standNameColumnIndex].ToString();
                    if (standRow[standAllocTypeColumnIndex] != null)
                        allocType = standRow[standAllocTypeColumnIndex].ToString();

                    if (standId != -1 && standName != "" && allocType != "")
                    {
                        /*
                        string idToString = standId.ToString();
                        if (idToString.Length == 1)
                            idToString = "00" + idToString;
                        else if (idToString.Length == 2)
                            idToString = "0" + idToString;

                        string standCode = "S" + idToString + "_" + standName + "_" + allocType;
                        */
                        cplexInfo = "<" + standId + ", " + "\"" + standName + "\""
                            + ", " + "\"" + allocType + "\"" + ">";                        
                        if (i < parkingStandTable.Rows.Count - 1)
                        {
                            cplexInfo += ", ";
                        }
                        DataRow cplexRow = cplexTable.NewRow();
                        cplexRow[CPLEX_INFO_COLUMN_NAME] = cplexInfo;
                        cplexTable.Rows.Add(cplexRow);
                    }
                }

                DataRow cplexStandLastRow = cplexTable.NewRow();
                cplexStandLastRow[CPLEX_INFO_COLUMN_NAME] = "};";
                cplexTable.Rows.Add(cplexStandLastRow);
            }
            #endregion

            cplexTable.AcceptChanges();
            return cplexTable;
        }
        private List<string> getPossibleDeskAllocationTypesByFlightAllocationType(string flightAllocType)
        {
            List<string> possibleDeskAllocTypes = new List<string>();
            if (flightAllocType == DubaiTools.FlightPlanConversion.ZONE_F_1_CODE)
            {
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_1_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_BIN_CODE);
            }
            else if (flightAllocType == DubaiTools.FlightPlanConversion.ZONE_F_2_CODE)
            {
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_2_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_2_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_BIN_CODE);
            }
            else if (flightAllocType == DubaiTools.FlightPlanConversion.ZONE_F_3_CODE)
            {
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_3_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_BIN_CODE);
            }
            else if (flightAllocType == DubaiTools.FlightPlanConversion.ZONE_E_1_CODE)
            {
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_1_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_1_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_BIN_CODE);
            }
            else if (flightAllocType == DubaiTools.FlightPlanConversion.ZONE_E_2_CODE)
            {
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_2_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_2_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_2_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_2_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_BIN_CODE);
            }
            else if (flightAllocType == DubaiTools.FlightPlanConversion.ZONE_E_3_CODE)
            {
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_3_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_3_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_BIN_CODE);
            }
            else if (flightAllocType == DubaiTools.FlightPlanConversion.ZONE_C_1_CODE)
            {
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_C_1_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_1_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_1_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_C_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_C_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_BIN_CODE);
            }
            else if (flightAllocType == DubaiTools.FlightPlanConversion.ZONE_C_2_CODE)
            {
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_C_2_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_2_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_2_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_C_2_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_2_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_2_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_BIN_CODE);
            }
            else if (flightAllocType == DubaiTools.FlightPlanConversion.ZONE_C_3_CODE)
            {
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_C_3_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_3_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_3_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_C_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_3_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_C_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_E_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_F_1_REM_CODE);
                possibleDeskAllocTypes.Add(DubaiTools.FlightPlanConversion.ZONE_BIN_CODE);
            }
            return possibleDeskAllocTypes;
        }

        private DataTable getDatTableForCplex(DataTable filteredFlightPlan, DataTable parkingStandTable, 
            DataTable flightParkingStandCostTable, DataTable flightParkingStandAlternativesTable)
        {
            DataTable cplexTable = new DataTable(CPLEX_TABLE_NAME);

            if (filteredFlightPlan == null || parkingStandTable == null
                || flightParkingStandCostTable == null || flightParkingStandAlternativesTable == null)
            {
                return cplexTable;
            }

            int infoColumnIndex = cplexTable.Columns.Count;
            cplexTable.Columns.Add(CPLEX_INFO_COLUMN_NAME, typeof(String));

            String cplexInfo = "";

            #region Parking Stands
            int standIdColumnIndex = parkingStandTable.Columns.IndexOf(parkingStandIdColumnName);
            int standNameColumnIndex = parkingStandTable.Columns.IndexOf(parkingStandNameColumnName);

            if (standIdColumnIndex != -1 && standNameColumnIndex != -1)
            {
                DataRow cplexStandFirstRow = cplexTable.NewRow();
                cplexStandFirstRow[CPLEX_INFO_COLUMN_NAME] = "Desks = {";
                cplexTable.Rows.Add(cplexStandFirstRow);

                for (int i = 0; i < parkingStandTable.Rows.Count; i++)//150; i++)//parkingStandTable.Rows.Count; i++)
                {
                    DataRow standRow = parkingStandTable.Rows[i];
                    int standId = -1;
                    string standName = "";

                    if (standRow[standIdColumnIndex] != null)
                        Int32.TryParse(standRow[standIdColumnIndex].ToString(), out standId);
                    if (standRow[standNameColumnIndex] != null)
                        standName = standRow[standNameColumnIndex].ToString();

                    if (standId != -1 && standName != "")
                    {
                        cplexInfo = "<" + standId + ", " + "\"" + standName + "\"" + ">";
                        //cplexInfo = "<" + standId + ", " + "\"" + "Resource_" + standId + "\"" + ">";
                        if (i < parkingStandTable.Rows.Count - 1)
                        {
                            cplexInfo += ", ";
                        }
                        DataRow cplexRow = cplexTable.NewRow();
                        cplexRow[CPLEX_INFO_COLUMN_NAME] = cplexInfo;
                        cplexTable.Rows.Add(cplexRow);
                    }
                }

                DataRow cplexStandLastRow = cplexTable.NewRow();
                cplexStandLastRow[CPLEX_INFO_COLUMN_NAME] = "};";
                cplexTable.Rows.Add(cplexStandLastRow);
            }
            #endregion

            #region Flights
            int flightIdColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_ID);
            int flightNbColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightN);
            int flightSTDColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_Column_STD);
            int flightDateColumnIndex = filteredFlightPlan.Columns.IndexOf(GlobalNames.sFPD_A_Column_DATE);

            if (flightIdColumnIndex != -1 && flightNbColumnIndex != -1
                && flightSTDColumnIndex != -1 && flightDateColumnIndex != -1)
            {
                DataRow cplexFlightsFirstRow = cplexTable.NewRow();
                cplexFlightsFirstRow[CPLEX_INFO_COLUMN_NAME] = "Flights = {";
                cplexTable.Rows.Add(cplexFlightsFirstRow);

                for (int i = 0; i < filteredFlightPlan.Rows.Count; i++)
                {
                    DataRow fpdRow = filteredFlightPlan.Rows[i];

                    int flightId = -1;
                    DateTime flightDate = DateTime.MinValue;
                    DateTime completeFlightDate = DateTime.MinValue;
                    string flightNb = "";

                    if (fpdRow[flightIdColumnIndex] != null)
                    {
                        Int32.TryParse(fpdRow[flightIdColumnIndex].ToString(), out flightId);
                    }

                    if (fpdRow[flightDateColumnIndex] != null)
                        flightDate = FonctionsType.getDate(fpdRow[flightDateColumnIndex]);
                    if (flightDate != DateTime.MinValue)
                    {
                        TimeSpan flightTime = TimeSpan.MinValue;
                        if (fpdRow[flightSTDColumnIndex] != null)
                            flightTime = FonctionsType.getTime(fpdRow[flightSTDColumnIndex]);
                        if (flightTime != TimeSpan.MinValue)
                        {
                            completeFlightDate = flightDate.Add(flightTime);
                        }
                    }

                    if (fpdRow[flightNbColumnIndex] != null)
                    {
                        flightNb = fpdRow[flightNbColumnIndex].ToString();
                    }

                    if (flightId != -1 && completeFlightDate != DateTime.MinValue
                        && flightNb != "")
                    {
                        //int x = i + 1;
                        cplexInfo = "<" + flightId + ", " + "\"" + flightNb + "_" + completeFlightDate + "\"" + ">";                        
                        //cplexInfo = "<" + flightId + ", " + "\"" + "Flight" + "_" + x + "\"" + ">";
                        if (i < filteredFlightPlan.Rows.Count - 1)
                        {
                            cplexInfo += ", ";
                        }
                        DataRow cplexRow = cplexTable.NewRow();
                        cplexRow[CPLEX_INFO_COLUMN_NAME] = cplexInfo;
                        cplexTable.Rows.Add(cplexRow);
                    }
                }

                DataRow cplexFlightsLastRow = cplexTable.NewRow();
                cplexFlightsLastRow[CPLEX_INFO_COLUMN_NAME] = "};";
                cplexTable.Rows.Add(cplexFlightsLastRow);
            }
            #endregion

            #region Flight-Stand Costs
            /*
            flightNbColumnIndex = flightParkingStandCostTable.Columns.IndexOf(flightNumberColumnName);
            int costColumnIndex = flightParkingStandCostTable.Columns.IndexOf(costColumnName);

            if (flightNbColumnIndex != -1 && costColumnIndex != -1)
            {
                DataRow cplexCostFirstRow = cplexTable.NewRow();
                cplexCostFirstRow[CPLEX_INFO_COLUMN_NAME] = "Costs = [";
                cplexTable.Rows.Add(cplexCostFirstRow);

                string previousFlightNb = "";
                for (int i = 0; i < flightParkingStandCostTable.Rows.Count; i++)
                {
                    DataRow costRow = flightParkingStandCostTable.Rows[i];
                    DataRow nextRow = null;
                    if (i < flightParkingStandCostTable.Rows.Count - 1)
                    {
                        nextRow = flightParkingStandCostTable.Rows[i + 1];
                    }

                    int cost = -1;                   
                    string flightNb = "";
                    string nextFlightNb = "";

                    if (costRow[costColumnIndex] != null)
                    {
                        Int32.TryParse(costRow[costColumnIndex].ToString(), out cost);
                    }

                    if (costRow[flightNbColumnIndex] != null)
                    {
                        flightNb = costRow[flightNbColumnIndex].ToString();
                    }

                    if (nextRow != null && nextRow[flightNbColumnIndex] != null)
                    {
                        nextFlightNb = nextRow[flightNbColumnIndex].ToString();
                    }

                    if (cost != -1 && flightNb != "")
                    {
                        if (previousFlightNb == "" || previousFlightNb != flightNb)
                        {
                            cplexInfo = "[";
                        }
                        cplexInfo += cost;

                        if (flightNb == nextFlightNb)
                        {
                            cplexInfo += ", ";
                        }
                        else
                        {
                            cplexInfo += "]";
                            if (nextFlightNb != "")
                            {
                                cplexInfo += ", ";
                            }
                        }

                        if (nextFlightNb != flightNb)
                        {
                            DataRow cplexRow = cplexTable.NewRow();
                            cplexRow[CPLEX_INFO_COLUMN_NAME] = cplexInfo;
                            cplexTable.Rows.Add(cplexRow);
                        }

                        previousFlightNb = flightNb;
                    }
                }

                DataRow cplexCostLastRow = cplexTable.NewRow();
                cplexCostLastRow[CPLEX_INFO_COLUMN_NAME] = "];";
                cplexTable.Rows.Add(cplexCostLastRow);
            }
             */ 
            #endregion

            #region Flight-Stand Alternatives
            /*
            flightIdColumnIndex = flightParkingStandAlternativesTable.Columns.IndexOf(flightIdColumnName);
            flightNbColumnIndex = flightParkingStandAlternativesTable.Columns.IndexOf(flightNumberColumnName);
            int flightCompleteDateColumnIndex = flightParkingStandAlternativesTable.Columns.IndexOf(flightDateColumnName);
            standIdColumnIndex = flightParkingStandAlternativesTable.Columns.IndexOf(parkingStandIdColumnName);
            standNameColumnIndex = flightParkingStandAlternativesTable.Columns.IndexOf(parkingStandNameColumnName);
            int occupationStartColumnIndex = flightParkingStandAlternativesTable.Columns.IndexOf(occupationStartColumnName);
            int occupationEndColumnIndex = flightParkingStandAlternativesTable.Columns.IndexOf(occupationEndColumnName);
            int occupationDurationColumnIndex = flightParkingStandAlternativesTable.Columns.IndexOf(occupationDurationColumnName);

            if (flightIdColumnIndex != -1 && flightNbColumnIndex != -1 && flightCompleteDateColumnIndex != -1 && standIdColumnIndex != -1
                && standNameColumnIndex != -1 && occupationStartColumnIndex != -1 && occupationEndColumnIndex != -1 && occupationDurationColumnIndex != -1)
            {
                DataRow cplexAlternativesFirstRow = cplexTable.NewRow();
                cplexAlternativesFirstRow[CPLEX_INFO_COLUMN_NAME] = "Alternatives = {";
                cplexTable.Rows.Add(cplexAlternativesFirstRow);

                for (int i = 0; i < flightParkingStandAlternativesTable.Rows.Count; i++)
                {
                    DataRow altRow = flightParkingStandAlternativesTable.Rows[i];

                    int flightId = -1;                    
                    DateTime completeFlightDate = DateTime.MinValue;
                    string flightNb = "";
                    int standId = -1;
                    string standName = "";
                    double occupationStart = -1;
                    double occupationEnd = -1;
                    double occupationDuration = -1;

                    if (altRow[flightIdColumnIndex] != null)
                    {
                        Int32.TryParse(altRow[flightIdColumnIndex].ToString(), out flightId);
                    }
                    if (altRow[flightCompleteDateColumnIndex] != null)
                    {
                        completeFlightDate = FonctionsType.getDate(altRow[flightCompleteDateColumnIndex]);
                    }
                    if (altRow[flightNbColumnIndex] != null)
                    {
                        flightNb = altRow[flightNbColumnIndex].ToString();
                    }
                    if (altRow[standIdColumnIndex] != null)
                    {
                        Int32.TryParse(altRow[standIdColumnIndex].ToString(), out standId);
                    }
                    if (altRow[standNameColumnIndex] != null)
                    {
                        standName = altRow[standNameColumnIndex].ToString();
                    }
                    if (altRow[occupationStartColumnIndex] != null)
                    {
                        Double.TryParse(altRow[occupationStartColumnIndex].ToString(), out occupationStart);
                    }
                    if (altRow[occupationEndColumnIndex] != null)
                    {
                        Double.TryParse(altRow[occupationEndColumnIndex].ToString(), out occupationEnd);
                    }
                    if (altRow[occupationDurationColumnIndex] != null)
                    {
                        Double.TryParse(altRow[occupationDurationColumnIndex].ToString(), out occupationDuration);
                    }
                    if (flightId != -1 && completeFlightDate != DateTime.MinValue
                        && flightNb != "" && standId != -1 && standName != ""
                        && occupationStart != -1 && occupationEnd != -1 && occupationDuration != -1)
                        //&& standId <= 150)//xxxx)
                    {
                        
                        cplexInfo = "< " + "<" + flightId + ", " + "\"" + flightNb + "_" + completeFlightDate + "\"" + ">" 
                            + ", "
                            + "<" + standId + ", " + "\"" + standName + "\"" + ">"
                            + ", "
                            + occupationStart + ", " + occupationEnd + ", " + occupationDuration
                            + ">";
                        cplexInfo = "< " + "<" + flightId + ", " + "\"" + "Flight" + "_" + flightNb + "\"" + ">" 
                            + ", "
                            + "<" + standId + ", " + "\"" + "Resource_" + standId + "\"" + ">"
                            + ", "
                            + occupationStart + ", " + occupationEnd + ", " + occupationDuration
                            + ">";
                        if (i < flightParkingStandAlternativesTable.Rows.Count - 1)
                        {
                            cplexInfo += ", ";
                        }
                        DataRow cplexRow = cplexTable.NewRow();
                        cplexRow[CPLEX_INFO_COLUMN_NAME] = cplexInfo;
                        cplexTable.Rows.Add(cplexRow);
                    }
                }
                DataRow cplexAlternativesLastRow = cplexTable.NewRow();
                cplexAlternativesLastRow[CPLEX_INFO_COLUMN_NAME] = "};";
                cplexTable.Rows.Add(cplexAlternativesLastRow);
            }
            */
            #endregion

            cplexTable.AcceptChanges();
            return cplexTable;
        }
                
        // << Task #12843 Pax2Sim - Dubai - allocate using Cplex
        
        // >> Task #12808 Pax2Sim - allocation Liege        
        private void importLiegeFlightPlansToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ArrayList liegeMessages = new ArrayList();
            List<LiegeTools.ImportDataInformation> liegeImportInformationList = new List<LiegeTools.ImportDataInformation>();

            FlightPlanImportAssistant importAssistant = new FlightPlanImportAssistant(DonneesEnCours);
            if (importAssistant.DialogResult != DialogResult.Abort && importAssistant.ShowDialog() == DialogResult.OK)
            {
                this.Enabled = false;
                Prompt.SIM_Chargement cht = null;

                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }

                DataTable flightPlanTable = null;                

                if (cht != null)
                {
                    cht.setChenillard = true;
                }
                try
                {
                    flightPlanTable = importAssistant.flightPlanTable;                    
                }
                catch
                {
                    flightPlanTable = null;                    
                }
                if (flightPlanTable == null)
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();

                    MessageBox.Show("Error while loading from the User Data the table needed for conversion.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
                
                //get current aircraft types list
                DataTable currentAircraftTypeTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AircraftTypesTableName);//option in assistant
                List<AircraftType> currentAircraftTypes = LiegeTools.getAircraftTypesByAircraftTypeTable(currentAircraftTypeTable);
                
                //convert flight plan
                FlightPlanConversion flightPlanConversion
                    = new FlightPlanConversion(flightPlanTable, currentAircraftTypes, importAssistant.flightPlanFileName, 
                                                importAssistant.startDate, importAssistant.endDate);
                flightPlanConversion.convert();

                if (flightPlanConversion.errorList.Count > 0)
                {
                    liegeMessages.AddRange(flightPlanConversion.errorList);
                    setErrors(liegeMessages, false);

                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    MessageBox.Show("Error(s) occured while converting the flight plan format to the PAX2SIM Flight Plan format. The process could not be completed.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else if (flightPlanConversion.infoList.Count > 0)
                {
                    liegeImportInformationList.AddRange(flightPlanConversion.infoList);
                }
                

                //update the FLight Plans
                DataTable currentFPA = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                DataTable currentFPD = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);

                FlightPlanUpdate flightPlanUpdate
                    = new FlightPlanUpdate(flightPlanConversion.arrivalFlightsDictionary,
                        flightPlanConversion.departureFlightsDictionary, currentFPA, currentFPD);

                DataTable arrivalFlightPlanWithImportedData = null;
                DataTable departureFlightPlanWithImportedData = null;

                if (currentFPA != null && currentFPD != null)
                {
                    arrivalFlightPlanWithImportedData
                        = flightPlanUpdate.generateArrivalFlightPlanWithImportedData();

                    if (arrivalFlightPlanWithImportedData != null)
                    {
                        DonneesEnCours.UpdateTable("Input", GlobalNames.FPATableName, arrivalFlightPlanWithImportedData);
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.FPATableName);
                    }

                    departureFlightPlanWithImportedData
                        = flightPlanUpdate.generateDepartureFlightPlanWithImportedData();
                    if (departureFlightPlanWithImportedData != null)
                    {
                        DonneesEnCours.UpdateTable("Input", GlobalNames.FPDTableName, departureFlightPlanWithImportedData);
                        DonneesEnCours.aEteModifiee("Input", GlobalNames.FPDTableName);
                    }
                }
                else
                {
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    MessageBox.Show("The current Flight Plans could not be loaded. The process could not be completed.",
                        "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                
                //update Aircraft Links table
                DataTable currentAircraftLinksTable = DonneesEnCours.getTable("Input", GlobalNames.FPLinksTableName);
                if (currentAircraftLinksTable != null 
                    && flightPlanConversion.arrivalFlightsDictionary != null 
                    && flightPlanConversion.departureFlightsDictionary != null)
                {
                    AircraftLinksUpdate aircraftLinksUpdate
                        = new AircraftLinksUpdate(currentAircraftLinksTable, flightPlanConversion.arrivalFlightsDictionary, 
                                                    flightPlanConversion.departureFlightsDictionary);
                    aircraftLinksUpdate.updateAircraftLinksTable();
                    if (aircraftLinksUpdate.infoList.Count > 0)
                    {
                        liegeImportInformationList.AddRange(aircraftLinksUpdate.infoList);
                    }
                }

                //update Aircraft Types table
                DataTable updatedAircraftTypesTable 
                    = LiegeTools.updateAircraftTypesTable(currentAircraftTypeTable, flightPlanConversion.allAircraftTypesDictionary);
                if (updatedAircraftTypesTable != null)
                {
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FP_AircraftTypesTableName, updatedAircraftTypesTable);
                    DonneesEnCours.aEteModifiee("Input", GlobalNames.FP_AircraftTypesTableName);
                }

                //use the lists with airline codes, flight categories and aircraft types from flightPlanConversion to update the Input Airline codes,... tables
                DataTable currentFlightCategoryTable = DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName);
                DataTable updatedFlightCategoryTable
                    = LiegeTools.createFlightCategoryTableWithImportedData(currentFlightCategoryTable, flightPlanConversion.importedFlightCategories);
                if (updatedFlightCategoryTable != null)
                {
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FP_FlightCategoriesTableName, updatedFlightCategoryTable);
                    DonneesEnCours.aEteModifiee("Input", GlobalNames.FP_FlightCategoriesTableName);
                    
                    //updates the tables that depend on flight categories (ex. load factors)
                    DonneesEnCours.Update_FlightCategorie();
                }
                
                DataTable currentAirlineCodesTable = DonneesEnCours.getTable("Input", GlobalNames.FP_AirlineCodesTableName);
                DataTable updatedAirlineCodesTable
                    = LiegeTools.createAirlineCodesTableWithImportedData(currentAirlineCodesTable, flightPlanConversion.importedAirlineCodes);
                if (updatedAirlineCodesTable != null)
                {
                    DonneesEnCours.UpdateTable("Input", GlobalNames.FP_AirlineCodesTableName, updatedAirlineCodesTable);
                    DonneesEnCours.aEteModifiee("Input", GlobalNames.FP_AirlineCodesTableName);
                    updatedAirlineCodesTable.AcceptChanges();
                }
                
                DataTable informationTable = LiegeTools.createInformationTable(liegeImportInformationList);
                
                //save the imported FPD, FPA and information table also in the Analysis/Scenario directory
                DateTime now = DateTime.Now;
                String scenarioName = "Import Date " + "D" + now.Day + "_M" + now.Month + "_Y" + now.Year
                    + "_H" + now.Hour + "_M" + now.Minute + "_S" + now.Second;
                
                ParamScenario scenario = ConversionPlanDeVols.GenerationScenario(scenarioName,
                importAssistant.startDate, importAssistant.endDate, 5, 5, new Dictionary<string, string>());
                GestionScenarios(scenario);

                //add the tables                
                if (informationTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, informationTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AthensTools.INFORMATION_TABLE_NAME);

                if (arrivalFlightPlanWithImportedData != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, arrivalFlightPlanWithImportedData);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AthensTools.FlightPlanUpdate.IMPORTED_FPA_TABLE_NAME);

                if (departureFlightPlanWithImportedData != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, departureFlightPlanWithImportedData);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AthensTools.FlightPlanUpdate.IMPORTED_FPD_TABLE_NAME);

                //update the scenario
                TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenario.Name, treeView1.Nodes[2]);
                if (ScenarioPosition == null)
                {
                    MessageBox.Show("The import data could not be saved into the scenario.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    return;
                }
                DonneesEnCours.Maj_Scenario(scenario.Name, ScenarioPosition, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
                DonneesEnCours.UpdateScenarioTree(scenario.Name, ScenarioPosition);

                TreeNode generatingResultsNode = getGeneratingResultsNode(ScenarioPosition, "Generating Results");
                clearRootAndAddSourceNodeChilds(ScenarioPosition, generatingResultsNode);

                ReinitInputTable();

                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
                                
                if (liegeMessages.Count > 0)
                {
                    setErrors(liegeMessages, false);
                }
                ArrayList importedFPErrors = DonneesEnCours.CheckTable(GlobalNames.FPDTableName, GlobalNames.sFPD_A_Column_ID, SortOrder.None);
                ArrayList importedFPAErrors = DonneesEnCours.CheckTable(GlobalNames.FPATableName, GlobalNames.sFPD_A_Column_ID, SortOrder.None);
                
            }
        }
                
        private void generateLiegeAllocationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            generateLiegeAllocation(null);
        }

        internal const string PARKING_OCT_TABLE_NAME = "Parking Opening Closing Times";
        internal const string CHECK_IN_OCT_TABLE_NAME = "Check-In Opening Closing Times";
        internal const string CHECK_IN_SHOWUP_TABLE_NAME = "Check-In ShowUp";
        internal const string BOARDING_GATES_OCT_TABLE_NAME = "Boarding Gates Opening Closing Times";
        internal const string ALLOCATION_PARAMETERS_TABLE_NAME = "Parameters";
        internal const string AIRCRAFT_TYPES_TABLE_NAME = "Aircraft Types";
        internal const string AIRCRAFT_LINKS_TABLE_NAME = "Aircraft Links";
        internal const string PARKING_PRIORITIES_TABLE_NAME = "Parking Priorities";
        internal const string BOARDING_GATES_PRIORITIES_TABLE_NAME = "Boarding Gates Priorities";

        internal const string OCCUPATION_SUFFIX_TABLE_NAME = " Occupation";
        internal const string OCCUPATION_BG_1_TABLE_NAME = "BG_1" + OCCUPATION_SUFFIX_TABLE_NAME;
        internal const string OCCUPATION_BG_2_TABLE_NAME = "BG_2" + OCCUPATION_SUFFIX_TABLE_NAME;
        internal const string OCCUPATION_BG_3_TABLE_NAME = "BG_3" + OCCUPATION_SUFFIX_TABLE_NAME;
        internal const string OCCUPATION_BG_4_TABLE_NAME = "BG_4" + OCCUPATION_SUFFIX_TABLE_NAME;

        internal const string OCCUPATION_ISSUES_SUFFIX_TABLE_NAME = " Occupation Issues";
        internal const string OCCUPATION_ISSUES_BG_1_TABLE_NAME = "BG_1" + OCCUPATION_ISSUES_SUFFIX_TABLE_NAME;
        internal const string OCCUPATION_ISSUES_BG_2_TABLE_NAME = "BG_2" + OCCUPATION_ISSUES_SUFFIX_TABLE_NAME;
        internal const string OCCUPATION_ISSUES_BG_3_TABLE_NAME = "BG_3" + OCCUPATION_ISSUES_SUFFIX_TABLE_NAME;
        internal const string OCCUPATION_ISSUES_BG_4_TABLE_NAME = "BG_4" + OCCUPATION_ISSUES_SUFFIX_TABLE_NAME;

        internal const string OCCUPATION_ISSUES_LOG_SUFFIX_TABLE_NAME = " Occupation Issues Log";
        internal const string OCCUPATION_ISSUES_LOG_BG_1_TABLE_NAME = "BG_1" + OCCUPATION_ISSUES_LOG_SUFFIX_TABLE_NAME;
        internal const string OCCUPATION_ISSUES_LOG_BG_2_TABLE_NAME = "BG_2" + OCCUPATION_ISSUES_LOG_SUFFIX_TABLE_NAME;
        internal const string OCCUPATION_ISSUES_LOG_BG_3_TABLE_NAME = "BG_3" + OCCUPATION_ISSUES_LOG_SUFFIX_TABLE_NAME;
        internal const string OCCUPATION_ISSUES_LOG_BG_4_TABLE_NAME = "BG_4" + OCCUPATION_ISSUES_LOG_SUFFIX_TABLE_NAME;

        public void generateLiegeAllocation(AllocationAssistant pAllocationAssistant)
        {
            AllocationAssistant allocationAssistant = null;
            if (pAllocationAssistant != null)   // >> Task #13367 Liege allocation C#109
            {
                allocationAssistant = pAllocationAssistant;
            }
            else
            {
                allocationAssistant = new AllocationAssistant(DonneesEnCours);
            }
            if (allocationAssistant.DialogResult != DialogResult.Abort
                && allocationAssistant.ShowDialog() == DialogResult.OK)
            {
                this.Enabled = false;
                Prompt.SIM_Chargement cht = null;

                if (!bDebug)
                {
                    cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                    Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                    tSimulation.Start(cht);
                    Thread.Sleep(100);
                }
                if (cht != null)
                {
                    cht.setChenillard = true;
                }
                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation (" + allocationAssistant.fromDate + " - " + allocationAssistant.toDate + ") Start");

                string allocationType = allocationAssistant.allocationType;                
                string mainSortType = allocationAssistant.mainSortType;
                string secondarySortType = allocationAssistant.secondarySortType;
                DateTime scenarioStartDate = allocationAssistant.fromDate;
                DateTime scenarioEndDate = allocationAssistant.toDate;
                TimeInterval scenarioInterval = new TimeInterval(scenarioStartDate, scenarioEndDate);
                int terminalNb = 1;

                //OCT_CITable_Exception_AirlineAirport.txt -> needed only for CheckIn allocation; loaded from the User Data
                Dictionary<string, CheckInOCTAirlineAirportException> checkInOCTAirlineAirportExceptionDictionary
                    = new Dictionary<string, CheckInOCTAirlineAirportException>();
                NormalTable octCITableExceptionAirlineAirport = null;
                if (allocationType == Allocation.CHECK_IN_ALLOCATION_TYPE)
                {
                    octCITableExceptionAirlineAirport
                        = DonneesEnCours.GetFormatedUserDataTable(allocationAssistant.ciOCTAirlineAirportTableName); //LiegeTools.OCT_CITABLE_EXCEPTION_AIRLINE_AIRPORT_TEXT_FILE_NAME);

                    if (octCITableExceptionAirlineAirport == null)
                    {
                        if (cht != null)
                            cht.KillWindow();
                        MessageBox.Show("The " + LiegeTools.OCT_CITABLE_EXCEPTION_AIRLINE_AIRPORT_TEXT_FILE_NAME
                            + " file is not loaded. " + Environment.NewLine
                            + "The allocation will be done by using only the Check-In Opening/Closing Times table.");                        
                    }
                    else
                    {
                        checkInOCTAirlineAirportExceptionDictionary
                            = LiegeTools.getCheckInOCTAirlineAirportExceptionDictionary(octCITableExceptionAirlineAirport.Table);
                    }
                }

                Allocation allocation = new Allocation(DonneesEnCours, allocationType, mainSortType, secondarySortType,
                    true, allocationAssistant.parkingOCTTableName, allocationAssistant.parkingUseOCTexceptions,
                    allocationAssistant.bgOCTTableName, allocationAssistant.bgUseOCTexceptions,
                    allocationAssistant.ciOCTTableName, allocationAssistant.ciUseOCTexceptions,
                    allocationAssistant.ciShowUpTableName, allocationAssistant.ciShowUpUseExceptions, 
                    allocationAssistant.loadingFactorsTableName, allocationAssistant.useLoadingFactorsExceptions, allocationAssistant.disableLoadingFactors,
                    allocationAssistant.aircraftTypesTableName, allocationAssistant.useAircraftTypesExceptions,
                    allocationAssistant.aircraftLinksTableName, allocationAssistant.disableAircraftLinks, allocationAssistant.parkingPrioritiesTableName,
                    allocationAssistant.boardingGatesPrioritiesTableName,
                    allocationAssistant.timeStepInMinutes, allocationAssistant.analysisRangeInMinutes,
                    allocationAssistant.delayBetweenConsecutiveFlightsInMinutes, allocationAssistant.useFPasBasis,
                    scenarioInterval,
                    allocationAssistant.boardingEnteringSpeedPaxPerMinute, allocationAssistant.boardingExitingSpeedPaxPerMinute,
                    //allocationAssistant.delayBetweenBoardings,
                    allocationAssistant.lowerNsSeatsLimitForLargeAircrafts);
                if (allocationType == Allocation.CHECK_IN_ALLOCATION_TYPE)
                    allocation.checkInOCTAirlineAirportExceptionDictionary = checkInOCTAirlineAirportExceptionDictionary;

                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Filtering flight plan, getting Resources list, getting Flights list...Start");
                DataTable filteredFlightPlan = allocation.getFilteredFlightPlan(allocationAssistant.fpdTable, scenarioInterval, terminalNb);                
                List<Resource> availableResources = allocation.getResourcesListByAllocationType(scenarioInterval);
                allocation.initialAvailableResources = availableResources;
                List<Flight> flightsFromFilteredFlightPlan = allocation.getFlightsFromFilteredFlightPlan(filteredFlightPlan, DonneesEnCours);
                //sort again to show correctly in the scenario saved file
                filteredFlightPlan = allocation.sortFlightPlan(filteredFlightPlan);
                
                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Filtering flight plan, getting Resources list, getting Flights list...End");
                if (allocationAssistant.useFPasBasis)
                {
                    allocation.allocateFixedFlightsFromFlightPlan(flightsFromFilteredFlightPlan, availableResources);
                    allocation.allocate(flightsFromFilteredFlightPlan, availableResources);
                }
                else
                {
                    //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Allocation process...Start");
                    allocation.allocate(flightsFromFilteredFlightPlan, availableResources);
                    //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Allocation process...End");
                }
                
                List<string> defaultFlightCategoriesAdded = new List<string>();
                if (allocationAssistant.updateFPwithAllocation)
                {                    
                    FlightPlanUpdateWithAllocationResult updateFP 
                        = new FlightPlanUpdateWithAllocationResult(allocationType, flightsFromFilteredFlightPlan,DonneesEnCours);
                    updateFP.updateFlightPlansWihtAllocationResults();
                    defaultFlightCategoriesAdded = updateFP.defaultFlightCategoriesAdded;
                    if (defaultFlightCategoriesAdded.Count > 0)
                    {
                        DataTable currentFlightCategoryTable
                            = DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName);
                        DataTable updatedFlightCategoryTable
                            = updateFP.updateFlightCategoryTableWithDefaultFlightCategories(currentFlightCategoryTable, defaultFlightCategoriesAdded);

                        if (updatedFlightCategoryTable != null)
                        {
                            DonneesEnCours.UpdateTable("Input", GlobalNames.FP_FlightCategoriesTableName, updatedFlightCategoryTable);
                            DonneesEnCours.aEteModifiee("Input", GlobalNames.FP_FlightCategoriesTableName);

                            //updates the tables that depend on flight categories (ex. load factors)
                            DonneesEnCours.Update_FlightCategorie();
                        }
                    }
                }

                AllocationOutput allocationOutput = new AllocationOutput(allocationAssistant.scenarioName, availableResources, flightsFromFilteredFlightPlan,
                    scenarioInterval, allocationAssistant.timeStepInMinutes, allocationAssistant.analysisRangeInMinutes, allocationAssistant, DonneesEnCours);
                if (allocationType == Allocation.CHECK_IN_ALLOCATION_TYPE
                    && octCITableExceptionAirlineAirport != null)
                {
                    allocationOutput.ciOCTAirlineAirportExceptionTableName = octCITableExceptionAirlineAirport.Table.TableName;
                }
                DataTable parametersTable = allocationOutput.generateAllocationParametersTable();
                DataTable parkingOCTTable = null;
                DataTable checkInOCTTable = null;
                DataTable boardingGatesOCTTable = null;
                DataTable checkInShowUpTable = null;
                DataTable priorityTable = null;
                DataTable flightPlanInformationTable = null;
                
                if (allocationType == Allocation.PARKING_ALLOCATION_TYPE)
                {
                    parkingOCTTable = allocationOutput
                        .generateOpeningClosingTimesTable(allocation.parkingOpeningClosingTimesExceptionTable, PARKING_OCT_TABLE_NAME,
                                                            allocationAssistant.parkingUseOCTexceptions, defaultFlightCategoriesAdded);
                    priorityTable = allocationOutput.removeColumnsForDuplFlightCategories(allocation.parkingPrioritiesTable);                    
                    flightPlanInformationTable = allocationOutput.generateFlightPlanInformationTable(flightsFromFilteredFlightPlan,
                                                                            allocation.parkingOpeningClosingTimesExceptionTable.Table.TableName);
                }
                else if (allocationType == Allocation.BOARDING_GATE_ALLOCATION_TYPE)
                {
                    //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Allocation output: OCT, ShowUp, Priority tables...Start");
                    checkInOCTTable = allocationOutput
                        .generateOpeningClosingTimesTable(allocation.ciOpeningClosingTimesExceptionTable, CHECK_IN_OCT_TABLE_NAME,
                                                            allocationAssistant.ciUseOCTexceptions, defaultFlightCategoriesAdded);

                    if (allocation.checkInShowUpExceptionTable != null && allocation.checkInShowUpExceptionTable.Table != null)
                    {
                        checkInShowUpTable = allocation.checkInShowUpExceptionTable.Table.Copy();
                            //= allocationOutput.generateCheckInShowUpTable(allocation.checkInShowUpExceptionTable, allocation.checkInShowUpExceptionTable.UseException);
                        checkInShowUpTable.TableName = CHECK_IN_SHOWUP_TABLE_NAME;
                    }
                    boardingGatesOCTTable = allocationOutput
                        .generateOpeningClosingTimesTable(allocation.bgOpeningClosingTimesExceptionTable, BOARDING_GATES_OCT_TABLE_NAME,
                                                            allocationAssistant.bgUseOCTexceptions, defaultFlightCategoriesAdded);
                    
                    priorityTable = allocationOutput.removeColumnsForDuplFlightCategories(allocation.boardingGatesPrioritiesTable);
                    //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Allocation output: OCT, ShowUp, Priority tables...End");

                    //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Allocation output: Flight Plan Information table...Start");
                    string octTableName = allocation.ciOpeningClosingTimesExceptionTable.Table.TableName
                        + " " + allocation.bgOpeningClosingTimesExceptionTable.Table.TableName; 
                    flightPlanInformationTable = allocationOutput.generateFlightPlanInformationTable(flightsFromFilteredFlightPlan, octTableName);
                    //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Allocation output: Flight Plan Information table...End");
                }
                else if (allocationType == Allocation.CHECK_IN_ALLOCATION_TYPE)
                {
                    List<string> airlinesFromOCTExceptions = new List<string>();
                    checkInOCTTable = allocationOutput
                        .generateOpeningClosingTimesTable(allocation.ciOpeningClosingTimesExceptionTable, CHECK_IN_OCT_TABLE_NAME,
                                                            allocationAssistant.ciUseOCTexceptions, defaultFlightCategoriesAdded,
                                                            out airlinesFromOCTExceptions);
                    string octTableName = allocation.ciOpeningClosingTimesExceptionTable.Table.TableName;
                    flightPlanInformationTable = allocationOutput.generateFlightPlanInformationTable(flightsFromFilteredFlightPlan, octTableName);
                    allocationOutput.flightsWithAirlinesFromOCTExceptions 
                        = LiegeTools.getFlightsByAirlinesList(airlinesFromOCTExceptions, flightsFromFilteredFlightPlan);
                }

                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Allocation output: Results, Text Gantt, Issues tables...Start");
                DataTable aircraftTypesTable = allocationOutput.generateAircraftTypesTable(allocation.aircraftTypesExceptionTable, allocationAssistant.useAircraftTypesExceptions);
                DataTable availableResourcesTable = allocationOutput.getAvailableResourcesTable(allocationType);
                DataTable allocationResultTable = allocationOutput.getAllocationResultTable(allocationType);
                DataTable textGanttTable = allocationOutput.generateTextAllocationTable();
                DataTable allocationIssuesTable = allocationOutput
                    .getAllocationIssuesTable(flightsFromFilteredFlightPlan, allocation.backUpResources, allocationType, 
                                                allocationAssistant.disableAircraftLinks);                
                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Allocation output: Results, Text Gantt, Issues tables...End");

                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Occupation tables...Start");
                List<DataTable> occupationTables = new List<DataTable>();
                List<DataTable> occupationIssuesLogTables = new List<DataTable>();
                if (allocationType == Allocation.BOARDING_GATE_ALLOCATION_TYPE 
                    && allocationAssistant.calculateOccupation)
                {                    
                    Dictionary<string, List<Flight>> resourcesWithOwnOverlappingFlightsList = new Dictionary<string, List<Flight>>();
                    List<SIMCORE_TOOL.Prompt.Liege.AllocationOutput.OutputOccupationFlight> occupationOutputFlights
                        = new List<SIMCORE_TOOL.Prompt.Liege.AllocationOutput.OutputOccupationFlight>();
                    
                    occupationTables = allocationOutput.getOccupationTables(flightsFromFilteredFlightPlan, allocation.checkInShowUpExceptionTable,
                                            allocationAssistant.boardingEnteringSpeedPaxPerMinute, allocationAssistant.boardingExitingSpeedPaxPerMinute,
                                            allocationAssistant.ignoreCheckInShowUp, out occupationOutputFlights, out resourcesWithOwnOverlappingFlightsList);
                    if (occupationOutputFlights.Count > 0 || resourcesWithOwnOverlappingFlightsList.Count > 0)
                    {
                        occupationIssuesLogTables = allocationOutput
                            .generateOccupationIssuesLogTables(occupationOutputFlights, resourcesWithOwnOverlappingFlightsList, availableResources);
                    }                    
                }
                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Occupation tables...End");

                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Saving tables...Start");
                //save the Analysis/Scenario directory                
                String scenarioName = allocationAssistant.scenarioName;
                ParamScenario scenario = ConversionPlanDeVols.GenerationScenario(scenarioName, scenarioStartDate, scenarioEndDate, 5, 5, new Dictionary<string, string>());
                GestionScenarios(scenario);
                
                scenario.isLiegeAllocation = true;
                
                if (parametersTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, parametersTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, ALLOCATION_PARAMETERS_TABLE_NAME);

                if (filteredFlightPlan != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, filteredFlightPlan);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, FILTERED_FPD_TABLE_NAME);

                if (allocationType == Allocation.PARKING_ALLOCATION_TYPE)
                {
                    if (parkingOCTTable != null)
                        DonneesEnCours.AddReplaceTable(scenario.Name, parkingOCTTable);
                    else
                        DonneesEnCours.RemoveTable(scenario.Name, PARKING_OCT_TABLE_NAME);
                }
                else if (allocationType == Allocation.BOARDING_GATE_ALLOCATION_TYPE)
                {
                    if (checkInOCTTable != null)
                        DonneesEnCours.AddReplaceTable(scenario.Name, checkInOCTTable);
                    else
                        DonneesEnCours.RemoveTable(scenario.Name, CHECK_IN_OCT_TABLE_NAME);
                    
                    if (boardingGatesOCTTable != null)
                        DonneesEnCours.AddReplaceTable(scenario.Name, boardingGatesOCTTable);
                    else
                        DonneesEnCours.RemoveTable(scenario.Name, BOARDING_GATES_OCT_TABLE_NAME);
                    
                    if (checkInShowUpTable != null)
                        DonneesEnCours.AddReplaceTable(scenario.Name, checkInShowUpTable);
                    else
                        DonneesEnCours.RemoveTable(scenario.Name, CHECK_IN_SHOWUP_TABLE_NAME);
                    if (occupationTables.Count > 0)
                    {
                        foreach (DataTable occupationTable in occupationTables)
                        {
                            if (occupationTable != null)
                            {
                                DonneesEnCours.AddReplaceTable(scenario.Name, occupationTable);
                                DonneesEnCours.AddReplaceGraphicFilter(allocationAssistant.scenarioName, GraphicFilter.getBHSOccupationGraphicFilter(occupationTable));
                            }
                            else
                                DonneesEnCours.RemoveTable(scenario.Name, occupationTable.TableName);
                        }
                    }
                    if (occupationIssuesLogTables.Count > 0)
                    {
                        foreach (DataTable occupationIssuesLogTable in occupationIssuesLogTables)
                        {
                            if (occupationIssuesLogTable != null)
                                DonneesEnCours.AddReplaceTable(scenario.Name, occupationIssuesLogTable);
                            else
                                DonneesEnCours.RemoveTable(scenario.Name, occupationIssuesLogTable.TableName);
                        }
                    }
                }
                else if (allocationType == Allocation.CHECK_IN_ALLOCATION_TYPE)
                {
                    if (checkInOCTTable != null)
                        DonneesEnCours.AddReplaceTable(scenario.Name, checkInOCTTable);
                    else
                        DonneesEnCours.RemoveTable(scenario.Name, CHECK_IN_OCT_TABLE_NAME);
                    if (octCITableExceptionAirlineAirport != null)
                    {
                        octCITableExceptionAirlineAirport.Table.TableName = LiegeTools.OCT_CITABLE_EXCEPTION_AIRLINE_AIRPORT_TEXT_FILE_NAME;
                        DonneesEnCours.AddReplaceTable(scenario.Name, octCITableExceptionAirlineAirport.Table);
                    }
                    else
                        DonneesEnCours.RemoveTable(scenario.Name, LiegeTools.OCT_CITABLE_EXCEPTION_AIRLINE_AIRPORT_TEXT_FILE_NAME);
                }

                if (aircraftTypesTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, aircraftTypesTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AIRCRAFT_TYPES_TABLE_NAME);

                if (allocation.aircraftLinksTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, allocation.aircraftLinksTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AIRCRAFT_LINKS_TABLE_NAME);

                if (priorityTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, priorityTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, PARKING_PRIORITIES_TABLE_NAME);

                if (availableResourcesTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, availableResourcesTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AllocationOutput.AVAILABLE_RESOURCES_TABLE_NAME);

                if (allocationResultTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, allocationResultTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AllocationOutput.ALLOCATION_RESULT_TABLE_NAME);

                if (textGanttTable != null)
                {
                    DonneesEnCours.AddReplaceTable(scenario.Name, textGanttTable);
                    VisualisationMode mode = ((VisualisationMode)GestionDonneesHUB2SIM.modeVisualisation[AllocationOutput.ALLOCATION_TEXT_GANTT_TABLE_NAME]).Clone();
                    DonneesEnCours.AddReplaceModeVisualisation(scenarioName, textGanttTable.TableName, mode);
                    DonneesEnCours.AddGraphicFilter(scenarioName, GraphicFilter.getGraphicFilterForTextGantt(textGanttTable, allocationType));
                }
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AllocationOutput.ALLOCATION_TEXT_GANTT_TABLE_NAME);

                if (flightPlanInformationTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, flightPlanInformationTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, GlobalNames.FPI_TableName);

                if (allocationIssuesTable != null)
                    DonneesEnCours.AddReplaceTable(scenario.Name, allocationIssuesTable);
                else
                    DonneesEnCours.RemoveTable(scenario.Name, AllocationOutput.ALLOCATION_ISSUES_TABLE_NAME);
                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Saving tables...End");

                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Updating scenario...Start");
                //update the scenario
                TreeNode ScenarioPosition = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenario.Name, treeView1.Nodes[2]);
                if (ScenarioPosition == null)
                {
                    MessageBox.Show("The generation data could not be saved into the scenario.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.Enabled = true;
                    if (cht != null)
                        cht.KillWindow();
                    return;
                }
                DonneesEnCours.Maj_Scenario(scenario.Name, ScenarioPosition, contextMenuInput, ContextMenuFilter, cmsAutomodMenu, cmsExceptionTable, exportScenarioTablesContextMenuStrip);
                DonneesEnCours.UpdateScenarioTree(scenario.Name, ScenarioPosition);

                TreeNode generatingResultsNode = getGeneratingResultsNode(ScenarioPosition, "Generating Results");
                clearRootAndAddSourceNodeChilds(ScenarioPosition, generatingResultsNode);
                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: Updating scenario...End");

                ReinitInputTable();

                this.Enabled = true;
                if (cht != null)
                    cht.KillWindow();
                //OverallTools.ExternFunctions.PrintLogFile("Boarding Gates Allocation: End");
            }
        }

        private void clearRootAndAddSourceNodeChilds(TreeNode rootNode, TreeNode sourceNode)
        {            
            if (sourceNode != null && sourceNode.Nodes != null)
            {
                rootNode.Nodes.Clear();
                foreach (TreeNode node in sourceNode.Nodes)
                    rootNode.Nodes.Add((TreeNode)node.Clone());
            }
        }

        private TreeNode getGeneratingResultsNode(TreeNode rootNode, string generatingResultsNodeName)
        {
            TreeNode generatingResultsNode = null;
            if (rootNode != null && rootNode.Nodes != null
                && rootNode.Nodes.Count > 0)
            {
                for (int i = 0; i < rootNode.Nodes.Count; i++)
                {
                    TreeNode childNode = rootNode.Nodes[i];
                    if (childNode.Name == generatingResultsNodeName)
                        return (TreeNode)childNode.Clone();
                    if (childNode.Nodes.Count > 0)
                        generatingResultsNode = getGeneratingResultsNode(childNode, generatingResultsNodeName);
                }
            }
            return generatingResultsNode;
        }

        #region test suites
        private void testTimeInterval()
        {
            string message = "";         

            DateTime bigIntervalStart = new DateTime(2015, 11, 18, 10, 0, 0);
            DateTime bigIntervalEnd = new DateTime(2015, 11, 18, 18, 0, 0);
            TimeInterval bigInterval = new TimeInterval(bigIntervalStart, bigIntervalEnd);

            DateTime outterBiggerIntervalStart = new DateTime(2015, 11, 18, 10, 0, 0);
            DateTime outterBiggerIntervalEnd = new DateTime(2015, 11, 18, 19, 0, 0);
            TimeInterval outterBiggerInterval = new TimeInterval(outterBiggerIntervalStart, outterBiggerIntervalEnd);
            if (!bigInterval.containsTimeInterval(outterBiggerInterval))
                message = "ok outterBiggerInterval";
            else
                message = "nok outterBiggerInterval";
            OverallTools.ExternFunctions.PrintLogFile(message);

            DateTime outterBeforeIntervalStart = new DateTime(2015, 11, 18, 8, 0, 0);
            DateTime outterBeforeIntervalEnd = new DateTime(2015, 11, 18, 10, 0, 0);
            TimeInterval outterBeforeInterval = new TimeInterval(outterBeforeIntervalStart, outterBeforeIntervalEnd);
            if (!bigInterval.containsTimeInterval(outterBeforeInterval))
                message = "ok outterBeforeInterval";
            else
                message = "nok outterBeforeInterval";
            OverallTools.ExternFunctions.PrintLogFile(message);

            DateTime outterAfterIntervalStart = new DateTime(2015, 11, 18, 18, 0, 0);
            DateTime outterAfterIntervalEnd = new DateTime(2015, 11, 18, 20, 0, 0);
            TimeInterval outterAfterInterval = new TimeInterval(outterAfterIntervalStart, outterAfterIntervalEnd);
            if (!bigInterval.containsTimeInterval(outterAfterInterval))
                message = "ok outterAfterInterval";
            else
                message = "nok outterAfterInterval";
            OverallTools.ExternFunctions.PrintLogFile(message);

            DateTime innerIntervalStart = new DateTime(2015, 11, 18, 12, 0, 0);
            DateTime innerIntervalEnd = new DateTime(2015, 11, 18, 15, 0, 0);
            TimeInterval innerInterval = new TimeInterval(innerIntervalStart, innerIntervalEnd);
            List<TimeInterval> resultedSplits = bigInterval.splitByInteriorTimeInterval(innerInterval);

            innerIntervalStart = new DateTime(2015, 11, 18, 10, 0, 0);
            innerIntervalEnd = new DateTime(2015, 11, 18, 18, 0, 0);
            innerInterval = new TimeInterval(innerIntervalStart, innerIntervalEnd);
            resultedSplits = bigInterval.splitByInteriorTimeInterval(innerInterval);
            if (resultedSplits.Contains(TimeInterval.EMPTY_TIME_INTERVAL))
            {
                message = "ok EMPTY_TIME_INTERVAL";
            }
            else
            {
                message = "nok EMPTY_TIME_INTERVAL";
            }

            innerIntervalStart = new DateTime(2015, 11, 18, 10, 0, 0);
            innerIntervalEnd = new DateTime(2015, 11, 18, 12, 0, 0);
            innerInterval = new TimeInterval(innerIntervalStart, innerIntervalEnd);
            resultedSplits = bigInterval.splitByInteriorTimeInterval(innerInterval);

            innerIntervalStart = new DateTime(2015, 11, 18, 14, 0, 0);
            innerIntervalEnd = new DateTime(2015, 11, 18, 18, 0, 0);
            innerInterval = new TimeInterval(innerIntervalStart, innerIntervalEnd);
            resultedSplits = bigInterval.splitByInteriorTimeInterval(innerInterval);

            //intersection test
            bigIntervalStart = new DateTime(2015, 11, 18, 10, 0, 0);
            bigIntervalEnd = new DateTime(2015, 11, 18, 18, 0, 0);
            bigInterval = new TimeInterval(bigIntervalStart, bigIntervalEnd);

            innerIntervalStart = new DateTime(2015, 11, 18, 10, 0, 0);
            innerIntervalEnd = new DateTime(2015, 11, 18, 18, 0, 0);
            innerInterval = new TimeInterval(innerIntervalStart, innerIntervalEnd);
            resultedSplits = bigInterval.splitByIntersectingTimeInterval(innerInterval);

            innerIntervalStart = new DateTime(2015, 11, 18, 14, 0, 0);
            innerIntervalEnd = new DateTime(2015, 11, 18, 18, 0, 0);
            innerInterval = new TimeInterval(innerIntervalStart, innerIntervalEnd);
            resultedSplits = bigInterval.splitByIntersectingTimeInterval(innerInterval);

            innerIntervalStart = new DateTime(2015, 11, 18, 7, 0, 0);
            innerIntervalEnd = new DateTime(2015, 11, 18, 10, 30, 0);
            innerInterval = new TimeInterval(innerIntervalStart, innerIntervalEnd);
            resultedSplits = bigInterval.splitByIntersectingTimeInterval(innerInterval);

            innerIntervalStart = new DateTime(2015, 11, 18, 14, 0, 0);
            innerIntervalEnd = new DateTime(2015, 11, 18, 20, 0, 0);
            innerInterval = new TimeInterval(innerIntervalStart, innerIntervalEnd);
            resultedSplits = bigInterval.splitByIntersectingTimeInterval(innerInterval);
        }

        private void testResource()
        {
            int id = 1;
            string name = "S00_Parking_22";
            string code = "P_22";
            
            List<TimeInterval> availableIntervals = new List<TimeInterval>();
            
            DateTime availableIntervalStartDate = new DateTime(2015, 11, 18, 10, 0, 0);//10 - 14
            DateTime availableIntervalEndDate = new DateTime(2015, 11, 18, 14, 0, 0);
            TimeInterval availableInterval = new TimeInterval(availableIntervalStartDate, availableIntervalEndDate);
            availableIntervals.Add(availableInterval);

            availableIntervalStartDate = new DateTime(2015, 11, 18, 7, 0, 0);//7 - 9
            availableIntervalEndDate = new DateTime(2015, 11, 18, 9, 0, 0);
            availableInterval = new TimeInterval(availableIntervalStartDate, availableIntervalEndDate);
            availableIntervals.Add(availableInterval);

            Resource parkingStand = new Resource(id, name, code, 22, availableIntervals);

            Flight flight = new Flight();
            DateTime occupiedIntervalStart = new DateTime(2015, 11, 18, 7, 0, 0);
            DateTime occupiedIntervalEnd = new DateTime(2015, 11, 18, 8, 30, 0);
            TimeInterval occupiedInterval = new TimeInterval(occupiedIntervalStart, occupiedIntervalEnd);
            flight.occupiedInterval = occupiedInterval;

            //if (parkingStand.hasAvailableInterval(flight.occupiedInterval))
              //  parkingStand.allocateFlightToResource(flight, 120);
        }
        #endregion
        // << Task #12808 Pax2Sim - allocation Liege

        #region Gantt4Flex

        //private AxShockwaveFlashObjects.AxShockwaveFlash player;
        List<Task> arrivalFlights;
        List<Task> departureFlights;
        public String exportXml = "";
        public bool ganttCreated = false;
        public String swfPath = "";
        public String ganttType = "";
        public String resourcesGanttType = "";
        public bool reloadResGantt = false;
        public bool gantTypeChanged = true;
        // the dictionary used for all the resources except the Runway which needs 
        // only the first and last desk
        public Dictionary<int, int[]> desksByTerminalNb = new Dictionary<int, int[]>();
        public int minDeskNumber = -1;
        public int maxDeskNumber = -1;
        // depending on the user's choice these flags will indicate
        // the way the flights are colored in the gantt
        public bool colorByFlightCategory = true;
        public bool colorByAirlineCode = false;
        public bool colorByGroundHandlerCode = false;
        // dictionary: key = scenario name / value = list of flights
        // used to keep the xml for the static analysis gantt so that 
        // the static analysis gantt will always receive the same data
        public Dictionary<String, List<Task>> scenarioFlightListDictionary = new Dictionary<string, List<Task>>();

        public void createGantt()
        {
            String ganttPath = "";
            //according to the gantt type(flight or resource) a diffrent .swf(only the name changes) is loaded            
            if (swfPath == "")
                swfPath = OverallTools.ExternFunctions.getPax2simDirectory();
            if (ganttType.Equals(Model.RESOURCESGANTT))
                ganttPath = swfPath + Model.RESOURCESGANTTFILE;
            if (ganttType.Equals(Model.FLIGHTGANTT))
                ganttPath = swfPath + Model.FLIGHTGANTTFILE;
            if (ganttType.Equals(Model.RESOURCE_GANTT_FOR_ALLOCATION))
                ganttPath = swfPath + Model.RESOURCE_GANTT_FOR_ALLOCATION_FILE;
            axShockwaveFlash1.LoadMovie(0, ganttPath);
            // << Bug #7863 Flight Category missing from the Information panel - Resource Gantt            
            //axShockwaveFlash1.Play();
            axShockwaveFlash1.Show();
            // >> Bug #7863 Flight Category missing from the Information panel - Resource Gantt
        }

        public String createFlightsListToExport()
        {
            #region Get the flights from tables
            DataTable dt = null;
            Filter currentFilter = null;
            String xml = "";

            TreeViewTag NodeTag = CheckCurrentNode();
            if (NodeTag.isTableNode || (NodeTag.isFilterNode && isCustomFPIGanttTable(NodeTag.Name)))
            {
                if (NodeTag.Name.Equals(GlobalNames.FPATableName))
                {
                    // check the scenario name -> if Input => load the normal FPD/A tables
                    // If != Input => another directory. If static scenario directory => load the scenario's FPD/A tables
                    String scenarioName = NodeTag.ScenarioName;
                    String FPATableName = "";
                    if (scenarioName.Equals("Input"))
                        FPATableName = GlobalNames.FPATableName;
                    else
                    {
                        ParamScenario ps = DonneesEnCours.GetScenario(scenarioName);
                        if (ps != null)
                            FPATableName = ps.FPA;
                    }
                    dt = DonneesEnCours.getTable("Input", FPATableName);

                    if (dt != null && dt.Rows.Count > 0)
                    {
                        arrivalFlights = GanttServices.getArrivalFlightsForGantt(dt, this);
                        xml = GanttServices.serializeForXml(arrivalFlights);
                    }
                }
                else
                    if (NodeTag.Name.Equals(GlobalNames.FPDTableName))
                    {
                        // check the scenario name -> if Input => load the default FPD/A tables
                        // If != Input => another directory. If static scenario directory => load the scenario's FPD/A tables
                        String scenarioName = NodeTag.ScenarioName;
                        String FPDTableName = "";
                        if (scenarioName.Equals("Input"))
                            FPDTableName = GlobalNames.FPDTableName;
                        else
                        {
                            ParamScenario ps = DonneesEnCours.GetScenario(scenarioName);
                            if (ps != null)
                                FPDTableName = ps.FPD;
                        }
                        dt = DonneesEnCours.getTable("Input", FPDTableName);

                        if (dt != null && dt.Rows.Count > 0)
                        {
                            departureFlights = GanttServices.getDepartureFlightsForGantt(dt, this);
                            xml = GanttServices.serializeForXml(departureFlights);
                        }
                    }
                if (NodeTag.Name.Equals(GlobalNames.Alloc_BaggageClaimTableName))
                {
                    // check the scenario name -> if Input => load the default table
                    // If != Input => another directory. If static scenario directory => load the scenario's tables
                    String scenarioName = NodeTag.ScenarioName;
                    String octTableName = "";
                    String fpaTableName = "";
                    // in the flight dictionary, for each resources there are stored
                    // 3 dataSets for the Gantt acording to the color criteria
                    String colorCriteria = "";
                    if (colorByAirlineCode)
                        colorCriteria = Model.COLOR_CRITERIA_AIRLINE_CODE;
                    else if (colorByFlightCategory)
                        colorCriteria = Model.COLOR_CRITERIA_FLIGHT_CATEGORY;
                    else if (colorByGroundHandlerCode)
                        colorCriteria = Model.COLOR_CRITERIA_GROUND_HANDLER_CODE;
                    String flightListDictionaryKey = scenarioName + GlobalNames.Alloc_BaggageClaimTableName + colorCriteria;
                    // indicates the use of exceptions for OCT table for the static allocation
                    bool useExceptions = false;

                    if (scenarioName.Equals("Input"))
                    {
                        fpaTableName = GlobalNames.FPATableName;
                        octTableName = GlobalNames.OCT_BaggageClaimTableName;
                        useExceptions = true;

                        dt = DonneesEnCours.getTable("Input", fpaTableName);

                        if (dt.Rows.Count > 0)
                        {
                            arrivalFlights = GanttServices.getFlightDataForBaggageClaimGantt(dt, octTableName, true, this, useExceptions, scenarioName);
                            xml = GanttServices.serializeForXml(arrivalFlights);
                        }
                    }
                    else
                    {
                        ParamScenario ps = DonneesEnCours.GetScenario(scenarioName);
                        if (ps != null)
                        {
                            fpaTableName = ps.FPA;
                            octTableName = ps.OCT_BC;
                            useExceptions = ps.UseException(ps.OCT_BC);
                        }
                        dt = DonneesEnCours.getTable("Input", fpaTableName);


                        // in a analysis scenario the flight list is generated only once and 
                        // then reloaded from the dictionary
                        if (scenarioFlightListDictionary.ContainsKey(flightListDictionaryKey))
                            scenarioFlightListDictionary.TryGetValue(flightListDictionaryKey, out arrivalFlights);
                        else
                        {
                            if (dt.Rows.Count > 0)
                            {
                                arrivalFlights = GanttServices.getFlightDataForBaggageClaimGantt(dt, octTableName, true, this, useExceptions, scenarioName);
                                scenarioFlightListDictionary.Add(flightListDictionaryKey, arrivalFlights);
                            }
                        }
                        xml = GanttServices.serializeForXml(arrivalFlights);

                    }
                }
                if (NodeTag.Name.Equals(GlobalNames.TransferInfeedAllocationRulesTableName))
                {
                    dt = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                    if (dt.Rows.Count > 0)
                    {
                        arrivalFlights = GanttServices.getFlightDataForTransferInfeedGantt(dt, true, this); ;
                        xml = GanttServices.serializeForXml(arrivalFlights);
                    }
                }
                if (NodeTag.Name.Equals(GlobalNames.OCT_ArrivalInfeedTableName))
                {
                    dt = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                    if (dt.Rows.Count > 0)
                    {
                        arrivalFlights = GanttServices.getFlightDataForArrivalInfeedGantt(dt, true, this); ;
                        xml = GanttServices.serializeForXml(arrivalFlights);
                    }
                }
                if (NodeTag.Name.Equals(GlobalNames.OCT_ArrivalGateTableName))
                {
                    dt = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                    if (dt.Rows.Count > 0)
                    {
                        arrivalFlights = GanttServices.getFlightDataForArrivalGateGantt(dt, true, this); ;
                        xml = GanttServices.serializeForXml(arrivalFlights);
                    }
                }

                if (NodeTag.Name.Equals(GlobalNames.Alloc_CITableName))
                {
                    // check the scenario name -> if Input => load the default table
                    // If != Input => another directory. If static scenario directory => load the scenario's tables
                    String scenarioName = NodeTag.ScenarioName;
                    String octTableName = "";
                    String fpdTableName = "";
                    // in the flight dictionary, for each resources there are stored
                    // 3 dataSets for the Gantt acording to the color criteria
                    String colorCriteria = "";
                    if (colorByAirlineCode)
                        colorCriteria = Model.COLOR_CRITERIA_AIRLINE_CODE;
                    else if (colorByFlightCategory)
                        colorCriteria = Model.COLOR_CRITERIA_FLIGHT_CATEGORY;
                    else if (colorByGroundHandlerCode)
                        colorCriteria = Model.COLOR_CRITERIA_GROUND_HANDLER_CODE;
                    String flightListDictionaryKey = scenarioName + GlobalNames.Alloc_CITableName + colorCriteria;
                    // indicates the use of exceptions for OCT table for the static allocation
                    bool useExceptions = false;

                    if (scenarioName.Equals("Input"))
                    {
                        fpdTableName = GlobalNames.FPDTableName;
                        octTableName = GlobalNames.OCT_CITableName;
                        useExceptions = true;

                        dt = DonneesEnCours.getTable("Input", fpdTableName);
                        if (dt.Rows.Count > 0)
                        {
                            departureFlights = GanttServices.getFlightDataForCheckInGantt(dt, octTableName, false,
                                                                                          this, useExceptions, scenarioName);
                            xml = GanttServices.serializeForXml(departureFlights);
                        }
                    }
                    else
                    {
                        ParamScenario ps = DonneesEnCours.GetScenario(scenarioName);
                        if (ps != null)
                        {
                            fpdTableName = ps.FPD;
                            octTableName = ps.OCT_CI_Table;
                            useExceptions = ps.UseException(ps.OCT_CI_Table);
                        }
                        dt = DonneesEnCours.getTable("Input", fpdTableName);


                        // in a analysis scenario the flight list is generated only once and 
                        // then reloaded from the dictionary
                        if (scenarioFlightListDictionary.ContainsKey(flightListDictionaryKey))
                            scenarioFlightListDictionary.TryGetValue(flightListDictionaryKey, out departureFlights);
                        else
                        {
                            if (dt.Rows.Count > 0)
                            {
                                departureFlights = GanttServices.getFlightDataForCheckInGantt(dt, octTableName, false, this, useExceptions, scenarioName);
                                scenarioFlightListDictionary.Add(flightListDictionaryKey, departureFlights);
                            }
                        }
                        xml = GanttServices.serializeForXml(departureFlights);

                    }
                }
                if (NodeTag.Name.Equals(GlobalNames.OCT_BaggDropTableName))
                {
                    dt = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);
                    if (dt.Rows.Count > 0)
                    {
                        departureFlights = GanttServices.getFlightDataForBaggageDropGantt(dt, false, this); ;
                        xml = GanttServices.serializeForXml(departureFlights);
                    }
                }
                if (NodeTag.Name.Equals(GlobalNames.OCT_MakeUpTableName)
                    || NodeTag.Name.EndsWith("_Alloc_MakeUp"))  // >> Task #10272 Pax2Sim - MUP Allocation
                {
                    // check the scenario name -> if Input => load the default table
                    // If != Input => another directory. If static scenario directory => load the scenario's tables
                    String scenarioName = NodeTag.ScenarioName;
                    String octTableName = "";
                    if (scenarioName.Equals("Input"))
                        octTableName = GlobalNames.OCT_MakeUpTableName;
                    else
                    {
                        ParamScenario ps = DonneesEnCours.GetScenario(scenarioName);
                        if (ps != null)
                            octTableName = ps.OCT_MakeUp;
                    }
                    dt = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);
                    if (dt.Rows.Count > 0)
                    {
                        departureFlights = GanttServices.getFlightDataForMakeUpGantt(dt, octTableName, false, this); ;
                        xml = GanttServices.serializeForXml(departureFlights);
                    }
                }
                if (NodeTag.Name.Equals(GlobalNames.Alloc_BoardGateTableName))
                {
                    // check the scenario name -> if Input => load the default table
                    // If != Input => another directory. If static scenario directory => load the scenario's tables
                    String scenarioName = NodeTag.ScenarioName;
                    String octTableName = "";
                    String fpdTableName = "";
                    // in the flight dictionary, for each resources there are stored
                    // 3 dataSets for the Gantt acording to the color criteria
                    String colorCriteria = "";
                    if (colorByAirlineCode)
                        colorCriteria = Model.COLOR_CRITERIA_AIRLINE_CODE;
                    else if (colorByFlightCategory)
                        colorCriteria = Model.COLOR_CRITERIA_FLIGHT_CATEGORY;
                    else if (colorByGroundHandlerCode)
                        colorCriteria = Model.COLOR_CRITERIA_GROUND_HANDLER_CODE;
                    String flightListDictionaryKey = scenarioName + GlobalNames.Alloc_BoardGateTableName + colorCriteria;
                    // indicates the use of exceptions for OCT table for the static allocation
                    bool useExceptions = false;

                    if (scenarioName.Equals("Input"))
                    {
                        fpdTableName = GlobalNames.FPDTableName;
                        octTableName = GlobalNames.OCT_BoardGateTableName;
                        useExceptions = true;

                        dt = DonneesEnCours.getTable("Input", fpdTableName);
                        if (dt.Rows.Count > 0)
                        {
                            departureFlights = GanttServices.getFlightDataForBoardGateGantt(dt, octTableName, false, this, useExceptions, scenarioName);
                            xml = GanttServices.serializeForXml(departureFlights);
                        }
                    }
                    else
                    {
                        ParamScenario ps = DonneesEnCours.GetScenario(scenarioName);
                        if (ps != null)
                        {
                            fpdTableName = ps.FPD;
                            octTableName = ps.OCT_BG;
                            useExceptions = ps.UseException(ps.OCT_BG);
                        }
                        dt = DonneesEnCours.getTable("Input", fpdTableName);


                        // in a analysis scenario the flight list is generated only once and 
                        // then reloaded from the dictionary
                        if (scenarioFlightListDictionary.ContainsKey(flightListDictionaryKey))
                            scenarioFlightListDictionary.TryGetValue(flightListDictionaryKey, out departureFlights);
                        else
                        {
                            if (dt.Rows.Count > 0)
                            {
                                departureFlights = GanttServices.getFlightDataForBoardGateGantt(dt, octTableName, false, this, useExceptions, scenarioName);
                                scenarioFlightListDictionary.Add(flightListDictionaryKey, departureFlights);
                            }
                        }
                        xml = GanttServices.serializeForXml(departureFlights);

                    }
                }
                if (NodeTag.Name.Equals(GlobalNames.Alloc_ParkingTableName))
                {
                    String scenarioName = NodeTag.ScenarioName;
                    // in the flight dictionary, for each resources there are stored
                    // 3 dataSets for the Gantt acording to the color criteria
                    String colorCriteria = "";
                    if (colorByAirlineCode)
                        colorCriteria = Model.COLOR_CRITERIA_AIRLINE_CODE;
                    else if (colorByFlightCategory)
                        colorCriteria = Model.COLOR_CRITERIA_FLIGHT_CATEGORY;
                    else if (colorByGroundHandlerCode)
                        colorCriteria = Model.COLOR_CRITERIA_GROUND_HANDLER_CODE;
                    String flightListDictionaryKey = scenarioName + GlobalNames.Alloc_ParkingTableName + colorCriteria;

                    if (scenarioName.Equals("Input"))
                    {
                        arrivalFlights = GanttServices.getFlightDataForParkingGantt(this, scenarioName);
                        xml = GanttServices.serializeForXml(arrivalFlights);
                    }
                    else
                    {
                        if (scenarioFlightListDictionary.ContainsKey(flightListDictionaryKey))
                            scenarioFlightListDictionary.TryGetValue(flightListDictionaryKey, out arrivalFlights);
                        else
                        {
                            arrivalFlights = GanttServices.getFlightDataForParkingGantt(this, scenarioName);
                            scenarioFlightListDictionary.Add(flightListDictionaryKey, arrivalFlights);
                        }
                        xml = GanttServices.serializeForXml(arrivalFlights);
                    }
                }
                if (NodeTag.Name.Equals(GlobalNames.OCT_RunwayTableName))
                {
                    arrivalFlights = GanttServices.getFlightDataForRunwayGantt(this);
                    xml = GanttServices.serializeForXml(arrivalFlights);
                }
                if (NodeTag.Name.Equals(GlobalNames.FPI_TableName))
                {
                    dt = DonneesEnCours.getTable(NodeTag.ScenarioName, GlobalNames.FPI_TableName);
                    
                    // loadDT
                    arrivalFlights = GanttServices.getFlightDataForFPIResourceGantt(dt, this);
                    xml = GanttServices.serializeForXml(arrivalFlights);
                }
                else if (isCustomFPIGanttTable(NodeTag.Name))
                {
                    dt = DonneesEnCours.getTable(NodeTag.ScenarioName, CurrentNode.Name);

                    // loadDT
                    arrivalFlights = GanttServices.getFlightDataForFPIResourceGantt(dt, this);
                    xml = GanttServices.serializeForXml(arrivalFlights);
                }
                if (NodeTag.Name.Equals(GlobalNames.StaticAlloc_ArrivalParking_TableName))
                {
                    String scenarioName = NodeTag.ScenarioName;
                    // in the flight dictionary, for each resources there are stored
                    // 3 dataSets for the Gantt acording to the color criteria
                    String colorCriteria = "";
                    if (colorByAirlineCode)
                        colorCriteria = Model.COLOR_CRITERIA_AIRLINE_CODE;
                    else if (colorByFlightCategory)
                        colorCriteria = Model.COLOR_CRITERIA_FLIGHT_CATEGORY;
                    else if (colorByGroundHandlerCode)
                        colorCriteria = Model.COLOR_CRITERIA_GROUND_HANDLER_CODE;
                    String flightListDictionaryKey = scenarioName + GlobalNames.StaticAlloc_ArrivalParking_TableName + colorCriteria;

                    if (scenarioFlightListDictionary.ContainsKey(flightListDictionaryKey))
                        scenarioFlightListDictionary.TryGetValue(flightListDictionaryKey, out arrivalFlights);
                    else
                    {
                        arrivalFlights = GanttServices.getFlightDataForArrivalParkingGantt(this, scenarioName);
                        scenarioFlightListDictionary.Add(flightListDictionaryKey, arrivalFlights);
                    }
                    xml = GanttServices.serializeForXml(arrivalFlights);
                }
                if (NodeTag.Name.Equals(GlobalNames.StaticAlloc_DepartureParking_TableName))
                {
                    String scenarioName = NodeTag.ScenarioName;
                    // in the flight dictionary, for each resources there are stored
                    // 3 dataSets for the Gantt acording to the color criteria
                    String colorCriteria = "";
                    if (colorByAirlineCode)
                        colorCriteria = Model.COLOR_CRITERIA_AIRLINE_CODE;
                    else if (colorByFlightCategory)
                        colorCriteria = Model.COLOR_CRITERIA_FLIGHT_CATEGORY;
                    else if (colorByGroundHandlerCode)
                        colorCriteria = Model.COLOR_CRITERIA_GROUND_HANDLER_CODE;

                    String flightListDictionaryKey = scenarioName + GlobalNames.StaticAlloc_DepartureParking_TableName + colorCriteria;

                    if (scenarioFlightListDictionary.ContainsKey(flightListDictionaryKey))
                        scenarioFlightListDictionary.TryGetValue(flightListDictionaryKey, out departureFlights);
                    else
                    {
                        departureFlights = GanttServices.getFlightDataForDepartureParkingGantt(this, scenarioName);
                        scenarioFlightListDictionary.Add(flightListDictionaryKey, departureFlights);
                    }
                    xml = GanttServices.serializeForXml(departureFlights);
                }

            }
            #endregion

            #region Get the flights from FPA/D or FPI filters
            // If a Filter is selected then we search for the root table
            // we check if this table is a FPA, FPD or a FPI and call the
            // appropriate function to get the flights from the filter table
            if (NodeTag.isFilterNode)
            {

                currentFilter = DonneesEnCours.getFilter(NodeTag.ScenarioName, NodeTag.Name);
                String parentTableName = currentFilter.MotherTableName;
                while (!parentTableName.Equals(GlobalNames.FPATableName) && !parentTableName.Equals(GlobalNames.FPDTableName)
                       && !parentTableName.Equals(GlobalNames.FPI_TableName))
                {
                    currentFilter = DonneesEnCours.getFilter(NodeTag.ScenarioName, parentTableName);
                    // if the selected filter doesn't belong to FPD,  FPA or FPI
                    // we terminate the search
                    if (currentFilter == null)
                        break;
                    parentTableName = currentFilter.MotherTableName;
                }

                dt = DonneesEnCours.getTable("Input", NodeTag.Name);
                if (parentTableName.Equals(GlobalNames.FPATableName))
                {
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        // depending on the global variable that indicates the gantt type
                        // a list of tasks is loaded in the arrivalFlights
                        arrivalFlights = GanttServices.getArrivalFlightsForGantt(dt, this);
                        //arrivalFlights = GanttServices.getFlightDataForBaggageClaimGant(dt, true, this);                      
                        xml = GanttServices.serializeForXml(arrivalFlights);
                    }
                }
                if (parentTableName.Equals(GlobalNames.FPDTableName))
                {
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        departureFlights = GanttServices.getDepartureFlightsForGantt(dt, this);
                        xml = GanttServices.serializeForXml(departureFlights);
                    }
                }

                if (parentTableName.Equals(GlobalNames.FPI_TableName))
                {
                    dt = DonneesEnCours.getTable(NodeTag.ScenarioName, NodeTag.Name);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        // loadDT
                        arrivalFlights = GanttServices.getFlightDataForFPIResourceGantt(dt, this);
                        xml = GanttServices.serializeForXml(arrivalFlights);
                    }
                }
            }
            #endregion

            return xml;
        }

        private void canLoadXML()
        {
            try
            {
                axShockwaveFlash1.CallFunction("<invoke name='addText' returntype='xml'><arguments><string>" + exportXml + "</string></arguments></invoke>");
            }
            catch (Exception e)
            {
                Console.WriteLine("{0} Exception caught.", e);
            }
        }

        public void reloadData()
        {
            createGantt();
            exportXml = createFlightsListToExport();
            if (ganttCreated)
            {
                canLoadXML();
            }
        }

        /**
        * Reciving message from flash
        * */
        private void player_FlashCall(object sender, _IShockwaveFlashEvents_FlashCallEvent e)
        {
            // message is in xml format so we need to parse it
            XmlDocument document = new XmlDocument();
            document.LoadXml(e.request);
            // get attributes to see which command flash is trying to call
            XmlAttributeCollection attributes = document.FirstChild.Attributes;
            String command = attributes.Item(0).InnerText;
            // get parameters
            XmlNodeList list = document.GetElementsByTagName("arguments");
            // Interpret command
            switch (command)
            {
                case "sendText": break; //resultTxt.Text = list[0].InnerText; break;
                case "checkGantt":
                    if (list[0].InnerText.Equals("ok"))
                    {
                        ganttCreated = true;
                        //gantTypeChanged = true;  
                        canLoadXML();
                    }
                    break;
                case "getAirportStructure":
                    {
                        String[] listOfTerminals = DonneesEnCours.getTerminal();
                        String terminals = "";
                        String delimiter = " _delimiter_ ";
                        if (listOfTerminals != null)
                        {
                            for (int i = 0; i < listOfTerminals.Length; i++)
                            {
                                terminals = terminals + listOfTerminals[i] + delimiter;
                            }
                        }
                        axShockwaveFlash1.CallFunction("<invoke name='returnAirportStructure' returntype='xml'><arguments><string>" + terminals + "</string></arguments></invoke>");
                        /*
                        int maxNbOfTerminals = listOfTerminals.Length;
                        axShockwaveFlash1.CallFunction("<invoke name='returnAirportStructure' returntype='xml'><arguments><string>" + maxNbOfTerminals + "</string></arguments></invoke>");
                         */
                    }
                    break;
                case "ganttType":
                    if (list[0].InnerText.Equals("BaggClaim"))
                    {
                        resourcesGanttType = "BaggageClaim";
                        exportXml = createFlightsListToExport();
                        canLoadXML();
                    }
                    if (list[0].InnerText.Equals("TrInf"))
                    {
                        resourcesGanttType = "TransferInfeed";
                        exportXml = createFlightsListToExport();
                        canLoadXML();
                    }
                    break;
                case "updateFP":
                    {
                        DataTable dt = new DataTable();
                        String flightId = "";
                        String resourceNb = "";
                        String resourceType = "";
                        String arrivalDeparture = "";
                        // if the flight changes resource by drag&drop then the Gantt isn't reloaded
                        // if the change is made from the Commands panel we reload the Gantt
                        String updateFromDragDrop = "";
                        // the number of the terminal choosed by the user for the current resource
                        int terminalNbForResource = 0;
                        String terminalANForResource = "";

                        foreach (XmlNode xn in list)
                        {
                            // the minDeskNumber holds the lowest number 
                            // for a resource from the airport structure
                            // it is used to validate the user's input when changing the resource's desk
                            int minDeskNumber = -1;
                            // the maxDeskNumber holds the highest number 
                            // for a resource from the airport structure 
                            // it is used to validate the user's input when changing the resource's desk
                            int maxDeskNumber = -1;
                            int[] terminalDesks;

                            flightId = xn.ChildNodes[0].InnerText;
                            resourceNb = xn.ChildNodes[1].InnerText;
                            resourceType = xn.ChildNodes[2].InnerText;
                            arrivalDeparture = xn.ChildNodes[3].InnerText;
                            updateFromDragDrop = xn.ChildNodes[4].InnerText;
                            if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                terminalANForResource = xn.ChildNodes[5].InnerText;
                            else
                                Int32.TryParse(xn.ChildNodes[5].InnerText, out terminalNbForResource);
                            if (desksByTerminalNb.TryGetValue(terminalNbForResource, out terminalDesks))
                            {
                                minDeskNumber = terminalDesks[0];
                                maxDeskNumber = terminalDesks[1];
                            }

                            if (resourceType.Equals(Model.ResourceTypes.BaggageClaim.ToString()) || resourceType.Equals(Model.ResourceTypes.TransferInfeed.ToString())
                               || resourceType.Equals(Model.ResourceTypes.ArrivalInfeed.ToString()) || resourceType.Equals(Model.ResourceTypes.ArrivalGate.ToString()))
                                dt = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);

                            if (resourceType.Equals(Model.ResourceTypes.FBCheck_In.ToString()) || resourceType.Equals(Model.ResourceTypes.EcoCheck_In.ToString())
                               || resourceType.Equals(Model.ResourceTypes.FBBagDrop.ToString()) || resourceType.Equals(Model.ResourceTypes.EcoBagDrop.ToString())
                               || resourceType.Equals(Model.ResourceTypes.FBMakeUp.ToString()) || resourceType.Equals(Model.ResourceTypes.EcoMakeUp.ToString())
                               || resourceType.Equals(Model.ResourceTypes.BoardingGate.ToString()))
                                dt = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);

                            if (resourceType.Equals(Model.ResourceTypes.ParkingStand.ToString()) || resourceType.Equals(Model.ResourceTypes.Runway.ToString()))
                            {
                                if (arrivalDeparture.Equals("A"))
                                    dt = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);
                                if (arrivalDeparture.Equals("D"))
                                    dt = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);
                            }
                            //for runway check resource type with terminal(runways don't have terminals)
                            if (dt != null && flightId != "" && resourceNb != "" && resourceType != "" 
                                && (terminalNbForResource != 0 
                                    || (terminalANForResource != "" && this.DonneesEnCours.UseAlphaNumericForFlightInfo)))
                            {
                                int deskNbInput = -1;
                                bool updateFromDragDropBool;
                                Int32.TryParse(resourceNb, out deskNbInput);
                                Boolean.TryParse(updateFromDragDrop, out updateFromDragDropBool);

                                if (updateFromDragDropBool)
                                {
                                    if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                        GanttServices.updateFPTable(dt, flightId, resourceNb, resourceType, terminalANForResource, this);
                                    else
                                        GanttServices.updateFPTable(dt, flightId, resourceNb, resourceType, terminalNbForResource, this);
                                }
                                else
                                {
                                    if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                    {
                                        GanttServices.updateFPTable(dt, flightId, resourceNb, resourceType, terminalANForResource, this);
                                        reloadData();
                                    }
                                    else
                                    {
                                        if (deskNbInput != -1 && minDeskNumber != -1 && maxDeskNumber != -1 && terminalNbForResource != 0)
                                        {
                                            if (deskNbInput >= minDeskNumber && deskNbInput <= maxDeskNumber)
                                            {
                                                GanttServices.updateFPTable(dt, flightId, resourceNb, resourceType, terminalNbForResource, this);
                                                reloadData();
                                            }
                                            else
                                            {
                                                MessageBox.Show("For this resource there is no desk with the number " + deskNbInput + " in the Airport structure for the terminal " + terminalNbForResource + ". There are only desks from " + minDeskNumber + " to " + maxDeskNumber + ".");
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("The number of desks for this resource can't be determined. Please check the Airport structure.");
                                        }
                                    }
                                }
                            }
                        }
                        reloadResGantt = true;
                    }
                    break;
                case "updateFPForRangeResources":
                    {
                        DataTable dt = new DataTable();
                        String flightId = "";
                        String resourceFirstDeskNb = "";
                        String resourceLastDeskNb = "";
                        String resourceType = "";
                        String resourceClassType = "";
                        String arrivalDeparture = "";
                        // if the flight changes resource by drag&drop then the Gantt isn't reloaded
                        // if the change is made from the Commands panel we reload the Gantt
                        String updateFromDragDrop = "";
                        // for a Eco/FB/EcoFB resource the user can choose for which class the update will be made
                        String flightClassToUpdate = "";
                        // the number of the terminal choosed by the user for the current resource
                        int terminalNbForResource = 0;
                        String terminalANForResource = "";

                        foreach (XmlNode xn in list)
                        {
                            // the minDeskNumber holds the lowest number 
                            // for a resource from the airport structure
                            // it is used to validate the user's input when changing the resource's desk
                            int minDeskNumber = -1;
                            // the maxDeskNumber holds the highest number 
                            // for a resource from the airport structure 
                            // it is used to validate the user's input when changing the resource's desk
                            int maxDeskNumber = -1;
                            int[] terminalDesks;

                            flightId = xn.ChildNodes[0].InnerText;
                            resourceFirstDeskNb = xn.ChildNodes[1].InnerText;
                            resourceLastDeskNb = xn.ChildNodes[2].InnerText;
                            resourceType = xn.ChildNodes[3].InnerText;
                            resourceClassType = xn.ChildNodes[4].InnerText;
                            arrivalDeparture = xn.ChildNodes[5].InnerText;
                            updateFromDragDrop = xn.ChildNodes[6].InnerText;
                            flightClassToUpdate = xn.ChildNodes[7].InnerText;
                            if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                terminalANForResource = xn.ChildNodes[8].InnerText;
                            else
                                Int32.TryParse(xn.ChildNodes[8].InnerText, out terminalNbForResource);
                            
                            if (desksByTerminalNb.TryGetValue(terminalNbForResource, out terminalDesks))
                            {
                                minDeskNumber = terminalDesks[0];
                                maxDeskNumber = terminalDesks[1];
                            }

                            if (resourceType.Equals(Model.ResourceTypes.ArrivalInfeed.ToString()))
                                dt = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);

                            if (resourceType.Equals(Model.ResourceTypes.FBCheck_In.ToString()) || resourceType.Equals(Model.ResourceTypes.EcoCheck_In.ToString())
                               || resourceType.Equals(Model.ResourceTypes.FBBagDrop.ToString()) || resourceType.Equals(Model.ResourceTypes.EcoBagDrop.ToString())
                               || resourceType.Equals(Model.ResourceTypes.FBMakeUp.ToString()) || resourceType.Equals(Model.ResourceTypes.EcoMakeUp.ToString())
                               )
                                dt = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);

                            if (dt != null && flightId != "" && resourceFirstDeskNb != "" && resourceLastDeskNb != ""
                                && (resourceClassType != "" || resourceType.Equals(Model.ResourceTypes.ArrivalInfeed.ToString()))
                                && resourceType != ""
                                && (terminalNbForResource != 0 
                                    || (terminalANForResource != "" && this.DonneesEnCours.UseAlphaNumericForFlightInfo)))
                            {
                                int firstDeskNbInput = -1;
                                int lastDeskNbInput = -1;
                                bool updateFromDragDropBool;
                                Int32.TryParse(resourceFirstDeskNb, out firstDeskNbInput);
                                Int32.TryParse(resourceLastDeskNb, out lastDeskNbInput);
                                Boolean.TryParse(updateFromDragDrop, out updateFromDragDropBool);

                                if (updateFromDragDropBool)
                                {
                                    GanttServices.updateFPTableForRangeResources(dt, flightId, resourceFirstDeskNb,
                                                resourceLastDeskNb, resourceClassType, resourceType, flightClassToUpdate,
                                                terminalNbForResource, this);
                                }
                                else
                                {
                                    if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                    {
                                        GanttServices.updateFPTableForRangeResources(dt, flightId, resourceFirstDeskNb,
                                                    resourceLastDeskNb, resourceClassType, resourceType, flightClassToUpdate,
                                                    terminalANForResource, this);
                                        if (!updateFromDragDropBool)
                                            reloadData();
                                    }
                                    else
                                    {
                                        if (firstDeskNbInput != -1 && lastDeskNbInput != -1
                                            && minDeskNumber != -1 && maxDeskNumber != -1 && terminalNbForResource != 0)
                                        {
                                            if (firstDeskNbInput >= minDeskNumber && firstDeskNbInput <= maxDeskNumber
                                                && lastDeskNbInput >= minDeskNumber && lastDeskNbInput <= maxDeskNumber
                                                && firstDeskNbInput <= lastDeskNbInput)
                                            {
                                                GanttServices.updateFPTableForRangeResources(dt, flightId, resourceFirstDeskNb,
                                                    resourceLastDeskNb, resourceClassType, resourceType, flightClassToUpdate,
                                                    terminalNbForResource, this);
                                                if (!updateFromDragDropBool)
                                                    reloadData();
                                            }
                                            else if (firstDeskNbInput > lastDeskNbInput)
                                            {
                                                MessageBox.Show("The number for the first desk (" + firstDeskNbInput + ") should be lower or equal to the number for the last desk(" + lastDeskNbInput + ")!");
                                            }
                                            else if (firstDeskNbInput < minDeskNumber || firstDeskNbInput > maxDeskNumber)
                                            {
                                                MessageBox.Show("For this resource there is no desk with the number " + firstDeskNbInput + " in the Airport structure. There are only desks from " + minDeskNumber + " to " + maxDeskNumber + ".");
                                            }
                                            else if (lastDeskNbInput < minDeskNumber || lastDeskNbInput > maxDeskNumber)
                                            {
                                                MessageBox.Show("For this resource there is no desk with the number " + lastDeskNbInput + " in the Airport structure. There are only desks from " + minDeskNumber + " to " + maxDeskNumber + ".");
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("The number of desks for this resource can't be determined. Please check the Airport structure.");
                                        }
                                    }
                                }
                            }
                        }
                        reloadResGantt = true;
                    }
                    break;
                // >> Task #12808 Pax2Sim - allocation Liege
                case "updateFPI":
                    {
                        DataTable dt = new DataTable();
                        String flightId = "";
                        String firstResourceNb = "";
                        String lastResourceNb = "";
                        String firstResourceNbBeforeSave = "";
                        String lastResourceNbBeforeSave = "";
                        String resourceType = "";
                        String arrivalDeparture = "";
                        // if the flight changes resource by drag&drop then the Gantt isn't reloaded
                        // if the change is made from the Commands panel we reload the Gantt
                        String updateFromDragDrop = "";
                        // the number of the terminal choosed by the user for the current resource
                        int terminalNbForResource = 0;
                        String terminalANForResource = "";
                        
                        TreeNode scenarioTreeNode = getScenarioNode(CurrentNode);
                        string scenarioName = scenarioTreeNode.Text;

                        foreach (XmlNode xn in list)
                        {
                            // the minDeskNumber holds the lowest number 
                            // for a resource from the airport structure
                            // it is used to validate the user's input when changing the resource's desk
                            int minDeskNumber = -1;
                            // the maxDeskNumber holds the highest number 
                            // for a resource from the airport structure 
                            // it is used to validate the user's input when changing the resource's desk
                            int maxDeskNumber = -1;
                            int[] terminalDesks;

                            flightId = xn.ChildNodes[0].InnerText;
                            firstResourceNb = xn.ChildNodes[1].InnerText;
                            lastResourceNb = xn.ChildNodes[2].InnerText;
                            firstResourceNbBeforeSave = xn.ChildNodes[3].InnerText;
                            lastResourceNbBeforeSave = xn.ChildNodes[4].InnerText;
                            resourceType = xn.ChildNodes[5].InnerText;
                            arrivalDeparture = xn.ChildNodes[6].InnerText;
                            updateFromDragDrop = xn.ChildNodes[7].InnerText;
                            if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                terminalANForResource = xn.ChildNodes[8].InnerText;
                            else
                                Int32.TryParse(xn.ChildNodes[8].InnerText, out terminalNbForResource);
                            if (desksByTerminalNb.TryGetValue(terminalNbForResource, out terminalDesks))
                            {
                                minDeskNumber = terminalDesks[0];
                                maxDeskNumber = terminalDesks[1];
                            }

                            dt = DonneesEnCours.getTable(scenarioName, GlobalNames.FPI_TableName);
                            //for runway check resource type with terminal(runways don't have terminals)
                            if (dt != null && flightId != "" && firstResourceNb != "" && resourceType != ""
                                && (terminalNbForResource != 0
                                    || (terminalANForResource != "" && this.DonneesEnCours.UseAlphaNumericForFlightInfo)))
                            {
                                int deskNbInput = -1;
                                bool updateFromDragDropBool;
                                Int32.TryParse(firstResourceNb, out deskNbInput);
                                Boolean.TryParse(updateFromDragDrop, out updateFromDragDropBool);

                                if (updateFromDragDropBool)
                                {
                                    if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                        GanttServices.updateFPITable(dt, flightId, firstResourceNb, lastResourceNb, 
                                            firstResourceNbBeforeSave, lastResourceNbBeforeSave, resourceType, terminalANForResource, this);
                                    else
                                        GanttServices.updateFPITable(dt, flightId, firstResourceNb, lastResourceNb, 
                                            firstResourceNbBeforeSave, lastResourceNbBeforeSave, resourceType, terminalNbForResource.ToString(), this);
                                }
                                else
                                {
                                    if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                    {
                                        GanttServices.updateFPITable(dt, flightId, firstResourceNb, lastResourceNb,
                                            firstResourceNbBeforeSave, lastResourceNbBeforeSave, resourceType, terminalANForResource, this);
                                        reloadData();
                                    }
                                    else
                                    {
                                        if (deskNbInput != -1 && minDeskNumber != -1 && maxDeskNumber != -1 && terminalNbForResource != 0)
                                        {
                                            if (deskNbInput >= minDeskNumber && deskNbInput <= maxDeskNumber)
                                            {
                                                GanttServices.updateFPITable(dt, flightId, firstResourceNb, lastResourceNb,
                                                    firstResourceNbBeforeSave, lastResourceNbBeforeSave, resourceType, terminalNbForResource.ToString(), this);
                                                reloadData();
                                            }
                                            else
                                            {
                                                MessageBox.Show("For this resource there is no desk with the number " + deskNbInput + " in the Airport structure for the terminal " + terminalNbForResource + ". There are only desks from " + minDeskNumber + " to " + maxDeskNumber + ".");
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("The number of desks for this resource can't be determined. Please check the Airport structure.");
                                        }
                                    }
                                }
                            }
                        }
                        reloadResGantt = true;
                    }
                    break;
                case "updateFPIForRangeResources":
                    {
                        DataTable dt = new DataTable();
                        String flightId = "";
                        String resourceFirstDeskNb = "";
                        String resourceLastDeskNb = "";
                        String resourceType = "";
                        String resourceClassType = "";
                        String arrivalDeparture = "";
                        // if the flight changes resource by drag&drop then the Gantt isn't reloaded
                        // if the change is made from the Commands panel we reload the Gantt
                        String updateFromDragDrop = "";
                        // for a Eco/FB/EcoFB resource the user can choose for which class the update will be made
                        String flightClassToUpdate = "";
                        // the number of the terminal choosed by the user for the current resource
                        int terminalNbForResource = 0;
                        String terminalANForResource = "";

                        foreach (XmlNode xn in list)
                        {
                            // the minDeskNumber holds the lowest number 
                            // for a resource from the airport structure
                            // it is used to validate the user's input when changing the resource's desk
                            int minDeskNumber = -1;
                            // the maxDeskNumber holds the highest number 
                            // for a resource from the airport structure 
                            // it is used to validate the user's input when changing the resource's desk
                            int maxDeskNumber = -1;
                            int[] terminalDesks;

                            flightId = xn.ChildNodes[0].InnerText;
                            resourceFirstDeskNb = xn.ChildNodes[1].InnerText;
                            resourceLastDeskNb = xn.ChildNodes[2].InnerText;
                            resourceType = xn.ChildNodes[3].InnerText;
                            resourceClassType = xn.ChildNodes[4].InnerText;
                            arrivalDeparture = xn.ChildNodes[5].InnerText;
                            updateFromDragDrop = xn.ChildNodes[6].InnerText;
                            flightClassToUpdate = xn.ChildNodes[7].InnerText;
                            if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                terminalANForResource = xn.ChildNodes[8].InnerText;
                            else
                                Int32.TryParse(xn.ChildNodes[8].InnerText, out terminalNbForResource);

                            if (desksByTerminalNb.TryGetValue(terminalNbForResource, out terminalDesks))
                            {
                                minDeskNumber = terminalDesks[0];
                                maxDeskNumber = terminalDesks[1];
                            }

                            if (resourceType.Equals(Model.ResourceTypes.ArrivalInfeed.ToString()))
                                dt = DonneesEnCours.getTable("Input", GlobalNames.FPATableName);

                            if (resourceType.Equals(Model.ResourceTypes.FBCheck_In.ToString()) || resourceType.Equals(Model.ResourceTypes.EcoCheck_In.ToString())
                               || resourceType.Equals(Model.ResourceTypes.FBBagDrop.ToString()) || resourceType.Equals(Model.ResourceTypes.EcoBagDrop.ToString())
                               || resourceType.Equals(Model.ResourceTypes.FBMakeUp.ToString()) || resourceType.Equals(Model.ResourceTypes.EcoMakeUp.ToString())
                               )
                                dt = DonneesEnCours.getTable("Input", GlobalNames.FPDTableName);

                            if (dt != null && flightId != "" && resourceFirstDeskNb != "" && resourceLastDeskNb != ""
                                && (resourceClassType != "" || resourceType.Equals(Model.ResourceTypes.ArrivalInfeed.ToString()))
                                && resourceType != ""
                                && (terminalNbForResource != 0
                                    || (terminalANForResource != "" && this.DonneesEnCours.UseAlphaNumericForFlightInfo)))
                            {
                                int firstDeskNbInput = -1;
                                int lastDeskNbInput = -1;
                                bool updateFromDragDropBool;
                                Int32.TryParse(resourceFirstDeskNb, out firstDeskNbInput);
                                Int32.TryParse(resourceLastDeskNb, out lastDeskNbInput);
                                Boolean.TryParse(updateFromDragDrop, out updateFromDragDropBool);

                                if (updateFromDragDropBool)
                                {
                                    GanttServices.updateFPTableForRangeResources(dt, flightId, resourceFirstDeskNb,
                                                resourceLastDeskNb, resourceClassType, resourceType, flightClassToUpdate,
                                                terminalNbForResource, this);
                                }
                                else
                                {
                                    if (this.DonneesEnCours.UseAlphaNumericForFlightInfo)
                                    {
                                        GanttServices.updateFPTableForRangeResources(dt, flightId, resourceFirstDeskNb,
                                                    resourceLastDeskNb, resourceClassType, resourceType, flightClassToUpdate,
                                                    terminalANForResource, this);
                                        if (!updateFromDragDropBool)
                                            reloadData();
                                    }
                                    else
                                    {
                                        if (firstDeskNbInput != -1 && lastDeskNbInput != -1
                                            && minDeskNumber != -1 && maxDeskNumber != -1 && terminalNbForResource != 0)
                                        {
                                            if (firstDeskNbInput >= minDeskNumber && firstDeskNbInput <= maxDeskNumber
                                                && lastDeskNbInput >= minDeskNumber && lastDeskNbInput <= maxDeskNumber
                                                && firstDeskNbInput <= lastDeskNbInput)
                                            {
                                                GanttServices.updateFPTableForRangeResources(dt, flightId, resourceFirstDeskNb,
                                                    resourceLastDeskNb, resourceClassType, resourceType, flightClassToUpdate,
                                                    terminalNbForResource, this);
                                                if (!updateFromDragDropBool)
                                                    reloadData();
                                            }
                                            else if (firstDeskNbInput > lastDeskNbInput)
                                            {
                                                MessageBox.Show("The number for the first desk (" + firstDeskNbInput + ") should be lower or equal to the number for the last desk(" + lastDeskNbInput + ")!");
                                            }
                                            else if (firstDeskNbInput < minDeskNumber || firstDeskNbInput > maxDeskNumber)
                                            {
                                                MessageBox.Show("For this resource there is no desk with the number " + firstDeskNbInput + " in the Airport structure. There are only desks from " + minDeskNumber + " to " + maxDeskNumber + ".");
                                            }
                                            else if (lastDeskNbInput < minDeskNumber || lastDeskNbInput > maxDeskNumber)
                                            {
                                                MessageBox.Show("For this resource there is no desk with the number " + lastDeskNbInput + " in the Airport structure. There are only desks from " + minDeskNumber + " to " + maxDeskNumber + ".");
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("The number of desks for this resource can't be determined. Please check the Airport structure.");
                                        }
                                    }
                                }
                            }
                        }
                        reloadResGantt = true;
                    }
                    break;
                // << Task #12808 Pax2Sim - allocation Liege
                case "reloadData":
                    {
                        reloadData();
                    }
                    break;
                case "changeFlightColor":
                    {
                        // set the flags to indicate which criteria will be used to color the flights
                        if (list[0].InnerText.Equals(Model.COLOR_CRITERIA_FLIGHT_CATEGORY))
                        {
                            colorByFlightCategory = true;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = false;
                        }
                        else if (list[0].InnerText.Equals(Model.COLOR_CRITERIA_AIRLINE_CODE))
                        {
                            colorByFlightCategory = false;
                            colorByAirlineCode = true;
                            colorByGroundHandlerCode = false;
                        }
                        else if (list[0].InnerText.Equals(Model.COLOR_CRITERIA_GROUND_HANDLER_CODE))
                        {
                            colorByFlightCategory = false;
                            colorByAirlineCode = false;
                            colorByGroundHandlerCode = true;
                        }
                        reloadData();
                    }
                    break;
                case "createGanttNote":  //>>GanttNote for Report
                    {
                        // the image data is received from flex as an encoded string
                        String imageDataText = "";
                        // the image type is received from flex: 0 = JPG and 1 = PNG
                        int imageType = -1;
                        // based on the image type the extension for the file is determined
                        String imageFileExtension = "";
                        // this variable holds the path where is stored the file created to hold the image
                        String tempFilePath = "";

                        foreach (XmlNode xn in list)
                        {
                            imageDataText = xn.ChildNodes[0].InnerText;
                            int.TryParse(xn.ChildNodes[1].InnerText, out imageType);
                        }
                        //decode the encoded string from flex
                        byte[] bytes = Convert.FromBase64String(imageDataText);

                        switch (imageType)
                        {
                            case Model.IMAGE_TYPE_JPG:
                                {
                                    imageFileExtension = Model.IMAGE_TYPE_JPG_EXTENTION;
                                }
                                break;
                            case Model.IMAGE_TYPE_PNG:
                                {
                                    imageFileExtension = Model.IMAGE_TYPE_PNG_EXTENTION;
                                }
                                break;
                            default:
                                imageFileExtension = "";
                                break;
                        }

                        TreeNode selectedNode = treeView1.SelectedNode;
                        TreeViewTag tag = new TreeViewTag();
                        if (selectedNode != null)
                            tag = (TreeViewTag)selectedNode.Tag;
                        if (tag != null)
                        {
                            // the file name has the folowing format: temp_ScenarioName_TableName
                            // one Table with Gantt will have a unique file associated
                            String partialImageFileName = tag.ScenarioName + "_" + tag.Name;
                            // save the image and retrieve the path
                            byteArrayToImage(bytes, partialImageFileName, imageFileExtension, out tempFilePath);

                            String htmlFirstBuildText = "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.0 Transitional//EN'>"
                                                        + "<HTML><HEAD>"
                                                        + "<META content='text/html; charset=unicode' http-equiv=Content-Type>"
                                                        + "<META name=GENERATOR content='MSHTML 9.00.8112.16446'></HEAD>"
                                                        + "<BODY>";
                            String htmlLastBuildText = "</BODY></HTML>";
                            String htmlText = htmlFirstBuildText + "<img src='" + tempFilePath + "' />" + htmlLastBuildText;

                            DonneesEnCours.setGanttNote(tag.ScenarioName, tag.Name, htmlText);
                        }
                    }
                    break;
                case "Some_Other_Command": break;
            }
        }

        // given the image data as an array of bytes, a partial file name and the file extention
        // the function saves the image in the temporary PAx2Sim directory and returns the saved file path
        private void byteArrayToImage(byte[] byteArrayIn, String partialImageFileName, String imageFileExtention,
                                      out String tempFilePath)
        {
            System.Drawing.Image newImage;
            String pathWithFileName = "";
            String filePath = "";

            if (byteArrayIn != null && imageFileExtention != "")
            {
                filePath = DonneesEnCours.getDossierEnregistrement() + "Output\\GanttFiles";
                //OverallTools.ExternFunctions.CheckCreateDirectory(filePath);
                DirectoryInfo di = null;
                if (!Directory.Exists(filePath))
                {
                    try
                    {
                        di = Directory.CreateDirectory(filePath);
                    }
                    catch (Exception ex)
                    {
                        if (ex is System.IO.IOException || ex is System.UnauthorizedAccessException
                            || ex is System.ArgumentException || ex is System.ArgumentNullException
                            || ex is System.IO.PathTooLongException || ex is System.IO.DirectoryNotFoundException
                            || ex is System.NotSupportedException)
                        {
                            MessageBox.Show("ErrG006 : a problem appears while creating the Gantt Note : Unable to create the directory GanttFiles \t\r" + ex.Message);
                            tempFilePath = "";
                            return;
                        }
                    }
                    di.Attributes = FileAttributes.Directory | FileAttributes.Hidden;
                }

                filePath += "\\";

                pathWithFileName = filePath + "temp_" + partialImageFileName + imageFileExtention;

                using (MemoryStream stream = new MemoryStream(byteArrayIn))
                {
                    try
                    {
                        newImage = System.Drawing.Image.FromStream(stream);
                    }
                    catch (System.ArgumentException ex)
                    {
                        MessageBox.Show("ErrG007 : a problem appears while creating the Gantt Note : Unable to create the Gantt image \t\r" + ex.Message);
                        tempFilePath = "";
                        return;
                    }
                    try
                    {
                        newImage.Save(pathWithFileName);
                    }
                    catch (Exception ex)
                    {
                        if (ex is System.ArgumentNullException || ex is System.Runtime.InteropServices.ExternalException)
                            MessageBox.Show("ErrG008 : a problem appears while creating the Gantt Note : Unable to save the Gantt image \t\r" + ex.Message);
                        tempFilePath = "";
                        return;
                    }
                }
                tempFilePath = pathWithFileName;
            }
            else
            {
                tempFilePath = "";
                MessageBox.Show("No image data found or image extension is incorrect!");
            }
        }

        #endregion

        private void button1_Click(object sender, EventArgs e)
        {
            String simreporterUrl = "http://localhost:8080/simreporter/Simreporter.html#";
            simreporterWebBrowser.Url = new Uri(simreporterUrl);
        }
        
        //<< Task #7405 - new Desk and extra information for Pax
        public static void addTableToUserAttributesDirectory(DataTable userAttributes)
        {
            VisualisationMode myMode = new VisualisationMode(true, true, false, new int[] { 0 }, new int[] { 0 }, false, false,
                    Color.White, Color.Blue, Color.Black, Color.White, VisualisationMode.SelectionModeEnum.Column,
                    VisualisationMode.EditModeEnum.Column, new int[] { 0 }, null, null, null, null);

        }
        //>> Task #7405 - new Desk and extra information for Pax

        //<< Task #7405 - new Desk and extra information for Pax
        public bool isUserAttributesTable(String tableName)
        {            
            DataTable dt = DonneesEnCours.getTable("Input", GlobalNames.sUserAttributesTableName);
            int indexColumnUserAttributesColumnName = dt.Columns.IndexOf(GlobalNames.sUserAttributes_ColumnName);
            foreach (DataRow dr in dt.Rows)
            {
                // << Task #9260 Pax2Sim - Static Analysis - EBS algorithm - EBS per Terminal
                if (tableName != null
                    && (GlobalNames.ebsRateTableNamesList.Contains(tableName)
                        || tableName.Equals(GlobalNames.numberOfPassengersTableName)    // << Task #9536 Pax2Sim - table to specify direct the nb of different types of pax(orig, transf...)
                        || tableName.Equals(GlobalNames.numberOfBaggagesTableName))
                        || tableName.Equals(GlobalNames.USA_STANDARD_PARAMETERS_TABLE_NAME))    // >> Task #9967 Pax2Sim - BNP development - Peak Flows - USA Standard parameters table
                {
                    continue;
                }
                // >> Task #9260 Pax2Sim - Static Analysis - EBS algorithm - EBS per Terminal
                if (tableName.Equals(dr[indexColumnUserAttributesColumnName].ToString()))
                    return true;
            }            
            return false;            
        }
        //>> Task #7405 - new Desk and extra information for Pax

        // << Task #6386 Itinerary process        
        
        #region new Itinerary view
        /// <summary>
        /// Indicates when the swf file was initialized. 
        ///If initialized we can start sending messages to the component.
        /// </summary>
        public bool readyToLoadXML = false;

        public bool itineraryWasModified = false;

        /// <summary>
        /// This parameter is true when the user wants to save the project.
        /// It is needed because when the user changes the ProcessFlow we must have
        /// 2 options: save the ProcessFLow objects into the ItineraryGroups.txt when the project is saved
        /// or save the ProcessFlow objects into a dictionary so we can load them from there when the user
        /// reloads the ProcessFlow in the same session.
        /// It is set initially to true so that at the start we will know to load the ProcessFlow Objects from the ItineraryGroups.txt.
        /// </summary>
        public bool saveToDisk = true;
        /// <summary>
        /// We save the previous state of the saveToDisk variable in case the user chooses No in the Save Process Flow Dialog.
        /// </summary>
        public bool saveToDiskPreviousState = true;
        /// <summary>
        /// When the user wants to create a new project this variable will let the getItineraryGroupsFromFile() function know
        /// that it should return an empty list of Groups(the groups loaded from the ItineraryGroup.txt)
        /// </summary>
        public bool calledForANewEmptyProject = false;

        /// <summary>
        /// We save the ProcessFLow objects in this list for the current session => 
        ///  => if the user leaves the ProcessFlow tab and doesn't want to save the whole project, 
        ///     but only wants to save temporarly the changes made to the ProcessFlow we store them in this list.
        /// This is done so that the ItineraryGroups.txt file is not affected if the
        ///  user chooses not to save at the end the project and his ProcessFlow changes made in that session.
        /// When loading(after a tab change) we check if the list has object and load them from there. If we load
        ///  a new project we load the object from the ItineraryGroups.txt.
        /// This logic is implemented in the loadAllObjectsFromFilesForProcessFlow() function.
        /// </summary>
        //public List<ItineraryData> globalItineraryDataList = new List<ItineraryData>();

        /// <summary>
        /// This variable holds the name of the selected Pax Itinerary table or filter.
        /// Each Process Flow is associated to a Pax Itinerary table or filter.
        /// </summary>
        public String processFlowName = GlobalNames.ItineraryTableName;

        /// <summary>
        /// Holds the name of the previous table for which the Process Flow was loaded.
        /// Used when selecting tables from the Tree View: for the Itinerary table or any
        ///  other table(and its filters) we load the Itinerary table Process Flow, but for
        ///  the Itinerary table's filter we must load the corresponding Process Flow.
        /// </summary>
        public String previousProcessFlowLoaded = "";

        /// <summary>
        /// This dictionary will hold all the temporary global itinerary groups lists.
        /// The Itinerary table and its filters will have each its own global itinerary groups list.
        ///   Key = Itinerary table / filter name
        ///   Value = global itinerary groups list corresponding to the itinerary table / filter
        /// </summary>
        public static Dictionary<String, List<ItineraryData>> globalItineraryDataListDictionary = new Dictionary<String, List<ItineraryData>>();    // << Bug #8210 Pax2Sim - ProcessFlow - save issue : made it static        
        
        /// <summary>
        /// Dictionary that indicates if a Process Flow has been activated to be modified by the user.
        /// Key: process flow name / Value: a boolean that indicates if the Process Flow is in modification mode.
        /// </summary>
        public Dictionary<String, Boolean> modifyProcessFlowModeDictionary = new Dictionary<String, Boolean>();

        // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters
        /// <summary>
        /// Dictionary that stores the process flows params for each process flow.
        /// Key: process flow name
        /// Value: the object that holds the process flow parameters.
        /// </summary>
        public static Dictionary<String, ProcessFlowParameters> processFlowParametersDictionary 
            = new Dictionary<String, ProcessFlowParameters>();
        // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters

        public void loadItinerarySWFFileIntoFlashObject()
        {
            //the swf file will be in the pax2sim directory
            String swfPath = OverallTools.ExternFunctions.getPax2simDirectory() + Model.PROCESS_FLOW_FILE;
            shockwaveFlashForItinerary.Movie = swfPath;
            //shockwaveFlashForItinerary.LoadMovie(0, swfPath);
            shockwaveFlashForItinerary.Show();// Play();            
        }

        /// <summary>
        /// Receive a message from Flash.
        /// </summary>        
        private void player_FlashCall_ProcessFlow(object sender, _IShockwaveFlashEvents_FlashCallEvent e)
        {
            // message is in xml format so we need to parse it
            XmlDocument document = new XmlDocument();
            document.LoadXml(e.request);
            // get attributes to see which command flash is trying to call
            XmlAttributeCollection attributes = document.FirstChild.Attributes;
            String command = attributes.Item(0).InnerText;
            // get parameters
            XmlNodeList list = document.GetElementsByTagName("arguments");
            // Interpret command
            switch (command)
            {
                case "checkInitialized":
                    if (list[0].InnerText.Equals("ok"))
                    {                        
                        readyToLoadXML = true;
                        loadAllObjectsAsXMLFromAirportStructureForProcessFlow(false);
                        loadBackgroundImage();                        
                    }
                    break;
                case "initializeDataFromFiles":
                    {
                        // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters                        
                        getShowDetailsParametersForProcessFlow(processFlowName);
                        // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters

                        //initialize the dictionary with the lists of groups for the Itinerary table and its filters
                        // only the 1st time from the .txt files, when the dictionary is empty.
                        if (globalItineraryDataListDictionary.Count == 0)
                        {
                            initializeGlobalItineraryGroupsDictionary();
                        }

                        // inititalize the modifyProcessFlowModeDictionary with false for every Process Flow.
                        if (modifyProcessFlowModeDictionary.Count == 0)
                        {
                            initializeModifyProcessFlowModeDictionary();
                        }

                        //After loading all Objects from the Airport we load the Groups and Connections from the 
                        //ItineraryGroups table and the PaxItinerary table.
                        if (list[0].InnerText.Equals("ok"))
                            loadAllObjectsAsXMLFromFilesForProcessFlow();                        
                    }
                    break;
                case "getResultsActionResponse":
                    {
                        String scenarioName = "";
                        String groupName = "";

                        foreach (XmlNode xn in list)
                        {
                            scenarioName = xn.ChildNodes[0].InnerText;
                            groupName = xn.ChildNodes[1].InnerText;
                        }
                        getResultsActionResponse(scenarioName, groupName);
                    }
                    break;
                case "addToChartActionResponse":
                    {
                        String selectedChartName = "";
                        String groupName = "";
                        String scenarioName = "";

                        foreach (XmlNode xn in list)
                        {
                            selectedChartName = xn.ChildNodes[0].InnerText;
                            groupName = xn.ChildNodes[1].InnerText;
                            scenarioName = xn.ChildNodes[2].InnerText;
                        }                        
                        addToChartActionResponse(selectedChartName, groupName, scenarioName);
                    }
                    break;
                case "compareActionResponse":
                    {
                        String groupName = "";
                        String menuSelection = "";

                        foreach (XmlNode xn in list)
                        {
                            groupName = xn.ChildNodes[0].InnerText;
                            menuSelection = xn.ChildNodes[1].InnerText;
                        }
                        compareActionResponse(groupName, menuSelection);
                    }
                    break;
                case "editGroupParametersActionResponse":
                    {
                        String groupName = list[0].InnerText;
                        editGroupParametersActionResponse(groupName);
                    }
                    break;
                case "createReportNote":   
                    {                        
                        // the image data is received from flex as an encoded string
                        String imageDataText = "";
                        // the image type is received from flex: 0 = JPG and 1 = PNG
                        int imageType = -1;

                        foreach (XmlNode xn in list)
                        {
                            imageDataText = xn.ChildNodes[0].InnerText;
                            int.TryParse(xn.ChildNodes[1].InnerText, out imageType);
                        }
                        createReportNodeContainingProcessFlowImage(imageType, imageDataText);                        
                    }
                    break;
                case "updateItineraryTable":
                    {
                        //part of the save changes process
                        //creates a list with Connections from the data received
                        List<ItineraryConnection> allConnections = getConnectionsFromDataReceived(list);
                        //update the Itinerary Table
                        updateItineraryTable(allConnections);
                        //update Itinerary Connections Bendpoints file
                        updateItineraryConnectionsBendpointsTable(allConnections);                   
                    }
                    break;
                case "updateItineraryGroupsTable":
                    {
                        //Check if the function was called from the ProcessFlow save button.If so
                        //we save the groups in the global list(it is only a temporary save for the current session)
                        bool calledFromProcessFlowSaveButton = false;
                        Boolean.TryParse(list[0].ChildNodes[1].Name, out calledFromProcessFlowSaveButton);
                        //second part of the save changes process
                        //creates a list with Itinerary Group objects from the data received
                        List<ItineraryData> allGroups = getItineraryGroupsFromDataReceived(list);
                        
                        //If the save is temporary(only for the current session) we update the global list
                        if (calledFromProcessFlowSaveButton || !saveToDisk)
                        {
                            //globalItineraryDataList = new List<ItineraryData>();
                            List<ItineraryData> globalItineraryDataList = new List<ItineraryData>();
                            
                            for (int i = 0; i < allGroups.Count; i++)
                                globalItineraryDataList.Add(allGroups[i]);

                            if (!globalItineraryDataListDictionary.ContainsKey(processFlowName))
                                globalItineraryDataListDictionary.Add(processFlowName, globalItineraryDataList);
                            else
                            {
                                globalItineraryDataListDictionary.Remove(processFlowName);
                                globalItineraryDataListDictionary.Add(processFlowName, globalItineraryDataList);
                            }
                                
                            //we save in the temporary list when the user saves the ProcessFlow from the save button
                            if (calledFromProcessFlowSaveButton)
                                saveToDisk = false;
                        }
                        else
                        {
                            List<ItineraryData> globalItineraryDataList = new List<ItineraryData>();

                            for (int i = 0; i < allGroups.Count; i++)
                                globalItineraryDataList.Add(allGroups[i]);

                            if (!globalItineraryDataListDictionary.ContainsKey(processFlowName))
                                globalItineraryDataListDictionary.Add(processFlowName, globalItineraryDataList);
                            else
                            {
                                globalItineraryDataListDictionary.Remove(processFlowName);
                                globalItineraryDataListDictionary.Add(processFlowName, globalItineraryDataList);
                            }
                            //update the Itinerary Groups Table
                            updateItineraryGroupsTable(allGroups);
                        }
                    }
                    break;
                case "refresh":
                    {                       
                        if (readyToLoadXML)
                            loadAllObjectsAsXMLFromAirportStructureForProcessFlow(true);
                    } 
                    break;
                case "calculateDistributionParameters":
                    {
                        Double distanceValue = 0;
                        Double.TryParse(list[0].InnerText, out distanceValue);
                        calculateDistributionParameters(distanceValue);
                    }
                    break;
                case "refreshGroupDescriptions":
                    {
                        refreshGroupDescriptions();
                    }
                    break;
                case "refreshGroupCapacities":
                    {
                        refreshGroupCapacities();
                    }
                    break;
                case "refreshGroupProcessTimes":
                    {
                        refreshGroupProcessTimes();
                    }
                    break;
                case "refreshGroupBaggProcessTimes":
                    {
                        refreshGroupBaggProcessTimes();
                    }
                    break;                    
                case "getProbabilityProfiles":
                    {
                        String probabilityProfiles = getProbabilityProfiles();
                        if (probabilityProfiles != "")
                            sendProbabilityProfilesToFlex(probabilityProfiles);
                    }
                    break;
                case "addNewProbabilityProfile":
                    {
                        addNewProbabilityProfile();
                    }
                    break;
                case "viewAllocationTable":
                    {
                        String groupName = list[0].InnerText;
                        if (groupName != "")
                            viewAllocationTable(groupName);
                    }
                    break;
               case "viewPlanningTable":
                    {
                        String groupName = list[0].InnerText;
                        if (groupName != "")
                            viewPlanningTable(groupName);
                    }
                    break;
               case "saveBackgroundImage":   
                    {                        
                        // the image data is received from flex as an encoded string
                        String imageDataText = "";

                        foreach (XmlNode xn in list)
                        {
                            imageDataText = xn.ChildNodes[0].InnerText;                            
                        }
                        saveBackgroundImage(imageDataText);                        
                    }
                    break;
               case "deleteBackgroundFileFromProject":
                    {
                        deleteBackgroundFileFromProject();
                    }
                    break;
               case "updateObjectDescriptionInTreeView":
                    {
                        String objectName = "";
                        String objectDescription = "";

                        foreach (XmlNode xn in list)
                        {
                            objectName = xn.ChildNodes[0].InnerText;
                            objectDescription = xn.ChildNodes[1].InnerText;                            
                        }
                        if (objectName != "" && objectDescription != "")
                            updateObjectDescriptionInTreeView(objectName, objectDescription);
                    }
                    break;
               case "partialUpdatePaxProcessTimesTable":
                    {                        
                        // partial modify of the Pax Process Times table:
                        // only updates the groups received:
                        // the ones the user modified their distribution times with the multiple selection editor
                        // creates a list with Itinerary Group objects containing the distribution times info from the data received
                        List<ItineraryData> groupsReceived = getItineraryGroupsWithDistributionsFromDataReceived(list);
                        //updates the Pax Process Times table
                        partialUpdatePaxProcessTimesTable(groupsReceived);
                    }
                    break;
               case "updateModificationModeForProcessFlow":
                    {
                        bool modifyProcessFlow = false;
                        Boolean.TryParse(list[0].ChildNodes[0].Name, out modifyProcessFlow);
                        updateModificationModeForProcessFlow(modifyProcessFlow);
                    } 
                    break;
               case "refreshGroupDelayTimeDistribution":
                    {
                        // << Task #8789 Pax2Sim - ProcessFlow - update Group details
                        refreshGroupDelayTimeDistribution();
                        // >> Task #8789 Pax2Sim - ProcessFlow - update Group details
                    }
                    break;
               case "updateProcessFlowParametersDictionary":
                    {
                        // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters
                        String parameterName = "";
                        Boolean parameterValue = false;

                        if (list[0] != null)
                        {
                            if (list[0].ChildNodes[0] != null)
                                parameterName = list[0].ChildNodes[0].InnerText;

                            if (list[0].ChildNodes[1] != null)
                            {
                                if (Boolean.TryParse(list[0].ChildNodes[1].InnerText, out parameterValue))
                                {
                                    updateProcessFlowParametersDictionary(parameterName, parameterValue);
                                    //OverallTools.ExternFunctions.PrintLogFile(parameterName + " : " + parameterValue);
                                }
                            }
                        }
                        // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters
                    } 
                    break;
                case "updateItineraryParametersTables":
                    {
                        // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters
                        updateItineraryParametersTables();
                        // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters                        
                    }
                    break;
                case "setTargetActionResponse":
                    {
                        // >> Task #10282 Process Flow - Set target option
                        String scenarioName = "";
                        String groupName = "";

                        foreach (XmlNode xn in list)
                        {
                            scenarioName = xn.ChildNodes[0].InnerText;
                            groupName = xn.ChildNodes[1].InnerText;
                        }
                        setTargetActionResponse(scenarioName, groupName);
                        // << Task #10282 Process Flow - Set target option
                    }
                    break;
                case "getTargetDetails":    //>> Task #10282 Process Flow - Set target option                    
                    {
                        String scenarioName = "";
                        String statisticType = "";
                        String statisticAttribute = "";
                        String statisticAttributeDegree = "";

                        if (list[0] != null)
                        {
                            if (list[0].ChildNodes[0] != null)
                                scenarioName = list[0].ChildNodes[0].InnerText;
                            if (list[0].ChildNodes[1] != null)
                                statisticType = list[0].ChildNodes[1].InnerText;
                            if (list[0].ChildNodes[2] != null)
                                statisticAttribute = list[0].ChildNodes[2].InnerText;
                            if (list[0].ChildNodes[3] != null)
                                statisticAttributeDegree = list[0].ChildNodes[3].InnerText;
                        }
                        if (scenarioName != "" && statisticType != ""
                            && statisticAttribute != "" && statisticAttributeDegree != "")
                        {
                            Dictionary<String, String> targetInfoDictionary
                                = getTargetInfoDictionary(scenarioName, statisticType, statisticAttribute, statisticAttributeDegree);

                            createTargetInfoResponse(targetInfoDictionary);
                        }
                    }
                    break;
                case "test":
                    {
                        foreach (XmlNode xn in list)
                        {
                            
                        }
                    }
                    break;
                case "Some_Other_Command": break;
            }
        }

        private void initializeGlobalItineraryGroupsDictionary()
        {
            globalItineraryDataListDictionary.Clear();
            NormalTable itineraryTableNt = DonneesEnCours.GetTable("Input", GlobalNames.ItineraryTableName);
            List<string> filtersForItineraryTable = itineraryTableNt.GetFilters();
            //add the Itinerary table
            filtersForItineraryTable.Add(GlobalNames.ItineraryTableName);

            for (int i = 0; i < filtersForItineraryTable.Count; i++)
            {
                List<ItineraryData> groups = new List<ItineraryData>();
                String filterName = filtersForItineraryTable[i];
                String groupsFilePath = DonneesEnCours.getDossierEnregistrement() + "Data\\"
                                        + Model.itineraryGroupsTextFilePrefix + filterName + Model.itineraryGroupsTextFileExtention;

                if (DonneesEnCours.getDossierEnregistrement() != "\\" && File.Exists(groupsFilePath))   // << Bug #8210 Pax2Sim - ProcessFlow - save issue
                {
                    System.IO.StreamReader reader = new StreamReader(groupsFilePath);
                    String groupInfoLine = "";
                    while ((groupInfoLine = reader.ReadLine()) != null)
                    {
                        ItineraryData group = getItineraryGroupFromString(groupInfoLine);
                        if (group != null)
                            groups.Add(group);
                    }
                    reader.Close();
                    reader.Dispose();
                }
                else
                {
                    if (DonneesEnCours.getDossierEnregistrement() != "\\")  // << Bug #8210 Pax2Sim - ProcessFlow - save issue
                        File.Create(groupsFilePath);
                }
                globalItineraryDataListDictionary.Add(filterName, groups);
            }

        }

        private void initializeModifyProcessFlowModeDictionary()
        {
            modifyProcessFlowModeDictionary.Clear();
            NormalTable itineraryTableNt = DonneesEnCours.GetTable("Input", GlobalNames.ItineraryTableName);
            List<string> filtersForItineraryTable = itineraryTableNt.GetFilters();
            //add the Itinerary table
            filtersForItineraryTable.Add(GlobalNames.ItineraryTableName);
            //Each Process Flow is initially disabled(no changes can be made)
            for (int i = 0; i < filtersForItineraryTable.Count; i++)
            {
                modifyProcessFlowModeDictionary.Add(filtersForItineraryTable[i], false);
            }
        }

        private void updateModificationModeForProcessFlow(bool modificationMode)
        {
            if (!modifyProcessFlowModeDictionary.ContainsKey(processFlowName))
                modifyProcessFlowModeDictionary.Add(processFlowName, modificationMode);
            else
            {
                modifyProcessFlowModeDictionary.Remove(processFlowName);
                modifyProcessFlowModeDictionary.Add(processFlowName, modificationMode);
            }
        }
        
        /// <summary>
        /// Send a message to Flash with the data needed.
        /// </summary>
        private void loadAllObjectsAsXMLFromAirportStructureForProcessFlow(bool forRefresh)
        {            
            List<ItineraryData> itineraryGroupList = new List<ItineraryData>();
            List<ItineraryData> itineraryScenarioList = new List<ItineraryData>();
            List<ItineraryData> itineraryChartList = new List<ItineraryData>();
            String groupXml = "";
            String scenarioXml = "";
            String chartXml = "";

            itineraryGroupList = GanttServices.getItineraryDataByType(this, Model.GROUP_OBJECT_TYPE);
            groupXml = GanttServices.serializeItineraryObjectsForXml(itineraryGroupList);

            itineraryScenarioList = GanttServices.getItineraryDataByType(this, Model.SCENARIO_OBJECT_TYPE);
            scenarioXml = GanttServices.serializeItineraryObjectsForXml(itineraryScenarioList);

            itineraryChartList = GanttServices.getItineraryDataByType(this, Model.CHART_OBJECT_TYPE);
            chartXml = GanttServices.serializeItineraryObjectsForXml(itineraryChartList);

            String[] terminalsFromAirportStructure = DonneesEnCours.getTerminal();
            String terminals = "";
            if (terminalsFromAirportStructure != null)
            {
                for (int i = 0; i < terminalsFromAirportStructure.Length; i++)
                {
                    if (i == terminalsFromAirportStructure.Length - 1)
                        terminals = terminals + terminalsFromAirportStructure[i];
                    else
                        terminals = terminals + terminalsFromAirportStructure[i] + ";";
                }
            }
            
            String request = "<invoke name='readData' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + groupXml + "</string>"
                    + "<string>" + scenarioXml + "</string>"
                    + "<string>" + chartXml + "</string>"
                    + "<string>" + forRefresh.ToString() + "</string>"
                    + "<string>" + terminals + "</string>"
                    + "<string>" + processFlowName + "</string>"
                    + "<string>" + DonneesEnCours.Levels[0].ToString() + "</string>"
                    + "<string>" + DonneesEnCours.Levels[1].ToString() + "</string>"
                    + "<string>" + DonneesEnCours.Levels[2].ToString() + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);                
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml (readData) to the flash object: " + e.Message);
            }
        }

        //used when a project is closed - calls Flex to remove the loaded objects from the ProcessFlow
        private void loadBlankProcessFlow()
        {
            List<ItineraryData> itineraryGroupList = new List<ItineraryData>();
            List<ItineraryData> itineraryScenarioList = new List<ItineraryData>();
            List<ItineraryData> itineraryChartList = new List<ItineraryData>();
            String groupXml = "";
            String scenarioXml = "";
            String chartXml = "";
            groupXml = GanttServices.serializeItineraryObjectsForXml(itineraryGroupList);
            scenarioXml = GanttServices.serializeItineraryObjectsForXml(itineraryScenarioList);
            chartXml = GanttServices.serializeItineraryObjectsForXml(itineraryChartList);

            String request = "<invoke name='readData' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + groupXml + "</string>"
                    + "<string>" + scenarioXml + "</string>"
                    + "<string>" + chartXml + "</string>"
                    + "<string>" + "false" + "</string>"
                    + "<string>" + "" + "</string>"
                    + "<string>" + "" + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml (readData) to the flash object: " + e.Message);
            }
        }

        /// <summary>
        /// Calls the flex part to reset the ProcessFlow lists - groups, scenarios, charts, objects on itinerary.
        /// Used before changing(opening) a project or starting a new one.
        /// </summary>
        private void clearItinerary()
        {
            String request = "<invoke name='clearItinerary' returntype='xml'>"
                                + "<arguments>"
                                + "</arguments>"
                                + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml (clearItinerary) to the flash object: " + e.Message);
            }
        }
        
        /// <summary>
        ///  The image of the Process Flow is saved as 
        ///  a Gantt note attached to the Pax Itinerary table.
        /// </summary>
        /// <param name="imageType">Indicates the type of the image: PNG or JPG</param>
        /// <param name="imageDataText">The image data as string</param>
        private void createReportNodeContainingProcessFlowImage(int imageType, String imageDataText)
        {
            String imageFileExtension = "";
            // this variable holds the path where is stored the file created to hold the image
            String tempFilePath = "";

            //decode the encoded string from flex
            byte[] bytes = Convert.FromBase64String(imageDataText);

            switch (imageType)
            {
                case Model.IMAGE_TYPE_JPG:
                    {
                        imageFileExtension = Model.IMAGE_TYPE_JPG_EXTENTION;
                    }
                    break;
                case Model.IMAGE_TYPE_PNG:
                    {
                        imageFileExtension = Model.IMAGE_TYPE_PNG_EXTENTION;
                    }
                    break;
                default:
                    imageFileExtension = "";
                    break;
            }
            // The file name has the folowing format: temp_ScenarioName_TableName
            // The file will be associated to the Pax Itinerary table
                        
            //String partialImageFileName = "Input" + "_" + GlobalNames.ItineraryTableName;
            String partialImageFileName = "Input" + "_" + processFlowName;

            // save the image and retrieve the path
            byteArrayToImage(bytes, partialImageFileName, imageFileExtension, out tempFilePath);

            String htmlFirstBuildText = "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.0 Transitional//EN'>"
                                        + "<HTML>"
                                        + "<HEAD>"
                                        + "<META content='text/html; charset=unicode' http-equiv=Content-Type>"
                                        + "<META name=GENERATOR content='MSHTML 9.00.8112.16446'>"
                                        + "</HEAD>"
                                        + "<BODY>";
            String htmlLastBuildText = "</BODY></HTML>";
            String htmlText = htmlFirstBuildText + "<img src='" + tempFilePath + "' />" + htmlLastBuildText;

            //DonneesEnCours.setGanttNote("Input", GlobalNames.ItineraryTableName, htmlText);
            DonneesEnCours.setGanttNote("Input", processFlowName, htmlText);

        }
        /// <summary>
        /// Select the Result Node using the scenario name and group name parameters
        /// </summary>
        /// <param name="scenarioName">The scenario where the node is</param>
        /// <param name="groupName">The name of the node we must select</param>
        private void getResultsActionResponse(String scenarioName, String groupName)
        {
            
                //We are in the case of accessing the results for the selected node.
                //We just have to navigate in the right position in the treeview. 
                TreeNode tnScenarioNode = OverallTools.TreeViewFunctions.RechercherNom(scenarioName, treeView1.Nodes["Analysis"]);
                if (tnScenarioNode == null)
                    return;
                TreeNode tnGroupNode = OverallTools.TreeViewFunctions.RechercherNom(groupName, tnScenarioNode);
                if (tnGroupNode == null)
                    return;
                treeView1.CollapseAll();
                SelectNode(null);
                Thread thread = new Thread(new ThreadStart(() => selectNodeToDisplay(tnGroupNode)));
                thread.Start();
                /*
                SelectNode(tnGroupNode);
                if (CurrentNode != null)
                    CurrentNode.Expand();
                tabControl.SelectedIndex = 0;
                if (TreeRightClick)
                    TreeRightClick = false;
                 */
            
        }

        private void selectNodeToDisplay(TreeNode tnGroupNode)
        {
            try
            {
                SelectNode(tnGroupNode);
                if (CurrentNode != null)
                    CurrentNode.Expand();
                tabControl.SelectedIndex = 0;
                if (TreeRightClick)
                    TreeRightClick = false;
            }
            catch (ThreadStateException ex)
            {
                OverallTools.ExternFunctions.PrintLogFile("Thread exception: " + ex.Message);
            }
        }

        // >> Task #10282 Process Flow - Set target option        
        private void setTargetActionResponse(String scenarioName, String groupName)
        {
            Thread thread = new Thread(new ThreadStart(() => handleSetTargetActionResponse(scenarioName, groupName)));
            thread.Start();            
        }

        delegate void handleSetTargetCallback(String scenarioName, String groupName);
        
        private void handleSetTargetActionResponse(String scenarioName, String groupName)
        {
            if (treeView1.InvokeRequired)
            {
                handleSetTargetCallback c = new handleSetTargetCallback(handleSetTargetActionResponse);
                this.Invoke(c, new object[] { scenarioName, groupName });
            }
            else
            {
                TreeNode tnScenarioNode = OverallTools.TreeViewFunctions.RechercherNom(scenarioName, treeView1.Nodes["Analysis"]);
                if (tnScenarioNode == null)
                    return;
                TreeNode tnGroupNode = OverallTools.TreeViewFunctions.RechercherNom(groupName, tnScenarioNode);
                if (tnGroupNode == null)
                    return;
                treeView1.CollapseAll();
                SelectNode(null);

                SelectNode(tnGroupNode);
                if (CurrentNode != null)
                    CurrentNode.Expand();
                tabControl.SelectedIndex = 0;
                if (TreeRightClick)
                    TreeRightClick = false;

                setTargetToolStripMenuItem_Click(null, null);
            }
        }

        private const String NO_SELECTION = "";
        private Dictionary<String, String> getTargetInfoDictionary(String scenarioName,
            String statisticType, String statisticAttribute, String statisticAttributeDegree)
        {
            // K: Process name, V: target achieved - Y or N 
            Dictionary<String, String> targetInfoDictionary = new Dictionary<String, String>();
            
            if (DonneesEnCours.ScenarioExist(scenarioName))
            {
                TreeNode scenarioNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(scenarioName, treeView1.Nodes[2]);
                TreeNode paxCapacityAnalysisNode = null;
                TreeNode airportReportsNode = null;                
                TreeNode targetNode = null;

                if (scenarioNode != null)
                {
                    paxCapacityAnalysisNode = DonneesEnCours.getDynamicNode(scenarioName, scenarioNode);
                }
                else
                {
                    OverallTools.ExternFunctions.PrintLogFile("An error occured while obtaining the target info (getTargetInfoDictionary)." 
                        + " Could not find the scenario " + scenarioName + ".");
                    return targetInfoDictionary;
                }
                if (paxCapacityAnalysisNode != null)
                {
                    airportReportsNode = OverallTools.TreeViewFunctions.RechercherNomEnfants("Airport Reports", paxCapacityAnalysisNode);
                }
                else
                {
                    OverallTools.ExternFunctions.PrintLogFile("An error occured while obtaining the target info (getTargetInfoDictionary)."
                        + " Could not find the dynamic node (Pax Capacity Analysis) for the scenario " + scenarioName + ".");
                    return targetInfoDictionary;
                }
                if (airportReportsNode != null)
                {
                    String targetDirectoryName = GlobalNames.TARGET_DIRECTORY_NAME;
                    targetNode = OverallTools.TreeViewFunctions.RechercherNomEnfants(targetDirectoryName, airportReportsNode);
                }
                else
                {
                    OverallTools.ExternFunctions.PrintLogFile("An error occured while obtaining the target info (getTargetInfoDictionary)."
                        + " Could not find the Airport Reports node for the scenario " + scenarioName + ".");
                    return targetInfoDictionary;
                }

                if (targetNode != null)
                {
                    if (targetNode.Nodes != null && targetNode.Nodes.Count > 0)
                    {
                        foreach (TreeNode targetDataNode in targetNode.Nodes)
                        {
                            String targetTableName = targetDataNode.Name;
                            String processName = "";

                            if (targetTableName.Equals(GlobalNames.AIRPORT_REPORTS_PROCESS_NAME + " " + GlobalNames.TARGET_TABLE_NAME_SUFIX))
                                processName = GlobalNames.AIRPORT_REPORTS_PROCESS_NAME;
                            else
                            {
                                if (targetTableName.IndexOf("(") != -1)
                                    processName = targetTableName.Substring(0, targetTableName.IndexOf("(")).Trim();
                                else if (targetTableName.IndexOf(GlobalNames.TARGET_TABLE_NAME_SUFIX) != -1)
                                    processName = targetTableName.Substring(0, targetTableName.IndexOf(GlobalNames.TARGET_TABLE_NAME_SUFIX)).Trim();
                            }

                            DataTable targetTable = DonneesEnCours.getTable(scenarioName, targetTableName);

                            String targetAchived = isTargetAchievedForTable(targetTable, statisticType, statisticAttribute, statisticAttributeDegree);

                            if (processName != "" && targetAchived != NO_SELECTION
                                && (targetAchived.Equals(GlobalNames.TARGET_ACHIEVED_POSITIVE)
                                    || targetAchived.Equals(GlobalNames.TARGET_ACHIEVED_NEGATIVE)))
                            {
                                targetInfoDictionary.Add(processName, targetAchived);
                            }
                            
                        }
                    }
                }
                else
                {
                    OverallTools.ExternFunctions.PrintLogFile("An error occured while obtaining the target info (getTargetInfoDictionary)."
                        + " Could not find the Target directory for the scenario " + scenarioName + ".");
                    return targetInfoDictionary;
                }
            }
            return targetInfoDictionary;
        }

        /// <summary>
        /// If for the specific statistic type and statistic attribute we find in the 
        /// table a Target that was not achieved the function returns false.        
        /// </summary>
        /// <param name="targetTable"></param>
        /// <param name="statisticType"></param>
        /// <param name="statisticAttribute"></param>
        /// <returns></returns>
        private String isTargetAchievedForTable(DataTable targetTable, String statisticType, 
            String statisticAttribute, String statisticAttributeDegree)
        {
            if (targetTable == null)
                return NO_SELECTION;
            int statisticTypeColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_statisticType_columnName);
            int statisticAttributeColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_statisticAttribute_columnName);
            int statisticAttributeDegreeColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_attributeDegree_columnName);
            int targetAchivedColumnIndex = targetTable.Columns.IndexOf(GlobalNames.target_targetAchived_columnName);

            bool found = false;
            if (statisticTypeColumnIndex != -1 && statisticAttributeColumnIndex != -1
                && targetAchivedColumnIndex != -1 && statisticAttributeDegreeColumnIndex != -1)
            {
                foreach (DataRow row in targetTable.Rows)
                {
                    String currentStatisticType = row[statisticTypeColumnIndex].ToString();
                    String currentStatisticAttribute = row[statisticAttributeColumnIndex].ToString();
                    String currentStatisticAttributeDegree = row[statisticAttributeDegreeColumnIndex].ToString();

                    if (statisticType.Equals(currentStatisticType)
                        && statisticAttribute.Equals(currentStatisticAttribute)
                        && statisticAttributeDegree.Equals(currentStatisticAttributeDegree))
                    {
                        found = true;
                        String currentTargetAchived = row[targetAchivedColumnIndex].ToString();
                        if (currentTargetAchived.Equals(GlobalNames.TARGET_ACHIEVED_NEGATIVE))
                            return GlobalNames.TARGET_ACHIEVED_NEGATIVE;
                    }
                }
                if (found)
                    return GlobalNames.TARGET_ACHIEVED_POSITIVE;
            }
            return NO_SELECTION;            
        }

        private void createTargetInfoResponse(Dictionary<String, String> targetInfoDictionary)
        {
            List<Target> targetInfoList = new List<Target>();
            foreach (KeyValuePair<String, String> pair in targetInfoDictionary)
            {
                String processName = pair.Key;
                String targetAchieved = pair.Value;
                Target targetInfo = new Target(processName, targetAchieved);
                targetInfoList.Add(targetInfo);
            }

            String parametersXML = GanttServices.serializeTargetAchievedListForXml(targetInfoList);

            String request = "<invoke name='targetInfoForProcessFlow' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + parametersXML + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml (targetInfoForProcessFlow) to the flash object: " + e.Message);
            }
        }

        // << Task #10282 Process Flow - Set target option

        private void addToChartActionResponse(String selectedChartName, String groupName, String scenarioName)
        {
            /*
            ColumnInformation selectedTable;
            Prompt.SIM_Graphic_Association sga;
            Prompt.CompareChart cc;
            GraphicFilter gf;
            ToolStripMenuItem sender = new ToolStripMenuItem();
            */
            Thread thread = new Thread(new ThreadStart(() => handleAddToChartActionResponse(selectedChartName, groupName, scenarioName)));
            thread.Start();
            /*
            if (selectedChartName == "New") {
                // Add To Chart -> Scenario x -> Global -> New
                selectedTable = new ColumnInformation(scenarioName, groupName, groupName, groupName);                
                gf = DonneesEnCours.GetGeneralGraphicFilter(groupName);
                Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);
                sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, selectedTable, imageList1);

                sga.changeLabel1();
                sga.setTableNameMode();                
                if (sga.ShowDialog() != DialogResult.OK) {
                    return;
                } else {
                    selectedTable = new ColumnInformation(scenarioName,
                        sga.Column.TableName,
                        sga.Column.ColumnName,
                        sga.Column.AbscissaColumnName,
                        scenarioName + "." + sga.Column.DisplayedName);
                    Graph.Add_Column_Click(selectedTable);

                    if (Graph.ShowDialog() != DialogResult.OK) {
                        return;
                    }
                    else {
                        gf = Graph.getFilter();
                        if (gf == null)
                            return;
                        MyShowAssistant(gf, sender, false);
                    }
                }
            } else {
                // Add data to a chart that already exist
                List<String> chartList = DonneesEnCours.GetGraphicFilter();

                for (int i = 0; i < chartList.Count; i++) {
                    if (selectedChartName.CompareTo(chartList[i]) == 0) {

                        gf = DonneesEnCours.GetGeneralGraphicFilter(chartList[i]);
                        Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);

                        selectedTable = new ColumnInformation(scenarioName, groupName, groupName, groupName);
                        sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, selectedTable, imageList1);
                        sga.changeLabel1();

                        if (sga.ShowDialog() != DialogResult.OK) {
                            return;
                        } else {
                            selectedTable = new ColumnInformation(
                                scenarioName,
                                sga.Column.TableName,
                                sga.Column.ColumnName,
                                sga.Column.AbscissaColumnName,
                                scenarioName + sga.Column.TableName + sga.Column.AbscissaColumnName);
                            Graph.Add_Column_Click(selectedTable);

                            if (Graph.ShowDialog() != DialogResult.OK) {
                                return;
                            } else {
                                gf = Graph.getFilter();
                                if (gf == null)
                                    return;
                                MyShowAssistant(gf, sender, true);
                            }
                        }
                    }
                }
            }*/
        }

        delegate void handleChartCallback(String selectedChartName, String groupName, String scenarioName);

        private void handleAddToChartActionResponse(String selectedChartName, String groupName, String scenarioName)
        {
            if (treeView1.InvokeRequired)
            {
                handleChartCallback c = new handleChartCallback(handleAddToChartActionResponse);
                this.Invoke(c, new object[] { selectedChartName, groupName, scenarioName });
            }
            else
            {

                ColumnInformation selectedTable;
                Prompt.SIM_Graphic_Association sga;
                Prompt.CompareChart cc;
                GraphicFilter gf;
                ToolStripMenuItem sender = new ToolStripMenuItem();

                if (selectedChartName == "New")
                {
                    // Add To Chart -> Scenario x -> Global -> New
                    selectedTable = new ColumnInformation(scenarioName, groupName, groupName, groupName);
                    gf = DonneesEnCours.GetGeneralGraphicFilter(groupName);
                    Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);
                    sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, selectedTable, imageList1);

                    sga.changeLabel1();
                    sga.setTableNameMode();
                    if (sga.ShowDialog() != DialogResult.OK)
                    {
                        return;
                    }
                    else
                    {
                        selectedTable = new ColumnInformation(scenarioName,
                            sga.Column.TableName,
                            sga.Column.ColumnName,
                            sga.Column.AbscissaColumnName,
                            scenarioName + "." + sga.Column.DisplayedName);
                        Graph.Add_Column_Click(selectedTable);

                        if (Graph.ShowDialog() != DialogResult.OK)
                        {
                            return;
                        }
                        else
                        {
                            gf = Graph.getFilter();
                            if (gf == null)
                                return;
                            MyShowAssistant(gf, sender, false);
                        }
                    }
                }
                else
                {
                    // Add data to a chart that already exist
                    List<String> chartList = DonneesEnCours.GetGraphicFilter();

                    for (int i = 0; i < chartList.Count; i++)
                    {
                        if (selectedChartName.CompareTo(chartList[i]) == 0)
                        {

                            gf = DonneesEnCours.GetGeneralGraphicFilter(chartList[i]);
                            Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, gf, imageList1);

                            selectedTable = new ColumnInformation(scenarioName, groupName, groupName, groupName);
                            sga = new Prompt.SIM_Graphic_Association(DonneesEnCours, treeView1.Nodes, selectedTable, imageList1);
                            sga.changeLabel1();

                            if (sga.ShowDialog() != DialogResult.OK)
                            {
                                return;
                            }
                            else
                            {
                                selectedTable = new ColumnInformation(
                                    scenarioName,
                                    sga.Column.TableName,
                                    sga.Column.ColumnName,
                                    sga.Column.AbscissaColumnName,
                                    scenarioName + sga.Column.TableName + sga.Column.AbscissaColumnName);
                                Graph.Add_Column_Click(selectedTable);

                                if (Graph.ShowDialog() != DialogResult.OK)
                                {
                                    return;
                                }
                                else
                                {
                                    gf = Graph.getFilter();
                                    if (gf == null)
                                        return;
                                    MyShowAssistant(gf, sender, true);
                                }
                            }
                        }
                    }
                }
            }
        }

        private void compareActionResponse(String groupName, String menuSelection)
        {
            //GraphicFilter gf;
            ToolStripMenuItem sender = new ToolStripMenuItem();
            sender.Tag = groupName;

            Prompt.CompareChart cc = new Prompt.CompareChart(DonneesEnCours, treeView1, imageList1, sender);
            Graph = new Prompt.SIM_Assistant_Creation_Graphics_Filters(DonneesEnCours, treeView1.Nodes, cc.getGf(), imageList1);

            Thread thread = new Thread(new ThreadStart(() => handleCompareActionResponse(menuSelection, cc, Graph, sender)));
            thread.Start();

            /*
            if (menuSelection == "Chart")
            {
                //The user clicked on Compare -> Chart
                if (cc.ShowDialog() == DialogResult.OK)
                {
                    gf = cc.getGf();
                    Graph = cc.getSacgf();
                    MyShowAssistant(gf, sender, false);
                }
            }
            else if (menuSelection == "Whole Table")
            {
                //The user clicked on Compare -> Whole Table
                cc.setWholeChartMode();
                if (cc.ShowDialog() == DialogResult.OK)
                {
                    gf = cc.getGf();
                    Graph = cc.getSacgf();
                    MyShowAssistant(gf, sender, false);
                }
            }
            */
        }

        delegate void handleCompareCallback(String menuSelection, Prompt.CompareChart cc,
            Prompt.SIM_Assistant_Creation_Graphics_Filters Graph, ToolStripMenuItem sender);

        private void handleCompareActionResponse(String menuSelection, Prompt.CompareChart cc,
            Prompt.SIM_Assistant_Creation_Graphics_Filters Graph, ToolStripMenuItem sender)
        {
            if (treeView1.InvokeRequired)
            {
                handleCompareCallback c = new handleCompareCallback(handleCompareActionResponse);
                this.Invoke(c, new object[] { menuSelection, cc, Graph, sender });
            }
            else
            {
                try
                {
                    GraphicFilter gf;
                    if (menuSelection == "Chart")
                    {
                        //The user clicked on Compare -> Chart
                        if (cc.ShowDialog() == DialogResult.OK)
                        {
                            gf = cc.getGf();
                            Graph = cc.getSacgf();
                            MyShowAssistant(gf, sender, false);
                        }
                    }
                    else if (menuSelection == "Whole Table")
                    {
                        //The user clicked on Compare -> Whole Table
                        cc.setWholeChartMode();
                        if (cc.ShowDialog() == DialogResult.OK)
                        {
                            gf = cc.getGf();
                            Graph = cc.getSacgf();
                            MyShowAssistant(gf, sender, false);
                        }
                    }
                }
                catch (ThreadStateException ex)
                {
                    OverallTools.ExternFunctions.PrintLogFile("Thread exception: " + ex.Message);
                }
            }
        }

        /// <summary>
        /// Function that loads the Assistant that updates the Process Times table
        /// </summary>
        /// <param name="groupName"></param>
        private void editGroupParametersActionResponse(String groupName)
        {
            if (groupName == null || groupName == "")
                return;
            
            DataTable dtProcessTable = DonneesEnCours.getTable("Input", GlobalNames.Times_ProcessTableName);
            if (OverallTools.DataFunctions.indexLigne(dtProcessTable, 0, groupName) != -1)
            {/*
                DataTable dtOneOfTable = DonneesEnCours.getTable("Input", GlobalNames.OneofSpecificationTableName);
                Assistant.SubForms.Process_SubForm pa = new SIMCORE_TOOL.Assistant.SubForms.Process_SubForm(dtProcessTable, dtOneOfTable, groupName);

                DataTable dtGroupQueues = DonneesEnCours.getTable("Input", GlobalNames.Group_QueuesName);
                DataTable dtStationsQueues = DonneesEnCours.getTable("Input", GlobalNames.Capa_QueuesTableName);
                Assistant.SubForms.Capacity_SubForm.Node nContent = Assistant.SubForms.Capacity_SubForm.Node.GetTree(DonneesEnCours.getRacine(), dtGroupQueues, groupName);
                List<Form> lfForm = new List<Form>();
                lfForm.Add(pa);
                Assistant.SubForms.Capacity_SubForm csf_Capacity = null;
                if (nContent != null) {
                    csf_Capacity = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm(nContent, dtGroupQueues, dtStationsQueues, true);
                    lfForm.Add(csf_Capacity);
                }*/
                //Thread thread = new Thread(new ThreadStart(() => handleEditParametersAssistant(groupName, lfForm, csf_Capacity, pa)));                
                // << Task #8758 Pax2Sim - Editor for Groups: Sent the data to create all the objects needed in the new Thread
                Thread thread = new Thread(new ThreadStart(() => handleEditParametersAssistant(groupName, dtProcessTable)));                
                thread.Start();
                /*
                Assistant.Edit_Assistant ea = new Assistant.Edit_Assistant("Edit " + groupName, lfForm);
                if (ea.ShowDialog() == DialogResult.OK) {
                    if (csf_Capacity != null)
                        csf_Capacity.Save();
                    if (pa != null)
                        pa.saveChanges();
                }

                if (csf_Capacity != null)
                    csf_Capacity.Dispose();
                pa.Dispose();
                 */
            }

        }

        private void handleEditParametersAssistant(String groupName, DataTable dtProcessTable)
        {
            try
            {
                DataTable dtOneOfTable = DonneesEnCours.getTable("Input", GlobalNames.OneofSpecificationTableName);
                Assistant.SubForms.Process_SubForm pa = new SIMCORE_TOOL.Assistant.SubForms.Process_SubForm(dtProcessTable, dtOneOfTable, groupName);

                DataTable dtGroupQueues = DonneesEnCours.getTable("Input", GlobalNames.Group_QueuesName);
                DataTable dtStationsQueues = DonneesEnCours.getTable("Input", GlobalNames.Capa_QueuesTableName);
                // << Task #8759 Pax2Sim - Editor for Pax Process (Capacities) table
                DataTable dtStationsProcessCapacity = DonneesEnCours.getTable("Input", GlobalNames.capaProcessTableName);
                // >> Task #8759 Pax2Sim - Editor for Pax Process (Capacities) table
                Assistant.SubForms.Capacity_SubForm.Node nContent = Assistant.SubForms.Capacity_SubForm.Node.GetTree(DonneesEnCours.getRacine(), dtGroupQueues, groupName);
                List<Form> lfForm = new List<Form>();
                lfForm.Add(pa);
                Assistant.SubForms.Capacity_SubForm csf_Capacity = null;
                if (nContent != null)
                {
                    // << Task #8759 Pax2Sim - Editor for Pax Process (Capacities) table                    
                    csf_Capacity = new SIMCORE_TOOL.Assistant.SubForms.Capacity_SubForm(nContent, dtGroupQueues,
                        dtStationsQueues, true, dtStationsProcessCapacity);
                    // >> Task #8759 Pax2Sim - Editor for Pax Process (Capacities) table
                    lfForm.Add(csf_Capacity);
                }

                Assistant.Edit_Assistant ea = new Assistant.Edit_Assistant("Edit " + groupName, lfForm);
                
                if (ea.ShowDialog() == DialogResult.OK)
                {
                    if (csf_Capacity != null)
                        csf_Capacity.Save();
                    if (pa != null)
                        pa.saveChanges();
                }

                if (csf_Capacity != null)
                    csf_Capacity.Dispose();
                pa.Dispose();
            }
            catch (ThreadStateException ex)
            {
                OverallTools.ExternFunctions.PrintLogFile("Thread exception: " + ex.Message);
            }
        }

        private List<ItineraryConnection> getConnectionsFromDataReceived(XmlNodeList list)
        {
            List<ItineraryConnection> connections = new List<ItineraryConnection>();
            //The list contains all the connections from the Itinerary => we go through all the connections.
            for (int i = 0; i < list[0].ChildNodes[0].ChildNodes.Count; i++)
            {
                ItineraryConnection receivedItineraryConn = new ItineraryConnection();
                //get the connection as xml
                XmlNode xmlConnectionElement = list[0].ChildNodes[0].ChildNodes[i];
                //Warning: the number to check is the number of parameters for each Connection sent from Flex!!!
                if (xmlConnectionElement.ChildNodes[0].ChildNodes.Count == 8) 
                {
                    //get each attribute
                    receivedItineraryConn.sourceName = xmlConnectionElement.ChildNodes[0].ChildNodes[0].InnerText;
                    receivedItineraryConn.targetName = xmlConnectionElement.ChildNodes[0].ChildNodes[1].InnerText;
                    receivedItineraryConn.weight = xmlConnectionElement.ChildNodes[0].ChildNodes[2].InnerText;
                    receivedItineraryConn.distributionType = xmlConnectionElement.ChildNodes[0].ChildNodes[3].InnerText;
                    receivedItineraryConn.firstParam = xmlConnectionElement.ChildNodes[0].ChildNodes[4].InnerText;
                    receivedItineraryConn.secondParam = xmlConnectionElement.ChildNodes[0].ChildNodes[5].InnerText;
                    receivedItineraryConn.thirdParam = xmlConnectionElement.ChildNodes[0].ChildNodes[6].InnerText;
                    setBendingPointsForConnectionFromXMLElement(receivedItineraryConn, xmlConnectionElement.ChildNodes[0].ChildNodes[7]);
                    connections.Add(receivedItineraryConn);
                }
            }
            return connections;
        }

        /// <summary>
        /// The list is formed of as many x,y pairs as the number of bendpoints that are on the connection        
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="xmlBendingpointsElement"></param>
        private void setBendingPointsForConnectionFromXMLElement(ItineraryConnection connection, XmlNode xmlBendingpointsElement)
        {
            if (xmlBendingpointsElement.ChildNodes[0].ChildNodes.Count % 2 != 0)
                return;

            for (int i = 0; i < xmlBendingpointsElement.ChildNodes[0].ChildNodes.Count;)
            {
                if (i + 1 > xmlBendingpointsElement.ChildNodes[0].ChildNodes.Count - 1)
                    break;

                Bendpoint bendpoint = new Bendpoint();
                int x = 0;
                int y = 0;
                int.TryParse(xmlBendingpointsElement.ChildNodes[0].ChildNodes[i].InnerText, out x);
                bendpoint.x = x;
                int.TryParse(xmlBendingpointsElement.ChildNodes[0].ChildNodes[i + 1].InnerText, out y);
                bendpoint.y = y;
                bendpoint.connectionSourceName = connection.sourceName;
                bendpoint.connectionTargetName = connection.targetName;
                connection.bendpoints.Add(bendpoint);
                i = i + 2;
            }
        }

        private void updateItineraryConnectionsBendpointsTable(List<ItineraryConnection> itineraryConnectionsList)
        {
            String connectionsBendpointsFilePath = DonneesEnCours.getDossierEnregistrement() + "Data\\"
                + Model.itineraryConnectionsBendPointsTextFilePrefix + processFlowName + Model.itineraryConnectionsBendPointsFileExtention;

            System.IO.StreamWriter writer = new StreamWriter(connectionsBendpointsFilePath);
            foreach (ItineraryConnection connection in itineraryConnectionsList)
            {
                for (int i = 0; i < connection.bendpoints.Count; i++)
                {
                    Bendpoint bp = connection.bendpoints[i];
                    writer.WriteLine(bp.connectionSourceName + ";" + bp.connectionTargetName + ";" + bp.x + ";" + bp.y);
                }
            }
            writer.Close();
            writer.Dispose();
        }

        private void updateItineraryTable(List<ItineraryConnection> connections)
        {
            DataTable itineraryTable = DonneesEnCours.getTable("Input", processFlowName);
            //DataTable itineraryTable = DonneesEnCours.getTable("Input", GlobalNames.ItineraryTableName);

            itineraryTable.Rows.Clear();
            if (connections.Count != 0)
            {
                foreach (ItineraryConnection connection in connections)
                {
                    Double value = 0;
                    DataRow newRow = itineraryTable.NewRow();
                    newRow.BeginEdit();
                    newRow[0] = connection.sourceName;
                    newRow[1] = connection.targetName;                    
                    Double.TryParse(connection.weight, out value);
                    newRow[2] = value;
                    newRow[3] = connection.distributionType;
                    Double.TryParse(connection.firstParam, out value);
                    newRow[4] = value;
                    Double.TryParse(connection.secondParam, out value);
                    newRow[5] = value;
                    Double.TryParse(connection.thirdParam, out value);
                    newRow[6] = value;
                    try
                    {
                        itineraryTable.Rows.Add(newRow);
                    }
                    catch (Exception e)
                    {
                        OverallTools.ExternFunctions.PrintLogFile("Exception while trying to insert a new row in the Itinerary table: " + e.Message);
                        OverallTools.ExternFunctions.PrintLogFile("Insert Row exception's StackTrace: " + e.StackTrace);                        
                    }
                    itineraryTable.AcceptChanges();
                }
            }

        }

        private void loadAllObjectsAsXMLFromFilesForProcessFlow()
        {
            List<ItineraryData> itineraryGroupList = new List<ItineraryData>();
            List<ItineraryConnection> itineraryConnectionList = new List<ItineraryConnection>();

            String groupXml = "";
            String connectionXml = "";

            itineraryGroupList = getItineraryGroupsFromFile();
            groupXml = GanttServices.serializeItineraryObjectsForXml(itineraryGroupList);

            itineraryConnectionList = getItineraryConnectionsFromFile();
            connectionXml = GanttServices.serializeItineraryConnectionsForXml(itineraryConnectionList);


            String request = "<invoke name='readDataFromFiles' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + groupXml + "</string>"
                    + "<string>" + connectionXml + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml to the flash object: " + e.Message);
            }
        }

        private void refreshGroupDescriptions()
        {
            List<ItineraryData> itineraryGroupList = new List<ItineraryData>();
            Dictionary<String, String> groupsDescriptionsDictionary = ProcessFlowServices.getAllGroupDescriptions(this);
            String groupXml = "";

            foreach (KeyValuePair<String, String> pair in groupsDescriptionsDictionary)
            {
                ItineraryData group = new ItineraryData();
                group.name = pair.Key.ToString();
                group.description = pair.Value.ToString();
                itineraryGroupList.Add(group);
            }            
            groupXml = GanttServices.serializeItineraryObjectsForXml(itineraryGroupList);

            String request = "<invoke name='refreshGroupDescriptionsCallback' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + groupXml + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml to the flash object(refreshGroupDescriptionsCallback): " + e.Message);
            }
        }

        private void refreshGroupCapacities()
        {
            List<ItineraryData> itineraryGroupList = new List<ItineraryData>();
            Dictionary<String, String> groupsCapacitiesDictionary = ProcessFlowServices.getAllGroupsCapacities(this);
            String groupXml = "";

            foreach (KeyValuePair<String, String> pair in groupsCapacitiesDictionary)
            {
                ItineraryData group = new ItineraryData();
                group.name = pair.Key.ToString();
                group.capacity = pair.Value.ToString();
                itineraryGroupList.Add(group);
            }            
            groupXml = GanttServices.serializeItineraryObjectsForXml(itineraryGroupList);

            String request = "<invoke name='refreshGroupCapacitiesCallback' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + groupXml + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml to the flash object(refreshGroupCapacitiesCallback): " + e.Message);
            }
        }


        private void refreshGroupProcessTimes()
        {
            List<ItineraryData> itineraryGroupList = new List<ItineraryData>();
            Dictionary<String, String> groupsProcessTimesDictionary = ProcessFlowServices.getAllGroupsPaxProcessTimes(this);
            String groupXml = "";

            foreach (KeyValuePair<String, String> pair in groupsProcessTimesDictionary)
            {
                ItineraryData group = new ItineraryData();
                group.name = pair.Key.ToString();
                group.paxProcessTimes = pair.Value.ToString();
                itineraryGroupList.Add(group);
            }            
            groupXml = GanttServices.serializeItineraryObjectsForXml(itineraryGroupList);

            String request = "<invoke name='refreshGroupProcessTimesCallback' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + groupXml + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml to the flash object(refreshGroupProcessTimesCallback): " + e.Message);
            }
        }

        private void refreshGroupBaggProcessTimes()
        {
            List<ItineraryData> itineraryGroupList = new List<ItineraryData>();
            Dictionary<String, String> groupsProcessTimesDictionary = ProcessFlowServices.getAllGroupsBaggProcessTimes(this);
            String groupXml = "";

            foreach (KeyValuePair<String, String> pair in groupsProcessTimesDictionary)
            {
                ItineraryData group = new ItineraryData();
                group.name = pair.Key.ToString();
                group.paxProcessTimes = pair.Value.ToString();
                itineraryGroupList.Add(group);
            }
            groupXml = GanttServices.serializeItineraryObjectsForXml(itineraryGroupList);

            String request = "<invoke name='refreshGroupBaggProcessTimesCallback' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + groupXml + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml to the flash object(refreshGroupBaggProcessTimesCallback): " + e.Message);
            }
        }

        // << Task #8789 Pax2Sim - ProcessFlow - update Group details        
        private void refreshGroupDelayTimeDistribution()
        {
            List<ItineraryData> itineraryGroupList = new List<ItineraryData>();
            Dictionary<String, String> groupsDelayTimeDistributionDictionary = ProcessFlowServices
                .getAllGroupsDelayTimeDistributions(this);
            String groupXml = "";

            foreach (KeyValuePair<String,String> pair in groupsDelayTimeDistributionDictionary)
            {
                ItineraryData group = new ItineraryData();
                group.name = pair.Key.ToString();
                group.delayTimeDistribution = pair.Value.ToString();
                itineraryGroupList.Add(group);
            }
            groupXml = GanttServices.serializeItineraryObjectsForXml(itineraryGroupList);

            String request = "<invoke name='refreshDelayTimeDistributionCallback' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + groupXml + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                String errorMessage = "Exception caught while sending " +
                    "the xml to the flash object(refreshDelayTimeDistributionCallback): " + e.Message;
                OverallTools.ExternFunctions.PrintLogFile(errorMessage);
            }
        }
        // >> Task #8789 Pax2Sim - ProcessFlow - update Group details

        private List<ItineraryData> getItineraryGroupsFromDataReceived(XmlNodeList list)
        {
            List<ItineraryData> groups = new List<ItineraryData>();
            //The list contains all the connections from the Itinerary => we go through all the connections.
            for (int i = 0; i < list[0].ChildNodes[0].ChildNodes.Count; i++)
            {
                ItineraryData receivedItineraryGroup = new ItineraryData();
                //get the connection as xml
                XmlNode xmlGroupElement = list[0].ChildNodes[0].ChildNodes[i];
                //Warning: the number to check is the number of parameters for each Group sent from Flex!!!
                if (xmlGroupElement.ChildNodes[0].ChildNodes.Count == 17)   // << Task #8789 Pax2Sim - ProcessFlow - update Group details  
                {
                    int value = 0;
                    //get each attribute
                    receivedItineraryGroup.name = xmlGroupElement.ChildNodes[0].ChildNodes[0].InnerText;
                    receivedItineraryGroup.description = xmlGroupElement.ChildNodes[0].ChildNodes[1].InnerText;
                    receivedItineraryGroup.itineraryDataType = xmlGroupElement.ChildNodes[0].ChildNodes[2].InnerText;
                    int.TryParse(xmlGroupElement.ChildNodes[0].ChildNodes[3].InnerText, out value);
                    receivedItineraryGroup.x = value;
                    int.TryParse(xmlGroupElement.ChildNodes[0].ChildNodes[4].InnerText, out value);
                    receivedItineraryGroup.y = value;
                    int.TryParse(xmlGroupElement.ChildNodes[0].ChildNodes[5].InnerText, out value);
                    receivedItineraryGroup.width = value;
                    int.TryParse(xmlGroupElement.ChildNodes[0].ChildNodes[6].InnerText, out value);
                    receivedItineraryGroup.height = value;
                    receivedItineraryGroup.paxProcessTimes = xmlGroupElement.ChildNodes[0].ChildNodes[7].InnerText;
                    receivedItineraryGroup.bagProcessTimes = xmlGroupElement.ChildNodes[0].ChildNodes[8].InnerText;
                    receivedItineraryGroup.capacity = xmlGroupElement.ChildNodes[0].ChildNodes[9].InnerText;
                    //for Background Groups - background color data // for Groups - fake data
                    receivedItineraryGroup.firstGradientColor = xmlGroupElement.ChildNodes[0].ChildNodes[10].InnerText;
                    receivedItineraryGroup.firstGradientAlpha = xmlGroupElement.ChildNodes[0].ChildNodes[11].InnerText;
                    receivedItineraryGroup.secondGradientColor = xmlGroupElement.ChildNodes[0].ChildNodes[12].InnerText;
                    receivedItineraryGroup.secondGradientAlpha = xmlGroupElement.ChildNodes[0].ChildNodes[13].InnerText;
                    receivedItineraryGroup.borderColor = xmlGroupElement.ChildNodes[0].ChildNodes[14].InnerText;
                    receivedItineraryGroup.gradientAngle = xmlGroupElement.ChildNodes[0].ChildNodes[15].InnerText;
                    // << Task #8789 Pax2Sim - ProcessFlow - update Group details
                    receivedItineraryGroup.delayTimeDistribution = xmlGroupElement.ChildNodes[0].ChildNodes[16].InnerText;
                    // >> Task #8789 Pax2Sim - ProcessFlow - update Group details
                    groups.Add(receivedItineraryGroup);
                }                
            }
            return groups;
        }

        private void updateItineraryGroupsTable(List<ItineraryData> itineraryGroupList)
        {
            // << Bug #8210 Pax2Sim - ProcessFlow - save issue
            if (DonneesEnCours.getDossierEnregistrement() == "\\")
                return;
            // >> Bug #8210 Pax2Sim - ProcessFlow - save issue

            String groupsFilePath = DonneesEnCours.getDossierEnregistrement() + "Data\\"
                                      + Model.itineraryGroupsTextFilePrefix + processFlowName + Model.itineraryGroupsTextFileExtention;
            //String groupsFilePath = DonneesEnCours.getDossierEnregistrement() + "Data\\ItineraryGroups.txt";    // C:\Users\NormalUser\Desktop\Athens Optimisation_Demo_test\
            System.IO.StreamWriter writer = new StreamWriter(groupsFilePath);
            foreach (ItineraryData group in itineraryGroupList)
            {
                writer.WriteLine(group.name + ";" + group.description + ";" + group.itineraryDataType 
                    + ";" + group.x + ";" + group.y + ";" + group.width + ";" + group.height + ";" + group.paxProcessTimes
                    + ";" + group.bagProcessTimes + ";" + group.capacity + ";" + group.firstGradientColor  + ";" + group.firstGradientAlpha
                     + ";" + group.secondGradientColor  + ";" + group.secondGradientAlpha  + ";" + group.borderColor
                     + ";" + group.gradientAngle + ";" + group.delayTimeDistribution);  // << Task #8789 Pax2Sim - ProcessFlow - update Group details
            }
            writer.Close();
            writer.Dispose();
        }

        private List<ItineraryConnection> getItineraryConnectionsFromFile()
        {
            List<ItineraryConnection> connections = new List<ItineraryConnection>();
            ItineraryConnection connection;

            //DataTable paxItinerary = DonneesEnCours.getTable("Input", GlobalNames.ItineraryTableName);
            DataTable paxItinerary = DonneesEnCours.getTable("Input", processFlowName);

            if (paxItinerary == null)
                return connections;

            #region Pax Itinerary Column Indexes
            int indexSourceNameColumn = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Group);
            int indexTargetNameColumn = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_NextGroup);
            int indexWeightColumn = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Weight);
            int indexDistributionColumn = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Distribution);
            int indexParam1Column = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Param1);
            int indexParam2Column = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Param2);
            int indexParam3Column = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Param3);
            #endregion

            if (paxItinerary != null && paxItinerary.Rows.Count > 0
                && indexSourceNameColumn != -1 && indexTargetNameColumn != -1)
            {
                foreach (DataRow dr in paxItinerary.Rows)
                {
                    connection = new ItineraryConnection();                    
                    connection.sourceName = dr[indexSourceNameColumn].ToString();                    
                    connection.targetName = dr[indexTargetNameColumn].ToString();
                    if (indexWeightColumn != -1)
                        connection.weight = dr[indexWeightColumn].ToString();
                    if (indexDistributionColumn != -1)
                        connection.distributionType = dr[indexDistributionColumn].ToString();
                    if (indexParam1Column != -1)
                        connection.firstParam = dr[indexParam1Column].ToString();
                    if (indexParam2Column != -1)
                        connection.secondParam = dr[indexParam2Column].ToString();
                    if (indexParam3Column != -1)
                        connection.thirdParam = dr[indexParam3Column].ToString();
                    connections.Add(connection);
                }
            }
            //add the bendpoints to their coresponding connections
            getBendpointsFromFileForConnections(connections);
            return connections;
        }

        private void getBendpointsFromFileForConnections(List<ItineraryConnection> connections)
        {
            Bendpoint bendpointFromFile = new Bendpoint();
            if (calledForANewEmptyProject)
                return;

            String bendpointsFilePath = DonneesEnCours.getDossierEnregistrement() + "Data\\"
                + Model.itineraryConnectionsBendPointsTextFilePrefix + processFlowName + Model.itineraryConnectionsBendPointsFileExtention;

            if (File.Exists(bendpointsFilePath))
            {
                System.IO.StreamReader reader = new StreamReader(bendpointsFilePath);
                String bendpointInfoLine = "";
                while ((bendpointInfoLine = reader.ReadLine()) != null)
                {
                    bendpointFromFile = getBendpointFromString(bendpointInfoLine);
                    if (bendpointFromFile != null)
                    {
                        foreach (ItineraryConnection connection in connections)
                        {
                            if (connection.sourceName == bendpointFromFile.connectionSourceName
                                && connection.targetName == bendpointFromFile.connectionTargetName)
                            {
                                connection.bendpoints.Add(bendpointFromFile);
                                break;
                            }
                        }
                    }
                }
                reader.Close();
                reader.Dispose();
            }
        }

        private Bendpoint getBendpointFromString(String bendpointInfoLine)
        {
            Bendpoint bendpoint = new Bendpoint();
            int x = 0;
            int y = 0;

            if (bendpointInfoLine == "")
                return null;

            string[] result = bendpointInfoLine.Split(';');
            //the line should have this pattern: connectionSourceName;connectionTargetName;x;y            
            if (result.Length == 4)
            {
                bendpoint.connectionSourceName = result[0];
                bendpoint.connectionTargetName = result[1];
                int.TryParse(result[2], out x);
                bendpoint.x = x;
                int.TryParse(result[3], out y);
                bendpoint.y = y;
            }
            return bendpoint;
        }

        private List<ItineraryData> getItineraryGroupsFromFile()
        {
            List<ItineraryData> groups = new List<ItineraryData>();
            ItineraryData group = new ItineraryData();
            
            //If the user creates an empty project => this function returns an empty Groups list
            if (calledForANewEmptyProject)
            {
                calledForANewEmptyProject = false;
                return groups;
            }

            if (saveToDisk)
            {
                if (DonneesEnCours.getDossierEnregistrement() != "\\")  // << Bug #8210 Pax2Sim - ProcessFlow - save issue
                {
                    // Key: Group Name / Value: Group -> Will hold all the groups () from the itinerary
                    Dictionary<String, ItineraryData> allGroupsDictionary = new Dictionary<string, ItineraryData>();
                    List<ItineraryData> groupsFromItineraryDataTable = new List<ItineraryData>();

                    String groupsFilePath = DonneesEnCours.getDossierEnregistrement() + "Data\\"
                                          + Model.itineraryGroupsTextFilePrefix + processFlowName + Model.itineraryGroupsTextFileExtention;
                    //String groupsFilePath = DonneesEnCours.getDossierEnregistrement() + "Data\\ItineraryGroups.txt";

                    //Store all the Groups from the new itineraryGroups text file into the dictionary
                    if (File.Exists(groupsFilePath))
                    {
                        FileInfo groupFileInfo = new FileInfo(groupsFilePath);
                        if (groupFileInfo.Length > 0)
                        {
                            System.IO.StreamReader reader = new StreamReader(groupsFilePath);
                            String groupInfoLine = "";
                            while ((groupInfoLine = reader.ReadLine()) != null)
                            {
                                group = getItineraryGroupFromString(groupInfoLine);
                                if (group != null && !allGroupsDictionary.ContainsKey(group.name))
                                    allGroupsDictionary.Add(group.name, group);
                            }
                            reader.Close();
                            reader.Dispose();
                        }
                    }
                    //get all the groups from the Itinerary table. If a group isn't in the dictionary add it.
                    groupsFromItineraryDataTable = getGroupsFromItineraryDataTable();
                    foreach (ItineraryData g in groupsFromItineraryDataTable)
                    {
                        if (!allGroupsDictionary.ContainsKey(g.name))
                            allGroupsDictionary.Add(g.name, g);
                    }
                    //add all the Groups from the dictionary in the list that will be returned
                    foreach (KeyValuePair<String, ItineraryData> pair in allGroupsDictionary)
                        groups.Add(pair.Value);
                }
            }
            else
            {                
                List<ItineraryData> globalItineraryDataList = new List<ItineraryData>();    // holds the Groups from the Global Dictionary
                globalItineraryDataListDictionary.TryGetValue(processFlowName, out globalItineraryDataList);

                // Key: Group Name / Value: Group -> Will hold all the groups () that must be added on the Process Flow
                Dictionary<String, ItineraryData> allGroupsToBeAddedDictionary = new Dictionary<string, ItineraryData>();
                if (globalItineraryDataList != null)
                {
                    for (int i = 0; i < globalItineraryDataList.Count; i++)
                    {
                        if (!allGroupsToBeAddedDictionary.ContainsKey(globalItineraryDataList[i].name))
                            allGroupsToBeAddedDictionary.Add(globalItineraryDataList[i].name, globalItineraryDataList[i]);
                    }
                }

                //get all the groups from the Itinerary table or Itinerary table's filters. If a group isn't in the dictionary add it.
                List<ItineraryData> groupsFromItineraryDataTable = getGroupsFromItineraryDataTable();//holds the Groups from the data table
                foreach (ItineraryData g in groupsFromItineraryDataTable)
                {
                    if (!allGroupsToBeAddedDictionary.ContainsKey(g.name))
                        allGroupsToBeAddedDictionary.Add(g.name, g);
                }
                //add all the Groups from the dictionary in the list that will be returned
                foreach (KeyValuePair<String, ItineraryData> pair in allGroupsToBeAddedDictionary)
                    groups.Add(pair.Value);
            }
            return groups;
        }

        private ItineraryData getItineraryGroupFromString(String groupInfoLine)
        {            
            ItineraryData group = new ItineraryData();
            if (groupInfoLine == "")
                return null;
            string[] result = groupInfoLine.Split(';');
            //Warning: the number to check is the number of parameters for each Group sent from Flex!!! 
            //-> to be added as constant in MODEL
            //if (result.Length != 15)
                //return null;
            int value = 0;
            if (result.Length == 10)    // previous version where we had only 10 params
            {
                group.name = result[0];
                group.description = result[1];
                group.itineraryDataType = result[2];
                int.TryParse(result[3], out value);
                group.x = value;
                int.TryParse(result[4], out value);
                group.y = value;
                int.TryParse(result[5], out value);
                group.width = value;
                int.TryParse(result[6], out value);
                group.height = value;
                group.paxProcessTimes = result[7];
                group.bagProcessTimes = result[8];
                group.capacity = result[9];
            }
            else if (result.Length == 15)   // previous version had 15 params
            {
                group.name = result[0];
                group.description = result[1];
                group.itineraryDataType = result[2];
                int.TryParse(result[3], out value);
                group.x = value;
                int.TryParse(result[4], out value);
                group.y = value;
                int.TryParse(result[5], out value);
                group.width = value;
                int.TryParse(result[6], out value);
                group.height = value;
                group.paxProcessTimes = result[7];
                group.bagProcessTimes = result[8];
                group.capacity = result[9];
                //Background Groups - background color data // Groups - fake data
                group.firstGradientColor = result[10];
                group.firstGradientAlpha = result[11];
                group.secondGradientColor = result[12];
                group.secondGradientAlpha = result[13];
                group.borderColor = result[14];
            }
            else if (result.Length == 16)   // added gradientAngle
            {
                group.name = result[0];
                group.description = result[1];
                group.itineraryDataType = result[2];
                int.TryParse(result[3], out value);
                group.x = value;
                int.TryParse(result[4], out value);
                group.y = value;
                int.TryParse(result[5], out value);
                group.width = value;
                int.TryParse(result[6], out value);
                group.height = value;
                group.paxProcessTimes = result[7];
                group.bagProcessTimes = result[8];
                group.capacity = result[9];
                //Background Groups - background color data // Groups - fake data
                group.firstGradientColor = result[10];
                group.firstGradientAlpha = result[11];
                group.secondGradientColor = result[12];
                group.secondGradientAlpha = result[13];
                group.borderColor = result[14];
                group.gradientAngle = result[15];
            }
            else if (result.Length == 17)   // << Task #8789 Pax2Sim - ProcessFlow - update Group details
            {
                group.name = result[0];
                group.description = result[1];
                group.itineraryDataType = result[2];
                int.TryParse(result[3], out value);
                group.x = value;
                int.TryParse(result[4], out value);
                group.y = value;
                int.TryParse(result[5], out value);
                group.width = value;
                int.TryParse(result[6], out value);
                group.height = value;
                group.paxProcessTimes = result[7];
                group.bagProcessTimes = result[8];
                group.capacity = result[9];
                //Background Groups - background color data // Groups - fake data
                group.firstGradientColor = result[10];
                group.firstGradientAlpha = result[11];
                group.secondGradientColor = result[12];
                group.secondGradientAlpha = result[13];
                group.borderColor = result[14];
                group.gradientAngle = result[15];
                group.delayTimeDistribution = result[16];
            }                               // >> Task #8789 Pax2Sim - ProcessFlow - update Group details
            return group;            
        }

        private List<ItineraryData> getGroupsFromItineraryDataTable()
        {
            List<ItineraryData> groupsFromItineraryDataTable = new List<ItineraryData>();
            Dictionary<String, ItineraryData> groupsFromItineraryDataTableDictionary = new Dictionary<string, ItineraryData>();
            DataTable paxItinerary = DonneesEnCours.getTable("Input", processFlowName);

            if (paxItinerary == null)
                return groupsFromItineraryDataTable;

            #region Pax Itinerary Column Indexes
            int indexSourceNameColumn = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Group);
            int indexTargetNameColumn = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_NextGroup);
            int indexWeightColumn = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Weight);
            int indexDistributionColumn = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Distribution);
            int indexParam1Column = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Param1);
            int indexParam2Column = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Param2);
            int indexParam3Column = paxItinerary.Columns.IndexOf(GlobalNames.sItineraryTable_Param3);
            #endregion

            if (paxItinerary != null && paxItinerary.Rows.Count > 0
                && indexSourceNameColumn != -1 && indexTargetNameColumn != -1)
            {
                foreach (DataRow dr in paxItinerary.Rows)
                {
                    String sourceGroupName = dr[indexSourceNameColumn].ToString();
                    String targetGroupName = dr[indexTargetNameColumn].ToString();

                    if (!groupsFromItineraryDataTableDictionary.ContainsKey(sourceGroupName))
                    {
                        ItineraryData sourceGroup = createDefaultGroupWithGivenName(sourceGroupName);
                        groupsFromItineraryDataTableDictionary.Add(sourceGroup.name, sourceGroup);
                    }
                    if (!groupsFromItineraryDataTableDictionary.ContainsKey(targetGroupName))
                    {
                        ItineraryData targetGroup = createDefaultGroupWithGivenName(targetGroupName);
                        groupsFromItineraryDataTableDictionary.Add(targetGroup.name, targetGroup);
                    }
                }
            }
            foreach (KeyValuePair<String, ItineraryData> pair in groupsFromItineraryDataTableDictionary)
                groupsFromItineraryDataTable.Add(pair.Value);

            return groupsFromItineraryDataTable;
        }
        
        /// <summary>
        /// Creates a Group object for each distinct group name found in the Itinerary table.
        /// Theese groups only needs the name, itinerary data type, location and dimension.
        /// </summary>
        /// <param name="groupName"></param>
        /// <returns></returns>
        private ItineraryData createDefaultGroupWithGivenName(String groupName)
        {
            ItineraryData group = new ItineraryData();
            group.name = groupName;
            group.description = "";
            group.itineraryDataType = Model.GROUP_OBJECT_TYPE;
            
            //group.x = Model.INITIAL_X_AXIS_VALUE;            
            //group.y = Model.INITIAL_Y_AXIS_VALUE;            
            setGroupPositionFromOldItinerary(group);
            group.width = Model.STANDARD_WIDTH;           
            group.height = Model.STANDARD_HEIGHT;

            group.paxProcessTimes = "";
            group.bagProcessTimes = "";
            group.capacity = "";
            //Background Groups - background color data // Groups - fake data
            group.firstGradientColor = "";
            group.firstGradientAlpha = "";
            group.secondGradientColor = "";
            group.secondGradientAlpha = "";
            group.borderColor = "";
            return group;
        }

        /// <summary>
        /// For the Groups that are not in the new .txt itineraryGroups file and are 
        /// involved in the links found in the itinerary table we search their location on 
        /// the old Itinerary. This can be found in the Airport structure.
        /// </summary>
        /// <param name="group"></param>
        private void setGroupPositionFromOldItinerary(ItineraryData group)
        {            
            TreeNode node = OverallTools.TreeViewFunctions.getAirportChild(treeView1.Nodes[0], group.name);
            if (node != null)
            {
                TreeViewTag tag = (TreeViewTag)node.Tag;
                if (tag != null && tag.Location != null && tag.Visible)
                {
                    group.x = tag.Location.X;
                    group.y = tag.Location.Y;
                }
                else
                {
                    group.x = Model.INITIAL_X_AXIS_VALUE;            
                    group.y = Model.INITIAL_Y_AXIS_VALUE;
                }
            }
        }

        private void saveAllChangesCaller()
        {
            if (MessageBox.Show("The process flow diagram has been modified. Do you want to save the changes ?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                String request = "<invoke name='saveAllChanges' returntype='xml'>"
                        + "<arguments>"
                        + "</arguments>"
                        + "</invoke>";
                try
                {
                    shockwaveFlashForItinerary.CallFunction(request);
                    itineraryWasModified = false;
                }
                catch (Exception e)
                {
                    OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                        "the save changes call to the flash object: " + e.Message);
                }
            }
            else
            {
                saveToDisk = saveToDiskPreviousState;
                //Disable process flow areas that are not supposed to be used in the non-modify mode.
                String request = "<invoke name='setProcessFlowAreasForNonModifyMode' returntype='xml'>"
                        + "<arguments>"
                        + "</arguments>"
                        + "</invoke>";
                try
                {
                    shockwaveFlashForItinerary.CallFunction(request);
                }
                catch (Exception e)
                {
                    OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                        "the setProcessFlowAreasForNonModifyMode call to the flash object: " + e.Message);
                }
            }
            //If the user doesn't want to save the changes the flag is disabled so that 
            //it will not raise the question everytime the user changes tabs
            itineraryWasModified = false;
            //set the Process Flow modification mode to false(because the PF is saved)
            if (!modifyProcessFlowModeDictionary.ContainsKey(processFlowName))
                modifyProcessFlowModeDictionary.Add(processFlowName, false);
            else
            {
                modifyProcessFlowModeDictionary.Remove(processFlowName);
                modifyProcessFlowModeDictionary.Add(processFlowName, false);
            }
        }

        private void calculateDistributionParameters(Double distanceValue)
        {
            String distributionType = "Constant";
            if (OverallTools.FonctionUtiles.Tolerance != 0)
            {
                distributionType = "Uniform";
            }
            Double firstParamValue = OverallTools.FonctionUtiles.ConvertToTime(distanceValue);
            Double tolerance = OverallTools.FonctionUtiles.Tolerance;

            String request = "<invoke name='setDistributionParameters' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + distributionType + "</string>"
                    + "<number>" + firstParamValue + "</number>"
                    + "<number>" + tolerance + "</number>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml to call setDistributionParameters from the flash object: " + e.Message);
            }

        }

        private String getProbabilityProfiles()
        {
            String probabilityProfiles = "";
            String addNewDistribution = "Add new...";
            DataTable oneOfDistributionTable = DonneesEnCours.getTable("Input", GlobalNames.OneofSpecificationTableName);

            if (oneOfDistributionTable != null)
            {                
                foreach (DataColumn name in oneOfDistributionTable.Columns)
                {
                    if (name.ColumnName.LastIndexOf("Value") == (name.ColumnName.Length - 5))
                        continue;
                    if (name.ColumnName.LastIndexOf("Frequency") == -1)
                        continue;
                    String distributionName = name.ColumnName.Substring(0, name.ColumnName.LastIndexOf("Frequency") - 1);
                    probabilityProfiles = probabilityProfiles + distributionName + ";";
                }
                probabilityProfiles = probabilityProfiles + addNewDistribution;
            }
            return probabilityProfiles;
        }

        private void sendProbabilityProfilesToFlex(String probabilityProfiles)
        {
            String request = "<invoke name='returnProbabilityProfiles' returntype='xml'>"
                     + "<arguments>"
                     + "<string>" + probabilityProfiles + "</string>"
                     + "</arguments>"
                     + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml to call returnProbabilityProfiles from the flash object: " + e.Message);
            } 
        }

        private void addNewProbabilityProfile()
        {
            DataTable oneOfDistributionTable = DonneesEnCours.getTable("Input", GlobalNames.OneofSpecificationTableName);
            Oneof_Assistant assistant = new Oneof_Assistant(oneOfDistributionTable);
            String result = "";
            if (assistant.ShowDialog() == DialogResult.OK)
            {
                result = assistant.SelectedDistribution;
            }
            String request = "<invoke name='addNewProbabilityProfileCallback' returntype='xml'>"
                     + "<arguments>"
                     + "<string>" + result + "</string>"
                     + "</arguments>"
                     + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml to call addNewProbabilityProfile from the flash object: " + e.Message);
            } 
        }

        private void viewAllocationTable(String groupName)
        {
            String tableName = "";
            if (groupName.IndexOf(Model.ARRIVAL_GATE_GROUP_NAME) != -1)
                tableName = GlobalNames.OCT_ArrivalGateTableName;
            else if (groupName.IndexOf(Model.BOARDING_GATE_GROUP_NAME) != -1)
                tableName = GlobalNames.Alloc_BoardGateTableName;
            else if (groupName.IndexOf(Model.CHECK_IN_GROUP_NAME) != -1)
                tableName = GlobalNames.Alloc_CITableName;
            else if (groupName.IndexOf(Model.BAGGAGE_CLAIM_GROUP_NAME) != -1)
                tableName = GlobalNames.Alloc_BaggageClaimTableName;
            if (tableName != "")
            {
                TreeNode tnGroupNode = OverallTools.TreeViewFunctions.RechercherNom(tableName, treeView1.Nodes[1].Nodes["Allocation & Planning"]);
                if (tnGroupNode == null)
                    return;
                treeView1.CollapseAll();
                SelectNode(null);
                SelectNode(tnGroupNode);
                if (CurrentNode != null)
                    CurrentNode.Expand();
                tabControl.SelectedTab = tabGantt;
                //tabControl.SelectedIndex = 5;
                if (TreeRightClick)
                    TreeRightClick = false;
            }
        }

        private void viewPlanningTable(String groupName)
        {
            String tableName = "";
            if (groupName.IndexOf(Model.PASSPORT_CHECK_GROUP_NAME) != -1)
                tableName = GlobalNames.Alloc_PassportCheckTableName;
            else if (groupName.IndexOf(Model.SECURITY_CHECK_GROUP_NAME) != -1)
                tableName = GlobalNames.Alloc_SecurityCheckTableName;
            else if (groupName.IndexOf(Model.TRANSFER_GROUP_NAME) != -1)
                tableName = GlobalNames.Alloc_TransferDeskTableName;
            else if (groupName.IndexOf(Model.USER_PROCESS_GROUP_NAME) != -1)
                tableName = GlobalNames.Alloc_UserProcessCheckTableName;
            if (tableName != "")
            {
                TreeNode tnGroupNode = OverallTools.TreeViewFunctions.RechercherNom(tableName, treeView1.Nodes[1].Nodes["Allocation & Planning"]);
                if (tnGroupNode == null)
                    return;
                treeView1.CollapseAll();
                SelectNode(null);
                SelectNode(tnGroupNode);
                if (CurrentNode != null)
                    CurrentNode.Expand();                
                tabControl.SelectedIndex = 0;
                if (TreeRightClick)
                    TreeRightClick = false;
            }
        }

        private void saveBackgroundImage(String imageDataText)
        {
            //this variable holds the path where is stored the file created to hold the image
            String tempFilePath = "";
            //decode the encoded string from flex
            byte[] bytes = Convert.FromBase64String(imageDataText);
            // save the image and retrieve the path
            saveImageToDisk(bytes, out tempFilePath);            
        }

        /// <summary>
        /// given the image data as an array of bytes, a partial file name and the file extention
        /// the function saves the image in the temporary PAx2Sim directory and returns the saved file path
        /// </summary> 
        private void saveImageToDisk(byte[] byteArrayIn, out String tempFilePath)
        {
            System.Drawing.Image newImage;
            String pathWithFileName = "";
            String filePath = "";

            if (byteArrayIn != null && Model.IMAGE_TYPE_PNG_EXTENTION != "")
            {
                filePath = DonneesEnCours.getDossierEnregistrement() + "Data\\" + Model.BACKGROUND_IMAGE_DIRECTORY_NAME;
                DirectoryInfo di = null;
                if (!Directory.Exists(filePath))
                {
                    try
                    {
                        di = Directory.CreateDirectory(filePath);
                    }
                    catch (Exception ex)
                    {
                        if (ex is System.IO.IOException || ex is System.UnauthorizedAccessException
                            || ex is System.ArgumentException || ex is System.ArgumentNullException
                            || ex is System.IO.PathTooLongException || ex is System.IO.DirectoryNotFoundException
                            || ex is System.NotSupportedException)
                        {
                            MessageBox.Show("ErrG006 : a problem appears while saving the Background Image : Unable to create the directory BackgroundImage \t\r" + ex.Message);
                            tempFilePath = "";
                            return;
                        }
                    }
                    di.Attributes = FileAttributes.Directory | FileAttributes.Hidden;
                }

                pathWithFileName = filePath + "\\" + Model.BACKGROUND_IMAGE_FILE_NAME + "_" + processFlowName + Model.IMAGE_TYPE_PNG_EXTENTION;
                //pathWithFileName = filePath + "\\" + Model.BACKGROUND_IMAGE_FILE_NAME + Model.IMAGE_TYPE_PNG_EXTENTION;

                using (MemoryStream stream = new MemoryStream(byteArrayIn))
                {
                    try
                    {
                        newImage = System.Drawing.Image.FromStream(stream);
                    }
                    catch (System.ArgumentException ex)
                    {
                        MessageBox.Show("ErrG007 : a problem appears while saving Background Image : Unable to create the Background image \t\r" + ex.Message);
                        tempFilePath = "";
                        return;
                    }
                    try
                    {
                        newImage.Save(pathWithFileName);
                    }
                    catch (Exception ex)
                    {
                        if (ex is System.ArgumentNullException || ex is System.Runtime.InteropServices.ExternalException)
                            MessageBox.Show("ErrG008 : a problem appears while saving Background Image: Unable to save the Background image \t\r" + ex.Message);
                        tempFilePath = "";
                        return;
                    }
                }
                tempFilePath = pathWithFileName;
            }
            else
            {
                tempFilePath = "";
                MessageBox.Show("No image data found or image extension is incorrect!");
            }
        }

        private void loadBackgroundImage()
        {
            String backgroundFilePath = DonneesEnCours.getDossierEnregistrement() + "Data\\"
                                            + Model.BACKGROUND_IMAGE_DIRECTORY_NAME + "\\"
                                            + Model.BACKGROUND_IMAGE_FILE_NAME + "_" + processFlowName + Model.IMAGE_TYPE_PNG_EXTENTION;
            /*           
            String backgroundFilePath = DonneesEnCours.getDossierEnregistrement() + "Data\\"
                                        + Model.BACKGROUND_IMAGE_DIRECTORY_NAME + "\\"
                                        + Model.BACKGROUND_IMAGE_FILE_NAME + Model.IMAGE_TYPE_PNG_EXTENTION;*/

            if (!File.Exists(backgroundFilePath))
                backgroundFilePath = "";

            String request = "<invoke name='loadBackgroundImage' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + backgroundFilePath + "</string>"
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml (loadBackgroundImage) to the flash object: " + e.Message);
            }
        }

        private void deleteBackgroundFileFromProject()
        {
            String filePath = DonneesEnCours.getDossierEnregistrement() + "Data\\" + Model.BACKGROUND_IMAGE_DIRECTORY_NAME
                    + "\\" + Model.BACKGROUND_IMAGE_FILE_NAME + "_" + processFlowName + Model.IMAGE_TYPE_PNG_EXTENTION;
            //String filePath = DonneesEnCours.getDossierEnregistrement() + "Data\\" + Model.BACKGROUND_IMAGE_DIRECTORY_NAME
            //    + "\\" + Model.BACKGROUND_IMAGE_FILE_NAME + Model.IMAGE_TYPE_PNG_EXTENTION;
            try
            {
                FileInfo file = new FileInfo(filePath);
                if (file.Exists)
                    File.Delete(filePath);
                else
                    throw new FileNotFoundException();
            }
            catch (FileNotFoundException ex)
            {
                OverallTools.ExternFunctions.PrintLogFile("The Background.png file was not found at " + filePath + " ." + ex.Message);
            }
            catch (Exception ex)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception while deleting the Background.png file. " + ex.Message);
            }

        }

        private void updateObjectDescriptionInTreeView(String objectName, String objectDescription)
        {  
            // obtain the dictionary with all the objects(as treeNodes) from the Airport tree
            Dictionary<String, TreeNode> testDict = ProcessFlowServices.getAirportNodesDictionary(treeView1, this);
            // obtain the object that must be modified from the dictionary
            TreeNode nodeToModify = null;
            testDict.TryGetValue(objectName, out nodeToModify);
            TreeViewTag tvtNodeToModify = null;
            if (nodeToModify != null)
                tvtNodeToModify = (TreeViewTag)nodeToModify.Tag;
            if (tvtNodeToModify != null)
            {
                // change the object's description
                tvtNodeToModify.Name = objectDescription;
                nodeToModify.Tag = tvtNodeToModify;
                nodeToModify.Text = tvtNodeToModify.ToString();
                DonneesEnCours.MAJ_TablesSuivantStructureAeroport(treeView1.Nodes[0]);
            }            
        }

        private List<ItineraryData> getItineraryGroupsWithDistributionsFromDataReceived(XmlNodeList list)
        {
            List<ItineraryData> groups = new List<ItineraryData>();
            //The list contains all the groups modified by the user with the multiple selection editor: we go through all the groups.
            for (int i = 0; i < list[0].ChildNodes[0].ChildNodes.Count; i++)
            {
                ItineraryData receivedItineraryGroup = new ItineraryData();
                //get the connection as xml
                XmlNode xmlGroupElement = list[0].ChildNodes[0].ChildNodes[i];
                //Warning: the number to check is the number of parameters for each Group sent from Flex!!!
                if (xmlGroupElement.ChildNodes[0].ChildNodes.Count == 9)
                {
                    //get each attribute
                    receivedItineraryGroup.name = xmlGroupElement.ChildNodes[0].ChildNodes[0].InnerText;
                    receivedItineraryGroup.paxProcessTimeType = xmlGroupElement.ChildNodes[0].ChildNodes[1].InnerText;
                    receivedItineraryGroup.paxProcessTimeFirstParam = xmlGroupElement.ChildNodes[0].ChildNodes[2].InnerText;
                    receivedItineraryGroup.paxProcessTimeSecondParam = xmlGroupElement.ChildNodes[0].ChildNodes[3].InnerText;
                    receivedItineraryGroup.paxProcessTimeThirdParam = xmlGroupElement.ChildNodes[0].ChildNodes[4].InnerText;
                    receivedItineraryGroup.bagProcessTimeType = xmlGroupElement.ChildNodes[0].ChildNodes[5].InnerText;
                    receivedItineraryGroup.bagProcessTimeFirstParam = xmlGroupElement.ChildNodes[0].ChildNodes[6].InnerText;
                    receivedItineraryGroup.bagProcessTimeSecondParam = xmlGroupElement.ChildNodes[0].ChildNodes[7].InnerText;
                    receivedItineraryGroup.bagProcessTimeThirdParam = xmlGroupElement.ChildNodes[0].ChildNodes[8].InnerText;
                    groups.Add(receivedItineraryGroup);
                }
            }
            return groups;
        }

        /// <summary>
        /// The Pax Process Times table is updated each time the user
        /// modifies a group distribution time. When adding a new group 
        /// in the Tree View Pax2Sim automaticaly adds an entry in this table
        /// representing the group and its distributions => we should always
        /// find that group when updating.
        /// </summary>        
        private void partialUpdatePaxProcessTimesTable(List<ItineraryData> groups)
        {
            DataTable paxProcessTimesTable = DonneesEnCours.getTable("Input", GlobalNames.Times_ProcessTableName);
            if (groups.Count != 0 && paxProcessTimesTable.Rows.Count > 0)
            {
                foreach (ItineraryData group in groups)
                {
                    //search for the row representing the group
                    DataRow[] rows = paxProcessTimesTable.Select(GlobalNames.sProcessTable_Items + "='" + group.name + "'");
                    if (rows.Length > 0)    // found the record refering to the group
                    {
                        Double value = 0;
                        rows[0][GlobalNames.sProcessTable_Distrib_1] = group.paxProcessTimeType;
                        Double.TryParse(group.paxProcessTimeFirstParam, out value);
                        rows[0][GlobalNames.sProcessTable_Param1_1] = value;
                        Double.TryParse(group.paxProcessTimeSecondParam, out value);
                        rows[0][GlobalNames.sProcessTable_Param2_1] = value;
                        Double.TryParse(group.paxProcessTimeThirdParam, out value);
                        rows[0][GlobalNames.sProcessTable_Param3_1] = value;
                        rows[0][GlobalNames.sProcessTable_Distrib_2] = group.bagProcessTimeType;
                        Double.TryParse(group.bagProcessTimeFirstParam, out value);
                        rows[0][GlobalNames.sProcessTable_Param1_2] = value;
                        Double.TryParse(group.bagProcessTimeSecondParam, out value);
                        rows[0][GlobalNames.sProcessTable_Param2_2] = value;
                        Double.TryParse(group.bagProcessTimeThirdParam, out value);
                        rows[0][GlobalNames.sProcessTable_Param3_2] = value;

                        paxProcessTimesTable.AcceptChanges();
                    }
                }
            }
        }


        //test
        //test button
        public void testButtonClick(object sender, EventArgs e)
        {
            //loadAllObjectsAsXMLFromAirportStructureForProcessFlow(false);
            //string[] terminals = DonneesEnCours.getTerminal();
            
            //getItineraryGroupsFromFile();
            //loadAllObjectsAsXMLFromFilesForProcessFlow();
           //createReportNodeContainingProcessFlowImage(1, "");
            /*
            String request = "<invoke name='returnInitializeData' returntype='xml'>"
                                + "<arguments>"
                                + "<string>" + objects + "</string>"
                                + "<string>" + objects1 + "</string>"
                                + "<string>" + objects2 + "</string>"
                                + "</arguments>"
                                + "</invoke>";
            Console.WriteLine(request);
             */ 
        }
        
        #endregion               
        // >> Task #6386 Itinerary process

        // << Task #8320 Pax2Sim - Scenario - reload at right click menu action
        /// <summary>
        ///  Function used to recalculate a scenario based on the trace.
        /// It is called when the user right-clicks on a scenario 
        /// directory and chooses the Reload action.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tsmiReload_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null)
                return;

            ParamScenario scenario = DonneesEnCours.GetScenario(CurrentNode.Text);
            if (scenario != null)
            {
                String paxTraceLocation = "";
                String bagTraceLocation = "";
                                                
                // >> Task #15556 Pax2Sim - Scenario Properties Assistant issues - C#13                
                DataManagerPaxBHS scenarioDonneesEnCours = (DataManagerPaxBHS)DonneesEnCours.GetDataManager(scenario.Name);
                if (scenarioDonneesEnCours != null)
                    bagTraceLocation = OverallTools.ExternFunctions.getTempDirectoryForPax2sim() + scenario.Name + "_BagTrace.tmp";
                                
                if (scenarioDonneesEnCours != null)
                    paxTraceLocation = OverallTools.ExternFunctions.getTempDirectoryForPax2sim() + scenario.Name + "_PaxTrace.tmp";                                
                // << Task #15556 Pax2Sim - Scenario Properties Assistant issues - C#13
                               
                // >> Task #13955 Pax2Sim -BHS trace loading issue
                if (scenario.analysisResultsFilters != null && scenario.analysisResultsFilters.Count > 0)
                {
                    if (scenario.flowTypes == null || scenario.flowTypes.Count == 0)
                    {
                        scenario.flowTypes.Clear();
                        scenario.flowTypes.Add(AnalysisResultFilter.DEPARTING_FLOW_TYPE_VISUAL_NAME);
                        //scenario.flowTypes.Add(AnalysisResultFilter.ARRIVING_FLOW_TYPE_VISUAL_NAME);
                        scenario.flowTypes.Add(AnalysisResultFilter.ORIGINATING_FLOW_TYPE_VISUAL_NAME);
                        //scenario.flowTypes.Add(AnalysisResultFilter.TERMINATING_FLOW_TYPE_VISUAL_NAME);
                        scenario.flowTypes.Add(AnalysisResultFilter.TRANSFERRING_FLOW_TYPE_VISUAL_NAME);
                    }
                }

                string warningMessage = "The loading procedure may take a few minutes. Do you want to continue?";
                BHSCustomMessageBox customMessageBox = new BHSCustomMessageBox(warningMessage, scenario.BHSSimulation,
                    scenario.analysisResultsFilters, scenario.flowTypes, DonneesEnCours, BHSCustomMessageBox.generateParametersForPopup(scenario));
                DialogResult dr = customMessageBox.ShowDialog();
                if (dr == DialogResult.No || dr == DialogResult.Cancel)
                {
                    PAX2SIM.loadingScenarioToShowObject = false;
                    return;
                }
                PAX2SIM.loadingScenarioToShowObject = true;
                
                PAX2SIM.generateLocalISTForBHS = customMessageBox.generateLocalIST;
                PAX2SIM.generateGroupISTForBHS = customMessageBox.generateGroupIST; // >> Task #14280 Bag Trace Loading time too long
                PAX2SIM.generateMUPSegregationForBHS = customMessageBox.generateMUPSegregation; // >> Task #14280 Bag Trace Loading time too long
                PAX2SIM.copyOutputTables = customMessageBox.copyOutputTables;
                
                if (customMessageBox.resultFilters != null)
                {
                    scenario.analysisResultsFilters.Clear();
                    scenario.analysisResultsFilters.AddRange(customMessageBox.resultFilters);
                }
                if (customMessageBox.flowTypes != null)
                {
                    scenario.flowTypes.Clear();
                    scenario.flowTypes.AddRange(customMessageBox.flowTypes);
                }
                // << Task #13955 Pax2Sim -BHS trace loading issue
                                
                DonneesEnCours.AnalyseTraces(scenario.Name, paxTraceLocation, bagTraceLocation);

                // >> Task #15556 Pax2Sim - Scenario Properties Assistant issues - C#17
                setUpScenarioInformationTable(scenario);
                saveResultFiltersTable(scenario.Name, scenario.analysisResultsFilters);
                saveScenarioInputDataTables(scenario, null);
                saveSettingsTable(scenario);
                saveTracesTables(scenario.Name, bagTraceLocation);
                // << Task #15556 Pax2Sim - Scenario Properties Assistant issues - C#17

                PAX2SIM.loadingScenarioToShowObject = false;
            }
            /*if (sender != null)
            {
                if (!scenario.SaveTraceMode)  // >> Task #1954_exportOutputTables
                {
                    TreeNode analysisNode = OverallTools.TreeViewFunctions.RechercherNomEnfants("Analysis", treeView1.Nodes[2]);
                    TreeNode scenarioNode = getScenarioNodeFromAnalysisNode(analysisNode, scenario.Name);
                    string projectDirectoryPath = DonneesEnCours.getDossierEnregistrement();
                    string scenarioDirectory = projectDirectoryPath + "Output\\" + scenario.Name + "\\";
                    exportTextFilesFromScenarioNodeToGivenPath(scenarioNode, scenarioDirectory);
                }
            }*/
        }
        // >> Task #8320 Pax2Sim - Scenario - reload at right click menu action
        
        // << Task #8819 Pax2Sim - ProcessFlow - save Details parameters
        private void updateProcessFlowParametersDictionary(String parameterName, bool parameterValue)
        {
            ProcessFlowParameters processFlowParameters = new ProcessFlowParameters();

            if (processFlowParametersDictionary.ContainsKey(processFlowName))
            {                
                if (processFlowParametersDictionary.TryGetValue(processFlowName, out processFlowParameters))
                {
                    if (processFlowParameters.GetType() != null
                        && processFlowParameters.GetType().GetProperty(parameterName) != null)
                    {
                        processFlowParameters.GetType().GetProperty(parameterName)
                            .SetValue(processFlowParameters, parameterValue, null);
                    }
                }
            }
            else
            {                
                try
                {
                    if (processFlowParameters.GetType() != null
                        && processFlowParameters.GetType().GetProperty(parameterName) != null)
                    {
                        processFlowParameters.GetType().GetProperty(parameterName)
                            .SetValue(processFlowParameters, parameterValue, null);
                        processFlowParametersDictionary.Add(processFlowName, processFlowParameters);
                    }
                }
                catch (Exception e)
                {
                    OverallTools.ExternFunctions.PrintLogFile("Exception caught while updating the process"
                     + " flow parameters dictionary. " + e.Message);
                }
            }/*
            OverallTools.ExternFunctions.PrintLogFile("<---------- Test PFP dictionary ------->");
            foreach (KeyValuePair<String, ProcessFlowParameters> pair in processFlowParametersDictionary)
            {
                OverallTools.ExternFunctions.PrintLogFile(pair.Key);
                ProcessFlowParameters pfp = pair.Value;
                OverallTools.ExternFunctions.PrintLogFile("showNames : " + pfp.showNames);
                OverallTools.ExternFunctions.PrintLogFile("showDescriptions : " + pfp.showDescriptions);
                OverallTools.ExternFunctions.PrintLogFile("showProcessTimes : " + pfp.showProcessTimes);
                OverallTools.ExternFunctions.PrintLogFile("showAreaCapa : " + pfp.showAreaCapacity);
                OverallTools.ExternFunctions.PrintLogFile("showDTD : " + pfp.showDelayTimesDistribution);
                OverallTools.ExternFunctions.PrintLogFile("weights : " + pfp.showWeights);
                OverallTools.ExternFunctions.PrintLogFile("travelTimes : " + pfp.showTravelTimes);
                OverallTools.ExternFunctions.PrintLogFile("invisible : " + pfp.setInvisibleConnections);
                OverallTools.ExternFunctions.PrintLogFile("shaddow : " + pfp.setShaddowConnections);
            }*/
            
        }

        private void updateItineraryParametersTables()
        {
            //call to ProcessFlowServices             
            foreach (KeyValuePair<String, ProcessFlowParameters> pair in processFlowParametersDictionary)
            {
                String retrievedProcessFlowName = pair.Key;
                ProcessFlowParameters parameters = pair.Value;

                if (retrievedProcessFlowName != null && parameters != null)
                {
                    ProcessFlowServices.saveProcessFlowShowDetailsParameters(retrievedProcessFlowName,
                        parameters, DonneesEnCours);
                }
            }
        }

        private void getShowDetailsParametersForProcessFlow(String processFlowName)
        {
            List<ProcessFlowParameters> parametersList = new List<ProcessFlowParameters>();
            ProcessFlowParameters parameter = new ProcessFlowParameters();
            String parametersXML = "";
            bool foundParameters = false;
            
            //1.check the dictionary
            if (processFlowParametersDictionary != null)
            {
                if (processFlowParametersDictionary.ContainsKey(processFlowName))
                {
                    foundParameters = true;
                    if (processFlowParametersDictionary.TryGetValue(processFlowName, out parameter)
                        && parameter != null)
                    {
                        parametersList.Add(parameter);
                    }
                }
            }

            //2. if the dictionary doesn't have a pair for the current process flow load the params from the file
            if (!foundParameters)
            {
                parameter = ProcessFlowServices.getProcessFlowParametersFromFile(processFlowName, DonneesEnCours);
                if (parameter != null)
                    parametersList.Add(parameter);
                else //3. add default param(all values to false)
                    parametersList.Add(new ProcessFlowParameters());
            }

            parametersXML = GanttServices.serializeShowDetailsParametersForXml(parametersList);

            String request = "<invoke name='getShowDetailsParametersForProcessFlow' returntype='xml'>"
                    + "<arguments>"
                    + "<string>" + parametersXML + "</string>"                    
                    + "</arguments>"
                    + "</invoke>";
            try
            {
                shockwaveFlashForItinerary.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml (getShowDetailsParametersForProcessFlow) to the flash object: " + e.Message);
            }
        }
        // >> Task #8819 Pax2Sim - ProcessFlow - save Details parameters

        // >> Task #10553 Pax2Sim - Pax analysis - Summary - Dashboard
        #region Summary Dashboard
        // >> Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
        /// <summary>
        /// Holds the dashboard configuration for the scenarios' stations.
        /// K = scenario name plus the delimiter |+| plus station name (and description) (currentNode.text)
        /// V = dashboard configuration
        /// </summary>
        public static Dictionary<String, DashboardConfiguration> scenariosStationsDashboardDictionary = new Dictionary<String, DashboardConfiguration>();
        // << Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration

        public void createDashboard()
        {            
            String dashboardPath = "";
            String dashboardSwfFilePath = OverallTools.ExternFunctions.getPax2simDirectory();

            dashboardPath = dashboardSwfFilePath + GlobalNames.DASHBOARD_SWF_FILE_NAME;

            axShockwaveFlashForDashboard.LoadMovie(0, dashboardPath);
            axShockwaveFlashForDashboard.Show();
        }

        private void loadSummaryKPIsAsXMLForDashboard(DataTable summaryTable, String processName,
            bool forBHS)    // >> Task #10985 Pax2Sim - BHS dynamic analysis - adapt statistics tables for the Dashboard
        {
            double level1Percent = 0;
            double level2Percent = 0;
            double level3Percent = 0;

            DashboardTools.getLevelsPercentUsingSummaryTable(summaryTable, 
                out level1Percent, out level2Percent, out level3Percent);

            List<SummaryKPI> summaryKPIsList = new List<SummaryKPI>();

            if (forBHS)
            {
                summaryKPIsList = DashboardTools
                    .getSummaryKPIsListFromBHSSummaryTable(summaryTable, level1Percent, level2Percent, level3Percent);
            }
            else
            {
                summaryKPIsList = DashboardTools
                    .getSummaryKPIsListFromSummaryTable(summaryTable, level1Percent, level2Percent, level3Percent);
            }
            String serializedKPIs = DashboardTools.serializeKPIsListForXML(summaryKPIsList);
            
            // >> Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
            String dashboardConfigName = "";
            String dashboardConfigPreferences = "";
            if (CurrentNode != null)
            {
                TreeNode currentScenario = getScenarioNode(CurrentNode);
                if (currentScenario != null)
                {
                    String dashboardDictionaryKey = currentScenario.Name 
                        + GlobalNames.SCENARIO_DASHBOARD_MAP_KEY_DELIMITER + CurrentNode.Text;

                    if (scenariosStationsDashboardDictionary.ContainsKey(dashboardDictionaryKey))
                    {
                        DashboardConfiguration dashboardConfiguration = null;
                        if (scenariosStationsDashboardDictionary.TryGetValue(dashboardDictionaryKey, out dashboardConfiguration)
                            && dashboardConfiguration != null)
                        {
                            dashboardConfigName = dashboardConfiguration.preferenceInfoName;
                            dashboardConfigPreferences = dashboardConfiguration.preferences;
                        }
                    }                    
                }
            }
            // << Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration

            String request = "<invoke name='readData' returntype='xml'>"    // Call the readData function from Flex
                    + "<arguments>"
                    + "<string>" + processName + "</string>"
                    + "<string>" + level1Percent + "</string>"
                    + "<string>" + level2Percent + "</string>"
                    + "<string>" + level3Percent + "</string>"
                    + "<string>" + serializedKPIs + "</string>"
                    + "<string>" + dashboardConfigName + "</string>"
                    + "<string>" + dashboardConfigPreferences + "</string>"
                    + "</arguments>"
                    + "</invoke>";

            try
            {
                axShockwaveFlashForDashboard.CallFunction(request);
            }
            catch (Exception e)
            {
                OverallTools.ExternFunctions.PrintLogFile("Exception caught while sending " +
                    "the xml containing the Summary KPIs to the flash object (readData function): " + e.Message);
            }
        }

        /// <summary>
        /// Receive a message from Flash.
        /// </summary> 
        private void axShockwaveFlashForDashboard_FlashCall(object sender, _IShockwaveFlashEvents_FlashCallEvent e)
        {
            // parse the xml message 
            XmlDocument document = new XmlDocument();
            document.LoadXml(e.request);
            // obtain the attributes with the messages sent from flash
            XmlAttributeCollection attributes = document.FirstChild.Attributes;
            String command = attributes.Item(0).InnerText;
            // get parameters
            XmlNodeList list = document.GetElementsByTagName("arguments");
            
            // act accordingly to the command
            switch (command)
            {
                case "checkInitialized":
                    if (list[0].InnerText.Equals("ok"))
                    {
                        TreeViewTag Tag = CheckCurrentNode();
                        if (Tag != null)
                        {
                            if (Tag.isResultNode)//Tag.isTableNode && Tag.Name.EndsWith(GlobalNames.SUMMARY_TABLE_NAME_SUFFIX))
                            {
                                TreeNode currentScenario = getScenarioNode(CurrentNode);
                                if (currentScenario != null)
                                {
                                    DataTable summaryTable = DonneesEnCours.getTable(currentScenario.Name, Tag.Name);
                                    if (summaryTable != null)
                                    {
                                        if (Tag.Name.EndsWith(GlobalNames.BHS_STATS_TABLE_SUFFIX))
                                        {
                                            loadSummaryKPIsAsXMLForDashboard(summaryTable, CurrentNode.Text, true);//Tag.Name);
                                        }
                                        else
                                        {
                                            loadSummaryKPIsAsXMLForDashboard(summaryTable, CurrentNode.Text, false);//Tag.Name);
                                        }
                                    }
                                }
                            }
                            else if (Tag.isTableNode && Tag.Name.EndsWith(GlobalNames.BHS_STATS_TABLE_SUFFIX)
                                     || (Tag.isTableNode && Tag.Name.StartsWith(GlobalNames.PAX_DISTRIBUTION_TABLE_PREFIX)
                                          && Tag.Name.EndsWith(GlobalNames.PAX_SUMMARY_DISTRIBUTION_TABLE_SUFFIX))
                                     || (Tag.isTableNode && Tag.Name.StartsWith(EbsStatisticsGenerator.GLOBAL_EBS_SUMMARY_TABLE_NAME))  // >> Task #9171 Pax2Sim - Static Analysis - EBS algorithm - Throughputs C#5
                                     || (Tag.isTableNode && Tag.Name.EndsWith(GlobalNames.BHS_SUMMARY_TABLE_NAME_SUFFIX))   // >> Task #17222 PAX2SIM - FromTo Times statistics - global summaries   
                                )
                            {
                                TreeNode currentScenario = getScenarioNode(CurrentNode);
                                if (currentScenario != null)
                                {
                                    DataTable summaryTable = DonneesEnCours.getTable(currentScenario.Name, Tag.Name);
                                    if (summaryTable != null)
                                    {
                                        loadSummaryKPIsAsXMLForDashboard(summaryTable, CurrentNode.Text, true);//Tag.Name);

                                    }
                                }
                            }
                        }
                    }
                    break;
                case "createDashboardNote":  // >> Task #10645 Pax2Sim - Pax analysis - Summary: dashboard image for Reports
                    {
                        // the image data is received from flex as an encoded string
                        String imageDataText = "";
                        // based on the image type the extension for the file is determined
                        String imageFileExtension = "";
                        // this variable holds the path where is stored the file created to hold the image
                        String tempFilePath = "";

                        foreach (XmlNode xn in list)
                        {
                            imageDataText = xn.ChildNodes[0].InnerText;                            
                        }
                        //decode the encoded string from flex
                        byte[] bytes = Convert.FromBase64String(imageDataText);
                        imageFileExtension = Model.IMAGE_TYPE_PNG_EXTENTION;

                        TreeNode selectedNode = treeView1.SelectedNode;
                        TreeViewTag tag = new TreeViewTag();
                        if (selectedNode != null)
                            tag = (TreeViewTag)selectedNode.Tag;
                        if (tag != null)
                        {
                            // the file name has the folowing format: temp_ScenarioName_TableName
                            // one Table with Dashboard will have a unique file associated
                            String partialImageFileName = tag.ScenarioName + "_" + tag.Name;
                            // save the image and retrieve the path
                            byteArrayToImage(bytes, partialImageFileName, imageFileExtension, out tempFilePath);

                            String htmlFirstBuildText = "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.0 Transitional//EN'>"
                                                        + "<HTML><HEAD>"
                                                        + "<META content='text/html; charset=unicode' http-equiv=Content-Type>"
                                                        + "<META name=GENERATOR content='MSHTML 9.00.8112.16446'></HEAD>"
                                                        + "<BODY>";
                            String htmlLastBuildText = "</BODY></HTML>";
                            String htmlText = htmlFirstBuildText + "<img src='" + tempFilePath + "' />" + htmlLastBuildText;

                            DonneesEnCours.setDashboardNote(tag.ScenarioName, tag.Name, htmlText);
                        }
                    }
                    break;
                case "saveDashboardConfiguration":
                    {   // >> Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
                        DashboardConfiguration dashboardConfiguration
                            = JsonConvert.DeserializeObject<DashboardConfiguration>(list[0].InnerText);
                        TreeNode scenarioNode = getScenarioNode(CurrentNode);

                        if (dashboardConfiguration != null && scenarioNode != null)
                        {
                            updateDashboardConfigurationDictionary(scenarioNode.Name, CurrentNode.Text, dashboardConfiguration);
                        }
                    }
                    break;
                case "clearPreferences":
                    {   // >> Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
                        TreeNode currentScenario = getScenarioNode(CurrentNode);
                        if (currentScenario != null)
                        {
                            clearSavedDashboardConfigurationsByScenario(currentScenario.Name);
                        }
                    }
                    break;
                case "check":
                    if (list[0].InnerText.Equals("ok"))
                    {
                        
                    }
                    break;
                default:
                    break;
            }
        }
        
        // >> Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
        private void updateDashboardConfigurationDictionary(String scenarioName, String stationName,
                                                        DashboardConfiguration dashboardConfiguration)
        {
            if (dashboardConfiguration != null)
            {
                String dictionaryKey = scenarioName
                    + GlobalNames.SCENARIO_DASHBOARD_MAP_KEY_DELIMITER + stationName;

                if (scenariosStationsDashboardDictionary.ContainsKey(dictionaryKey))
                {
                    scenariosStationsDashboardDictionary[dictionaryKey] = dashboardConfiguration;
                }
                else
                {
                    scenariosStationsDashboardDictionary.Add(dictionaryKey, dashboardConfiguration);
                }
            }
        }

        private void clearSavedDashboardConfigurationsByScenario(String scenarioName)
        {
            ArrayList keysToBeRemoved = new ArrayList();
            foreach (KeyValuePair<String, DashboardConfiguration> pair in scenariosStationsDashboardDictionary)
            {
                String scenarioFromKey = pair.Key.Substring(0, pair.Key.IndexOf(GlobalNames.SCENARIO_DASHBOARD_MAP_KEY_DELIMITER));
                if (scenarioFromKey.Equals(scenarioName))
                {
                    keysToBeRemoved.Add(pair.Key);
                }
            }
            if (keysToBeRemoved.Count > 0)
            {
                foreach (String key in keysToBeRemoved)
                {
                    scenariosStationsDashboardDictionary.Remove(key);
                }
            }
        }        
                                
        // << Task #10701 Pax2Sim - Pax analysis - saving the Dashboard configuration
        #endregion
        // << Task #10553 Pax2Sim - Pax analysis - Summary - Dashboard

        #region New Reports menu
        // >> Task #13384 Report Tree-view        
        private void cmsReports_Opening(object sender, CancelEventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {
                e.Cancel = true;
                return;
            }
            
            List<string> allReportNames = getListOfAllReportsNames(DonneesEnCours.htReportParametres);
            if (isChildOfMainReportNode(CurrentNode, GlobalNames.REPORTS_MAIN_NODE_NAME)
                || CurrentNode.Name == GlobalNames.REPORTS_MAIN_NODE_NAME)
            {
                addReportToolStripMenuItem.Enabled = (CurrentNode.Name == GlobalNames.REPORTS_MAIN_NODE_NAME);
                editReportToolStripMenuItem.Enabled = (CurrentNode.Name != GlobalNames.REPORTS_MAIN_NODE_NAME);
                deleteReportToolStripMenuItem.Enabled = (CurrentNode.Name != GlobalNames.REPORTS_MAIN_NODE_NAME);
                previewReportToolStripMenuItem.Enabled = (CurrentNode.Name != GlobalNames.REPORTS_MAIN_NODE_NAME);
                generateReportToolStripMenuItem.Enabled = (CurrentNode.Name != GlobalNames.REPORTS_MAIN_NODE_NAME);
                manageLinksToolStripMenuItem.Enabled = (CurrentNode.Name != GlobalNames.REPORTS_MAIN_NODE_NAME);
                refreshMainReportsNodeToolStripMenuItem.Enabled = (CurrentNode.Name == GlobalNames.REPORTS_MAIN_NODE_NAME);

                editNoteToolStripMenuItem.Enabled = false;
                navigateToSourceToolStripMenuItem.Enabled = false;
                exportXMLReportConfigurationToolStripMenuItem.Enabled = (CurrentNode.Name != GlobalNames.REPORTS_MAIN_NODE_NAME);   // >> Task #17969 PAX2SIM - Reports improvements
                assignToReportGroupsToolStripMenuItem.Enabled = (CurrentNode.Name != GlobalNames.REPORTS_MAIN_NODE_NAME);
                generateReportGroupToolStripMenuItem.Enabled = (CurrentNode.Name == GlobalNames.REPORTS_MAIN_NODE_NAME);
            }
            else if (isChildOfReport(CurrentNode, allReportNames))
            {
                addReportToolStripMenuItem.Enabled = false;
                editReportToolStripMenuItem.Enabled = false;
                deleteReportToolStripMenuItem.Enabled = false;
                previewReportToolStripMenuItem.Enabled = false;
                generateReportToolStripMenuItem.Enabled = false;
                refreshMainReportsNodeToolStripMenuItem.Enabled = false;

                if (Tag.isParagraphNode)
                    editNoteToolStripMenuItem.Enabled = true;
                else                
                    editNoteToolStripMenuItem.Enabled = false;

                if (Tag.isTableNode || Tag.isFilterNode || Tag.IsExceptionNode
                    || Tag.isChartNode || Tag.isParagraphNode)
                {
                    navigateToSourceToolStripMenuItem.Enabled = true;
                    manageLinksToolStripMenuItem.Enabled = true;
                }
                else
                {
                    navigateToSourceToolStripMenuItem.Enabled = false;
                    manageLinksToolStripMenuItem.Enabled = false;
                }
                exportXMLReportConfigurationToolStripMenuItem.Enabled = false;
                assignToReportGroupsToolStripMenuItem.Enabled = false;
                generateReportGroupToolStripMenuItem.Enabled = false;
            }
            if (CurrentNode.Nodes != null && CurrentNode.Nodes.Count > 0)
            {
                expandCollapseToolStripMenuItem.Enabled = true;
                if (CurrentNode.IsExpanded)
                    expandCollapseToolStripMenuItem.Text = "Collapse";
                else
                    expandCollapseToolStripMenuItem.Text = "Expand";
                exportAsTextFilesFromReportToolStripMenuItem.Enabled = true;
            }
            else
            {
                expandCollapseToolStripMenuItem.Enabled = false;
                exportAsTextFilesFromReportToolStripMenuItem.Enabled = false;
            }
            // >> Task #17969 PAX2SIM - Reports improvements            
            if (generateReportGroupToolStripMenuItem.Enabled)
            {
                addSubMenuByReportGroups(generateReportGroupAsPdfToolStripMenuItem, generateReportGroupAsPdfMenuItemClickHandler);
                addSubMenuByReportGroups(generateReportGroupAsHtmlToolStripMenuItem, generateReportGroupAsHtmlMenuItemClickHandler);
            }
            // << Task #17969 PAX2SIM - Reports improvements
            applyColorCodeFromReportToolStripMenuItem.Visible = (Tag.isTableNode || Tag.isFilterNode) && FlightPlanInformationToTextGantt.isFPITextGanttTable(CurrentNode.Name);
        }
        
        // >> Task #17969 PAX2SIM - Reports improvements
        private void addSubMenuByReportGroups(ToolStripMenuItem parentToolStripMenu, EventHandler eventHandler)
        {
            if (DonneesEnCours.htReportParametres == null || DonneesEnCours.htReportParametres.Count == 0)
            {
                return;
            }
            parentToolStripMenu.DropDownItems.Clear();
            List<string> uniqueReportGroupsNames = new List<string>();
            foreach (KeyValuePair<string, ReportParameters> pair in  DonneesEnCours.htReportParametres)
            {
                ReportParameters reportParam = pair.Value;
                if (reportParam.reportGroupsList == null)
                {
                    continue;
                }
                foreach (string groupName in reportParam.reportGroupsList)
                {
                    if (!uniqueReportGroupsNames.Contains(groupName))
                    {
                        uniqueReportGroupsNames.Add(groupName);
                    }
                }
            }
            foreach (string groupName in uniqueReportGroupsNames)
            {
                ToolStripMenuItem groupMenuItem = new ToolStripMenuItem();
                groupMenuItem.Name = groupName + "MenuItem";
                groupMenuItem.Text = groupName;
                groupMenuItem.Click += new EventHandler(eventHandler);                
                parentToolStripMenu.DropDownItems.Add(groupMenuItem);                
            }
        }

        private void generateReportGroupAsPdfMenuItemClickHandler(object sender, EventArgs e)
        {
            ToolStripMenuItem clickedItem = (ToolStripMenuItem)sender;
            List<ReportParameters> groupedReports = new List<ReportParameters>();
            foreach (KeyValuePair<string, ReportParameters> pair in DonneesEnCours.htReportParametres)
            {
                ReportParameters param = pair.Value;
                if (param.reportGroupsList != null && param.reportGroupsList.Contains(clickedItem.Text))
                {
                    param.Name = pair.Key;
                    groupedReports.Add(param);
                }
            }
            foreach (ReportParameters reportParams in groupedReports)
            {
                generateReport(reportParams, reportParams.tv_CustomTree.Nodes, true, false, clickedItem.Text);
            }
        }

        private void generateReportGroupAsHtmlMenuItemClickHandler(object sender, EventArgs e)
        {
            ToolStripMenuItem clickedItem = (ToolStripMenuItem)sender;
            List<ReportParameters> groupedReports = new List<ReportParameters>();
            foreach (KeyValuePair<string, ReportParameters> pair in DonneesEnCours.htReportParametres)
            {
                ReportParameters param = pair.Value;
                if (param.reportGroupsList != null && param.reportGroupsList.Contains(clickedItem.Text))
                {
                    param.Name = pair.Key;
                    groupedReports.Add(param);
                }
            }
            foreach (ReportParameters reportParams in groupedReports)
            {
                generateReport(reportParams, reportParams.tv_CustomTree.Nodes, false, true, clickedItem.Text);
            }
        }   
        // << Task #17969 PAX2SIM - Reports improvements

        private List<string> getListOfAllReportsNames(Dictionary<string, ReportParameters> allReportParameters)
        {
            List<string> allReportsNames = new List<string>();
            if (allReportParameters != null)
            {
                foreach (KeyValuePair<string, ReportParameters> pair in allReportParameters)
                {
                    if (!allReportsNames.Contains(pair.Key))
                        allReportsNames.Add(pair.Key);
                }
            }
            return allReportsNames;
        }

        public bool isChildOfReport(TreeNode nodeChecked, List<string> allReportsNames)
        {
            if (nodeChecked != null && allReportsNames != null)
            {
                while (nodeChecked.Parent != null)
                {
                    if (allReportsNames.Contains(nodeChecked.Parent.Name))
                        return true;
                    nodeChecked = nodeChecked.Parent;
                }
            }
            return false;
        }

        public bool isChildOfMainReportNode(TreeNode nodeChecked, string mainReportNodeName)
        {
            if (nodeChecked != null && nodeChecked.Parent != null 
                && mainReportNodeName != null)
            {
                if (nodeChecked.Parent.Name == mainReportNodeName)
                    return true;
            }
            return false;
        }

        public TreeNode getParentReportNode(TreeNode childNode)
        {
            List<string> allReportsNames = getListOfAllReportsNames(DonneesEnCours.htReportParametres);
            if (childNode != null && allReportsNames != null 
                && isChildOfReport(childNode, allReportsNames))
            {
                while (childNode.Parent != null)
                {
                    if (allReportsNames.Contains(childNode.Parent.Name))
                        return childNode.Parent;
                    childNode = childNode.Parent;
                }
            }
            return null;
        }

        private void addReportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openReportGenerator("");
        }

        private void editReportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {                
                return;
            }
            openReportGenerator(CurrentNode.Name);
        }

        private void deleteReportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {
                return;
            }
            if (DonneesEnCours.htReportParametres != null
                && DonneesEnCours.htReportParametres.ContainsKey(CurrentNode.Name))
            {
                DialogResult result = MessageBox.Show(this, "Are you sure you want to permanently delete the report " + CurrentNode.Name + "?",
                                                        "Delete " + CurrentNode.Name + "?" , MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (result == DialogResult.Yes)
                {
                    DonneesEnCours.htReportParametres.Remove(CurrentNode.Name);
                    OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres, treeView1.Nodes, DonneesEnCours, cmsReports);
                }
            }
        }

        private void pdfFormatPreviewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {
                return;
            }
            if (DonneesEnCours.htReportParametres != null
                && DonneesEnCours.htReportParametres.ContainsKey(CurrentNode.Name))
            {
                ReportParameters reportParameters = DonneesEnCours.htReportParametres[CurrentNode.Name];
                reportParameters.Name = CurrentNode.Name;
                ReportGenerator.generateReportPreview(reportParameters, reportParameters.tv_CustomTree.Nodes,//CurrentNode.Nodes, 
                                                        DonneesEnCours, false, true, this.Location, this.Size);
            }
        }

        private void htmlFormatPreviewFormatToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {
                return;
            }
            if (DonneesEnCours.htReportParametres != null
                && DonneesEnCours.htReportParametres.ContainsKey(CurrentNode.Name))
            {
                ReportParameters reportParameters = DonneesEnCours.htReportParametres[CurrentNode.Name];
                reportParameters.Name = CurrentNode.Name;
                ReportGenerator.generateReportPreview(reportParameters, reportParameters.tv_CustomTree.Nodes, //CurrentNode.Nodes,
                                                        DonneesEnCours, true, false, this.Location, this.Size);                
            }            
        }

        private void pdfFormatGeneratorToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {
                return;
            }
            if (DonneesEnCours.htReportParametres != null
                && DonneesEnCours.htReportParametres.ContainsKey(CurrentNode.Name))
            {
                ReportParameters reportParameters = DonneesEnCours.htReportParametres[CurrentNode.Name];
                reportParameters.Name = CurrentNode.Name;
                generateReport(reportParameters, reportParameters.tv_CustomTree.Nodes, //CurrentNode.Nodes,
                    true, false, null);                
            }
        }

        private void htmlFormatGeneratorToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {
                return;
            }
            if (DonneesEnCours.htReportParametres != null
                && DonneesEnCours.htReportParametres.ContainsKey(CurrentNode.Name))
            {
                ReportParameters reportParameters = DonneesEnCours.htReportParametres[CurrentNode.Name];
                reportParameters.Name = CurrentNode.Name;
                generateReport(reportParameters, reportParameters.tv_CustomTree.Nodes, //CurrentNode.Nodes, 
                    false, true, null);                
            }
        }

        private TreeNode getMainReportsNode(TreeView mainTreeView)
        {
            if (mainTreeView != null && mainTreeView.Nodes != null)
            {
                foreach (TreeNode childNode in mainTreeView.Nodes)
                {
                    if (childNode.Name == GlobalNames.REPORTS_MAIN_NODE_NAME)
                        return childNode;
                }
            }
            return null;
        }

        private void editNoteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;

            String noteText = null;
            String paragName = Tag.Name;//"Assumption_" + Tag.Name;
            GestionDonneesHUB2SIM.Paragraph paragraph = DonneesEnCours.getParagraph(Tag.Name);//("Assumption_" + Tag.Name);

            if (paragraph != null)
            {
                noteText = paragraph.Content;
                Prompt.SIM_Htmleditor shEditor = new Prompt.SIM_Htmleditor(noteText);
                if (shEditor.ShowDialog() == DialogResult.OK)
                {
                    paragraph.Content = shEditor.Note;
                    DonneesEnCours.setParagraph(paragName, paragraph);
                }
            }
            else
            {
                if (Tag.IsExceptionNode)
                    noteText = DonneesEnCours.getExNote(Tag.ScenarioName, Tag.Name, Tag.ExceptionName);
                else
                    noteText = DonneesEnCours.getNote(Tag.ScenarioName, Tag.Name);
                if (noteText == null)
                    noteText = DonneesEnCours.getGeneralNote(Tag.Name);

                Prompt.SIM_Htmleditor shEditor = new Prompt.SIM_Htmleditor(noteText);                
                if (shEditor.ShowDialog() == DialogResult.OK)
                {
                    if (Tag.IsExceptionNode)
                        DonneesEnCours.setExNote(Tag.ScenarioName, Tag.Name, Tag.ExceptionName, shEditor.Note);
                    else
                        DonneesEnCours.setNote(Tag.ScenarioName, Tag.Name, shEditor.Note);
                    Tag.HasNote = (shEditor.Note != "");
                    treeView1.SelectedNode.ImageIndex = Tag.ImageIndex;
                    treeView1.SelectedNode.SelectedImageIndex = Tag.SelectedImageIndex;
                }
            }
        }

        private void expandCollapseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            List<string> allReportsNames = getListOfAllReportsNames(DonneesEnCours.htReportParametres);
            TreeNode mainReportsNode = getMainReportsNode(treeView1);

            if (mainReportsNode != null)
            {
                if (CurrentNode.IsExpanded)
                {
                    if (CurrentNode.Nodes != null)
                    {
                        CurrentNode.Collapse();
                        collapseAllChildNodes(CurrentNode);
                    }
                }
                else
                {
                    foreach (TreeNode childReportNode in mainReportsNode.Nodes)
                        childReportNode.Collapse();

                    if (CurrentNode.Name == GlobalNames.REPORTS_MAIN_NODE_NAME)
                        CurrentNode.ExpandAll();
                    else
                    {
                        TreeNode node = CurrentNode;
                        while (node.Parent != null
                                && node.Parent.Name != GlobalNames.REPORTS_MAIN_NODE_NAME)
                        {
                            node.Parent.Expand();
                            node = node.Parent;
                        }
                        CurrentNode.ExpandAll();
                    }
                }
            }
        }

        private void collapseAllChildNodes(TreeNode node)
        {
            if (node != null && node.Nodes != null)
            {
                foreach (TreeNode childNode in node.Nodes)
                {
                    childNode.Collapse();
                    collapseAllChildNodes(childNode);
                }
            }
        }
        
        private void navigateToSourceToolStripMenuItem_Click(object sender, EventArgs e)
        {
            navigateToSource();
        }

        private void navigateToSource()
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
            {
                return;
            }
            TreeNode objectNode = null;
            string objectName = CurrentNode.Name;
            string scenarioName = Tag.ScenarioName;
                        
            if (Tag.isTableNode || Tag.isFilterNode || Tag.IsExceptionNode
                || Tag.isParagraphNode || Tag.isChartNode)
            {
                if ((Tag.isChartNode && (scenarioName == "" || scenarioName == null))
                    || (Tag.isFilterNode && scenarioName == null))
                {
                    GraphicFilter graphicFilter = null;
                    if (Tag.isFilterNode && scenarioName == null)   // the Filter of a global chart
                        graphicFilter = DonneesEnCours.GetGraphicFilter(objectName);
                    else if (Tag.isChartNode)
                    {
                        if (scenarioName == "")
                            graphicFilter = DonneesEnCours.GetGeneralGraphicFilter(objectName); // the global chart
                        else if (scenarioName == null)
                            graphicFilter = DonneesEnCours.GetGraphicFilter(objectName);    // the global chart's filter chart
                    }

                    if (graphicFilter != null)
                        scenarioName = "Charts";
                }
                else if (Tag.isTableNode || Tag.isFilterNode || Tag.IsExceptionNode)
                {
                    objectName = CurrentNode.Name;
                    if (Tag.ScenarioName != null && objectName.StartsWith(Tag.ScenarioName)
                        && !DonneesEnCours.tableEstPresente(Tag.ScenarioName, objectName))
                    {
                        // the Reports global charts contain the chart's child tables, named scenarioName-tableName
                        if (objectName.Length > Tag.ScenarioName.Length + 1)
                            objectName = objectName.Substring(Tag.ScenarioName.Length + 1);
                    }
                    else if (Tag.ScenarioName == null)
                    {
                        scenarioName = "Charts";
                    }
                }
                else if (Tag.isParagraphNode)
                {
                    if (scenarioName == null || scenarioName == "")
                        scenarioName = "Charts";
                }
                //The Input data node is stored as 'Input' but the search is made on the name which is 'DataIn'...
                if (scenarioName == "Input")
                    scenarioName = "DataIn";

                TreeNode scenarioNode = getNodeByName(scenarioName, treeView1.Nodes);                
                if (scenarioNode != null)                
                    objectNode = getNodeByName(objectName, scenarioNode.Nodes);                
            }
            
            if (objectNode != null)
                SelectNode(objectNode);
            // << Issue Fixed - Reports Tree-View enhancement for missing tables
            else
            {
                MessageBox.Show("The Source table is not found.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            // >> Issue Fixed - Reports Tree-View enhancement for missing tables
        }

        private TreeNode getNodeByName(string nodeName, TreeNodeCollection nodes)
        {
            TreeNode searchedNode = null;
            if (nodes != null)
            {
                foreach (TreeNode childNode in nodes)
                {
                    searchedNode = OverallTools.TreeViewFunctions.RechercherNom(nodeName, childNode);
                    if (searchedNode != null)
                        return searchedNode;
                }
            }
            return searchedNode;
        }

        private TreeNode getNodeByNameAndReportIndex(string nodeName, int reportIndex, TreeNodeCollection nodes)
        {
            TreeNode searchedNode = null;
            if (nodes != null)
            {
                foreach (TreeNode childNode in nodes)
                {
                    TreeNode searchedNodeByName = OverallTools.TreeViewFunctions.RechercherNom(nodeName, childNode);
                    if (searchedNodeByName != null)
                    {
                        TreeViewTag tag = (TreeViewTag)searchedNodeByName.Tag;
                        if (tag != null && !tag.isDirectoryNode)
                        {
                            int searchedIndex = tag.reportTreeIndex;
                            if (searchedIndex == reportIndex)
                            {
                                searchedNode = searchedNodeByName;
                                break;
                            }
                        }
                    }
                    if (childNode.Nodes != null)
                    {
                        searchedNode = getNodeByNameAndReportIndex(nodeName, reportIndex, childNode.Nodes);
                        if (searchedNode != null)
                            break;
                    }
                }
            }
            return searchedNode;
        }

        private void manageLinksToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (isChildOfMainReportNode(CurrentNode, GlobalNames.REPORTS_MAIN_NODE_NAME))
                manageEntireReportLinks();
            else
                manageIndividualElementLinks();
        }

        private void manageEntireReportLinks()
        {
            if (DonneesEnCours.htReportParametres == null
                || CurrentNode == null
                || !DonneesEnCours.htReportParametres.ContainsKey(CurrentNode.Name))
            {
                return;
            }
            ReportParameters reportParameters = DonneesEnCours.htReportParametres[CurrentNode.Name];
            List<TreeNode> allReportRelevantNodes = new List<TreeNode>();

            List<TreeNode> tableNodes = getNodesFromTreeByNodeType(reportParameters.tv_CustomTree.Nodes, NODE_TYPES.TABLE_NODE_TYPE);
            allReportRelevantNodes.AddRange(tableNodes);
            List<TreeNode> filterNodes = getNodesFromTreeByNodeType(reportParameters.tv_CustomTree.Nodes, NODE_TYPES.FILTER_NODE_TYPE);
            allReportRelevantNodes.AddRange(filterNodes);
            List<TreeNode> paragraphNodes = getNodesFromTreeByNodeType(reportParameters.tv_CustomTree.Nodes, NODE_TYPES.PARAGRAPH_NODE_TYPE);
            allReportRelevantNodes.AddRange(paragraphNodes);
            
            List<TreeNode> chartNodes = getNodesFromTreeByNodeType(reportParameters.tv_CustomTree.Nodes, NODE_TYPES.CHART_NODE_TYPE);
            allReportRelevantNodes.AddRange(chartNodes);
            List<TreeNode> globalChartNodes = getGlobalCharts(chartNodes, DonneesEnCours);
            foreach (TreeNode globalChartNode in globalChartNodes)
            {
                if (chartNodes.Contains(globalChartNode))
                {
                    chartNodes.Remove(globalChartNode);
                }
            }

            ReportContent reportContent = new ReportContent(CurrentNode, tableNodes, filterNodes, paragraphNodes, chartNodes, globalChartNodes);
            List<string> allScenarioNames = getAllScenariosForGivenReportObjects(allReportRelevantNodes);
            ReportLinksManagementAssistant linksAssistant = new ReportLinksManagementAssistant(reportContent, allScenarioNames, this);
            if (linksAssistant.ShowDialog() == DialogResult.OK)
            {
                foreach (KeyValuePair<string, List<TreeNode>> pair in linksAssistant.reportNodesAndScenariosDictionary)
                {
                    string scenarioName = pair.Key;
                    List<TreeNode> reportNodes = pair.Value;
                    foreach (TreeNode n in reportNodes)
                    {
                        linkNodeToGivenScenario(n, scenarioName);
                    }
                }
                foreach (KeyValuePair<string, Dictionary<int, TableScenarioInfoHolder>> pair in linksAssistant.reportContent.modifiedGlobalCharts)
                {
                    string globalChartUniqueName = pair.Key;
                    TreeNode globalChartNode = OverallTools.TreeViewFunctions.getGlobalChartNodeByUniqueName(CurrentNode, globalChartUniqueName);
                    changeReportGlobalChartLink(globalChartNode, pair.Value, CurrentNode);
                }
                OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres, treeView1.Nodes, DonneesEnCours, cmsReports);
            }
        }

        private List<TreeNode> getGlobalCharts(List<TreeNode> chartNodes, GestionDonneesHUB2SIM DonneesEnCours)
        {
            List<TreeNode> globalChartNodes = new List<TreeNode>();
            if (chartNodes == null || DonneesEnCours == null)
                return globalChartNodes;
            foreach (TreeNode chartNode in chartNodes)
            {
                if (DonneesEnCours.GetGeneralGraphicFilter(chartNode.Name) != null
                    && !globalChartNodes.Contains(chartNode))
                {
                    globalChartNodes.Add(chartNode);
                }
            }
            return globalChartNodes;
        }

        enum NODE_TYPES
        {
            TABLE_NODE_TYPE,
            FILTER_NODE_TYPE,
            PARAGRAPH_NODE_TYPE,
            CHART_NODE_TYPE
        };
        private List<TreeNode> getNodesFromTreeByNodeType(TreeNodeCollection givenNodes, NODE_TYPES nodeType)
        {
            List<TreeNode> nodesFound = new List<TreeNode>();
            if (givenNodes == null)
                return nodesFound;
            
            foreach (TreeNode node in givenNodes)
            {
                TreeViewTag tag = (TreeViewTag)node.Tag;
                if (isTagRequiredType(tag, nodeType))                
                    nodesFound.Add(node);
                if (node.Nodes != null)
                {
                    List<TreeNode> childrenNodesFound = getNodesFromTreeByNodeType(node.Nodes, nodeType);
                    nodesFound.AddRange(childrenNodesFound);
                }
            }
            return nodesFound;
        }
        private bool isTagRequiredType(TreeViewTag tag, NODE_TYPES requiredType)
        {
            if ((tag.isTableNode && requiredType == NODE_TYPES.TABLE_NODE_TYPE)
                    || (tag.isFilterNode && requiredType == NODE_TYPES.FILTER_NODE_TYPE)
                    || (tag.isParagraphNode && requiredType == NODE_TYPES.PARAGRAPH_NODE_TYPE)
                    || (tag.isChartNode && requiredType == NODE_TYPES.CHART_NODE_TYPE))
            {
                return true;
            }
            return false;
        }

        private List<string> getAllScenariosForGivenReportObjects(List<TreeNode> reportObjects)
        {
            List<string> allScenarios = new List<string>();
            Dictionary<string, int> scenariosOccurences = new Dictionary<string, int>();
            foreach (TreeNode node in reportObjects)
            {
                List<string> scenarioNamesConatiningCurrentObject = getAllScenarioNamesContainingGivenTableName(node.Name);
                foreach (string scenarioName in scenarioNamesConatiningCurrentObject)
                {
                    if (scenariosOccurences.ContainsKey(scenarioName))
                        scenariosOccurences[scenarioName]++;
                    else
                        scenariosOccurences.Add(scenarioName, 1);
                }
            }
            foreach (KeyValuePair<string, int> pair in scenariosOccurences)
            {
                allScenarios.Add(pair.Key);
            }
            return allScenarios;
        }

        private void manageIndividualElementLinks()
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null)
                return;

            if (Tag.isTableNode || Tag.isFilterNode || Tag.isParagraphNode)
            {
                if (Tag.isParagraphNode
                    && (Tag.ScenarioName == null || Tag.ScenarioName == ""))
                {
                    //Note on a Global chart
                    List<string> allGlobalChartsNames = DonneesEnCours.GetGeneralGraphicFilter();
                    TableScenarioInfoHolder noteChartInfo = new TableScenarioInfoHolder(1, CurrentNode.Name, Tag.Name, Tag.Name, allGlobalChartsNames);
                    Dictionary<int, TableScenarioInfoHolder> noteChartNames = new Dictionary<int, TableScenarioInfoHolder>();
                    noteChartNames.Add(noteChartInfo.tableId, noteChartInfo);

                    if (managedNotesOnGlobalChartsLinks(CurrentNode, CurrentNode.Name, noteChartNames))
                        OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres, treeView1.Nodes, DonneesEnCours, cmsReports);
                }
                else
                {
                    Dictionary<int, TableScenarioInfoHolder> scenarioTableNames = getScenarioAndTableForGivenTableOrFilterOrTableNote(CurrentNode);
                    if (managedTableLinks(CurrentNode, CurrentNode.Name, Tag.ScenarioName, scenarioTableNames))
                        OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres, treeView1.Nodes, DonneesEnCours, cmsReports);
                }
            }
            else if (Tag.isChartNode)
            {
                GraphicFilter graphicFilter = null;
                if (Tag.ScenarioName == "")
                    graphicFilter = DonneesEnCours.GetGeneralGraphicFilter(CurrentNode.Name);
                else if (Tag.ScenarioName == null)
                    graphicFilter = DonneesEnCours.GetGraphicFilter(CurrentNode.Name);
                //if (DonneesEnCours.GetGeneralGraphicFilter(CurrentNode.Name) != null)
                if (graphicFilter != null)
                {
                    //Global Chart
                    Dictionary<int, TableScenarioInfoHolder> scenarioTableNames = getScenarioAndTablePairsForGivenGlobalChart(CurrentNode);                    
                    if (manageReportGlobalChartLinks(CurrentNode, scenarioTableNames))
                        OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres, treeView1.Nodes, DonneesEnCours, cmsReports);
                }
            }
        }

        // >> Task #13384 Report Tree-view C#37 (global chart links)
        private void manageChartLinksToolStripMenuItem_Click(object sender, EventArgs e)
        {
            manageGlobalChartLinks();
        }

        private void manageGlobalChartLinks()
        {   
            if (isGlobalChart(CurrentNode.Name, CheckCurrentNode(), DonneesEnCours))
            {
                GraphicFilter globalGraphicFilter = DonneesEnCours.GetGeneralGraphicFilter(CurrentNode.Name);
                if (chartHasOnlyInputTables(DonneesEnCours.GetGeneralGraphicFilter(CurrentNode.Name)))
                {
                    MessageBox.Show("The chart \"" + CurrentNode.Name + "\" is based only on Input tables."
                        + Environment.NewLine + "The links management doesn't apply to this type of chart.", "Links management", 
                        MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                Dictionary<int, TableScenarioInfoHolder> scenarioTableNames = getScenarioAndTablePairsForGivenGlobalChart(globalGraphicFilter);
                IndividualLinksManagementAssistant linksManager = new IndividualLinksManagementAssistant(CurrentNode.Text, scenarioTableNames, 
                    globalGraphicFilter.Name, globalGraphicFilter.Title, DonneesEnCours);
                if (linksManager.ShowDialog() == DialogResult.OK)
                {
                    GraphicFilter clonedGraphicFilter = createGlobalChartWithNewLinksBasedOnGivenChart(globalGraphicFilter, linksManager.tableScenarioHolderDictionary,
                        linksManager.cloneGraphicFilterNameParameters);                    
                }
            }
        }

        public static bool isGlobalChart(string nodeName, TreeViewTag nodeTag, GestionDonneesHUB2SIM donnees)
        {
            if (nodeName == null || nodeTag == null 
                || !nodeTag.isChartNode || donnees.GetGeneralGraphicFilter(nodeName) == null)
            {
                return false;
            }
            return true;
        }

        public static bool chartHasOnlyInputTables(GraphicFilter graphicFilter)
        {
            if (graphicFilter == null || graphicFilter.getlistColumnsOrigin() == null)
            {
                return false;
            }
            foreach (ColumnInformation columnInformation in graphicFilter.getlistColumnsOrigin())
            {
                if (columnInformation.DataSet != "Input")
                {
                    return false;
                }
            }
            return true;
        }

        public Dictionary<int, TableScenarioInfoHolder> getScenarioAndTablePairsForGivenGlobalChart(GraphicFilter globalGraphicFilter)
        {
            Dictionary<int, TableScenarioInfoHolder> scenariosAndTables = new Dictionary<int, TableScenarioInfoHolder>();
            if (globalGraphicFilter == null)
                return scenariosAndTables;
                                    
            ArrayList columnsOriginList = globalGraphicFilter.getlistColumnsOrigin();
            int tableId = 1;
            foreach (ColumnInformation columnInformation in columnsOriginList)
            {
                string childTableName = columnInformation.TableName;
                string childTableScenarioName = columnInformation.DataSet;
                List<string> scenarioNamesConatiningCurrentObject = getAllScenarioNamesContainingGivenTableName(childTableName);
                TableScenarioInfoHolder scenarioTableNamesHolder = new TableScenarioInfoHolder(tableId, childTableName, 
                    childTableScenarioName, childTableScenarioName, scenarioNamesConatiningCurrentObject);
                scenariosAndTables.Add(tableId, scenarioTableNamesHolder);
                tableId++;
            }
            return scenariosAndTables;
        }
        // << Task #13384 Report Tree-view C#37 (global chart links)
        
        public bool manageReportGlobalChartLinks(TreeNode chartNode, Dictionary<int, TableScenarioInfoHolder> scenarioTableNames)
        {            
            if (chartNode == null || scenarioTableNames == null)
                return false;
            TreeNode parentReport = getParentReportNode(chartNode);
            if (parentReport == null)
                return false;
            GraphicFilter graphicFilter = DonneesEnCours.GetGeneralGraphicFilter(chartNode.Name);
            if (graphicFilter == null)
                return false;
            IndividualLinksManagementAssistant linksManager = new IndividualLinksManagementAssistant(chartNode.Text, scenarioTableNames,
                graphicFilter.Name, graphicFilter.Title, DonneesEnCours);
            if (linksManager.ShowDialog() == DialogResult.OK)
            {
                GraphicFilter clonedGraphicFilter = createGlobalChartWithNewLinksBasedOnGivenChart(graphicFilter, linksManager.tableScenarioHolderDictionary,
                    linksManager.cloneGraphicFilterNameParameters);
                if (clonedGraphicFilter == null)                
                    return false;                
                //chart node from reportsParameters will point to the new global chart
                int reportTreeIndex = 0;
                if (chartNode.Tag is TreeViewTag)
                    reportTreeIndex = ((TreeViewTag)chartNode.Tag).reportTreeIndex;
                TreeNode chartNodeFromReportsParametres = getNodeFromReportsParametersExcludingDirectories(chartNode.Name, reportTreeIndex, parentReport.Name);
                if (chartNodeFromReportsParametres != null
                    && chartNodeFromReportsParametres.Tag is TreeViewTag)
                {
                    chartNodeFromReportsParametres.Name = clonedGraphicFilter.Name;
                    chartNodeFromReportsParametres.Text = clonedGraphicFilter.Name;
                    TreeViewTag nodeTag = (TreeViewTag)chartNodeFromReportsParametres.Tag;
                    nodeTag.Name = clonedGraphicFilter.Name;
                }
                //directory from reportsParameters containing the chart will be named like the new global chart
                if (chartNode.Parent != null)
                {
                    TreeNode parentDirectoryNodeFromReportsParametres = getNodeFromReportsParametersByNodeNameAndReportName(chartNode.Parent.Name, parentReport.Name);
                    if (parentDirectoryNodeFromReportsParametres != null
                        && parentDirectoryNodeFromReportsParametres.Tag is TreeViewTag
                        && ((TreeViewTag)parentDirectoryNodeFromReportsParametres.Tag).isDirectoryNode)
                    {
                        parentDirectoryNodeFromReportsParametres.Name = clonedGraphicFilter.Name;
                        parentDirectoryNodeFromReportsParametres.Text = clonedGraphicFilter.Name;
                        TreeViewTag nodeTag = (TreeViewTag)parentDirectoryNodeFromReportsParametres.Tag;
                        nodeTag.Name = clonedGraphicFilter.Name;
                    }
                }
                return true;
            }
            return false;
        }

        private void changeReportGlobalChartLink(TreeNode chartNode, Dictionary<int, PAX2SIM.TableScenarioInfoHolder> tableScenarioHolderDictionary,
            TreeNode parentReport)
        {
            GraphicFilter graphicFilter = DonneesEnCours.GetGeneralGraphicFilter(chartNode.Name);
            //GraphicFilter graphicFilter = DonneesEnCours.GetGraphicFilter(chartNode.Name);
            if (graphicFilter != null)
            {
                GraphicFilter clonedGraphicFilter = createGlobalChartWithNewLinksBasedOnGivenChart(graphicFilter, tableScenarioHolderDictionary, null);
                if (clonedGraphicFilter == null)
                {
                    return;
                }
                //chart node from reportsParameters will point to the new global chart
                int reportTreeIndex = 0;
                if (chartNode.Tag is TreeViewTag)
                    reportTreeIndex = ((TreeViewTag)chartNode.Tag).reportTreeIndex;
                TreeNode chartNodeFromReportsParametres = getNodeFromReportsParametersExcludingDirectories(chartNode.Name, reportTreeIndex, parentReport.Name);
                if (chartNodeFromReportsParametres != null
                    && chartNodeFromReportsParametres.Tag is TreeViewTag)
                {
                    chartNodeFromReportsParametres.Name = clonedGraphicFilter.Name;
                    chartNodeFromReportsParametres.Text = clonedGraphicFilter.Name;
                    TreeViewTag nodeTag = (TreeViewTag)chartNodeFromReportsParametres.Tag;
                    nodeTag.Name = clonedGraphicFilter.Name;
                }
                //directory from reportsParameters containing the chart will be named like the new global chart
                if (chartNode.Parent != null)
                {
                    TreeNode parentDirectoryNodeFromReportsParametres = getNodeFromReportsParametersByNodeNameAndReportName(chartNode.Parent.Name, parentReport.Name);
                    if (parentDirectoryNodeFromReportsParametres != null
                        && parentDirectoryNodeFromReportsParametres.Tag is TreeViewTag
                        && ((TreeViewTag)parentDirectoryNodeFromReportsParametres.Tag).isDirectoryNode)
                    {
                        parentDirectoryNodeFromReportsParametres.Name = clonedGraphicFilter.Name;
                        parentDirectoryNodeFromReportsParametres.Text = clonedGraphicFilter.Name;
                        TreeViewTag nodeTag = (TreeViewTag)parentDirectoryNodeFromReportsParametres.Tag;
                        nodeTag.Name = clonedGraphicFilter.Name;
                    }
                }
            }
        }

        private GraphicFilter createGlobalChartWithNewLinksBasedOnGivenChart(GraphicFilter prototypeGraphicFilter,
            Dictionary<int, TableScenarioInfoHolder> tableScenarioHolderDictionary, CloneGraphicFilterNameEditor.Parameters clonedGraphicFilterNameParameters)
        {
            //create a copy of the graphic filter
            GraphicFilter clonedGraphicFilter = prototypeGraphicFilter.clone();

            if (clonedGraphicFilterNameParameters != null)
            {
                clonedGraphicFilter.Name = clonedGraphicFilterNameParameters.chartName;
                if (clonedGraphicFilterNameParameters.changeChartTitle)
                    clonedGraphicFilter.Title = clonedGraphicFilterNameParameters.chartTitle;
            }
            else
            {
                // ask for a new unique name
                string proposedNewChartName = clonedGraphicFilter.Name + "_";
                for (int i = 1; i < 1000; i++)
                {
                    string nameToCheck = proposedNewChartName + i;
                    if (!DonneesEnCours.GraphicFilterExist(nameToCheck))
                    {
                        proposedNewChartName = nameToCheck;
                        break;
                    }
                }
                CloneGraphicFilterNameEditor chartNameEditor
                    = new CloneGraphicFilterNameEditor(clonedGraphicFilter.Name, proposedNewChartName, clonedGraphicFilter.Title, DonneesEnCours);
                if (chartNameEditor.ShowDialog() == DialogResult.OK)
                {
                    clonedGraphicFilter.Name = chartNameEditor.chartName;
                    if (chartNameEditor.changeChartTitle)
                        clonedGraphicFilter.Title = chartNameEditor.chartTitle;
                }
                else
                {
                    return null;
                }
            }

            // update the table links
            ArrayList columnsOriginList = clonedGraphicFilter.getlistColumnsOrigin();
            ArrayList clonedColumnNames = new ArrayList();
            foreach (ColumnInformation columnInformation in columnsOriginList)
            {
                //bool modified = false;
                foreach (KeyValuePair<int, TableScenarioInfoHolder> pair in tableScenarioHolderDictionary)
                {
                    if (pair.Value.initialLinkedScenarioName == columnInformation.DataSet && pair.Value.tableName == columnInformation.TableName)
                    {
                        if (columnInformation.DisplayedName != null && columnInformation.DisplayedName.Contains(columnInformation.DataSet)) // Task #1954
                            columnInformation.DisplayedName = columnInformation.DisplayedName.Replace(columnInformation.DataSet, pair.Value.linkedScenarioName);

                        columnInformation.DataSet = pair.Value.linkedScenarioName;
                        //columnInformation.DisplayedName = columnInformation.DataSet + "." + columnInformation.ColumnName; Task #1954
                        //string cloneColumnName = columnInformation.DataSet + "." + columnInformation.ColumnName;
                        //clonedColumnNames.Add(cloneColumnName);
                        //modified = true;
                        
                        break;
                    }
                }
                /*if (!modified)
                {
                    string cloneColumnName = columnInformation.DataSet + "." + columnInformation.ColumnName;
                    clonedColumnNames.Add(cloneColumnName);
                }*/
                clonedColumnNames.Add(columnInformation.DisplayedName);
            }
            // update the column names
            ArrayList columnNames = clonedGraphicFilter.getListColumnsNames();
            if (columnNames.Count == clonedColumnNames.Count)
            {
                for (int i = 0; i < columnNames.Count; i++)
                {
                    columnNames[i] = clonedColumnNames[i];
                }
            }

            //save the cloned GF in the global Charts
            DonneesEnCours.AddGeneralGraphicFilter(clonedGraphicFilter);
            TreeViewTag Tag = TreeViewTag.getChartNode(clonedGraphicFilter.Name);
            OverallTools.TreeViewFunctions.AddSortedNode(treeView1.Nodes[3], 
                OverallTools.TreeViewFunctions.createBranch(clonedGraphicFilter.Name, clonedGraphicFilter.Name, Tag, cmsCharts));
            return clonedGraphicFilter;
        }

        private bool managedTableLinks(TreeNode currentNode, string tableName, string scenarioName, 
            Dictionary<int, TableScenarioInfoHolder> scenarioTableNames)
        {
            if (currentNode == null || tableName == null
                || scenarioName == null || scenarioTableNames == null)
            {
                return false;
            }

            if (tableName.StartsWith(scenarioName)
                && !DonneesEnCours.tableEstPresente(scenarioName, tableName))
            {
                // the Reports global charts contain the chart's child tables, named scenarioName-tableName
                if (tableName.Length > scenarioName.Length + 1)
                    tableName = tableName.Substring(scenarioName.Length + 1);
            }

            TreeNode parentReport = getParentReportNode(currentNode);
            if (parentReport == null)
                return false;

            int reportTreeIndex = 0;

            if (currentNode.Parent != null && currentNode.Parent.Tag is TreeViewTag
                && ((TreeViewTag)currentNode.Parent.Tag).isChartNode)
            {
                reportTreeIndex = ((TreeViewTag)currentNode.Parent.Tag).reportTreeIndex;
            }
            else
            {
                if (currentNode.Tag is TreeViewTag)
                    reportTreeIndex = ((TreeViewTag)currentNode.Tag).reportTreeIndex;
            }
            TreeNode nodeFromReportsParametres = getNodeFromReportsParametersExcludingDirectories(currentNode.Name, reportTreeIndex, parentReport.Name);
            if (nodeFromReportsParametres != null)
            {
                IndividualLinksManagementAssistant linksManager = new IndividualLinksManagementAssistant(nodeFromReportsParametres.Text, scenarioTableNames);
                if (linksManager.ShowDialog() == DialogResult.OK)
                {
                    foreach (KeyValuePair<int, TableScenarioInfoHolder> pair in linksManager.tableScenarioHolderDictionary)
                    {
                        linkNodeToGivenScenario(nodeFromReportsParametres, pair.Value.linkedScenarioName);
                        return true;
                    }
                }
            }
            return false;
        }

        private bool managedNotesOnGlobalChartsLinks(TreeNode noteNode, string noteName,
            Dictionary<int, TableScenarioInfoHolder> noteChartNames)
        {
            if (noteNode == null || noteName == null
                || noteChartNames == null)
            {
                return false;
            }

            TreeNode parentReport = getParentReportNode(noteNode);
            if (parentReport == null)
                return false;

            int reportTreeIndex = 0;
            if (noteNode.Tag is TreeViewTag)
                reportTreeIndex = ((TreeViewTag)noteNode.Tag).reportTreeIndex;
            TreeNode nodeFromReportsParametres = getNodeFromReportsParametersExcludingDirectories(noteName, reportTreeIndex, parentReport.Name);
            if (nodeFromReportsParametres != null)
            {                
                IndividualLinksManagementAssistant linksManager = new IndividualLinksManagementAssistant(nodeFromReportsParametres.Text, noteChartNames, true);                
                if (linksManager.ShowDialog() == DialogResult.OK)
                {
                    foreach (KeyValuePair<int, TableScenarioInfoHolder> pair in linksManager.tableScenarioHolderDictionary)
                    {

                        linkNoteToGivenGlobalChartName(nodeFromReportsParametres, pair.Value.linkedScenarioName);
                        return true;
                    }
                }
            }
            return false;
        }

        private List<string> getAllScenarioNamesContainingGivenTableName(string objectName)
        {
            List<string> scenarioNamesConatiningCurrentObject = new List<string>();
            List<string> scenarioNames = DonneesEnCours.getScenarioNames();
            foreach (string scenarioName in scenarioNames)
            {
                if (DonneesEnCours.tableEstPresente(scenarioName, objectName))
                {
                    scenarioNamesConatiningCurrentObject.Add(scenarioName);
                }
            }
            return scenarioNamesConatiningCurrentObject;
        }

        private TreeNode getNodeFromReportsParametersExcludingDirectories(string nodeName, int nodeIndexInReports, string parentReportName)
        {
            return getNodeByNameAndReportIndex(nodeName, nodeIndexInReports, DonneesEnCours.htReportParametres[parentReportName].tv_CustomTree.Nodes);
            //TreeNode searchedNode = getNodeByNameAndReportIndex(nodeName, nodeIndexInReports, DonneesEnCours.htReportParametres[parentReportName].tv_CustomTree.Nodes);
            //if (searchedNode != null && searchedNode.Tag is TreeViewTag)
            //{
            //    TreeViewTag tag = (TreeViewTag)searchedNode.Tag;
            //    if (tag.isDirectoryNode && searchedNode.Nodes.Count > 0)
            //    {
            //        searchedNode = getNodeByNameAndReportIndex(nodeName, nodeIndexInReports, searchedNode.Nodes);                    
            //    }
            //}
            //return searchedNode;
        }

        private TreeNode getNodeFromReportsParametersByNodeNameAndReportName(string nodeName, string parentReportName)
        {
            TreeNode searchedNode = getNodeByName(nodeName, DonneesEnCours.htReportParametres[parentReportName].tv_CustomTree.Nodes);            
            return searchedNode;
        }

        private void linkNodeToGivenScenario(TreeNode node, string scenarioName)
        {
            if (node != null
                && node.Tag is TreeViewTag)
            {
                TreeViewTag nodeTag = (TreeViewTag)node.Tag;
                nodeTag.ScenarioName = scenarioName;
            }   
        }

        private void linkNoteToGivenGlobalChartName(TreeNode node, string globalChartName)
        {
            if (node != null
                && node.Tag is TreeViewTag)
            {
                TreeViewTag nodeTag = (TreeViewTag)node.Tag;
                nodeTag.Name = globalChartName;
                node.Name = globalChartName;
                node.Text = "Note_" + globalChartName;
            }
        }

        public Dictionary<int, TableScenarioInfoHolder> getScenarioAndTablePairsForGivenGlobalChart(TreeNode chartNode)
        {
            Dictionary<int, TableScenarioInfoHolder> scenariosAndTables = new Dictionary<int, TableScenarioInfoHolder>();
            if (chartNode == null || chartNode.Nodes == null || chartNode.Nodes.Count == 0)
                return scenariosAndTables;
            int tableId = 1;
            foreach (TreeNode child in chartNode.Nodes)
            {
                if (child.Tag is TreeViewTag)
                {
                    TreeViewTag childTag = (TreeViewTag)child.Tag;
                    if (childTag != null && childTag.isTableNode && child.Name.StartsWith(childTag.ScenarioName))
                    {
                        // the Reports global charts contain the chart's child tables, named scenarioName-tableName
                        if (child.Name.Length > childTag.ScenarioName.Length + 1)
                        {
                            string childTableName = child.Name.Substring(childTag.ScenarioName.Length + 1);
                            List<string> scenarioNamesConatiningCurrentObject = getAllScenarioNamesContainingGivenTableName(childTableName);
                            TableScenarioInfoHolder scenarioTableNamesHolder 
                                = new TableScenarioInfoHolder(tableId, childTableName, childTag.ScenarioName, childTag.ScenarioName, scenarioNamesConatiningCurrentObject);
                            scenariosAndTables.Add(tableId, scenarioTableNamesHolder);
                            tableId++;
                        }
                    }
                }
            }
            return scenariosAndTables;
        }

        public Dictionary<int, TableScenarioInfoHolder> getScenarioAndTableForGivenTableOrFilterOrTableNote(TreeNode node)
        {
            Dictionary<int, TableScenarioInfoHolder> scenariosAndTables = new Dictionary<int, TableScenarioInfoHolder>();
            if (node == null || !(node.Tag is TreeViewTag))
                return scenariosAndTables;
            TreeViewTag tag = (TreeViewTag)node.Tag;
            if ((tag.isTableNode || tag.isFilterNode || tag.isParagraphNode)
                && tag.ScenarioName != null && tag.ScenarioName != "")
            {
                int tableId = 1;
                List<string> scenarioNamesConatiningCurrentObject = getAllScenarioNamesContainingGivenTableName(node.Name);
                TableScenarioInfoHolder scenarioTableNamesHolder 
                    = new TableScenarioInfoHolder(tableId, node.Name, tag.ScenarioName, tag.ScenarioName, scenarioNamesConatiningCurrentObject);
                scenariosAndTables.Add(tableId, scenarioTableNamesHolder);
            }
            return scenariosAndTables;
        }

        internal class TableScenarioInfoHolder
        {
            public string initialLinkedScenarioName { get; set; }
            public string linkedScenarioName { get; set; }
            public string tableName { get; set; }
            public int tableId { get; set; }
            public List<string> scenariosContainingTable { get; set; }

            public TableScenarioInfoHolder(int _tableId, string _tableName,
                string _initialLinkedScenarioName, string _linkedScenarioName, 
                List<string> _scenariosContainingTable)
            {
                tableId = _tableId;
                initialLinkedScenarioName = _initialLinkedScenarioName;
                linkedScenarioName = _linkedScenarioName;
                tableName = _tableName;
                scenariosContainingTable = _scenariosContainingTable;
            }
        }

        private void refreshMainReportsNodeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OverallTools.TreeViewFunctions.refreshMainReportsNode(DonneesEnCours.htReportParametres, treeView1.Nodes, DonneesEnCours, cmsReports);
        }
        // << Task #13384 Report Tree-view
        #endregion

        private void exportAsTextFilesToolStripMenuItem_Click(object sender, EventArgs e)   // >> Task #14533 Pax2Sim - Export Scenario tables from result tree
        {
            if (sender is ContextMenuStrip)
            {
                ContextMenuStrip senderMenu = (ContextMenuStrip)sender;
                if (senderMenu.Visible)
                    senderMenu.Visible = false;
            }
            if (CurrentNode == null)
                return;
            exportAsTextFilesFromScenario(CurrentNode);
        }

        private void exportAsTextFilesFromScenario(TreeNode selectedNode)
        {
            TreeNode scenarioNode = getScenarioNode(selectedNode);
            if (scenarioNode == null)
                return;

            saveFileDialog1.Filter = "All files (*.*)|*.*";
            saveFileDialog1.FileName = scenarioNode.Name;
            if (saveFileDialog1.ShowDialog() != DialogResult.OK)
                return;
            string targetDirectoryName = saveFileDialog1.FileName + "\\";
            if (!Directory.Exists(targetDirectoryName))
                Directory.CreateDirectory(targetDirectoryName);

            SIMCORE_TOOL.Prompt.SIM_Chargement cht = null;
            if (!bDebug)
            {
                cht = new SIMCORE_TOOL.Prompt.SIM_Chargement(this.Location, this.Size);
                cht.setChenillard = true;
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
            }
            List<TreeNode> allRelevantNodes = new List<TreeNode>();
            List<TreeNode> tableNodes = getNodesFromTreeByNodeType(selectedNode.Nodes, NODE_TYPES.TABLE_NODE_TYPE);
            allRelevantNodes.AddRange(tableNodes);
            List<TreeNode> filterNodes = getNodesFromTreeByNodeType(selectedNode.Nodes, NODE_TYPES.FILTER_NODE_TYPE);
            allRelevantNodes.AddRange(filterNodes);

            List<string> exportFileNames = OverallTools.FonctionUtiles.getFileNamesFromNodesList(allRelevantNodes);
            List<string> alreadyExistingFileNames = OverallTools.FonctionUtiles.getFileNamesFromDirectory(targetDirectoryName, "*.txt");
            List<string> commonFileNames = OverallTools.FonctionUtiles.getCommonElements(exportFileNames, alreadyExistingFileNames);
            List<string> uniqueExportFileNames = OverallTools.FonctionUtiles.getListAExclusiveElements(exportFileNames, alreadyExistingFileNames);

            if (scenarioNode != null && !stoppedLoadingScenario)
            {
                bool applyAll = false;
                foreach (string commonFile in commonFileNames)
                {
                    if (!applyAll)
                    {
                        OverwriteFilesDialog ofd = null;
                        if (cht == null)
                            ofd = new OverwriteFilesDialog(commonFile + ".txt");
                        else
                        {
                            Point location = new Point(cht.Location.X, cht.Location.Y + 180);
                            ofd = new OverwriteFilesDialog(commonFile + ".txt", location);
                        }
                        DialogResult result = ofd.ShowDialog();

                        if (ofd.applyAll)
                            applyAll = true;

                        if (result == DialogResult.OK)
                        {
                            writeTableToFile(scenarioNode.Name, commonFile, targetDirectoryName + commonFile + ".txt", "\t", cht);
                        }
                        else if (result == DialogResult.Cancel)
                        {
                            if (cht != null)
                                cht.KillWindow();
                            return;
                        }
                        else if (result == DialogResult.No
                            && applyAll)
                        {
                            break;
                        }
                    }
                    else
                    {
                        writeTableToFile(scenarioNode.Name, commonFile, targetDirectoryName + commonFile + ".txt", "\t", cht);
                    }
                    if (stoppedLoadingScenario)
                        break;
                }
                if (!stoppedLoadingScenario)
                {
                    foreach (string uniqueFile in uniqueExportFileNames)
                        writeTableToFile(scenarioNode.Name, uniqueFile, targetDirectoryName + uniqueFile + ".txt", "\t", cht);
                }
                if (stoppedLoadingScenario)
                    loadingScenarioToShowObject = false;
            }
            if (cht != null)
                cht.KillWindow();
        }

        public void exportTextFilesFromScenarioNodeToGivenPath(TreeNode selectedNode, string targetDirectoryName)   // >> Task #1954_exportOutputTables
        {
            if (selectedNode == null)
                return;
            TreeNode scenarioNode = getScenarioNode(selectedNode);
            if (scenarioNode == null)
                return;
            if (!Directory.Exists(targetDirectoryName))
                return;
            SIM_Chargement cht = null;
            if (!bDebug)
            {
                cht = new SIM_Chargement(this.Location, this.Size);
                cht.setChenillard = true;
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
            }
            List<TreeNode> allRelevantNodes = new List<TreeNode>();
            List<TreeNode> tableNodes = getNodesFromTreeByNodeType(selectedNode.Nodes, NODE_TYPES.TABLE_NODE_TYPE);
            allRelevantNodes.AddRange(tableNodes);
            List<TreeNode> filterNodes = getNodesFromTreeByNodeType(selectedNode.Nodes, NODE_TYPES.FILTER_NODE_TYPE);
            allRelevantNodes.AddRange(filterNodes);
            List<string> exportFileNames = OverallTools.FonctionUtiles.getFileNamesFromNodesList(allRelevantNodes);
            List<string> alreadyExistingFileNames = OverallTools.FonctionUtiles.getFileNamesFromDirectory(targetDirectoryName, "*.txt");
            List<string> commonFileNames = OverallTools.FonctionUtiles.getCommonElements(exportFileNames, alreadyExistingFileNames);
            List<string> uniqueExportFileNames = OverallTools.FonctionUtiles.getListAExclusiveElements(exportFileNames, alreadyExistingFileNames);

            if (scenarioNode != null && !stoppedLoadingScenario)
            {
                bool applyAll = false;
                foreach (string commonFile in commonFileNames)
                {
                    if (!applyAll)
                    {
                        OverwriteFilesDialog ofd = null;
                        if (cht == null)
                            ofd = new OverwriteFilesDialog(commonFile + ".txt");
                        else
                        {
                            Point location = new Point(cht.Location.X, cht.Location.Y + 180);
                            ofd = new OverwriteFilesDialog(commonFile + ".txt", location);
                        }
                        DialogResult result = ofd.ShowDialog();

                        if (ofd.applyAll)
                            applyAll = true;

                        if (result == DialogResult.OK)
                        {
                            writeTableToFile(scenarioNode.Name, commonFile, targetDirectoryName + commonFile + ".txt", "\t", cht);
                        }
                        else if (result == DialogResult.Cancel)
                        {
                            if (cht != null)
                                cht.KillWindow();
                            return;
                        }
                        else if (result == DialogResult.No && applyAll)
                        {
                            break;
                        }
                    }
                    else
                    {
                        writeTableToFile(scenarioNode.Name, commonFile, targetDirectoryName + commonFile + ".txt", "\t", cht);
                    }
                    if (stoppedLoadingScenario)
                        break;
                }
                if (!stoppedLoadingScenario)
                {
                    foreach (string uniqueFile in uniqueExportFileNames)
                        writeTableToFile(scenarioNode.Name, uniqueFile, targetDirectoryName + uniqueFile + ".txt", "\t", cht);
                }
                if (stoppedLoadingScenario)
                    loadingScenarioToShowObject = false;
            }
            if (cht != null)
                cht.KillWindow();
        }

        private void writeTableToFile(string scenarioName, string sourceTableName,
            string path, string separator, SIM_Chargement cht)
        {
            DataTable sourceTable = DonneesEnCours.getTable(scenarioName, sourceTableName);
            if (sourceTable != null)
            {
                if (cht != null)
                    cht.ChargementFichier("Exporting file : " + sourceTableName);
                OverallTools.FonctionUtiles.EcritureFichier(sourceTable, path, separator, true);   //targetDirectoryName + commonFile + ".txt", "\t", true);
            }
        }

        // >> Task #15717 PAX2SIM - Create Filter Assistant and Datagrid - new Features - C#9
        const string SEARCH_CONTAINS = "Contains:";
        const string SEARCH_MATCHES = "Matches:";
        private void searchTypeToolStripButton_Click(object sender, EventArgs e)
        {
            if (searchTypeToolStripButton.Text == SEARCH_CONTAINS)
            {
                searchTypeToolStripButton.Text = SEARCH_MATCHES;
                searchTypeToolStripButton.ToolTipText = "Switch to Contains";
            }
            else if (searchTypeToolStripButton.Text == SEARCH_MATCHES)
            {
                searchTypeToolStripButton.Text = SEARCH_CONTAINS;
                searchTypeToolStripButton.ToolTipText = "Switch to Matches";
            }
            searchValueInDatagrid();
        }

        private void SearchToolStripTextBox_TextChanged(object sender, EventArgs e)
        {
            //searchValueInDatagrid();
        }

        List<int> columnIndexes = new List<int>();
        List<int> rowIndexes = new List<int>();
        List<Coordinate> cellCoordinates = new List<Coordinate>();

        int columnsListIndex = -1;
        int rowsListIndex = -1;        
        int cellCoordinateIndex = -1;

        private void searchValueInDatagrid()    //TO DO: parametrize the function
        {
            columnIndexes.Clear();
            rowIndexes.Clear();
            cellCoordinates.Clear();
            cellCoordinateIndex = -1;
                        
            if (dataGridView1 == null || dataGridView1.Rows == null || dataGridView1.Rows.Count == 0)
                return;

            dataGridView1.ClearSelection();

            string searchValue = SearchToolStripTextBox.Text.Trim();
            bool firstFoundCellSelected = false;
            for (int r = 0; r < dataGridView1.Rows.Count; r++)
            {
                for (int c = 0; c < dataGridView1.Rows[r].Cells.Count; c++)
                {
                    if (dataGridView1.Rows[r].Cells[c].Value == null)
                        continue;

                    if (searchValue == "")
                        dataGridView1.Rows[r].Cells[c].Style.BackColor = Color.White;
                    else
                    {
                        string valueFound = dataGridView1.Rows[r].Cells[c].Value.ToString().Trim();
                        if (searchTypeToolStripButton.Text == SEARCH_CONTAINS)
                        {
                            if (valueFound.Contains(searchValue))
                            {
                                if (!firstFoundCellSelected)
                                {                                    
                                    selectCellByGivenCoordinates(new Coordinate(r, c));
                                    firstFoundCellSelected = true;

                                    columnsListIndex = 0;
                                    rowsListIndex = 0;
                                    cellCoordinateIndex = 0;
                                }

                                dataGridView1.Rows[r].Cells[c].Style.BackColor = Color.LightGreen;

                                if (!columnIndexes.Contains(c))
                                    columnIndexes.Add(c);
                                if (!rowIndexes.Contains(r))
                                    rowIndexes.Add(r);                                
                                cellCoordinates.Add(new Coordinate(r, c));
                            }
                            else
                                dataGridView1.Rows[r].Cells[c].Style.BackColor = Color.White;
                        }
                        else if (searchTypeToolStripButton.Text == SEARCH_MATCHES)
                        {
                            if (valueFound == searchValue)
                            {
                                if (!firstFoundCellSelected)
                                {                                    
                                    selectCellByGivenCoordinates(new Coordinate(r, c));                                    
                                    firstFoundCellSelected = true;

                                    columnsListIndex = 0;
                                    rowsListIndex = 0;                                    
                                    cellCoordinateIndex = 0;
                                }

                                dataGridView1.Rows[r].Cells[c].Style.BackColor = Color.LightGreen;

                                if (!columnIndexes.Contains(c))
                                    columnIndexes.Add(c);
                                if (!rowIndexes.Contains(r))
                                    rowIndexes.Add(r);                                
                                cellCoordinates.Add(new Coordinate(r, c));
                            }
                            else
                                dataGridView1.Rows[r].Cells[c].Style.BackColor = Color.White;
                        }
                    }
                }
            }
            dataGridView1.Refresh();
        }

        private void prevToolStripButton_Click(object sender, EventArgs e)
        {
            if (cellCoordinateIndex == -1 || cellCoordinates.Count == 0)
                return;

            dataGridView1.ClearSelection();

            if (dataGridView1.SelectionMode == DataGridViewSelectionMode.CellSelect)
            {
                if (cellCoordinateIndex - 1 < 0)
                    cellCoordinateIndex = cellCoordinates.Count - 1;
                else
                    cellCoordinateIndex--;
                if (cellCoordinateIndex < cellCoordinates.Count)
                    selectCellByGivenCoordinates(cellCoordinates[cellCoordinateIndex]);
            }
            else if (dataGridView1.SelectionMode == DataGridViewSelectionMode.FullRowSelect)
            {
                if (rowsListIndex - 1 < 0)
                    rowsListIndex = rowIndexes.Count - 1;
                else
                    rowsListIndex--;
                if (rowsListIndex < rowIndexes.Count)
                    selectRowByGivenIndex(rowIndexes[rowsListIndex]);
            }
            else if (dataGridView1.SelectionMode == DataGridViewSelectionMode.FullColumnSelect)
            {
                if (columnsListIndex - 1 < 0)
                    columnsListIndex = columnIndexes.Count - 1;
                else
                    columnsListIndex--;
                if (columnsListIndex < columnIndexes.Count)
                    selectColumnByGivenIndex(columnIndexes[columnsListIndex]);
            }
        }

        private void nextToolStripButton_Click(object sender, EventArgs e)
        {
            if (cellCoordinateIndex == -1 || cellCoordinates.Count == 0)
                return;
            
            dataGridView1.ClearSelection();

            if (dataGridView1.SelectionMode == DataGridViewSelectionMode.CellSelect)
            {
                if (cellCoordinateIndex + 1 >= cellCoordinates.Count)
                    cellCoordinateIndex = 0;
                else
                    cellCoordinateIndex++;
                if (cellCoordinateIndex < cellCoordinates.Count)
                    selectCellByGivenCoordinates(cellCoordinates[cellCoordinateIndex]);
            }
            else if (dataGridView1.SelectionMode == DataGridViewSelectionMode.FullRowSelect)
            {
                if (rowsListIndex + 1 >= rowIndexes.Count)
                    rowsListIndex = 0;
                else
                    rowsListIndex++;
                if (rowsListIndex < rowIndexes.Count)
                    selectRowByGivenIndex(rowIndexes[rowsListIndex]);
            }
            else if (dataGridView1.SelectionMode == DataGridViewSelectionMode.FullColumnSelect)
            {
                if (columnsListIndex + 1 >= columnIndexes.Count)
                    columnsListIndex = 0;
                else
                    columnsListIndex++;
                if (columnsListIndex < columnIndexes.Count)
                    selectColumnByGivenIndex(columnIndexes[columnsListIndex]);
            }
        }


        private void selectCellByGivenCoordinates(Coordinate coordinate)
        {
            int rowIndex = (int)coordinate.rowIndex;
            int cellIndex = (int)coordinate.cellIndex;
            if (rowIndex < dataGridView1.Rows.Count && cellIndex < dataGridView1.Rows[rowIndex].Cells.Count)
            {
                dataGridView1.Rows[rowIndex].Cells[cellIndex].Selected = true;
                dataGridView1.FirstDisplayedScrollingRowIndex = rowIndex;
            }
        }

        private void selectRowByGivenIndex(int rowIndex)
        {
            if (rowIndex < dataGridView1.Rows.Count)
            {
                dataGridView1.Rows[rowIndex].Selected = true;
                dataGridView1.FirstDisplayedScrollingRowIndex = rowIndex;
            }
        }

        private void selectColumnByGivenIndex(int columnIndex)
        {
            if (columnIndex < dataGridView1.Columns.Count)
            {
                dataGridView1.Columns[columnIndex].Selected = true;
                dataGridView1.FirstDisplayedScrollingColumnIndex = columnIndex;
            }
        }

        private void searchToolStripButton_Click(object sender, EventArgs e)
        {
            searchValueInDatagrid();
        }

        private void SearchToolStripTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e == null)
                return;

            if (e.KeyChar == (char)13)            
                searchValueInDatagrid();
        }

        const string SPEC_DOC_PATH = "\\Docs\\FunctionalSpecificationRequirements.pdf";
        private void specificationDocumentToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                if (OverallTools.FonctionUtiles.currentAppIsRunningAsAdmin())
                    Process.Start("explorer.exe", Application.StartupPath + SPEC_DOC_PATH);
                else
                    Process.Start(Application.StartupPath + SPEC_DOC_PATH);
            }
            catch (Exception except)
            {
                OverallTools.ExternFunctions.PrintLogFile("Err00339: " + this.GetType().ToString() + " throw an exception while trying to open FunctionalSpecificationRequirements.pdf : " + except.Message);
                MessageBox.Show("Err00339 : There was a problem while trying to open FunctionalSpecificationRequirements.pdf", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }            
        }

        // << Task #15717 PAX2SIM - Create Filter Assistant and Datagrid - new Features - C#9

        // << Task #14533 Pax2Sim - Export Scenario tables from result tree
        private void openFromProjectToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string projectDocumentsDirectoryPath = UserDocumentUtils.getProjectDocumentsDirectoryPath(DonneesEnCours.getDossierEnregistrement());
            if (Directory.Exists(projectDocumentsDirectoryPath))
            {
                Process.Start(projectDocumentsDirectoryPath);
            }
            else
            {
                MessageBox.Show("The project's Documents directory doesn't exist."
                    + Environment.NewLine + "(" + projectDocumentsDirectoryPath + ")", 
                    "Open Documents Directory", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void openToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            string temporaryDocumentsDirectoryPath = UserDocumentUtils.getTemporaryDocumentsDirectoryPath(OverallTools.ExternFunctions.getTempDirectoryForPax2sim());
            if (Directory.Exists(temporaryDocumentsDirectoryPath))
            {
                Process.Start(temporaryDocumentsDirectoryPath);
            }
            else
            {
                MessageBox.Show("The temporary Documents directory doesn't exist."
                    + Environment.NewLine + "(" + temporaryDocumentsDirectoryPath + ")",
                    "Open Documents Directory", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void addDocumentMenuItem_Click(object sender, EventArgs e)  // >> Task #16578 PAX2SIM - Documents - new node in main tree-view
        {
            string tableName = "";
            string completePath = "";

            openFileDialog1.FileName = "";
            openFileDialog1.Filter = "Data files (*.*)|*.*";
            openFileDialog1.Title = "Select a file";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                if (DonneesEnCours.documentTableNames.Contains(openFileDialog1.SafeFileName))
                {
                    MessageBox.Show("The database alerady contains a document with the name \"" + openFileDialog1.SafeFileName + "\"."
                        + Environment.NewLine + "Please select a document with a different name.", "Add Document", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
                tableName = openFileDialog1.SafeFileName;
                completePath = openFileDialog1.FileName;
            }
            if (tableName == "" || completePath == "")
                return;

            string tempDocumentsDirectory = OverallTools.ExternFunctions.getTempDirectoryForPax2sim()
                + GlobalNames.DOCUMENTS_DIRECTORY_NAME + UserDocumentUtils.DOCUMENT_DIRECTORY_SEPARATOR;
            OverallTools.ExternFunctions.CheckCreateDirectory(tempDocumentsDirectory);

            string tempDocumentPath = tempDocumentsDirectory + tableName;
            if (!OverallTools.ExternFunctions.CopyFile(tempDocumentPath, completePath, "", null, null, null))
                return;

            DataTable documentTable = UserDocumentUtils.createDocumentTable(tableName, tempDocumentPath, completePath);
            if (documentTable != null)
            {
                TreeNode documentTableNode = OverallTools.TreeViewFunctions.addDocumentTableNode(documentTable, treeView1, cmsDocument);

                DonneesEnCours.AddTable("Input", documentTable);
                DonneesEnCours.documentTableNames.Add(documentTable.TableName);
            }
        }

        private void removeAllDocumentsMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null || CurrentNode.Name != GlobalNames.DOCUMENTS_MAIN_NODE_NAME || CurrentNode.Nodes.Count == 0)
                return;
            
            DialogResult dr = MessageBox.Show("Are you sure you want to remove all documents?",
                "Remove document", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (dr != DialogResult.Yes)
                return;
            string errorMessage = "";
            List<DataTable> documentTablesToBeRemoved = new List<DataTable>();
            List<TreeNode> documentNodesToBeRemoved = new List<TreeNode>();
            foreach (TreeNode documentNode in CurrentNode.Nodes)
            {
                DataTable documentTable = DonneesEnCours.getTable("Input", documentNode.Name);                
                errorMessage = removeDocumentFromTemporaryDirectory(documentNode.Name);
                if (errorMessage == "")
                {
                    documentTablesToBeRemoved.Add(documentTable);
                    documentNodesToBeRemoved.Add(documentNode);
                }
                else
                {
                    MessageBox.Show(errorMessage, "Remove Document", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);                    
                }
            }
            foreach (DataTable documentTable in documentTablesToBeRemoved)
            {
                removeDocumentTable(documentTable);
            }
            foreach (TreeNode documentNode in documentNodesToBeRemoved)
            {
                if (CurrentNode.Nodes.Contains(documentNode))
                    CurrentNode.Nodes.Remove(documentNode);
            }            
        }
        
        private void openDocumentMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null)
                return;
            string documentTableName = CurrentNode.Name;
            DataTable documentTable = DonneesEnCours.getTable("Input", documentTableName);
            if (documentTable == null)
                return;
            string filePath = UserDocumentUtils.getFilePathFromDocumentTable(documentTable);
            if (filePath == "")
                return;
            if (!File.Exists(filePath))
            {
                MessageBox.Show("Could not find the document \"" + filePath +"\".", "Open Document", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            Process.Start(filePath);
        }

        private void removeDocumentMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null)
                return;
            
            DialogResult dr = MessageBox.Show("Are you sure you want to remove \"" + CurrentNode.Name + "\"?",
                "Remove Document", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (dr != DialogResult.Yes)
                return;
            
            string errorMessage = "";
            DataTable documentTable = DonneesEnCours.getTable("Input", CurrentNode.Name);            
            if (documentTable != null && CurrentNode.Parent != null)
            {
                errorMessage = removeDocumentFromTemporaryDirectory(CurrentNode.Name);
                if (errorMessage == "")
                {
                    removeDocumentTable(documentTable);
                    CurrentNode.Parent.Nodes.Remove(CurrentNode);
                }
                else
                {
                    MessageBox.Show(errorMessage, "Remove Document", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
        }

        private string removeDocumentFromTemporaryDirectory(string documentName)
        {
            string errorMessage = "";
            string tempDocumentPath = OverallTools.ExternFunctions.getTempDirectoryForPax2sim()
                + GlobalNames.DOCUMENTS_DIRECTORY_NAME + UserDocumentUtils.DOCUMENT_DIRECTORY_SEPARATOR + documentName;
            try
            {
                if (File.Exists(tempDocumentPath))
                    File.Delete(tempDocumentPath);
            }
            catch (Exception exc)
            {
                errorMessage = "There was an error while trying to delete the document \'" + documentName 
                    + "\' from the temporary folder \'" + tempDocumentPath + "\':" + Environment.NewLine + exc.Message;
            }
            return errorMessage;
        }

        private void removeDocumentTable(DataTable documentTable)
        {
            if (documentTable == null)
                return;            
            DonneesEnCours.RemoveTable("Input", documentTable.TableName);
            DonneesEnCours.documentTableNames.Remove(documentTable.TableName);
        }

        private void updateDocumentMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null)
                return;

            string currentFileName = CurrentNode.Name;
            string chosenFileName = "";
            string chosenFileCompletePath = "";

            openFileDialog1.FileName = "";
            openFileDialog1.Filter = "Data files (*.*)|*.*";
            openFileDialog1.Title = "Select a file";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                chosenFileName = openFileDialog1.SafeFileName;
                chosenFileCompletePath = openFileDialog1.FileName;

                if (currentFileName != chosenFileName)
                {
                    MessageBox.Show("You have selected the following file: \"" + chosenFileName + "\"."
                        + Environment.NewLine + "To update the current \"" + currentFileName + "\" document please select a file with the same name.",
                        "Update Document", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
            }
            if (chosenFileName == "" || chosenFileCompletePath == "")
                return;
            string tempDocumentsDirectory = OverallTools.ExternFunctions.getTempDirectoryForPax2sim()
                    + GlobalNames.DOCUMENTS_DIRECTORY_NAME + UserDocumentUtils.DOCUMENT_DIRECTORY_SEPARATOR;
            OverallTools.ExternFunctions.CheckCreateDirectory(tempDocumentsDirectory);

            string tempDocumentPath = tempDocumentsDirectory + chosenFileName;
            if (!OverallTools.ExternFunctions.CopyFile(tempDocumentPath, chosenFileCompletePath, "", null, null, null))
                return;
            DataTable documentTable = DonneesEnCours.getTable("Input", currentFileName);
            if (documentTable != null)
                UserDocumentUtils.updateDocumentTableWithGivenFilePath(documentTable, tempDocumentPath, chosenFileCompletePath);
        }

        private void openTemporaryFolderToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string filePath = OverallTools.ExternFunctions.getTempDirectoryForPax2sim();
            if (filePath == "")
                return;
            if (!Directory.Exists(filePath))
            {
                MessageBox.Show("Could not find the folder \"" + filePath + "\".", "Open Temporary Directory", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            Process.Start(filePath);
        }

        private void openLogToolStripMenuItem_Click(object sender, EventArgs e) // >> Task #18592 PAX2SIM - BHS - trace parsing updates
        {
            string applicationLogPath = OverallTools.ExternFunctions.getPax2SimLogFilePath();
            if (!File.Exists(applicationLogPath))
            {
                MessageBox.Show("Could not find the application's log file at \"" + applicationLogPath + "\".", "Open Log File", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            Process.Start(applicationLogPath);
        }

        private void openProjectFolderToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (DonneesEnCours == null)
                return;
            string projectDirectoryPath = DonneesEnCours.getDossierEnregistrement();
            if (projectDirectoryPath == "")
                return;
            if (!Directory.Exists(projectDirectoryPath))
            {
                MessageBox.Show("Could not find the folder \"" + projectDirectoryPath + "\".", "Open Project Directory", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            Process.Start(projectDirectoryPath);
        }

        // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Task.2.       
        private void navigateToDeskFromTreeNodeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag Tag = CheckCurrentNode();
            if (Tag == null || (!Tag.isTableNode && !Tag.isFilterNode) || !DonneesEnCours.tableEstPresente(Tag.ScenarioName, CurrentNode.Name))
            {
                return;
            }
            DataTable targetTable = DonneesEnCours.getTable(Tag.ScenarioName, CurrentNode.Name);
            string scenarioName = "";
            string tableName = "";            
           
            if (TargetTools.tryGetScenarioNameAndNodeNameFromTargetTableByRowIndex(targetTable, 0, out scenarioName, out tableName))
            {
                navigateToTable(scenarioName, tableName);
            }
            else
            {
                OverallTools.ExternFunctions.PrintLogFile("Navigate to Desk: Could not retrieve the scenario name and source table name from the \"" 
                    + targetTable.TableName + "\" target table.");
            }
        }

        private void navigateToTable(string scenarioName, string tableName)
        {
            TreeNode scenarioNode = getNodeByName(scenarioName, treeView1.Nodes);
            TreeNode tableNode = null;
            
            if (scenarioNode != null)
            {
                tableNode = getNodeByName(tableName, scenarioNode.Nodes);
                if (nodeNotFoundOrNodeTypeNotTableOrResult(tableNode))   //also test for BHS target / for pax capacity the node name doesn't include the description -> (...)
                {
                    tableName += "_Statistics" + GlobalNames.BHS_STATS_TABLE_SUFFIX;   //bhs target
                    tableNode = getNodeByName(tableName, scenarioNode.Nodes);
                }
            }
            else
            {
                OverallTools.ExternFunctions.PrintLogFile("Navigate to Desk: Could not retrieve the scenario \"" + scenarioName + "\".");
            }
            if (tableNode != null)
            {
                SelectNode(tableNode);
            }
            else
            {
                OverallTools.ExternFunctions.PrintLogFile("Navigate to Desk: Could not find the table \"" + tableName + "\" in the scenario \"" + scenarioName + "\".");
            }
        }

        private bool nodeNotFoundOrNodeTypeNotTableOrResult(TreeNode node)
        {
            if (node == null)
            {
                return true;
            }
            if (node.Tag != null && node.Tag.GetType() == typeof(TreeViewTag) 
                && !((TreeViewTag)node.Tag).isTableNode && !((TreeViewTag)node.Tag).isResultNode)
            {
                return true;
            }
            return false;
        }

        private void navigateToDeskFromDatagridToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dataGridView1 == null || dataGridView1.DataSource == null || dataGridView1.DataSource.GetType() != typeof(DataTable))
            {
                return;
            }
            if (dataGridView1.SelectedRows == null || dataGridView1.SelectedRows.Count != 1)
            {
                return;
            }
            DataTable targetTable = (DataTable)dataGridView1.DataSource;
            int currentRowIndex = dataGridView1.CurrentRow.Index;
            if (targetTable == null || currentRowIndex < 0)
            {
                return;
            }
            string scenarioName = "";
            string tableName = "";
            if (TargetTools.tryGetScenarioNameAndNodeNameFromTargetTableByRowIndex(targetTable, currentRowIndex, out scenarioName, out tableName))
            {
                navigateToTable(scenarioName, tableName);
            }
            else
            {
                OverallTools.ExternFunctions.PrintLogFile("Navigate to Desk: Could not retrieve the scenario name and source table name from the \""
                    + targetTable.TableName + "\" target table.");
            }
        }

        private void exportAsTextFilesFromReportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null)
                return;
            saveFileDialog1.Filter = "All files (*.*)|*.*";
            saveFileDialog1.FileName = CurrentNode.Name;
            if (saveFileDialog1.ShowDialog() != DialogResult.OK)
                return;

            string targetDirectoryName = saveFileDialog1.FileName + "\\";
            if (!Directory.Exists(targetDirectoryName))
                Directory.CreateDirectory(targetDirectoryName);

            SIM_Chargement cht = null;
            if (!bDebug)
            {
                cht = new SIM_Chargement(this.Location, this.Size);
                cht.setChenillard = true;
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
            }
            if (CurrentNode.Name == GlobalNames.REPORTS_MAIN_NODE_NAME)
            {
                if (CurrentNode.Nodes != null)
                {
                    foreach (TreeNode node in CurrentNode.Nodes)
                    {
                        if (node == null)
                        {
                            continue;
                        }
                        string childReportDirectory = targetDirectoryName + node.Name + "\\";
                        if (!Directory.Exists(childReportDirectory))
                            Directory.CreateDirectory(childReportDirectory);
                        exportAsTextFilesFromReport(node, childReportDirectory, cht);
                    }
                }
            }
            else
            {
                exportAsTextFilesFromReport(CurrentNode, targetDirectoryName, cht);
            }
            if (cht != null)
                cht.KillWindow();
        }

        private void exportAsTextFilesFromReport(TreeNode selectedNode, string targetDirectoryName, SIM_Chargement cht)
        {
            List<TreeNode> allRelevantNodes = new List<TreeNode>();
            List<TreeNode> tableNodes = getNodesFromTreeByNodeType(selectedNode.Nodes, NODE_TYPES.TABLE_NODE_TYPE);
            allRelevantNodes.AddRange(tableNodes);
            List<TreeNode> filterNodes = getNodesFromTreeByNodeType(selectedNode.Nodes, NODE_TYPES.FILTER_NODE_TYPE);
            allRelevantNodes.AddRange(filterNodes);
            
            List<string> exportFileNames = OverallTools.FonctionUtiles.getFileNamesWithScenarioNameFromNodesList(allRelevantNodes);
            List<string> alreadyExistingFileNames = OverallTools.FonctionUtiles.getFileNamesFromDirectory(targetDirectoryName, "*.txt");
            List<string> commonFileNames = OverallTools.FonctionUtiles.getCommonElements(exportFileNames, alreadyExistingFileNames);
            List<string> uniqueExportFileNames = OverallTools.FonctionUtiles.getListAExclusiveElements(exportFileNames, alreadyExistingFileNames);

            Dictionary<string, string> nodeScenarioDictionary = new Dictionary<string, string>();
            Dictionary<string, string> nodeNameDictionary= new Dictionary<string, string>();
            foreach (TreeNode node in allRelevantNodes)
            {
                if (node.Tag == null || node.Tag.GetType() != typeof(TreeViewTag))
                {
                    continue;
                }
                TreeViewTag tag = (TreeViewTag)node.Tag;
                string key = OverallTools.FonctionUtiles.getDictionaryKeyByTagScenarioNameAndNodeName(tag.ScenarioName, node.Name);
                if (!nodeScenarioDictionary.ContainsKey(key))
                {
                    nodeScenarioDictionary.Add(key, tag.ScenarioName);
                    nodeNameDictionary.Add(key, node.Name);
                }
            }

            if (!stoppedLoadingScenario)
            {
                bool applyAll = false;
                foreach (string commonFile in commonFileNames)
                {
                    if (!applyAll)
                    {
                        OverwriteFilesDialog ofd = null;
                        if (cht == null)
                            ofd = new OverwriteFilesDialog(commonFile + ".txt");
                        else
                        {
                            Point location = new Point(cht.Location.X, cht.Location.Y + 180);
                            ofd = new OverwriteFilesDialog(commonFile + ".txt", location);
                        }
                        DialogResult result = ofd.ShowDialog();

                        if (ofd.applyAll)
                            applyAll = true;

                        if (result == DialogResult.OK)
                        {
                            if (nodeScenarioDictionary.ContainsKey(commonFile)
                                && nodeNameDictionary.ContainsKey(commonFile))
                            {
                                writeTableToFile(nodeScenarioDictionary[commonFile], nodeNameDictionary[commonFile], targetDirectoryName + commonFile + ".txt", "\t", cht);
                            }
                        }
                        else if (result == DialogResult.Cancel)
                        {
                            if (cht != null)
                                cht.KillWindow();
                            return;
                        }
                        else if (result == DialogResult.No
                            && applyAll)
                        {
                            break;
                        }
                    }
                    else
                    {
                        if (nodeScenarioDictionary.ContainsKey(commonFile)
                            && nodeNameDictionary.ContainsKey(commonFile))
                        {
                            writeTableToFile(nodeScenarioDictionary[commonFile], nodeNameDictionary[commonFile], targetDirectoryName + commonFile + ".txt", "\t", cht);
                        }
                    }
                    if (stoppedLoadingScenario)
                        break;
                }
                if (!stoppedLoadingScenario)
                {
                    foreach (string uniqueFile in uniqueExportFileNames)
                    {
                        if (nodeScenarioDictionary.ContainsKey(uniqueFile)
                            && nodeNameDictionary.ContainsKey(uniqueFile))
                        {
                            writeTableToFile(nodeScenarioDictionary[uniqueFile], nodeNameDictionary[uniqueFile], targetDirectoryName + uniqueFile + ".txt", "\t", cht);
                        }
                    }
                }
                if (stoppedLoadingScenario)
                    loadingScenarioToShowObject = false;
            }
        }
        // << Task #16728 PAX2SIM Improvements (Recurring) C#30 Task.2.

        // >> Task #16728 PAX2SIM Improvements (Recurring) C#30 Bug.2.
        internal bool isDashboardTableByTreeviewTag(TreeViewTag tag)
        {
            if (tag == null || tag.ScenarioName == null || tag.Name == null)
            {
                return false;
            }
            if (!DonneesEnCours.tableEstPresente(tag.ScenarioName, tag.Name))
            {
                return false;
            }
            return DashboardTools.tableHasDashboardStructure(DonneesEnCours.getTable(tag.ScenarioName, tag.Name));
        }
        // << Task #16728 PAX2SIM Improvements (Recurring) C#30 Bug.2.

        // >> Task #17969 PAX2SIM - Reports improvements        
        private void exportXMLReportConfigurationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null || DonneesEnCours.htReportParametres == null || !DonneesEnCours.htReportParametres.ContainsKey(CurrentNode.Name))
            {
                return;
            }
            string reportName = CurrentNode.Name;
            saveFileDialog1.Filter = "All files (*.*)|*.*";
            saveFileDialog1.FileName = reportName + ".xml";
            if (saveFileDialog1.ShowDialog() != DialogResult.OK)
                return;
            string saveCompletePath = saveFileDialog1.FileName;

            SIM_Chargement cht = null;
            if (!bDebug)
            {
                cht = new SIM_Chargement(this.Location, this.Size);
                cht.setChenillard = true;
                Thread tSimulation = new Thread(new ParameterizedThreadStart(ShowChargement));
                tSimulation.Start(cht);
                Thread.Sleep(100);
            }
            exportXMLReportConfiguration(reportName, saveCompletePath);
            if (cht != null)
                cht.KillWindow();
        }

        internal bool exportXMLReportConfiguration(string reportName, string saveCompletePath)
        {
            ReportParameters reportParameters = DonneesEnCours.htReportParametres[reportName];
            if (reportParameters == null)
            {
                return false;
            }
            List<TreeNode> chartNodes = getNodesFromTreeByNodeType(reportParameters.tv_CustomTree.Nodes, NODE_TYPES.CHART_NODE_TYPE);
            Dictionary<string, GraphicFilter> graphicFilters = getGraphicFilterDefinitionsByChartNodes(chartNodes);
            XmlDocument reportDocument = ReportParameters.exportReportAsXmlByReportParameters(reportName, reportParameters, graphicFilters);
            if (reportDocument == null)
            {
                return false;
            }
            reportDocument.Save(saveCompletePath);
            return true;
        }

        internal Dictionary<string, GraphicFilter> getGraphicFilterDefinitionsByChartNodes(List<TreeNode> chartNodes)
        {
            Dictionary<string, GraphicFilter> graphicFilters = new Dictionary<string, GraphicFilter>();
            if (chartNodes == null)
            {
                return graphicFilters;
            }
            foreach (TreeNode chartNode in chartNodes)
            {
                if (chartNode.Tag != null && chartNode.Tag.GetType() == typeof(TreeViewTag))
                {
                    TreeViewTag tag = (TreeViewTag)chartNode.Tag;
                    string scenarioName = tag.ScenarioName;
                    string name = chartNode.Name;
                    GraphicFilter graphicFilter = DonneesEnCours.getGraphicFilter(scenarioName, name);
                    if (graphicFilter == null)
                    {
                        graphicFilter = DonneesEnCours.GetGeneralGraphicFilter(name);
                    }
                    if (graphicFilter != null && !graphicFilters.ContainsKey(scenarioName + name))
                    {
                        graphicFilters.Add(scenarioName + name, graphicFilter);
                    }
                }
            }
            return graphicFilters;
        }

        private void assignToReportGroupsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (CurrentNode == null || DonneesEnCours.htReportParametres == null || !DonneesEnCours.htReportParametres.ContainsKey(CurrentNode.Name))
            {
                return;
            }            
            ReportParameters reportParameters = DonneesEnCours.htReportParametres[CurrentNode.Name];

            Dictionary<string, List<string>> availableReportGroups = ReportGenerator
                .getAvailableReportGroups(DonneesEnCours.getDossierEnregistrement(), DonneesEnCours.htReportParametres);
            //assignReportToReportGroups(CurrentNode.Name, reportParameters.reportGroupsList, availableReportGroups);
            string reportGroupsRootDirectory = DonneesEnCours.getDossierEnregistrement() + "Output\\" + ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME + "\\"
                                                + ReportGenerator.GROUPED_REPORTS_DIRECTORY_NAME;
            assignReportToReportGroups(CurrentNode.Name, reportParameters.reportGroupsList, availableReportGroups, reportGroupsRootDirectory, DonneesEnCours.htReportParametres);
        }

        internal static void assignReportToReportGroups(string reportName, List<string> reportGroupsList, Dictionary<string, List<string>> availableReportGroups,
            string reportGroupsRootDirectory, Dictionary<string, ReportParameters> reportParametresDictionary)
        {
            //string reportGroupsRootDirectory = DonneesEnCours.getDossierEnregistrement() + "Output\\" + ReportGenerator.REPORTS_ROOT_DIRECTORY_NAME + "\\"
            //                                    + ReportGenerator.GROUPED_REPORTS_DIRECTORY_NAME;
            List<ReportParameters> allReportParameters = new List<ReportParameters>();
            foreach (KeyValuePair<string, ReportParameters> pair in reportParametresDictionary)//DonneesEnCours.htReportParametres)
            {
                allReportParameters.Add(pair.Value);
            }
            ReportGroupEditor reportGroupEditor = new ReportGroupEditor(reportName, reportGroupsList, availableReportGroups, reportGroupsRootDirectory, allReportParameters);
            reportGroupEditor.ShowDialog();
        }
        // << Task #17969 PAX2SIM - Reports improvements

        private void showLatestErrorsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (errorList.Count > 0)
                setErrors(errorList, true);
            else
                MessageBox.Show("No recorded messages.", "Error List", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void clearLatestErrorsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (errorList.Count > 0)
            {
                clearListIfUserAgrees();
            }
            else
            {
                MessageBox.Show("No recorded messages.", "Error List", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void clearListIfUserAgrees()
        {
            if (MessageBox.Show("Are you sure you want to remove the recorded error messages?", "Error List", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                errorList.Clear();
                lesErreurs.setErrors(errorList);
                lesErreurs.Hide();
            }
        }

        // >> Task #19542
        private void updateInputFlightCategories(DataTable sourceTable)
        {
            if (sourceTable == null || !isCustomFPIGanttTable(sourceTable.TableName))
                return;
            DataTable flightCategoriesInputTable = DonneesEnCours.getTable("Input", GlobalNames.FP_FlightCategoriesTableName);
            if (flightCategoriesInputTable == null)
                return;
            int sourceTableColumnIndexFlightCategory = sourceTable.Columns.IndexOf(GlobalNames.sFPD_A_Column_FlightCategory);
            if (sourceTableColumnIndexFlightCategory == -1)
                return;
            List<string> flightCategoriesFromSource = new List<string>();
            foreach (DataRow row in sourceTable.Rows)
            {
                if (row[sourceTableColumnIndexFlightCategory] != null && !flightCategoriesFromSource.Contains(row[sourceTableColumnIndexFlightCategory].ToString()))
                    flightCategoriesFromSource.Add(row[sourceTableColumnIndexFlightCategory].ToString());
            }

            // recherche des elements unique
            int nb = 0;
            foreach (String value in flightCategoriesFromSource)
            {
                bool found = false;
                // on cherche si la valeur est présente dans la première colonne de la table de reference                
                foreach (DataRow dr in flightCategoriesInputTable.Rows)
                {
                    String presentValue = dr[0].ToString();
                    if (presentValue == value)
                    {
                        found = true;
                        break;
                    }
                }
                // si la valeur n'est pas trouvée, on l'ajoute
                if (!found)
                {
                    nb++;
                    OverallTools.DataFunctions.AddLine_FP(flightCategoriesInputTable, value, null, null, false);
                }
            }

            // affichage du nombre de truc ajouté
            if (nb > 0)
            {
                String msg = nb.ToString() + " new element(s) added to the Flight Categories table.";
                MessageBox.Show(msg, "Element(s) added", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

            // force update the modified table
            DonneesEnCours.aEteModifiee("Input", flightCategoriesInputTable.TableName);
            AcceptData();
            UpdateTable();
        }

        private void cms_UserGraphics_Opening(object sender, CancelEventArgs e)
        {
            generateTextGanttFromTableToolStripMenuItem.Visible = isCustomFPIGanttTable(CurrentNode.Name);
            applyColorCodeOnTableToolStripMenuItem.Visible = FlightPlanInformationToTextGantt.isFPITextGanttTable(CurrentNode.Name);
        }

        private void generateTextGanttFromTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;
            DataTable fpiTable = DonneesEnCours.getTable(tvtTag.ScenarioName, CurrentNode.Name);
            addTextGanttTable(tvtTag.ScenarioName, fpiTable);
        }

        private void generateTextGanttFromFilterToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null)
                return;
            DataTable fpiTable = DonneesEnCours.getTable(tvtTag.ScenarioName, CurrentNode.Name);
            addTextGanttTable(tvtTag.ScenarioName, fpiTable);
        }

        /// <summary>
        /// K = text gantt table name, V = text gantt parameters
        /// </summary>
        private Dictionary<string, TextGanttParameters> textGanttParametersByTextGanttName = new Dictionary<string, TextGanttParameters>();

        private void addTextGanttTable(string scenarioName, DataTable fpiTable)
        {
            FlightPlanInformationProcessor fpiProcessor = new FlightPlanInformationProcessor(fpiTable);

            TextGanttParameters textGanttParameters = TextGanttParameters.getDefaultParameters(fpiProcessor.getFlightPlanInformationTimeInterval());
            if (textGanttParametersByTextGanttName.ContainsKey(FlightPlanInformationToTextGantt.getTextGanttName(fpiProcessor.getFpiTable())))
                textGanttParameters = textGanttParametersByTextGanttName[FlightPlanInformationToTextGantt.getTextGanttName(fpiProcessor.getFpiTable())];

            TextGanttParametersEditor textGanttParametersEditor = new TextGanttParametersEditor(fpiProcessor.getFpiTable(), textGanttParameters);
            if (textGanttParametersEditor.ShowDialog() != DialogResult.OK)
                return;
            if (!textGanttParametersByTextGanttName.ContainsKey(FlightPlanInformationToTextGantt.getTextGanttName(fpiProcessor.getFpiTable())))
                textGanttParametersByTextGanttName.Add(FlightPlanInformationToTextGantt.getTextGanttName(fpiProcessor.getFpiTable()), textGanttParameters);

            FlightPlanInformationToTextGantt adapter = new FlightPlanInformationToTextGantt(textGanttParameters, fpiProcessor);
            DataTable textGanttTable = adapter.getTextGanttTable();

            ContextMenuStrip cms = null;
            DataManager dm = DonneesEnCours.GetDataManager(scenarioName);
            if (dm != null && dm is DataManagerPaxBHS)
            {
                DonneesEnCours.AddReplaceAutomodGraphic(scenarioName, textGanttTable);
                cms = cms_UserGraphics;
            }
            else
            {
                DonneesEnCours.AddReplaceTable(scenarioName, textGanttTable);
                cms = contextMenuInput;
            }
            DonneesEnCours.AddGraphicFilter(scenarioName, GraphicFilter.getGraphicFilterForTextGantt(textGanttTable, textGanttTable.TableName));
            
            TreeNode textGanttParentNode = CurrentNode;
            if (OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(textGanttTable.TableName, textGanttParentNode) == null)
            {
                TreeViewTag textGanttTableTag = TreeViewTag.getTableNode(scenarioName, textGanttTable.TableName);
                TreeNode textGanttTableNode = OverallTools.TreeViewFunctions.createBranch(textGanttTable.TableName, textGanttTable.TableName, textGanttTableTag, cms);
                OverallTools.TreeViewFunctions.AddSortedNode(textGanttParentNode, textGanttTableNode);
            }
        }

        public static string CUSTOM_FPI_GANTT_MARKER = "_Gantt";
        private static bool isCustomFPIGanttTable(string tableName)
        {
            if (tableName == null)
                return false;
            if (tableName.Contains(GlobalNames.FPI_TableName) && tableName.Contains(CUSTOM_FPI_GANTT_MARKER))
                return true;
            return false;
        }

        /// <summary>
        /// K = text gantt table name, V = text gantt color parameters
        /// </summary>
        private Dictionary<string, TextGanttColorParameters> textGanttColorParametersByTextGanttName = new Dictionary<string, TextGanttColorParameters>();

        private void applyColorCodeOnTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null || !tvtTag.isTableNode)
                return;
            applyColorCodeUsingEditor(tvtTag.ScenarioName, CurrentNode.Name, textGanttColorParametersByTextGanttName);
        }

        private void applyColorCodeOnGenericTableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null || !tvtTag.isTableNode)
                return;
            applyColorCodeUsingEditor(tvtTag.ScenarioName, CurrentNode.Name, textGanttColorParametersByTextGanttName);
        }

        private void applyColorCodeOnFilterToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null || !tvtTag.isFilterNode)
                return;
            applyColorCodeUsingEditor(tvtTag.ScenarioName, CurrentNode.Name, textGanttColorParametersByTextGanttName);
        }

        private void applyColorCodeFromReportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeViewTag tvtTag = CheckCurrentNode();
            if (tvtTag == null || (!tvtTag.isTableNode && !tvtTag.isFilterNode))
                return;
            applyColorCodeUsingEditor(tvtTag.ScenarioName, CurrentNode.Name, textGanttColorParametersByTextGanttName);            
        }
        
        private void applyColorCodeUsingEditor(string scenarioName, string textGanttName, Dictionary<string, TextGanttColorParameters> configurations)
        {
            TreeNode textGanttNode = getTextGanttNodeFromScenario(scenarioName, textGanttName);
            if (textGanttNode == null)
                return;
            string parentFpiGanttTableName = getParentFpiGanttNodeName(textGanttNode);

            DataTable parentFpiGanttTable = DonneesEnCours.getTable(scenarioName, parentFpiGanttTableName);      
            if (parentFpiGanttTable == null)
                return;

            TextGanttColorParameters colorParameters = null;
            if (configurations.ContainsKey(textGanttName))
                colorParameters = configurations[textGanttName];
            TextGanttColorParametersEditor colorParametersEditor = new TextGanttColorParametersEditor(colorParameters);
            if (colorParametersEditor.ShowDialog() != DialogResult.OK)
                return;
            colorParameters = colorParametersEditor.getParameters();

            applyColorCodeOnTextGantt(colorParameters, parentFpiGanttTable, textGanttName, scenarioName, configurations);
        }

        private void applyColorCodeUsingSavedConfigurations(string scenarioName, string textGanttName, Dictionary<string, TextGanttColorParameters> configurations)
        {
            TreeNode textGanttNode = getTextGanttNodeFromScenario(scenarioName, textGanttName);
            if (textGanttNode == null)
                return;
            string parentFpiGanttTableName = getParentFpiGanttNodeName(textGanttNode);

            DataTable parentFpiGanttTable = DonneesEnCours.getTable(scenarioName, parentFpiGanttTableName);
            if (parentFpiGanttTable == null)
                return;

            TextGanttColorParameters colorParameters = TextGanttColorParameters.getDefaultParameters();
            if (configurations.ContainsKey(textGanttName))
                colorParameters = configurations[textGanttName];
            applyColorCodeOnTextGantt(colorParameters, parentFpiGanttTable, textGanttName, scenarioName, configurations);
        }

        private void applyColorCodeOnTextGantt(TextGanttColorParameters colorParameters, DataTable parentFpiTable, string textGanttName, string scenarioName,
            Dictionary<string, TextGanttColorParameters> configurations)
        {
            FlightPlanInformationProcessor fpiProcessor = new FlightPlanInformationProcessor(parentFpiTable);

            TextGanttParameters textGanttParameters = TextGanttParameters.getDefaultParameters(fpiProcessor.getFlightPlanInformationTimeInterval());
            if (textGanttParametersByTextGanttName.ContainsKey(FlightPlanInformationToTextGantt.getTextGanttName(fpiProcessor.getFpiTable())))
                textGanttParameters = textGanttParametersByTextGanttName[FlightPlanInformationToTextGantt.getTextGanttName(fpiProcessor.getFpiTable())];

            FlightPlanInformationToTextGantt adapter = new FlightPlanInformationToTextGantt(textGanttParameters, fpiProcessor);
            List<Flight> flightsFromFpi = adapter.getFilteredFlights();

            TextGanttColor textGanttColor = new TextGanttColor(colorParameters, flightsFromFpi, DonneesEnCours);
            textGanttColor.colorDataGrid(dataGridView1);
            updateVisualizationMode(scenarioName, textGanttName);

            if (!configurations.ContainsKey(textGanttName))
                configurations.Add(textGanttName, colorParameters);
            else
                configurations[textGanttName] = colorParameters;
        }
        
        private void updateVisualizationMode(string scenarioName, string tableName)
        {
            VisualisationMode vm = new VisualisationMode(false, false, false, null, new int[] { 0 });
            vm.ShowRowHeader = true;
            vm.FirstColumnInHeader = true;
            ConditionnalFormatErrors format = new ConditionnalFormatErrors();
            for (int rowIndex = 0; rowIndex < dataGridView1.Rows.Count; rowIndex++)
            {
                for (int cellIndex = 0; cellIndex < dataGridView1.Rows[rowIndex].Cells.Count; cellIndex++)
                    format.setCondition(cellIndex, rowIndex, dataGridView1.Rows[rowIndex].Cells[cellIndex].Style.BackColor);
            }
            vm.ConditionnalFormatClass = new VisualisationMode.ConditionnalFormat[] { format };
            DonneesEnCours.AddReplaceModeVisualisation(scenarioName, tableName, vm);
            dataGridView1.Refresh();
        }

        private TreeNode getTextGanttNodeFromScenario(string scenarioName, string textGanttName)
        {
            TreeNode analysisNode = OverallTools.TreeViewFunctions.RechercherNom("Analysis", treeView1.Nodes[2]);
            if (analysisNode == null)
                return null;
            TreeNode scenarioNode = OverallTools.TreeViewFunctions.RechercherNomEnfantStrict(scenarioName, analysisNode);
            if (scenarioNode == null)
                return null;
            TreeNode scenarioUserGraphicsNode = OverallTools.TreeViewFunctions.RechercherNom(GestionDonneesHUB2SIM.sScenarioCustomGraphic, scenarioNode);
            
            TreeNode textGanttNode = null;
            if (scenarioUserGraphicsNode != null)
                textGanttNode = OverallTools.TreeViewFunctions.RechercherNom(textGanttName, scenarioUserGraphicsNode);
            else
                textGanttNode = OverallTools.TreeViewFunctions.RechercherNom(textGanttName, scenarioNode);
            return textGanttNode;
        }

        private string getParentFpiGanttNodeName(TreeNode childTextGanttNode)
        {
            string parentName = null;
            if (childTextGanttNode == null || childTextGanttNode.Parent == null)
                return parentName;
            if (isCustomFPIGanttTable(childTextGanttNode.Parent.Name))
                return childTextGanttNode.Parent.Name;
            else
                parentName = getParentFpiGanttNodeName(childTextGanttNode.Parent);
            return parentName;
        }

        // << Task #19542

        const string BHS_TRACE_KEYWORDS_PATH = "\\Docs\\BHS_BagTrace_Keywords.pdf";   // >> Task #15220 Pax2Sim - Release doc directory


        //Task T-46 >> copy table name to clipboard 
        private void toolStripMenuItemCopyTableName_Click(object sender, EventArgs e)
        {

            TreeNode NoeudParent = CurrentNode;
            String nomTable = CurrentNode.Name;
            Clipboard.SetDataObject(nomTable, true);
        }

        private void copyTableNameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            TreeNode NoeudParent = CurrentNode;
            String nomTable = CurrentNode.Name;
            Clipboard.SetDataObject(nomTable, true);
        }

        private void bHSTraceKeywordsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                if (OverallTools.FonctionUtiles.currentAppIsRunningAsAdmin())
                    Process.Start("explorer.exe", Application.StartupPath + BHS_TRACE_KEYWORDS_PATH);
                else
                    Process.Start(Application.StartupPath + BHS_TRACE_KEYWORDS_PATH);
            }
            catch (Exception except)
            {
                OverallTools.ExternFunctions.PrintLogFile(this.GetType().ToString() + " throw an exception while trying to open the BHS BagTrace Keywords pdf : " + except.Message);
                MessageBox.Show("There was a problem while trying to open the BHS BagTrace Keywords pdf.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

    }
}
